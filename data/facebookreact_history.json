{
  "repository": {
    "url": "https://github.com/facebook/react.git",
    "cloned_branch": "main",
    "requested_branch": "main",
    "remote_url": "https://github.com/facebook/react.git"
  },
  "metadata": {
    "total_commits_fetched": 1500,
    "max_commits_requested": 1500,
    "fetch_timestamp": "2025-08-02T14:12:07.492856",
    "clone_method": "temporary"
  },
  "commits": [
    {
      "sha": "ddf8bc3fbac7aefbf557e2e4a3e14d8de1b80872",
      "short_sha": "ddf8bc3",
      "message": "[compiler] Improve merging of scopes that invalidate together (#34049)\n\nWe try to merge consecutive reactive scopes that will always invalidate\ntogether, but there's one common case that isn't handled.\n\n```js\nconst y = [[x]];\n```\n\nHere we'll create two consecutive scopes for the inner and outer array\nexpressions. Because the input to the second scope is a temporary,\nthey'll merge into one scope.\n\nBut if we name the inner array, the merging stops:\n\n```js\nconst array = [x];\nconst y = [array];\n```\n\nThis is because the merging logic checks if all the dependencies of the\nsecond scope are outputs of the first scope, but doesn't account for\nrenaming due to LoadLocal/StoreLocal. The fix is to track these\ntemporaries.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34049).\n* __->__ #34049\n* #34047\n* #34044",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-08-01T13:00:01-07:00",
      "committed_date": "2025-08-01T13:00:01-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/MergeReactiveScopesThatInvalidateTogether.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-at-closure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-map-captures-receiver-noAlias.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-map-noAlias-escaping-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-arrow-function-1.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-1.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-runs-inference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-variable-in-nested-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-variable-in-nested-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/escape-analysis-non-escaping-interleaved-allocating-nested-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-param-with-newline.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-param-with-quotes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-param-with-unicode.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-to-string.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/function-expression-maybe-mutates-hook-return-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/function-expression-prototype-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-functionexpr-conditional-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-setstate-captured-indirectly-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-named-chained-callbacks.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/conditional-call-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-lowercase-localvar-memberexpr-in-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-map-captures-receiver-noAlias.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/prop-capturing-function-1.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-access-local-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-nested-function-uncond-access-local-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-nested-function-uncond-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-object-method-uncond-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/prune-scopes-whose-deps-invalidate-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/prune-scopes-whose-deps-may-invalidate-array.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-ref-param.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactivity-analysis-interleaved-reactivity.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactivity-via-aliased-mutation-array.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactivity-via-aliased-mutation-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-current-aliased-not-added-to-dep-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-current-not-added-to-dep-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rename-source-variables-nested-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-memoization-lack-of-phi-types-explicit-types.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-memoization-lack-of-phi-types.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutate-result-of-function-call-with-frozen-argument-in-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutate-result-of-method-call-on-frozen-value-in-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-renaming-conflicting-decls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-undefined-expression-of-jsxexpressioncontainer.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/try-catch-within-function-expression-returns-caught-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-annotations/type-annotation-var-array.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-annotations/type-annotation-var-array_.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-memo-simple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useContext-read-context-in-callback-if-condition.expect.md"
      ]
    },
    {
      "sha": "0860b9cc1f4a7188b41204bddc57a127a8bbf6e9",
      "short_sha": "0860b9c",
      "message": "[compiler] Add definitions for Object entries/keys/values (#34047)\n\nFixes remaining issue in #32261, where passing a previously useMemo()-d\nvalue to `Object.entries()` makes the compiler think the value is\nmutated and fail validatePreserveExistingMemo. While I was there I added\nObject.keys() and Object.values() too.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34047).\n* #34049\n* __->__ #34047\n* #34044",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-08-01T12:59:49-07:00",
      "committed_date": "2025-08-01T12:59:49-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/TypeSchema.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-object-entries-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-object-entries-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-object-values-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-object-values-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-entries-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-entries-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-keys.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-keys.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-values-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-values-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-values.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-values.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-object-fromEntries-entries.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-object-fromEntries-entries.js"
      ]
    },
    {
      "sha": "538ac7ae4b918136c5bd7d15ada19439d15f8080",
      "short_sha": "538ac7a",
      "message": "[Flight] Fix debug info leaking to outer handler (#34081)\n\nThe `waitForReference` call for debug info can trigger inside a\ndifferent object's initializingHandler. In that case, we can get\nconfused by which one is the root object.\n\nWe have this special case to detect if the initializing handler's object\nis `null` and we have an empty string key, then we should replace the\nroot object's value with the resolved value.\n\n\nhttps://github.com/facebook/react/blob/52612a7cbdd8e1fee9599478247f78725869ebad/packages/react-client/src/ReactFlightClient.js#L1374\n\nHowever, if the initializing handler actually should have the value\n`null` then we might get confused by this and replace it with the\nresolved value from a debug object. This fixes it by just using a\nnon-empty string as the key for the waitForReference on debug value\nsince we're not going to use it anyway.\n\nIt used to be impossible to get into this state since a `null` value at\nthe root couldn't have any reference inside itself but now the debug\ninfo for a `null` value can have outstanding references.\n\nHowever, a better fix might be using a placeholder marker object instead\nof null or better yet ensuring that we know which root we're\ninitializing in the debug model.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-08-01T15:44:48-04:00",
      "committed_date": "2025-08-01T15:44:48-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js"
      ]
    },
    {
      "sha": "52612a7cbdd8e1fee9599478247f78725869ebad",
      "short_sha": "52612a7",
      "message": "[compiler] Emit more specific error when making identifiers with reserved words (#34080)\n\nThis currently throws an invariant which may be misleading. I checked\nthe ecma262 spec and used the same list of reserved words in our check.\nTo err on the side of being conservative, we also error when strict mode\nreserved words are used.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-08-01T15:10:34-04:00",
      "committed_date": "2025-08-01T15:10:34-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/Keyword.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ecma/error.reserved-words.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ecma/error.reserved-words.ts"
      ]
    },
    {
      "sha": "bdb4a96f628d3b426d3c79fbd598ec35c05835a3",
      "short_sha": "bdb4a96",
      "message": "[DevTools] Lazily compute initial Tree state (#34078)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-08-01T17:49:25+02:00",
      "committed_date": "2025-08-01T17:49:25+02:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/TreeContext.js"
      ]
    },
    {
      "sha": "c260b38d0a082641342fc45ff5ac96e32f764f20",
      "short_sha": "c260b38",
      "message": "[DevTools] Clean up Virtual Instances from id map (#34063)\n\nThis was a pretty glaring memory leak. 🙈\n\nI forgot to clean up the VirtualInstances from the id map so the Server\nComponent instances always leaked in DEV.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-31T10:30:31-04:00",
      "committed_date": "2025-07-31T10:30:31-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "5bbf9be2468ee80ee4558d4afa8570d8582866bd",
      "short_sha": "5bbf9be",
      "message": "[DevTools] Model Hidden Offscreen Boundaries as Unmounts (#34062)\n\nThis is modeling Offscreen boundaries as the thing that unmounts a tree\nin the frontend. This will let us model this as a \"hide\" that preserves\nstate instead in a follow up but not yet.\n\nBy doing it this way, we don't have to special case suspended Suspense\nboundaries, at least not for the modern versions that use Offscreen as\nthe internal node. It's still special cased for the old React versions.\nInstead, this is handled by the Offscreen fiber getting hidden.\n\nBy giving this fiber an FilteredFiberInstance, we also have somewhere to\nstore the children on (separately from the parent children set which can\ninclude other siblings too like the loading state).\n\nOne consequence is that Activity boundary content now disappears when\nthey're hidden which is probably a good thing since otherwise it would\nbe confusing and noisy when it's used to render multiple pages at once.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-31T10:30:10-04:00",
      "committed_date": "2025-07-31T10:30:10-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/storeComponentFilters-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "8de7aed8927d87a9e7e838f5d8ae28d5c30805d3",
      "short_sha": "8de7aed",
      "message": "[Fizz] Count Boundary bytes that may contribute to the preamble in the request byteSize (#34059)\n\nStacked on #34058\n\nWhen tracking how large the shell is we currently only track the bytes\nof everything above Suspense boundaries. However since Boundaries that\ncontribute to the preamble will always be inlined when the shell flushes\nthey should also be considered as part of the request byteSize since\nthey always flush alongside the shell. This change adds this tracking",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-07-30T18:18:57-07:00",
      "committed_date": "2025-07-30T18:18:57-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "98773466ce6736a5ffb7e54c1f4b44645ac18a80",
      "short_sha": "9877346",
      "message": "[Fizz] Don't outline Boundaries that may contribute to the preamble (#34058)\n\nSuspense boundaries that may have contributed to the preamble should not\nbe outlined due to size because these boundaries are only meant to be in\nfallback state if the boundary actually errors. This change excludes any\nboundary which has the potential to contribute to the preamble. We could\nalternatively track which boundaries actually contributed to the\npreamble but in practice there will be very few and I think this is\nsufficient.\n\nOne problem with this approach is it makes Suspense above body opt out\nof the mode where we omit rel=\"expect\" for large shells. In essence\nSuspense above body has the semantics of a Shell (it blocks flushing\nuntil resolved) but it doesn't get tracked as request bytes and thus we\nwill not opt users into the skipped blocking shell for very large\nboundaries.\n\nThis will be fixed in a followup",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-07-30T18:06:47-07:00",
      "committed_date": "2025-07-30T18:06:47-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "9784cb379e249a5495cde5ba3037521207144e91",
      "short_sha": "9784cb3",
      "message": "[DevTools] No suspending above the root (#34055)\n\nFollow up to #34050.\n\nIt's not actually possible to suspend *above* the root since even if you\nsuspend in the first child position, you're still suspending the\nHostRoot which always has a corresponding FiberInstance and\nSuspenseNode.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-30T11:31:27-04:00",
      "committed_date": "2025-07-30T11:31:27-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "dcf2a6f6651c0791c2e87253a8815fcf3d53e4d2",
      "short_sha": "dcf2a6f",
      "message": "[DevTools] Keep a Suspense Tree Parellel to the Instance tree in the Backend (#34050)\n\nThis keeps a data structure of Suspense boundaries and the root which\ncan keep track which boundaries might participate in a loading sequence\nand everything that suspends them. This will power the Suspense tab.\n\nNow when you select a `<Suspense>` boundary the \"suspended by\" section\nshows the whole boundary instead of just that component.\n\nIn the future, we'll likely need to add \"Activity\" boundaries to this\ntree as well, so that we can track what suspended the root of an\nActivity when filtering a subtree. Similar to how the root SuspenseNode\nnow tracks suspending at the root. Maybe it's ok to just traverse to\ncollect this information on-demand when you select one though since this\ndoesn't contribute to the deduping.\n\nWe'll also need to add implicit Suspense boundaries for the rows of a\nSuspenseList with `tail=hidden/collapsed`.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-30T09:55:09-04:00",
      "committed_date": "2025-07-30T09:55:09-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "36c63d4f9c987899d075fe9befbd25edc40bc75c",
      "short_sha": "36c63d4",
      "message": "[DevTools] Layout for Suspense tab (#34042)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-30T07:12:18+02:00",
      "committed_date": "2025-07-30T07:12:18+02:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/ButtonIcon.js",
        "packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseTab.css",
        "packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseTab.js"
      ]
    },
    {
      "sha": "88b40f6e41004773f19d37827980c66a8cf1865b",
      "short_sha": "88b40f6",
      "message": "Enable ref validation in linter (#34044)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34044).\n* #34027\n* __->__ #34044",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-29T12:30:29-07:00",
      "committed_date": "2025-07-29T12:30:29-07:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts",
        "packages/eslint-plugin-react-hooks/src/rules/ReactCompiler.ts"
      ]
    },
    {
      "sha": "04a7a61918522734a083bff37843865d7815d466",
      "short_sha": "04a7a61",
      "message": "[compiler] Allow assigning ref-accessing functions to objects if not mutated (#34026)\n\nAllows assigning a ref-accessing function to an object so long as that\nobject is not subsequently transitively mutated. We should likely\nrewrite the ref validation to use the new mutation/aliasing effects,\nwhich would provide a more consistent behavior across instruction types\nand require fewer special cases like this.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34026).\n* #34027\n* __->__ #34026",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-29T10:57:26-07:00",
      "committed_date": "2025-07-29T10:57:26-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccessInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-assigning-ref-accessing-function-to-object-property-if-not-mutated.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-assigning-ref-accessing-function-to-object-property-if-not-mutated.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-in-render-mutate-object-with-ref-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-in-render-mutate-object-with-ref-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-use-ref-added-to-dep-without-type-info.expect.md"
      ]
    },
    {
      "sha": "c2326b1336e38a52899fad6c2ddbb71ea7ddd3ee",
      "short_sha": "c2326b1",
      "message": "[compiler] disallow ref access in state initializer, reducer/initializer (#34025)\n\nPer title, disallow ref access in `useState()` initializer function,\n`useReducer()` reducer, and `useReducer()` init function.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34025).\n* #34027\n* #34026\n* __->__ #34025",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-29T10:56:04-07:00",
      "committed_date": "2025-07-29T10:56:04-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccessInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-in-reducer-init.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-in-reducer-init.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-in-reducer.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-in-reducer.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-in-state-initializer.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-in-state-initializer.js"
      ]
    },
    {
      "sha": "4395689980a3e7d771675c99e4de42f40ea5bf0d",
      "short_sha": "4395689",
      "message": "[compiler] ref guards apply up to fallthrough of the test (#34024)\n\nFixes #30782\n\nWhen developers do an `if (ref.current == null)` guard for lazy ref\ninitialization, the \"safe\" blocks should extend up to the if's\nfallthrough. Previously we only allowed writing to the ref in the if\nconsequent, but this meant that you couldn't use a ternary, logical, etc\nin the if body.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34024).\n* #34027\n* #34026\n* #34025\n* __->__ #34024",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-29T10:53:13-07:00",
      "committed_date": "2025-07-29T10:53:13-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccessInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-lazy-initialization-with-logical.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-lazy-initialization-with-logical.js"
      ]
    },
    {
      "sha": "6891dcb87db831db17ab109730dea63706875dd7",
      "short_sha": "6891dcb",
      "message": "[compiler] treat ref-like identifiers as refs by default (#34005)\n\n`@enableTreatRefLikeIdentifiersAsRefs` is now on by default. I made one\nsmall fix to the render helper logic as part of this, uncovered by\nincluding more tests.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34005).\n* #34027\n* #34026\n* #34025\n* #34024\n* __->__ #34005",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-29T10:51:10-07:00",
      "committed_date": "2025-07-29T10:51:10-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccessInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-effect-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-effect-indirect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-effect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-unused-callback-nested.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-unused-callback-nested.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-aliased-ref-in-callback-invoked-during-render-.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ref-in-callback-invoked-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.repro-ref-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-ref-helper.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useCallback-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useMemo-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/repro-maybe-invalid-useCallback-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useCallback-read-maybeRef.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/repro-maybe-invalid-useMemo-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useMemo-read-maybeRef.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-ref-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.repro-ref-mutable-range.tsx"
      ]
    },
    {
      "sha": "3f40eb73a8de2823ea5cab39496faef33aa3f2b1",
      "short_sha": "3f40eb7",
      "message": "[compiler] Allow passing refs to render helpers (#34006)\n\nWe infer render helpers as functions whose result is immediately\ninterpolated into jsx. This is a very conservative approximation, to\nhelp with common cases like `<Foo>{props.renderItem(ref)}</Foo>`. The\nidea is similar to hooks that it's ultimately on the developer to catch\nref-in-render validations (and the runtime detects them too), so we can\nbe a bit more relaxed since there are valid reasons to use this pattern.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34006).\n* #34027\n* #34026\n* #34025\n* #34024\n* #34005\n* __->__ #34006\n* #34004",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-29T10:06:23-07:00",
      "committed_date": "2025-07-29T10:06:23-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccessInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-passing-ref-to-render-helper-props-object.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-passing-ref-to-render-helper-props-object.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-passing-ref-to-render-helper.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-passing-ref-to-render-helper.js"
      ]
    },
    {
      "sha": "1d7e942da76c794c3cbf52a8c214d90a69814a8f",
      "short_sha": "1d7e942",
      "message": "[compiler] Allow mergeRefs pattern (and detect refs passed as ref prop) (#34004)\n\nTwo related changes:\n* ValidateNoRefAccessInRender now allows the mergeRefs pattern, ie a\nfunction that aggregates multiple refs into a new ref. This is the main\ncase where we have seen false positive no-ref-in-render errors.\n* Behind `@enableTreatRefLikeIdentifiersAsRefs`, we infer values passed\nas the `ref` prop to some JSX as refs.\n\nThe second change is potentially helpful for situations such as\n\n```js\nfunction Component({ref: parentRef}) {\n  const childRef = useRef(null);\n  const mergedRef = mergeRefs(parentRef, childRef);\n  useEffect(() => {\n    // generally accesses childRef, not mergedRef\n  }, []);\n  return <Foo ref={mergedRef} />;\n}\n```\n\nIe where you create a merged ref but don't access its `.current`\nproperty. Without inferring `ref` props as refs, we'd fail to allow this\nmerge refs case.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34004).\n* #34027\n* #34026\n* #34025\n* #34024\n* #34005\n* #34006\n* __->__ #34004",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-29T10:06:11-07:00",
      "committed_date": "2025-07-29T10:06:11-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccessInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-merge-refs-pattern.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-merge-refs-pattern.js"
      ]
    },
    {
      "sha": "79dc706498c4f8ef077167898492693197e1b975",
      "short_sha": "79dc706",
      "message": "[compiler] Improve ref validation error message (#34003)\n\nImproves the error message for ValidateNoRefAccessInRender, using the\nnew diagnostic type as well as providing a longer but succinct summary\nof what refs are for and why they're unsafe to access in render.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34003).\n* #34027\n* #34026\n* #34025\n* #34024\n* #34005\n* #34006\n* #34004\n* __->__ #34003",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-29T10:03:28-07:00",
      "committed_date": "2025-07-29T10:03:28-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccessInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capture-ref-for-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-ref-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-aliased-ref-in-callback-invoked-during-render-.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-assign-current-inferred-ref-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-disallow-mutating-ref-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-disallow-mutating-refs-in-render-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-ref-to-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-destructure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-property-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ref-in-callback-invoked-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ref-value-as-props.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-set-and-read-ref-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-set-and-read-ref-nested-property-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-use-ref-added-to-dep-without-type-info.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-write-but-dont-read-ref-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-write-ref-prop-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-arbitrary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-call-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-linear.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-nonif.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-other.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-post-access-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-post-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.repro-ref-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-set-ref-nested-property-ref-modified-later-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-accesses-ref-mutated-later-via-function-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-set-ref-nested-property-dont-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-mutate-ref-arg-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-mutable-ref-not-preserved.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-with-refs.flow.expect.md"
      ]
    },
    {
      "sha": "85bbe39ef8e24a192b5e9f2987b1babf8ce772e1",
      "short_sha": "85bbe39",
      "message": "[compiler] Fixes to enableTreatRefLikeIdentifiersAsRefs (#34000)\n\nWe added the `@enableTreatRefLikeIdentifiersAsRefs` feature a while back\nbut never enabled it. Since then we've continued to see examples that\nmotivate this mode, so here we're fixing it up to prepare to enable by\ndefault. It now works as follows:\n\n* If we find a property load or property store where both a) the\nobject's name is ref-like (`ref` or `-Ref`) and b) the property is\n`current`, we infer the object itself as a ref and the value of the\nproperty as a ref value. Originally the feature only detected property\nloads, not stores.\n* Inferred refs are not considered stable (this is a change from the\noriginal implementation). The only way to get a stable ref is by calling\n`useRef()`. We've seen issues with assuming refs are stable.\n\nWith this change, cases like the following now correctly error:\n\n```js\nfunction Foo(props) {\n  const fooRef = props.fooRef;\n  fooRef.current = true;\n  ^^^^^^^^^^^^^^ cannot modify ref in render\n}\n```\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34000).\n* #34027\n* #34026\n* #34025\n* #34024\n* #34005\n* #34006\n* #34004\n* #34003\n* __->__ #34000",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-29T09:57:48-07:00",
      "committed_date": "2025-07-29T09:57:48-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReactivePlaces.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-assign-current-inferred-ref-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-assign-current-inferred-ref-during-render.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reanimated-no-memo-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reanimated-no-memo-arg.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-like-name-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-like-name-in-useCallback-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-like-name-in-useCallback-2.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-like-name-in-useCallback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-like-name-in-useCallback.js"
      ]
    },
    {
      "sha": "820af2097103309fdc5675d2bde744103a439eff",
      "short_sha": "820af20",
      "message": "[eslint] Disallow use within try/catch blocks (#34040)\n\nFollow up to #34032. The linter now ensures that `use` cannot be used\nwithin try/catch.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-07-29T12:33:42-04:00",
      "committed_date": "2025-07-29T12:33:42-04:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js",
        "packages/eslint-plugin-react-hooks/src/rules/RulesOfHooks.ts"
      ]
    },
    {
      "sha": "9be531cd37f5558c72f7de360eb921b0074e8544",
      "short_sha": "9be531c",
      "message": "[Fiber] Treat unwrapping React.lazy more like a use() (#34031)\n\nWhile we want to get rid of React.lazy's special wrapper type and just\nuse a Promise for the type, we still have the wrapper.\n\nHowever, this is still conceptually the same as a Usable in that it\nshould be have the same if you `use(promise)` or render a Promise as a\nchild or type position.\n\nThis PR makes it behave like a `use()` when we unwrap them. We could\nmove to a model where it actually reaches the internal of the Lazy's\nPromise when it unwraps but for now I leave the lazy API signature\nintact by just catching the Promise and then \"use()\" that.\n\nThis lets us align on the semantics with `use()` such as the suspense\nyield optimization. It also lets us warn or fork based on legacy\nthrow-a-Promise behavior where as `React.lazy` is not deprecated.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-29T11:50:12-04:00",
      "committed_date": "2025-07-29T11:50:12-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactChildFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberThenable.js",
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js"
      ]
    },
    {
      "sha": "b1cbb482d59d5b756294c3409fded141e809f080",
      "short_sha": "b1cbb48",
      "message": "[DevTools] More robust resize handling (#34036)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-29T17:45:00+02:00",
      "committed_date": "2025-07-29T17:45:00+02:00",
      "changed_files": [
        ".eslintrc.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Components.css",
        "packages/react-devtools-shared/src/devtools/views/Components/Components.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.css"
      ]
    },
    {
      "sha": "9c9136b4415f0288bcff236f488b5961dfb1dd12",
      "short_sha": "9c9136b",
      "message": "[DevTools] Swap Components tab layout based on container size (#34035)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-29T17:23:35+02:00",
      "committed_date": "2025-07-29T17:23:35+02:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/Components.css",
        "packages/react-devtools-shared/src/devtools/views/DevTools.css",
        "packages/react-devtools-shared/src/devtools/views/portaledContent.js"
      ]
    },
    {
      "sha": "33a2bf78c47bf3298655908eec123f5fedbebcc7",
      "short_sha": "33a2bf7",
      "message": "[DevTools] Silence unactionable bundle warnings in shell (#34034)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-29T11:18:47+02:00",
      "committed_date": "2025-07-29T11:18:47+02:00",
      "changed_files": [
        "packages/react-devtools-shell/webpack-server.js"
      ]
    },
    {
      "sha": "5d7e8b90e29c0f3c995b52d493a0f70dd7d72f3f",
      "short_sha": "5d7e8b9",
      "message": "[DevTools] Use use() instead of throwing a Promise in Caches (#34033)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-29T03:45:56-04:00",
      "committed_date": "2025-07-29T03:45:56-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/preprocessData-test.js",
        "packages/react-devtools-shared/src/__tests__/profilerStore-test.js",
        "packages/react-devtools-shared/src/__tests__/profilingCache-test.js",
        "packages/react-devtools-shared/src/__tests__/store-test.js",
        "packages/react-devtools-shared/src/__tests__/storeComponentFilters-test.js",
        "packages/react-devtools-shared/src/__tests__/storeStressSync-test.js",
        "packages/react-devtools-shared/src/__tests__/storeStressTestConcurrent-test.js",
        "packages/react-devtools-shared/src/devtools/cache.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementHooksTree.js",
        "packages/react-devtools-shared/src/devtools/views/ErrorBoundary/cache.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/HookChangeSummary.js",
        "packages/react-devtools-shared/src/dynamicImportCache.js",
        "packages/react-devtools-shared/src/hookNamesCache.js",
        "packages/react-devtools-shared/src/hookSourceLocation.js",
        "packages/react-devtools-shared/src/hooks/parseHookNames/index.js",
        "packages/react-devtools-shared/src/hooks/parseHookNames/loadSourceAndMetadata.js",
        "packages/react-devtools-shared/src/hooks/parseHookNames/parseSourceAndMetadata.js",
        "packages/react-devtools-shared/src/inspectedElementCache.js",
        "packages/react-devtools-timeline/src/timelineCache.js"
      ]
    },
    {
      "sha": "71236c940952410b4655a673b0fe3f897d4baf04",
      "short_sha": "71236c9",
      "message": "[DevTools] Include the description derived from the promise (#34017)\n\nStacked on #34016.\n\nThis is using the same thing we already do for the performance track to\nprovide a description of the I/O based on the content of the resolved\nPromise. E.g. a Response's URL.\n\n<img width=\"375\" height=\"388\" alt=\"Screenshot 2025-07-28 at 1 09 49 AM\"\nsrc=\"https://github.com/user-attachments/assets/f3fdc40f-4e21-4e83-b49e-21c7ec975137\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-28T15:11:04-04:00",
      "committed_date": "2025-07-28T15:11:04-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/backendAPI.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSharedStyles.css",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSuspendedBy.js",
        "packages/react-devtools-shared/src/frontend/types.js",
        "packages/shared/ReactIODescription.js"
      ]
    },
    {
      "sha": "7ee7571212bc02354b852752a98b23bc90546fdf",
      "short_sha": "7ee7571",
      "message": "[compiler] Enable validateNoVoidUseMemo in eslint & playground (#34022)\n\nEnables `validateNoVoidUseMemo` by default only in eslint (it defaults\nto false otherwise) as well as the playground.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-07-28T13:42:14-04:00",
      "committed_date": "2025-07-28T13:42:14-04:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx",
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts",
        "packages/eslint-plugin-react-hooks/src/rules/ReactCompiler.ts"
      ]
    },
    {
      "sha": "6b22f31f1ac88cce1b38c67a5c97c7ab0e832823",
      "short_sha": "6b22f31",
      "message": "[compiler] Aggregate all errors reported from DropManualMemoization (#34002)\n\nNoticed this from my previous PR that this pass was throwing on the\nfirst error. This PR is a small refactor to aggregate every violation\nand report them all at once.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34002).\n* #34022\n* __->__ #34002",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-07-28T13:25:25-04:00",
      "committed_date": "2025-07-28T13:25:25-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/DropManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useMemo-non-literal-depslist.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.validate-useMemo-named-function.expect.md"
      ]
    },
    {
      "sha": "b5c16371091c1abbf77ec944c755bd139abc7568",
      "short_sha": "b5c1637",
      "message": "[compiler] Reuse DropManualMemoization for ValidateNoVoidUseMemo (#34001)\n\nMuch of the logic in the new validation pass is already implemented in\nDropManualMemoization, so let's combine them. I opted to keep the\nenvironment flag so we can more precisely control the rollout.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/34001).\n* #34022\n* #34002\n* __->__ #34001",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-07-28T12:54:43-04:00",
      "committed_date": "2025-07-28T12:54:43-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/DropManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoVoidUseMemo.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useMemo-no-return-value.expect.md"
      ]
    },
    {
      "sha": "c60eebffea94a67f35c6ebbf7019e5b2145d4284",
      "short_sha": "c60eebf",
      "message": "[compiler] Add new ValidateNoVoidUseMemo pass (#33990)\n\nAdds a new validation pass to validate against `useMemo`s that don't\nreturn anything. This usually indicates some kind of \"useEffect\"-like\ncode that has side effects that need to be memoized to prevent\noverfiring, and is an anti-pattern.\n\nA follow up validation could also look at the return value of `useMemo`s\nto see if they are being used.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33990).\n* #34022\n* #34002\n* #34001\n* __->__ #33990\n* #33989",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-07-28T12:46:42-04:00",
      "committed_date": "2025-07-28T12:46:42-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoVoidUseMemo.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useMemo-no-return-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useMemo-no-return-value.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-arrow-implicit-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-arrow-implicit-return.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-empty-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-empty-return.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-explicit-null-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-explicit-null-return.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-multiple-returns.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-multiple-returns.js"
      ]
    },
    {
      "sha": "5dd622eabe38e01781b3699d0d81c4a16e302f09",
      "short_sha": "5dd622e",
      "message": "[compiler] Disambiguate between void, implicit, and explicit returns (#33989)\n\nAdds a new property to ReturnTerminals to disambiguate whether it was\nexplicit, implicit (arrow function expressions), or void (where it was\nomitted). I will use this property in the next PR adding a new\nvalidation pass.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33989).\n* #34022\n* #34002\n* #34001\n* #33990\n* __->__ #33989",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-07-28T12:46:30-04:00",
      "committed_date": "2025-07-28T12:46:30-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/visitors.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OutlineJsx.ts"
      ]
    },
    {
      "sha": "904989f044d122ea332b7ee08185fcdc3424a40b",
      "short_sha": "904989f",
      "message": "Clean up 19.1.1 changelog (#34023)\n\nSee\nhttps://github.com/facebook/react/pull/34021#issuecomment-3128006800.\n\nThe purpose of the changelog is to communicate to React users what\nchanged in the release.\n\nTherefore, it is important that the changelog is written oriented\ntowards React end users. Historically this means that we omit\ninternal-only changes, i.e. changes that have no effect on the end user\nbehavior. If internal changes are mentioned in the changelog (e.g. if\nthey affect end user behavior), they should be phrased in a way that is\nunderstandable to the end user — in particular, they should not refer to\ninternal API names or concepts.\n\nWe also try to group changes according to the publicly known packages.\n\nIn this PR:\n\n- Make #33680 an actual link (otherwise it isn't linkified in\nCHANGELOG.md on GitHub).\n- Remove two changelog entries listed under \"React\" that don't affect\nanyone who upgrades the \"React\" package, that are phrased using\nterminology and internal function names unfamiliar to React users, and\nthat seem to be RN-specific changes (so should probably go into the RN\nchangelog that goes out with the next renderer sync that includes these\nchanges).",
      "author": {
        "name": "dan",
        "email": "dan.abramov@me.com"
      },
      "authored_date": "2025-07-28T17:32:23+01:00",
      "committed_date": "2025-07-28T17:32:23+01:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "ab2681af0305aa1f7451bd15524d4d783dd78f69",
      "short_sha": "ab2681a",
      "message": "[DevTools] Skeleton for Suspense tab (#34020)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-28T18:26:55+02:00",
      "committed_date": "2025-07-28T18:26:55+02:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-shared/src/Logger.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/devtools/store.js",
        "packages/react-devtools-shared/src/devtools/views/DevTools.js",
        "packages/react-devtools-shared/src/devtools/views/Icon.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsContext.js",
        "packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseTab.js"
      ]
    },
    {
      "sha": "101b20b663cc866ad4c0102413bbf7cb111451b1",
      "short_sha": "101b20b",
      "message": "[DevTools] Add a little bar indicating time span of an async entry relative to others (#34016)\n\nStacked on #34012.\n\nThis shows a time track for when some I/O started and when it finished\nrelative to other I/O in the same component (or later in the same\nsuspense boundary).\n\nThis is not meant to be a precise visualization since the data might be\nmisleading if you're running this in dev which has other perf\ncharacteristics anyway. It's just meant to be a general way to orient\nyourself in the data.\n\nWe can also highlight rejected promises here.\n\nThe color scheme is the same as Chrome's current Performance Track\ncolors to add continuity but those could change.\n\n<img width=\"478\" height=\"480\" alt=\"Screenshot 2025-07-27 at 11 48 03 PM\"\nsrc=\"https://github.com/user-attachments/assets/545dd591-a91f-4c47-be96-41d80f09a94a\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-28T12:22:33-04:00",
      "committed_date": "2025-07-28T12:22:33-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/constants.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSharedStyles.css",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSuspendedBy.js"
      ]
    },
    {
      "sha": "eaee5308cc68232c4380e62dc73f512b2c50ab96",
      "short_sha": "eaee530",
      "message": "Add changelog entry for 19.1.1 (#34021)\n\nAdd changelog details matching release notes:\nhttps://github.com/facebook/react/releases/tag/v19.1.1",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-07-28T12:09:56-04:00",
      "committed_date": "2025-07-28T12:09:56-04:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "4a58b63865c5c732012fe4746e2b54fdc165990e",
      "short_sha": "4a58b63",
      "message": "[DevTools] Add \"suspended by\" Section to Component Inspector Sidebar (#34012)\n\nThis collects the ReactAsyncInfo between instances. It associates it\nwith the parent. Typically this would be a Server Component's Promise\nreturn value but it can also be Promises in a fragment. It can also be\nassociated with a client component when you pass a Promise into the\nchild position e.g. `<div>{promise}</div>` then it's associated with the\ndiv. If an instance is filtered, then it gets associated with the parent\nof that's unfiltered.\n\nThe stack trace currently isn't source mapped. I'll do that in a follow\nup.\n\nWe also need to add a \"short name\" from the Promise for the description\n(e.g. url). I'll also add a little marker showing the relative time span\nof each entry.\n\n<img width=\"447\" height=\"591\" alt=\"Screenshot 2025-07-26 at 7 56 00 PM\"\nsrc=\"https://github.com/user-attachments/assets/7c966540-7b1b-4568-8cb9-f25cefd5a918\"\n/>\n<img width=\"446\" height=\"570\" alt=\"Screenshot 2025-07-26 at 7 55 23 PM\"\nsrc=\"https://github.com/user-attachments/assets/4eac235b-e735-41e8-9c6e-a7633af64e4b\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-28T12:05:56-04:00",
      "committed_date": "2025-07-28T12:05:56-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/backendAPI.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSharedStyles.css",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSourcePanel.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSuspendedBy.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.css",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js",
        "packages/react-devtools-shared/src/devtools/views/Components/OwnerView.css",
        "packages/react-devtools-shared/src/devtools/views/Components/OwnerView.js",
        "packages/react-devtools-shared/src/devtools/views/Components/StackTraceView.css",
        "packages/react-devtools-shared/src/devtools/views/Components/StackTraceView.js",
        "packages/react-devtools-shared/src/devtools/views/Components/formatLocationForDisplay.js",
        "packages/react-devtools-shared/src/devtools/views/utils.js",
        "packages/react-devtools-shared/src/frontend/types.js"
      ]
    },
    {
      "sha": "cc015840ef72d48de86778785894c7ca44f4f856",
      "short_sha": "cc01584",
      "message": "fix: `React.use` inside `React.lazy`-ed component on SSR (#33941)",
      "author": {
        "name": "Hiroshi Ogawa",
        "email": "hi.ogawa.zz@gmail.com"
      },
      "authored_date": "2025-07-28T17:36:08+09:00",
      "committed_date": "2025-07-28T10:36:08+02:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "19baee813cb08fc5971a3b301814faa6cd530ec8",
      "short_sha": "19baee8",
      "message": "[Runtime] Fix CI (#33999)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-25T21:04:35+02:00",
      "committed_date": "2025-07-25T21:04:35+02:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ReactCompilerRule-test.ts"
      ]
    },
    {
      "sha": "2aa5f9d4e3f961c6ec2c14f80403d35b7f2fe83e",
      "short_sha": "2aa5f9d",
      "message": "[compiler] fix false positive \"mutate frozen\" validation with refs (#33993)\n\nThe test case here previously reported a \"Cannot modify local variables\nafter render completes\" error (from\nValidateNoFreezingKnownMutableFunctions). This happens because one of\nthe functions passed to a hook clearly mutates a ref — except that we\ntry to ignore mutations of refs! The problem in this case is that the\n`const ref = ...` was getting converted to a context variable since the\nref is accessed in a function before its declaration. We don't infer\ntypes for context variables at all, and our ref handling is based on\ntypes, so we failed to ignore this ref mutation.\n\nThe fix is to recognize that `StoreLocal const ...` is a special case:\nthe variable may be referenced in code before the declaration, but at\nruntime it's either a TDZ error or the variable will have the type from\nthe declaration. So we can safely infer a type.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33993).\n* __->__ #33993\n* #33991\n* #33984",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-25T10:08:09-07:00",
      "committed_date": "2025-07-25T10:08:09-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutate-ref-in-function-passed-to-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutate-ref-in-function-passed-to-hook.js"
      ]
    },
    {
      "sha": "8c587a2a411fd6bd9d82b17ff1030eb263c564a1",
      "short_sha": "8c587a2",
      "message": "[compiler] clarify text for setState-in-effect error (#33991)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33991).\n* #33993\n* __->__ #33991\n* #33984",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-25T10:07:55-07:00",
      "committed_date": "2025-07-25T10:07:55-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoSetStateInEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect.expect.md"
      ]
    },
    {
      "sha": "12483a119bf21ab69f9837f65b6bed2ba55cb73e",
      "short_sha": "12483a1",
      "message": "[compiler] Fix for edge cases of mutation of potentially frozen values (#33984)\n\nFixes two related cases of mutation of potentially frozen values.\n\nThe first is method calls on frozen values. Previously, we modeled\nunknown function calls as potentially aliasing their receiver+args into\nthe return value. If the receiver or argument were known to be frozen,\nthen we would downgrade the `Alias` effect into an `ImmutableCapture`.\nHowever, within a function expression it's possible to call a function\nusing a frozen value as an argument (that gets `Alias`-ed into the\nreturn) but where we don't have the context locally to know that the\nvalue is frozen.\n\nThis results in cases like this:\n\n```js\nconst frozen = useContext(...);\nuseEffect(() => {\n  frozen.method().property = true;\n  ^^^^^^^^^^^^^^^^^^^^^^^^ cannot mutate frozen value\n}, [...]);\n```\n\nWithin the function we would infer:\n\n```\nt0 = MethodCall ...\n  Create t0 = mutable\n  Alias t0 <- frozen\nt1 = PropertyStore ...\n  Mutate t0\n```\n\nAnd then transitively infer the function expression as having a `Mutate\n'frozen'` effect, which when evaluated against the outer context\n(`frozen` is frozen) is an error.\n\nThe fix is to model unknown function calls as _maybe_ aliasing their\nreceiver/args in the return, and then considering mutations of a\nmaybe-aliased value to only be a conditional mutation of the source:\n\n\n```\nt0 = MethodCall ...\n  Create t0 = mutable\n  MaybeAlias t0 <- frozen // maybe alias now\nt1 = PropertyStore ...\n  Mutate t0\n```\n\nThen, the `Mutate t0` turns into a `MutateConditional 'frozen'`, which\njust gets ignored when we process the outer context.\n\nThe second, related fix is for known mutation of phis that may be a\nfrozen value. The previous inference model correctly recorded these as\nerrors, the new model does not. We now correctly report a validation\nerror for this case in the new model.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33984).\n* #33993\n* #33991\n* __->__ #33984",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-25T10:07:24-07:00",
      "committed_date": "2025-07-25T10:07:24-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/MUTABILITY_ALIASING_MODEL.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-phi-which-could-be-frozen.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-phi-which-could-be-frozen.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-for-loop-with-context-variable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/for-loop-with-context-variable-iterator.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/for-loop-with-context-variable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutate-result-of-function-call-with-frozen-argument-in-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutate-result-of-function-call-with-frozen-argument-in-function-expression.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutate-result-of-method-call-on-frozen-value-in-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutate-result-of-method-call-on-frozen-value-in-function-expression.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutate-result-of-method-call-on-frozen-value-is-allowed.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutate-result-of-method-call-on-frozen-value-is-allowed.js"
      ]
    },
    {
      "sha": "b2c30493ce891d6e066667aa4a49c51837deaebc",
      "short_sha": "b2c3049",
      "message": "[DevTools] Use the hard coded url instead of the local storage url for presets (and make VSCode default) (#33995)\n\nStacked on #33983.\n\nPreviously, the source of truth is the url stored in local storage but\nthat means if we change the presets then they don't take effect (e.g.\n#33994). This PR uses the hardcoded value instead when a preset is\nselected.\n\nThis also has the benefit that if you switch between custom and vs code\nin the selector, then the custom url is preserved instead of getting\nreset when you checkout other options.\n\nCurrently the default is custom with empty string, which means that\nthere's no code editor configured at all by default. It doesn't make a\nlot of sense that we have it not working by default when so many people\nuse VS Code. So this also makes VS Code the default if there's no\nEDITOR_URL env specified.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-25T10:27:27-04:00",
      "committed_date": "2025-07-25T10:27:27-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElement.js",
        "packages/react-devtools-shared/src/devtools/views/Editor/EditorPane.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/CodeEditorOptions.js",
        "packages/react-devtools-shared/src/devtools/views/useEditorURL.js",
        "packages/react-devtools-shared/src/devtools/views/useOpenResource.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "36c2bf5c3e7cd2f804c04d261b675c14d09dcf14",
      "short_sha": "36c2bf5",
      "message": "[DevTools] Allow all file links in Chrome DevTools to open in external editor (#33985)\n\nStacked on #33983.\n\nAllow React to be configured as the default handler of all links in\nChrome DevTools. To do this you need to configure the Chrome DevTools\nsetting for \"Link Handling:\" to be set to \"React Developer Tools\". By\ndefault this doesn't do anything but if you then check the box added in\n#33983 it starts open local files directly in the external editor.\n\nThis needs docs to show how to enable that option.\n\n(As far as I can tell this broke in Chrome Canary 🙄 but hopefully fixed\nbefore stable.)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-25T10:27:09-04:00",
      "committed_date": "2025-07-25T10:27:09-04:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-shared/src/devtools/views/Editor/EditorPane.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/CodeEditorByDefault.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/GeneralSettings.js"
      ]
    },
    {
      "sha": "190758e6236938283b51dce7d3fd21af6801a470",
      "short_sha": "190758e",
      "message": "[DevTools] Add column to vscode editor preset (#33994)\n\nWe should jump to the right column.\n\nUnfortunately, the way presets are set up now you have to switch off and\nswitch to the preset for this to take effect.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-25T10:21:00-04:00",
      "committed_date": "2025-07-25T10:21:00-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Editor/utils.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/CodeEditorOptions.js"
      ]
    },
    {
      "sha": "b1a6f03f8af2b5ce5ee466d89d218606089c0395",
      "short_sha": "b1a6f03",
      "message": "[DevTools] Rerender when the browser theme changes (#33992)\n\nWhen the browser theme changes, we don't immediately rerender the UI so\nwe don't pick up the new theme if the React devtools are set to auto.\n\nThis picks up the change immediately.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-25T10:19:09-04:00",
      "committed_date": "2025-07-25T10:19:09-04:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/index.js"
      ]
    },
    {
      "sha": "142fd27bf6e1b46c554d436509bdf9b70f7ef042",
      "short_sha": "142fd27",
      "message": "[DevTools] Add Option to Open Local Files directly in External Editor (#33983)\n\nThe `useOpenResource` hook is now used to open links. Currently, the\n`<>` icon for the component stacks and the link in the bottom of the\ncomponents stack. But it'll also be used for many new links like stacks.\nIf this new option is configured, and this is a local file then this is\nopened directly in the external editor. Otherwise it fallbacks to open\nin the Sources tab or whatever the standalone or inline is configured to\nuse.\n\n<img width=\"453\" height=\"252\" alt=\"Screenshot 2025-07-24 at 4 09 09 PM\"\nsrc=\"https://github.com/user-attachments/assets/04cae170-dd30-4485-a9ee-e8fe1612978e\"\n/>\n\nI prominently surface this option in the Source pane to make it\ndiscoverable.\n\n<img width=\"588\" height=\"144\" alt=\"Screenshot 2025-07-24 at 4 03 48 PM\"\nsrc=\"https://github.com/user-attachments/assets/0f3a7da9-2fae-4b5b-90ec-769c5a9c5361\"\n/>\n\nWhen this is configured, the \"Open in Editor\" is hidden since that's\njust the default. I plan on deprecating this button to avoid having the\ntwo buttons going forward.\n\nNotably there's one exception where this doesn't work. When you click an\nAction or Event listener it takes you to the Sources tab and you have to\nopen in editor from there. That's because we use the `inspect()`\nmechanism instead of extracting the source location. That's because we\ncan't do the \"throw trick\" since these can have side-effects. The Chrome\ndebugger protocol would solve this but it pops up an annoying dialog. We\ncould maybe only attach the debugger only for that case. Especially if\nthe dialog disappears before you focus on the browser again.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-25T10:16:43-04:00",
      "committed_date": "2025-07-25T10:16:43-04:00",
      "changed_files": [
        "packages/react-devtools-core/src/standalone.js",
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-fusebox/src/frontend.d.ts",
        "packages/react-devtools-shared/src/__tests__/__serializers__/inspectedElementSerializer.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/backendAPI.js",
        "packages/react-devtools-shared/src/constants.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElement.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSourcePanel.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementViewSourceButton.js",
        "packages/react-devtools-shared/src/devtools/views/DevTools.js",
        "packages/react-devtools-shared/src/devtools/views/Editor/EditorPane.css",
        "packages/react-devtools-shared/src/devtools/views/Editor/EditorPane.js",
        "packages/react-devtools-shared/src/devtools/views/Editor/utils.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/SidebarEventInfo.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/CodeEditorByDefault.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/CodeEditorOptions.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/GeneralSettings.js",
        "packages/react-devtools-shared/src/devtools/views/hooks.js",
        "packages/react-devtools-shared/src/devtools/views/useOpenResource.js",
        "packages/react-devtools-shared/src/frontend/types.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "7ca2d4cd2e263f1923d958b16797d20d3efbc194",
      "short_sha": "7ca2d4c",
      "message": "Work around Chrome DevTools crash on `performance.measure` (#33997)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-25T12:32:30+02:00",
      "committed_date": "2025-07-25T12:32:30+02:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "99be14c883c5c83c9a087d37e19d93d6afb839ed",
      "short_sha": "99be14c",
      "message": "[Flight] Promote enableAsyncDebugInfo to stable without enableComponentPerformanceTrack (#33996)\n\nThere's a lot of overlap between `enableComponentPerformanceTrack` and\n`enableAsyncDebugInfo` because they both rely on timing information. The\nformer is mainly emit timestamps for how long server components and\nawaits took. The latter how long I/O took.\n\n`enableAsyncDebugInfo` is currently primarily for the component\nperformance track but its meta data is useful for other debug tools too.\nThis promotes that flag to stable.\n\nHowever, `enableComponentPerformanceTrack` needs more work due to\nperformance concerns with Chrome DevTools so I need to separate them.\nThis keeps doing most of the timing tracking on the server but doesn't\nemit the per-server component time stamps when\n`enableComponentPerformanceTrack` is false.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-25T04:59:46-04:00",
      "committed_date": "2025-07-25T04:59:46-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "5a04619f60221d9132f64f25b5a87b04c78fc7dc",
      "short_sha": "5a04619",
      "message": "[Flight] Properly close stream when no chunks need to be written after prerender (#33982)\n\nThere is an edge case when prerendering where if you have nothing to\nwrite you can end up in a state where the prerender is in status closed\nbefore you can provide a destination. In this case the destination is\nnever closed becuase it assumes it already would have been.\n\nThis condition can happen now because of the introduction of the deubg\nstream. Before this a request would never entere closed status if there\nwas no active destination. When a destination was added it would perform\na flush and possibly close the stream. Now, it is possible to flush\nwithout a destination because you might have debug chunks to stream and\nyou can end up closing the stream independent of an active destination.\n\nThere are a number of ways we can solve this but the one that seems to\nadhere best to the original design is to only set the status to CLOSED\nwhen a destination is active. This means that if you don't have an\nactive destination when the pendingChunks count hits zero it will not\nenter CLOSED status until you startFlowing.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-07-24T19:38:31-07:00",
      "committed_date": "2025-07-24T19:38:31-07:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "129aa85e1621f31d382d3b8bf7a5aa456daf3d59",
      "short_sha": "129aa85",
      "message": "[compiler] Use diagnostic for \"found suppression\" error (#33981)",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:54:24-07:00",
      "committed_date": "2025-07-24T15:54:24-07:00",
      "changed_files": [
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/compilationMode-all-output.txt",
        "compiler/apps/playground/components/Editor/Output.tsx",
        "compiler/apps/playground/components/Editor/monacoOptions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Suppression.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bailout-on-flow-suppression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bailout-on-suppression-of-custom-rule.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-sketchy-code-use-forget.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-unclosed-eslint-suppression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.sketchy-code-exhaustive-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.sketchy-code-rules-of-hooks.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/error.wrong-index-no-func.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/error.wrong-index.expect.md"
      ]
    },
    {
      "sha": "bcea86945cd5324f1a7f324a48fd2c7cb36e569b",
      "short_sha": "bcea869",
      "message": "[compiler][rfc] Enable more validations in playground. (#33777)\n\nThis is mostly to kick off conversation, i think we should go with a\nmodified version of the implemented approach that i'll describe here.\n\nThe playground currently serves two roles. The primary one we think\nabout is for verifying compiler output. We use it for this sometimes,\nand developers frequently use it for this, including to send us repros\nif they have a potential bug. The second mode is to help developers\nlearn about React. Part of that includes learning how to use React\ncorrectly — where it's helpful to see feedback about problematic code —\nand also to understand what kind of tools we provide compared to other\nframeworks, to make an informed choice about what tools they want to\nuse.\n\nCurrently we primarily think about the first role, but I think we should\nemphasize the second more. In this PR i'm doing the worst of both:\nenabling all the validations used by both the compiler and the linter by\ndefault. This means that code that would actually compile can fail with\nvalidations, which isn't great.\n\nWhat I think we should actually do is compile twice, one in\n\"compilation\" mode and once in \"linter\" mode, and combine the results as\nfollows:\n* If \"compilation\" mode succeeds, show the compiled output _and_ any\nlinter errors.\n* If \"compilation\" mode fails, show only the compilation mode failures.\n\nWe should also distinguish which case it is when we show errors:\n\"Compilation succeeded\", \"Compilation succeeded with linter errors\",\n\"Compilation failed\".\n\nThis lets developers continue to verify compiler output, while also\nturning the playground into a much more useful tool for learning React.\nThoughts?\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33777).\n* #33981\n* __->__ #33777",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:52:45-07:00",
      "committed_date": "2025-07-24T15:52:45-07:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx",
        "compiler/apps/playground/components/Editor/Output.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/TestUtils.ts"
      ]
    },
    {
      "sha": "2ae8b3dacf2cd93900d86bc11f22768d507ddce7",
      "short_sha": "2ae8b3d",
      "message": "[compiler] Use new diagnostic printing in playground (#33767)\n\nPer title\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33767).\n* #33981\n* #33777\n* __->__ #33767",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:47:56-07:00",
      "committed_date": "2025-07-24T15:47:56-07:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx",
        "compiler/apps/playground/components/Editor/Input.tsx",
        "compiler/apps/playground/components/Editor/Output.tsx",
        "compiler/apps/playground/lib/reactCompilerMonacoDiagnostics.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Babel/BabelPlugin.ts",
        "compiler/packages/babel-plugin-react-compiler/src/CompilerError.ts"
      ]
    },
    {
      "sha": "7f510554adce7312c51139e26aa381f08ad886a2",
      "short_sha": "7f51055",
      "message": "[compiler] Cleanup diagnostic messages (#33765)\n\nMinor sytlistic cleanup\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33765).\n* #33981\n* #33777\n* #33767\n* __->__ #33765",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:45:17-07:00",
      "committed_date": "2025-07-24T15:45:17-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Babel/BabelPlugin.ts",
        "compiler/packages/babel-plugin-react-compiler/src/CompilerError.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateLocalsNotReassignedAfterRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoFreezingKnownMutableFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateStaticComponents.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateUseMemo.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/Logger-test.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error._todo.computed-lval-in-destructure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.assign-global-in-component-tag-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.assign-global-in-jsx-children.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.assign-global-in-jsx-spread-attribute.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bailout-on-flow-suppression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bailout-on-suppression-of-custom-rule.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bug-old-inference-false-positive-ref-validation-in-use-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.call-args-destructuring-asignment-complex.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capitalized-function-call-aliased.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capitalized-function-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capitalized-method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capture-ref-for-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.conditional-hook-unknown-hook-react-namespace.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.conditional-hooks-as-method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.context-variable-only-chained-assign.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.declare-reassign-variable-in-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.default-param-accesses-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.dont-hoist-inline-reference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.emit-freeze-conflicting-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.function-expression-references-variable-its-assigned-to.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoist-optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoist-optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoisting-simple-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-identifier.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-property-load-local-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-ref-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ReactUseMemo-async-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-aliased-ref-in-callback-invoked-during-render-.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-array-push-frozen.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-assign-hook-to-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-computed-store-to-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-call-aliased-hook-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-call-aliased-react-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-call-non-hook-imported-as-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-setState-in-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-delete-computed-property-of-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-delete-property-of-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-destructure-assignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-destructure-to-local-global-variables.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-disallow-mutating-ref-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-disallow-mutating-refs-in-render-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-eval-unsupported.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-function-expression-mutates-immutable-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-global-reassignment-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hoisting-setstate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hook-function-argument-mutates-local-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-impure-functions-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-captures-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-after-aliased-freeze.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-after-freeze.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-context-in-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-props-in-effect-fixpoint.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-props-via-for-of-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutation-in-closure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutation-of-possible-props-phi-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-nested-function-reassign-local-variable-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-non-imported-reanimated-shared-value-writes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-optional-member-expression-as-memo-dep-non-optional-in-body.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-hook-as-call-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-hook-as-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-mutable-function-as-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-ref-to-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-prop-mutation-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-property-store-to-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-props-mutation-in-effect-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-destructure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-property-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-const.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-in-hook-return-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-async-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-jsx-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ref-in-callback-invoked-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ref-value-as-props.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-return-mutable-function-from-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-set-and-read-ref-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-set-and-read-ref-nested-property-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useMemo-indirect-useCallback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-sketchy-code-use-forget.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ternary-with-hook-values.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hook-name-not-typed-as-hook-namespace.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hook-name-not-typed-as-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hooklike-module-default-not-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-nonhook-name-typed-as-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-uncalled-function-capturing-mutable-values-memoizes-with-captures-values.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-unclosed-eslint-suppression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-unconditional-set-state-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-use-ref-added-to-dep-without-type-info.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useEffect-dep-not-memoized-bc-range-overlaps-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useEffect-dep-not-memoized.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useInsertionEffect-dep-not-memoized.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useLayoutEffect-dep-not-memoized.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useMemo-async-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useMemo-callback-args.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-write-but-dont-read-ref-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-write-ref-prop-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.modify-state-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.modify-state.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.modify-useReducer-state.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutable-range-shared-inner-outer-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-function-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-global-increment-op-invalid-react.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-property-from-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-props.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.nomemo-and-change-detect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.not-useEffect-external-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.object-capture-global-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.propertyload-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassign-global-fn-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassignment-to-global-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-arbitrary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-call-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-linear.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-nonif.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-other.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-post-access-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-post-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-like-name-not-Ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-like-name-not-a-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.repro-ref-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.sketchy-code-exhaustive-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.sketchy-code-rules-of-hooks.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.store-property-in-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-for-await-loops.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-for-in-loop-with-context-variable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-for-of-loop-with-context-variable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-function-expression-references-later-variable-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-functiondecl-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-handle-update-context-identifiers.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hoist-function-decls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hoisted-function-in-unreachable-code.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hoisting-simple-var-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hook-call-spreads-mutable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-invalid-jsx-in-catch-in-outer-try-with-finally.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-invalid-jsx-in-try-with-finally.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-kitchensink.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-logical-expression-within-try-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-nested-method-calls-lower-property-load-into-temporary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-new-target-meta-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-computed-key-modified-during-after-construction-sequence-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-computed-key-modified-during-after-construction.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-computed-key-mutate-key-while-constructing-object.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-get-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-member-expr-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-set-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-call-chain-in-logical-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-call-chain-in-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-call-chain-in-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-reassign-const.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-declaration-for-all-identifiers.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-capture-in-invoked-function-inferred-as-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-inferred-mutation-in-logger.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-unmemoized-callback-captured-in-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-set-ref-nested-property-ref-modified-later-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-valid-functiondecl-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo.try-catch-with-throw.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-in-render-after-loop-break.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-in-render-after-loop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-in-render-with-loop-throw.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-nested-function-expressions.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.update-global-should-bailout.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-accesses-ref-mutated-later-via-function-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-set-ref-nested-property-dont-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useMemo-callback-generator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useMemo-non-literal-depslist.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-blocklisted-imports.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-memoized-effect-deps-invalidated-dep-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-mutate-ref-arg-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-fbt-as-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-fbt-unknown-enum-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-locally-require-fbt.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-multiple-fbt-plural.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.dynamic-gating-invalid-identifier-nopanic-required-feature.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.dynamic-gating-invalid-identifier.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn-default-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.non-inlined-effect-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-dynamic-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-import-default-property-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.use-no-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-impure-functions-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-reassign-local-variable-in-jsx-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-referencing-frozen-hoisted-storecontext-const.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-useCallback-captures-reassigned-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.not-useEffect-external-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-dropped-infer-always-invalidating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-infer-mutate-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-overlap-scopes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-conditional-access-own-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-infer-conditional-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.invalid-useCallback-captures-reassigned-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useCallback-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useMemo-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-mutable-ref-not-preserved.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.preserve-use-memo-ref-missing-reactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.todo-useCallback-captures-invalidating-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-aliased-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-conditional-access-noAlloc.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-property-call-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-aliased-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-property-call-chained-object.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-property-call-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-unrelated-mutation-in-depslist.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-with-refs.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.validate-useMemo-named-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-call-chain-in-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-3d692676194b.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-8503ca76d6f8.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-call-phi-possibly-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-conditionally-call-local-named-like-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-conditionally-call-prop-named-like-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-conditionally-methodcall-hooklike-property-of-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-condtionally-call-hooklike-property-of-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-dynamic-hook-via-hooklike-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-after-early-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-as-conditional-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-as-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-for.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-hook-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-property-of-other-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-if-alternate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-if-consequent.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-in-nested-function-expression-object-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-in-nested-object-method.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optional-methodcall.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optional-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optionalcall.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-reassigned-in-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-1b9527f967f3.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-2aabd222fc6a.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-49d341e5d68f.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-79128a755612.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-9718e30b856c.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-9bf17c174134.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-b4dcda3d60ed.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-c906cace44e9.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-d740d54e9c21.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-d85c144bdf40.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-ea7c2fb545a9.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-f3d6c5e9c83d.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-f69800950ff0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-0a1dbff27ba0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-0de1224ce64b.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-449a37146a83.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-76a74b4666e9.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-d842d36db450.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-d952b82c2597.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.invalid-rules-of-hooks-368024110a58.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.invalid-rules-of-hooks-8566f9a360e2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.invalid-rules-of-hooks-a0058f0b446d.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-27c18dc8dad2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-d0935abedc42.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-e29c874aa913.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-conditionally-assigned-dynamically-constructed-component-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-construct-component-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-new.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.error.object-pattern-computed-key.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.untransformed-fire-reference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.use-no-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-mix-fire-and-no-fire.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-multiple-args.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-nested-use-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-not-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-outside-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-rewrite-deps-no-array-literal.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-rewrite-deps-spread.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-spread.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.todo-method.expect.md",
        "compiler/packages/eslint-plugin-react-compiler/__tests__/ReactCompilerRule-test.ts",
        "compiler/packages/eslint-plugin-react-compiler/__tests__/ReactCompilerRuleTypescript-test.ts",
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts",
        "packages/eslint-plugin-react-hooks/__tests__/ReactCompilerRule-test.ts",
        "packages/eslint-plugin-react-hooks/__tests__/ReactCompilerRuleTypescript-test.ts",
        "packages/eslint-plugin-react-hooks/src/rules/ReactCompiler.ts"
      ]
    },
    {
      "sha": "a39da6c61feb5d10c988ddb55b7451a5af165783",
      "short_sha": "a39da6c",
      "message": "[compiler] Use new diagnostics for core inference errors (#33760)\n\nUses the new diagnostic type for errors created during mutation/aliasing\ninference, such as errors for mutating immutable values like props or\nstate, reassigning globals, etc.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33760).\n* #33981\n* #33777\n* #33767\n* #33765\n* __->__ #33760",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:43:08-07:00",
      "committed_date": "2025-07-24T15:43:08-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferFunctionEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.assign-global-in-component-tag-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.assign-global-in-jsx-children.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-identifier.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-array-push-frozen.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-computed-store-to-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-delete-computed-property-of-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-delete-property-of-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-destructure-assignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-destructure-to-local-global-variables.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-function-expression-mutates-immutable-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-global-reassignment-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hoisting-setstate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-impure-functions-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-captures-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-after-aliased-freeze.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-after-freeze.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-context-in-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-props-in-effect-fixpoint.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-props-via-for-of-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutation-in-closure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutation-of-possible-props-phi-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-non-imported-reanimated-shared-value-writes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-prop-mutation-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-property-store-to-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-props-mutation-in-effect-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.modify-state-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.modify-state.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.modify-useReducer-state.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-function-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-property-from-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-props.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.not-useEffect-external-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.object-capture-global-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassign-global-fn-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassignment-to-global-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.store-property-in-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.update-global-should-bailout.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-impure-functions-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-referencing-frozen-hoisted-storecontext-const.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.not-useEffect-external-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/retry-no-emit.expect.md"
      ]
    },
    {
      "sha": "48bc166428404c948315d98d02fe69533956e319",
      "short_sha": "48bc166",
      "message": "[compiler] Update diagnostics for ValidatePreservedManualMemoization (#33759)\n\nUses the new diagnostic infrastructure for this validation, which lets\nus provide a more targeted message on the text that we highlight (eg\n\"This dependency may be mutated later\") separately from the overall\nerror message.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33759).\n* #33981\n* #33777\n* #33767\n* #33765\n* #33760\n* __->__ #33759\n* #33758",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:39:53-07:00",
      "committed_date": "2025-07-24T15:39:53-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoist-optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoist-optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-optional-member-expression-as-memo-dep-non-optional-in-body.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-like-name-not-Ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-like-name-not-a-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-capture-in-invoked-function-inferred-as-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-inferred-mutation-in-logger.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-unmemoized-callback-captured-in-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-bailout-nopanic.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-useCallback-captures-reassigned-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-dropped-infer-always-invalidating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-infer-mutate-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-overlap-scopes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-conditional-access-own-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-infer-conditional-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.invalid-useCallback-captures-reassigned-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useCallback-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useMemo-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.preserve-use-memo-ref-missing-reactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.todo-useCallback-captures-invalidating-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-aliased-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-conditional-access-noAlloc.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-property-call-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-aliased-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-property-call-chained-object.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-property-call-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-unrelated-mutation-in-depslist.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-with-conditional.expect.md"
      ]
    },
    {
      "sha": "72848027a5525d7beebeccb0a485f4f211a1a101",
      "short_sha": "7284802",
      "message": "[compiler] Improve more error messages (#33758)\n\nThis PR uses the new diagnostic type for most of the error messages\nproduced in our explicit validation passes (`Validation/` directory).\nOne of the validations produced multiple errors as a hack to showing\nmultiple related locations, which we can now consolidate into a single\ndiagnostic.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33758).\n* #33981\n* #33777\n* #33767\n* #33765\n* #33760\n* #33759\n* __->__ #33758",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:39:42-07:00",
      "committed_date": "2025-07-24T15:39:42-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/CompilerError.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateLocalsNotReassignedAfterRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoFreezingKnownMutableFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoImpureFunctionsInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoJSXInTryStatement.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoSetStateInEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoSetStateInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateUseMemo.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bug-old-inference-false-positive-ref-validation-in-use-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.context-variable-only-chained-assign.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.declare-reassign-variable-in-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.function-expression-references-variable-its-assigned-to.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ReactUseMemo-async-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-setState-in-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hook-function-argument-mutates-local-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-nested-function-reassign-local-variable-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-mutable-function-as-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-in-hook-return-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-jsx-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-return-mutable-function-from-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useMemo-indirect-useCallback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-uncalled-function-capturing-mutable-values-memoizes-with-captures-values.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-unconditional-set-state-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useMemo-async-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useMemo-callback-args.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutable-range-shared-inner-outer-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-function-expression-references-later-variable-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-in-render-after-loop-break.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-in-render-after-loop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-in-render-with-loop-throw.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-nested-function-expressions.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-jsx-in-catch-in-outer-try-with-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-jsx-in-try-with-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-reassign-local-variable-in-jsx-callback.expect.md"
      ]
    },
    {
      "sha": "707e321f8f1ba3f69d27df861caf630fe48aade6",
      "short_sha": "707e321",
      "message": "[compiler][wip] Improve diagnostic infra (#33751)\n\nWork in progress, i'm experimenting with revamping our diagnostic infra.\nStarting with a better format for representing errors, with an ability\nto point ot multiple locations, along with better printing of errors. Of\ncourse, Babel still controls the printing in the majority case so this\nstill needs more work.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33751).\n* #33981\n* #33777\n* #33767\n* #33765\n* #33760\n* #33759\n* #33758\n* __->__ #33751\n* #33752\n* #33753",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:37:06-07:00",
      "committed_date": "2025-07-24T15:37:06-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Babel/BabelPlugin.ts",
        "compiler/packages/babel-plugin-react-compiler/src/CompilerError.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/ValidateNoUntransformedReferences.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/envConfig-test.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error._todo.computed-lval-in-destructure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.assign-global-in-component-tag-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.assign-global-in-jsx-children.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.assign-global-in-jsx-spread-attribute.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bailout-on-flow-suppression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bailout-on-suppression-of-custom-rule.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bug-old-inference-false-positive-ref-validation-in-use-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.call-args-destructuring-asignment-complex.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capitalized-function-call-aliased.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capitalized-function-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capitalized-method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capture-ref-for-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.conditional-hook-unknown-hook-react-namespace.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.conditional-hooks-as-method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.context-variable-only-chained-assign.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.declare-reassign-variable-in-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.default-param-accesses-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.dont-hoist-inline-reference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.emit-freeze-conflicting-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.function-expression-references-variable-its-assigned-to.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoist-optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoist-optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoisting-simple-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-identifier.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-property-load-local-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-ref-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ReactUseMemo-async-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-aliased-ref-in-callback-invoked-during-render-.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-array-push-frozen.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-assign-hook-to-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-computed-store-to-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-call-aliased-hook-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-call-aliased-react-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-call-non-hook-imported-as-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-setState-in-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-delete-computed-property-of-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-delete-property-of-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-destructure-assignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-destructure-to-local-global-variables.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-disallow-mutating-ref-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-disallow-mutating-refs-in-render-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-eval-unsupported.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-function-expression-mutates-immutable-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-global-reassignment-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hoisting-setstate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hook-function-argument-mutates-local-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-impure-functions-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-captures-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-after-aliased-freeze.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-after-freeze.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-context-in-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-props-in-effect-fixpoint.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutate-props-via-for-of-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutation-in-closure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-mutation-of-possible-props-phi-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-nested-function-reassign-local-variable-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-non-imported-reanimated-shared-value-writes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-optional-member-expression-as-memo-dep-non-optional-in-body.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-hook-as-call-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-hook-as-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-mutable-function-as-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-ref-to-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-prop-mutation-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-property-store-to-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-props-mutation-in-effect-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-destructure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-property-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-const.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-in-hook-return-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-async-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-reassign-local-variable-in-jsx-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ref-in-callback-invoked-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ref-value-as-props.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-return-mutable-function-from-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-set-and-read-ref-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-set-and-read-ref-nested-property-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useMemo-indirect-useCallback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-sketchy-code-use-forget.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ternary-with-hook-values.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hook-name-not-typed-as-hook-namespace.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hook-name-not-typed-as-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hooklike-module-default-not-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-nonhook-name-typed-as-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-uncalled-function-capturing-mutable-values-memoizes-with-captures-values.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-unclosed-eslint-suppression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-unconditional-set-state-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-use-ref-added-to-dep-without-type-info.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useEffect-dep-not-memoized-bc-range-overlaps-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useEffect-dep-not-memoized.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useInsertionEffect-dep-not-memoized.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useLayoutEffect-dep-not-memoized.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useMemo-async-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-useMemo-callback-args.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-write-but-dont-read-ref-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-write-ref-prop-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.modify-state-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.modify-state.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.modify-useReducer-state.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutable-range-shared-inner-outer-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-function-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-global-increment-op-invalid-react.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-property-from-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-props.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.nomemo-and-change-detect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.not-useEffect-external-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.object-capture-global-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.propertyload-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassign-global-fn-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassignment-to-global-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-arbitrary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-call-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-linear.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-nonif.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-other.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-post-access-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-post-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-like-name-not-Ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-like-name-not-a-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.repro-ref-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.sketchy-code-exhaustive-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.sketchy-code-rules-of-hooks.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.store-property-in-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-for-await-loops.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-for-in-loop-with-context-variable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-for-of-loop-with-context-variable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-function-expression-references-later-variable-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-functiondecl-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-handle-update-context-identifiers.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hoist-function-decls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hoisted-function-in-unreachable-code.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hoisting-simple-var-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hook-call-spreads-mutable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-invalid-jsx-in-catch-in-outer-try-with-finally.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-invalid-jsx-in-try-with-finally.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-kitchensink.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-logical-expression-within-try-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-nested-method-calls-lower-property-load-into-temporary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-new-target-meta-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-computed-key-modified-during-after-construction-sequence-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-computed-key-modified-during-after-construction.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-computed-key-mutate-key-while-constructing-object.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-get-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-member-expr-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-set-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-call-chain-in-logical-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-call-chain-in-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-call-chain-in-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-reassign-const.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-declaration-for-all-identifiers.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-capture-in-invoked-function-inferred-as-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-inferred-mutation-in-logger.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-unmemoized-callback-captured-in-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-set-ref-nested-property-ref-modified-later-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-valid-functiondecl-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo.try-catch-with-throw.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-in-render-after-loop-break.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-in-render-after-loop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-in-render-with-loop-throw.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.unconditional-set-state-nested-function-expressions.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.update-global-should-bailout.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-accesses-ref-mutated-later-via-function-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-set-ref-nested-property-dont-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useMemo-callback-generator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useMemo-non-literal-depslist.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-blocklisted-imports.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-memoized-effect-deps-invalidated-dep-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-mutate-ref-arg-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-fbt-as-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-fbt-unknown-enum-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-locally-require-fbt.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-multiple-fbt-plural.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-bailout-nopanic.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-invalid-multiple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.dynamic-gating-invalid-identifier-nopanic-required-feature.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.dynamic-gating-invalid-identifier.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn-default-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.non-inlined-effect-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-dynamic-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-import-default-property-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.use-no-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/error.wrong-index-no-func.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/error.wrong-index.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-impure-functions-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-reassign-local-variable-in-jsx-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-referencing-frozen-hoisted-storecontext-const.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-useCallback-captures-reassigned-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.not-useEffect-external-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-dropped-infer-always-invalidating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-infer-mutate-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-overlap-scopes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-conditional-access-own-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-infer-conditional-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.invalid-useCallback-captures-reassigned-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useCallback-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useMemo-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-mutable-ref-not-preserved.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.preserve-use-memo-ref-missing-reactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.todo-useCallback-captures-invalidating-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-aliased-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-conditional-access-noAlloc.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-property-call-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-aliased-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-property-call-chained-object.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-property-call-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-unrelated-mutation-in-depslist.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-with-refs.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.validate-useMemo-named-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-call-chain-in-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-3d692676194b.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-8503ca76d6f8.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-call-phi-possibly-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-conditionally-call-local-named-like-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-conditionally-call-prop-named-like-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-conditionally-methodcall-hooklike-property-of-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-condtionally-call-hooklike-property-of-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-dynamic-hook-via-hooklike-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-after-early-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-as-conditional-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-as-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-for.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-hook-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-property-of-other-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-if-alternate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-if-consequent.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-in-nested-function-expression-object-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-in-nested-object-method.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optional-methodcall.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optional-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optionalcall.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-reassigned-in-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-1b9527f967f3.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-2aabd222fc6a.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-49d341e5d68f.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-79128a755612.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-9718e30b856c.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-9bf17c174134.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-b4dcda3d60ed.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-c906cace44e9.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-d740d54e9c21.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-d85c144bdf40.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-ea7c2fb545a9.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-f3d6c5e9c83d.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-f69800950ff0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-0a1dbff27ba0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-0de1224ce64b.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-449a37146a83.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-76a74b4666e9.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-d842d36db450.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-d952b82c2597.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.invalid-rules-of-hooks-368024110a58.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.invalid-rules-of-hooks-8566f9a360e2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.invalid-rules-of-hooks-a0058f0b446d.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-27c18dc8dad2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-d0935abedc42.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-e29c874aa913.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.error.object-pattern-computed-key.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.untransformed-fire-reference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.use-no-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-mix-fire-and-no-fire.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-multiple-args.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-nested-use-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-not-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-outside-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-rewrite-deps-no-array-literal.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-rewrite-deps-spread.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-spread.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.todo-method.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts",
        "compiler/packages/eslint-plugin-react-compiler/__tests__/ReactCompilerRule-test.ts",
        "compiler/packages/eslint-plugin-react-compiler/__tests__/ReactCompilerRuleTypescript-test.ts",
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts",
        "compiler/packages/snap/src/runner-worker.ts",
        "packages/eslint-plugin-react-hooks/__tests__/ReactCompilerRule-test.ts",
        "packages/eslint-plugin-react-hooks/__tests__/ReactCompilerRuleTypescript-test.ts",
        "packages/eslint-plugin-react-hooks/src/rules/ReactCompiler.ts"
      ]
    },
    {
      "sha": "0d39496eab710b5a3efc07d34c0db3f2475c04f8",
      "short_sha": "0d39496",
      "message": "[compiler] Enable additional lints by default (#33752)\n\nEnable more validations to help catch bad patterns, but only in the\nlinter. These rules are already enabled by default in the compiler _if_\nviolations could produce unsafe output.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33752).\n* #33981\n* #33777\n* #33767\n* #33765\n* #33760\n* #33759\n* #33758\n* #33751\n* __->__ #33752\n* #33753",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:36:54-07:00",
      "committed_date": "2025-07-24T15:36:54-07:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts",
        "packages/eslint-plugin-react-hooks/src/rules/ReactCompiler.ts"
      ]
    },
    {
      "sha": "6f4294af9b97c7082289f067315affe2ccf0ed7a",
      "short_sha": "6f4294a",
      "message": "[compiler] Validate against setState in all effect types (#33753)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33753).\n* #33981\n* #33777\n* #33767\n* #33765\n* #33760\n* #33759\n* #33758\n* #33751\n* #33752\n* __->__ #33753",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:36:40-07:00",
      "committed_date": "2025-07-24T15:36:40-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoSetStateInPassiveEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect-transitive.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/valid-setState-in-useEffect-listener-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/valid-setState-in-useEffect-listener-transitive.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/valid-setState-in-useEffect-listener.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/valid-setState-in-useEffect-listener.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/parseConfigPragma-test.ts"
      ]
    },
    {
      "sha": "448f781a52d62042341d2411d1352d705ce2cbfe",
      "short_sha": "448f781",
      "message": "[compiler] Fix for false positive mutation of destructured spread object (#33786)\n\nWhen destructuring, spread creates a new mutable object that _captures_\npart of the original rvalue. This new value is safe to modify.\n\nWhen making this change I realized that we weren't inferring array\npattern spread as creating an array (in type inference) so I also added\nthat here.",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-24T15:16:28-07:00",
      "committed_date": "2025-07-24T15:16:28-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/visitors.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-pattern-spread-creates-array.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-pattern-spread-creates-array.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-local-mutation-of-new-object-from-destructured-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-local-mutation-of-new-object-from-destructured-prop.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-undefined-expression-of-jsxexpressioncontainer.expect.md"
      ]
    },
    {
      "sha": "5020d48d2809c33db980f20726d1d0a7b2c8e31a",
      "short_sha": "5020d48",
      "message": "[DevTools] Feature detect createSidebarPane (#33988)\n\nSame as #33987 but for the sidebar pane creation.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-24T17:42:06-04:00",
      "committed_date": "2025-07-24T17:42:06-04:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/index.js"
      ]
    },
    {
      "sha": "3082604bdc03cfd8cee35e54dbb10caef956937e",
      "short_sha": "3082604",
      "message": "[DevTools] Feature detect sources panel (#33987)\n\nI broke Firefox DevTools extension in #33968.\n\nIt turns out the Firefox has a placeholder object for the sources panel\nwhich is empty. We need to detect the actual event handler.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-24T17:38:12-04:00",
      "committed_date": "2025-07-24T17:38:12-04:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/index.js"
      ]
    },
    {
      "sha": "4f34cc4a2e1198493375867d1876509ae9771aee",
      "short_sha": "4f34cc4",
      "message": "[Fiber] Don't throw away the Error object retaining the owner stack (#33976)\n\nWe currently throw away the Error once we've used to the owner stack of\na Fiber once. This maybe helps a bit with memory and redoing it but we\nreally don't expect most Fibers to hit this at all. It's not very hot.\n\nIf we throw away the Error, then we can't use native debugger protocols\nto inspect the native stack. Instead, we'd have to maintain a url to\nresource map indefinitely like what Chrome DevTools does to map a url to\na resource. Technically it's not even technically correct since the file\npath might not be reversible and could in theory conflict.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-24T13:33:03-04:00",
      "committed_date": "2025-07-24T13:33:03-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/DevToolsFiberComponentStack.js",
        "packages/react-reconciler/src/ReactFiberComponentStack.js",
        "packages/react-reconciler/src/ReactInternalTypes.js"
      ]
    },
    {
      "sha": "3d14fcf03f4e296d21b52b362f5adefd9e366375",
      "short_sha": "3d14fcf",
      "message": "[Flight] Use about: protocol instead of rsc: protocol for fake evals (#33977)\n\nChrome DevTools Extensions has a silly problem where they block access\nto load Resources from all protocols except [an allow\nlist](https://github.com/ChromeDevTools/devtools-frontend/blob/eb970fbc6482f281b95bbec1c33c1c539f6d50f0/front_end/models/extensions/ExtensionServer.ts#L60).\n\nhttps://issues.chromium.org/issues/416196401\n\nEven though these are `eval()` and not actually loaded from the network\nthey're blocked. They can really be any string. We just have to pick one\nof:\n\n```js\n'http:', 'https:', 'file:', 'data:', 'chrome-extension:', 'about:'\n```\n\nThat way React DevTools extensions can load this content to source map\nthem.\n\nWebpack has the same issue with its `webpack://` and\n`webpack-internal://` urls.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-24T11:07:11-04:00",
      "committed_date": "2025-07-24T11:07:11-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "edac0dded99d56e7d66a88da83e874761e3e937a",
      "short_sha": "edac0dd",
      "message": "[DevTools] Add a Code Editor Sidebar Pane in the Chrome Sources Tab (#33968)\n\nThis adds a \"Code Editor\" pane for the Chrome extension in the bottom\nright corner of the \"Sources\" panel. If you end up getting linked to the\n\"Sources\" panel from stack traces in console, performance tab, stacks in\nReact Component tab like the one added in #33954 basically everywhere\nthere's a link to source code. Then going from there to open in a code\neditor should be more convenient. This adds a button to open the current\nfile.\n\n<img width=\"1387\" height=\"389\" alt=\"Screenshot 2025-07-22 at 10 22\n19 PM\"\nsrc=\"https://github.com/user-attachments/assets/fe01f84c-83c2-4639-9b64-4af1a90c3f7d\"\n/>\n\nThis only makes sense in the extensions since in standalone it needs to\nalways open by default in an editor. Unfortunately Firefox doesn't\nsupport extending the Sources panel.\n\nChrome is also a bit buggy where it doesn't send a selection update\nevent when you switch tabs in the Sources panel. Only when the actual\ncursor position changes. This means that the link can be lagging behind\nsometimes. We also have some general bugs where if React DevTools loses\nconnection it can break the UI which includes this pane too.\n\nThis has a small inline configuration too so that it's discoverable:\n\n<img width=\"559\" height=\"143\" alt=\"Screenshot 2025-07-22 at 10 22 42 PM\"\nsrc=\"https://github.com/user-attachments/assets/1270bda8-ce10-4f9d-9fcb-080c0198366a\"\n/>\n\n<img width=\"527\" height=\"123\" alt=\"Screenshot 2025-07-22 at 10 22 30 PM\"\nsrc=\"https://github.com/user-attachments/assets/45848c95-afd8-495f-a7cf-eb2f46e698f2\"\n/>\n\nSince we can't add a separate link to open-in-editor or open-in-sources\neverywhere I plan on adding an option to open in editor by default in a\nfollow up. That option needs to be even more discoverable.\n\nI moved the configuration from the Components settings to the General\nsettings since this is now a much more general features for opening\nlinks to resources in all types of panes.\n\n<img width=\"673\" height=\"311\" alt=\"Screenshot 2025-07-22 at 10 22 57 PM\"\nsrc=\"https://github.com/user-attachments/assets/ea2c0871-942c-4b55-a362-025835d2c2bd\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-23T10:28:11-04:00",
      "committed_date": "2025-07-23T10:28:11-04:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-shared/src/devtools/views/ButtonLabel.css",
        "packages/react-devtools-shared/src/devtools/views/ButtonLabel.js",
        "packages/react-devtools-shared/src/devtools/views/Components/OpenInEditorButton.js",
        "packages/react-devtools-shared/src/devtools/views/DevTools.js",
        "packages/react-devtools-shared/src/devtools/views/Editor/EditorPane.css",
        "packages/react-devtools-shared/src/devtools/views/Editor/EditorPane.js",
        "packages/react-devtools-shared/src/devtools/views/Editor/EditorSettings.css",
        "packages/react-devtools-shared/src/devtools/views/Editor/EditorSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Editor/OpenInEditorButton.js",
        "packages/react-devtools-shared/src/devtools/views/Editor/utils.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/CodeEditorOptions.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/ComponentsSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/GeneralSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsShared.css"
      ]
    },
    {
      "sha": "3586a7f9e8ffb80ff98f41daca0e8a4070878718",
      "short_sha": "3586a7f",
      "message": "[DevTools] Allow file:/// urls to be opened in editor (#33965)\n\nIf a `file:///` path is specified as the url of a file, like after\nsource mapping into an ESM file, then we should be able to open it in a\ncode editor.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-23T10:21:50-04:00",
      "committed_date": "2025-07-23T10:21:50-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/OpenInEditorButton.js"
      ]
    },
    {
      "sha": "f6fb1a07a5fda2aa436f6ddf9a31025945cd67b3",
      "short_sha": "f6fb1a0",
      "message": "[Flight] Remove superfluous whitespace when console method is called with non-strings (#33953)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-23T10:07:37+02:00",
      "committed_date": "2025-07-23T10:07:37+02:00",
      "changed_files": [
        "packages/react-client/src/ReactClientConsoleConfigBrowser.js",
        "packages/react-client/src/ReactClientConsoleConfigPlain.js",
        "packages/react-client/src/ReactClientConsoleConfigServer.js",
        "packages/react-server/src/ReactServerConsoleConfigBrowser.js",
        "packages/react-server/src/ReactServerConsoleConfigPlain.js",
        "packages/react-server/src/ReactServerConsoleConfigServer.js"
      ]
    },
    {
      "sha": "7513996f20e34070141aa605fe282ca6986915a0",
      "short_sha": "7513996",
      "message": "[DevTools] Unify by using ReactFunctionLocation type instead of Source (#33955)\n\nIn RSC and other stacks now we use a lot of `ReactFunctionLocation` type\nto represent the location of a function. I.e. the location of the\nbeginning of the function (the enclosing line/col) that is represented\nby the \"Source\" of the function. This is also what the parent Component\nStacks represents.\n\nAs opposed to `ReactCallSite` which is what normal stack traces and\nowner stacks represent. I.e. the line/column number of the callsite into\nthe next function.\n\nWe can start sharing more code by using the `ReactFunctionLocation` type\nto represent the component source location and it also helps clarify\nwhich ones are function locations and which ones are callsites as we\nstart adding more stack traces (e.g. for async debug info and owner\nstack traces).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-22T10:53:08-04:00",
      "committed_date": "2025-07-22T10:53:08-04:00",
      "changed_files": [
        "packages/react-devtools-core/src/standalone.js",
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-fusebox/src/frontend.d.ts",
        "packages/react-devtools-shared/src/__tests__/utils-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/backend/utils/index.js",
        "packages/react-devtools-shared/src/backendAPI.js",
        "packages/react-devtools-shared/src/devtools/utils.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElement.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSourcePanel.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementViewSourceButton.js",
        "packages/react-devtools-shared/src/devtools/views/Components/OpenInEditorButton.js",
        "packages/react-devtools-shared/src/devtools/views/DevTools.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/SidebarEventInfo.js",
        "packages/react-devtools-shared/src/frontend/types.js",
        "packages/react-devtools-shared/src/shared/types.js",
        "packages/react-devtools-shared/src/symbolicateSource.js"
      ]
    },
    {
      "sha": "bb4418d6470b95c7d487f3b73a9dc980edff6f06",
      "short_sha": "bb4418d",
      "message": "[DevTools] Linkify Source View (#33954)\n\nThis makes it so you can click the source location itself to view the\nsource. This is similar styling as the link to jump to function props\nlike events and actions. We're going to need a lot more linkifying to\njump to various source locations. Also, I always was trying to click\nthis file anyway.\n\nHover state:\n\n<img width=\"485\" height=\"382\" alt=\"Screenshot 2025-07-21 at 4 36 10 PM\"\nsrc=\"https://github.com/user-attachments/assets/1f0f8f8c-6866-4e62-ab84-1fb5ba012986\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-21T17:36:37-04:00",
      "committed_date": "2025-07-21T17:36:37-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSourcePanel.css",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSourcePanel.js"
      ]
    },
    {
      "sha": "074e92777c22a56269647d614fdae80bf6406485",
      "short_sha": "074e927",
      "message": "Change autodeps configuration (#33800)",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-07-21T13:04:02-07:00",
      "committed_date": "2025-07-21T13:04:02-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/ValidateNoUntransformedReferences.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/TestUtils.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/envConfig-test.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.dynamic-gating-invalid-identifier-nopanic-required-feature.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.dynamic-gating-invalid-identifier-nopanic-required-feature.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn-default-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn-default-import.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.non-inlined-effect-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.non-inlined-effect-fn.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-dynamic-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-dynamic-gating.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-gating.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-import-default-property-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-import-default-property-useEffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-syntax.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.use-no-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.use-no-memo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/error.wrong-index-no-func.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/error.wrong-index-no-func.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/error.wrong-index.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/error.wrong-index.js",
        "compiler/packages/eslint-plugin-react-compiler/__tests__/ReactCompilerRule-test.ts"
      ]
    },
    {
      "sha": "ac7da9d46dbfacc6a2f5072a1b2fc9f432a857b9",
      "short_sha": "ac7da9d",
      "message": "[Flight] Make it more obvious what the short name in the I/O description represents (#33944)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-21T19:53:58+02:00",
      "committed_date": "2025-07-21T19:53:58+02:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "0dca9c247182d7fc34aae7964c0856186e7d1f42",
      "short_sha": "0dca9c2",
      "message": "[Flight] Use the Promise of the first await even if that is cut off (#33948)\n\nWe need a \"value\" to represent the I/O that was loaded. We don't\nnormally actually use the Promise at the callsite that started the I/O\nbecause that's usually deep inside internals. Instead we override the\nvalue of the I/O entry with the Promise that was first awaited in user\nspace. This means that you could potentially have different values\ndepending on if multiple things await the same I/O. We just take one of\nthem. (Maybe we should actually just write the first user space awaited\nPromise as the I/O entry? This might instead have other implications\nlike less deduping.)\n\nWhen you pass a Promise forward, we may skip the awaits that happened in\nearlier components because they're not part of the currently rendering\ncomponent. That's mainly for the stack and time stamps though. The value\nis still probably conceptually the best value because it represents the\nI/O value as far user space is concerned.\n\nThis writes the I/O early with the first await we find in user space\neven if we're not going to use that particular await for the stack.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-21T13:22:10-04:00",
      "committed_date": "2025-07-21T13:22:10-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "b9af1404eac698c943b52c466b9c2e4aff85cf70",
      "short_sha": "b9af140",
      "message": "[Flight] Use the JSX as the await stack if an await is not available (#33947)\n\nIf you pass a promise to a client component to be rendered `<Client\npromise={promise} />` then there's an internal await inside Flight.\nThere might also be user space awaits but those awaits may already have\nhappened before we render this component. Conceptually they were part of\nthe parent component and not this component. It's tricky to attribute\nwhich await should be used for the stack in this case.\n\nIf we can't find an await we can use the JSX callsite as the stack\nframe.\n\nHowever, we don't want to do this for simple cases like if you return a\nnon-native Promise from a Server Component. Since that would now use the\nstack of the thing that rendered the Server Component which is worse\nthan the stack of the I/O. To fix this, I update the\n`debugOwner`/`debugTask`/`debugStack` when we start rendering inside the\nServer Component. Conceptually these represent the \"parent\" component\nand is used for errors referring to the parent like when we serialize\nclient component props the parent is the JSX of the client component.\nHowever, when we're directly inside the Server Component we don't have a\ncallsite of the parent really. Conceptually it would be the return call\nof the Server Component. This might negatively affect other types of\nerrors but I think this is ok since this feature mainly exists for the\ncase when you enter the child JSX.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-21T13:21:17-04:00",
      "committed_date": "2025-07-21T13:21:17-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "e9638c33d7e79162516b89da31549af4090997a5",
      "short_sha": "e9638c3",
      "message": "Clean up feature flag to use lazy public instances in Fabric (#33943)\n\n## Summary\n\nWe have thoroughly tested this flag in production and proved stability\nand performance, so we can clean it up and \"ship it\".",
      "author": {
        "name": "Rubén Norte",
        "email": "rubennorte@meta.com"
      },
      "authored_date": "2025-07-21T10:27:46+01:00",
      "committed_date": "2025-07-21T10:27:46+01:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "28d4bc496b9c0dd2178caf894054ffce600311d3",
      "short_sha": "28d4bc4",
      "message": "[Flight] Make debug info and console log resolve in predictable order (#33665)\n\nThis resolves an outstanding issue where it was possible for debug info\nand console logs to become out of order if they up blocked. E.g. by a\nfuture reference or a client reference that hasn't loaded yet. Such as\nif you console.log a client reference followed by one that doesn't. This\nencodes the order similar to how the stream chunks work.\n\nThis also blocks the main chunk from resolving until the last debug info\nhas fully loaded, including future references and client references.\nThis also ensures that we could send some of that data in a different\nstream, since then it can come out of order.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-19T20:13:26-04:00",
      "committed_date": "2025-07-19T20:13:26-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "dffacc7b8094576c19790fe8341996f743ba4a89",
      "short_sha": "dffacc7",
      "message": "InferEffectDeps takes a React.AUTODEPS sigil (#33799)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33799).\n* #33800\n* __->__ #33799",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-07-17T05:31:52-07:00",
      "committed_date": "2025-07-17T05:31:52-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-granular-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-granular-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-optional-chain.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/helper-nonreactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/helper-nonreactive.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/import-namespace-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/import-namespace-useEffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/infer-deps-custom-config.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/infer-deps-custom-config.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/infer-effect-dependencies.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/infer-effect-dependencies.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/no-emit-lint-repro.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/no-emit-lint-repro.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-no-emit.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-opt-in--no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-opt-in--no-emit.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-effect-event.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-effect-event.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-ref-helper.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-ref-helper.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-ref.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-setState.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-setState.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/outlined-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/outlined-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/pruned-nonreactive-obj.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/pruned-nonreactive-obj.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-memberexpr-merge.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-memberexpr-merge.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-memberexpr.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-optional-chain-complex.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-optional-chain-complex.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-optional-chain.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-ref-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-ref-ternary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-ref.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-setState.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-setState.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-variable.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-optional-chain.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-ref-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/reactive-setState.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/reactive-setState.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/retry-no-emit.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/infer-deps-on-retry.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/infer-deps-on-retry.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/fire-and-autodeps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/fire-and-autodeps.js"
      ]
    },
    {
      "sha": "da7487b6816b19310b02bb69b35d72e3d7aed3b3",
      "short_sha": "da7487b",
      "message": "[Flight] Skip the stack frame of built-in wrappers that create or await Promises (#33798)\n\nWe already do this with `\"new Promise\"` and `\"Promise.then\"`. There are\nalso many helpers that both create promises and awaits other promises\ninside of it like `Promise.all`.\n\nThe way this is filtered is different from just filtering out all\nanonymous stacks since they're used to determine where the boundary is\nbetween ignore listed and user space.\n\nIdeally we'd cover more wrappers that are internal to Promise libraries.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-16T15:57:22-04:00",
      "committed_date": "2025-07-16T15:57:22-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "9fec565a9b9f78558323adff1013291cf46f7de7",
      "short_sha": "9fec565",
      "message": "fix: log renders from passive effects for only newly finished work (#33797)\n\nThis fixes displaying incorrect component render entries on a timeline,\nwhen we are reconnecting passive effects.\n\n### Before\n<img width=\"2318\" height=\"1127\" alt=\"1\"\nsrc=\"https://github.com/user-attachments/assets/9b6b2824-d2de-43a3-8615-2c45d67c3668\"\n/>\n\nThe cloned nodes will persist original `actualStartTime`, when these\nwere first mounted. When we \"replay\", the end time will be \"now\" or\nwhatever the actual start time of the sibling. Depending on when this is\nbeing recorded, the diff between end and start could be tens of seconds\nand doesn't represent what React was doing.\n\nWe shouldn't log these entries at all.\n\n### After\nWe are only logging newly finished renders, but could potentially loose\nrenders that never commit.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-07-16T18:09:35+01:00",
      "committed_date": "2025-07-16T18:09:35+01:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "996d0eb05596ac40209a0a82810741a01442e97e",
      "short_sha": "996d0eb",
      "message": "Allow runtime_build_and_test action to trigger manually (#33796)",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-07-16T12:41:35-04:00",
      "committed_date": "2025-07-16T12:41:35-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "d85ec5f5bd778d09214e3429e7fd043c4a152242",
      "short_sha": "d85ec5f",
      "message": "[Flight] Assume `__turbopack_load_by_url__ ` returns a cached Promise (#33792)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-16T13:20:10+02:00",
      "committed_date": "2025-07-16T13:20:10+02:00",
      "changed_files": [
        "packages/react-server-dom-turbopack/src/client/ReactFlightClientConfigBundlerTurbopack.js"
      ]
    },
    {
      "sha": "fe813143e23675963f92d25fa1fb35b39db40272",
      "short_sha": "fe81314",
      "message": "[compiler] Check TSAsExpression and TSNonNullExpression reorderability (#33788)\n\n## Summary\n\nThe `TSAsExpression` and `TSNonNullExpression` nodes are supported by\n`lowerExpression()` but `isReorderableExpression()` does not check if\nthey can be reordered. This PR updates `isReorderableExpression()` to\nhandle these two node types by adding cases that fall through to the\nexisting `TypeCastExpression` case.\n\nWe ran `react-compiler-healthcheck` at scale on several of our repos and\nfound dozens of `` (BuildHIR::node.lowerReorderableExpression)\nExpression type `TSAsExpression` cannot be safely reordered`` errors and\na handful for `TSNonNullExpression`.\n\n\n## How did you test this change?\n\nIn this case I added two fixture tests",
      "author": {
        "name": "Henry Q. Dineen",
        "email": "henryqdineen@users.noreply.github.com"
      },
      "authored_date": "2025-07-15T14:50:20-04:00",
      "committed_date": "2025-07-15T11:50:20-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ts-as-expression-default-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ts-as-expression-default-value.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ts-non-null-expression-default-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ts-non-null-expression-default-value.tsx"
      ]
    },
    {
      "sha": "2f0e7e570d3a99adc2a18e7575d1d2bb69660e1f",
      "short_sha": "2f0e7e5",
      "message": "[Flight] Don't block on debug channel if it's not wired up (#33757)\n\nReact Elements reference debug data (their stack and owner) in the debug\nchannel. If the debug channel isn't wired up this can block the client\nfrom resolving.\n\nWe can infer that if there's no debug channel wired up and the reference\nwasn't emitted before the element, then it's probably because it's in\nthe debug channel. So we can skip it.\n\nThis should also apply to debug chunks but they're not yet blocking\nuntil #33665 lands.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-15T11:45:34-04:00",
      "committed_date": "2025-07-15T11:45:34-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "56d0ddae18993eb696ab41d0fc5041948b88024a",
      "short_sha": "56d0dda",
      "message": "[Flight] Switch to `__turbopack_load_by_url__` (#33791)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-15T16:55:31+02:00",
      "committed_date": "2025-07-15T16:55:31+02:00",
      "changed_files": [
        ".eslintrc.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightClientConfigBundlerTurbopackBrowser.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightClientConfigBundlerTurbopackServer.js",
        "scripts/flow/environment.js",
        "scripts/rollup/validate/eslintrc.cjs.js",
        "scripts/rollup/validate/eslintrc.cjs2015.js",
        "scripts/rollup/validate/eslintrc.esm.js"
      ]
    },
    {
      "sha": "345ca24f13b19e81ace433ba94521c0017511af1",
      "short_sha": "345ca24",
      "message": "[Flight] Remove unused fork configs (#33785)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-15T07:23:00+02:00",
      "committed_date": "2025-07-15T07:23:00+02:00",
      "changed_files": [
        "packages/react-server-dom-turbopack/src/client/ReactFlightClientConfigBundlerNode.js"
      ]
    },
    {
      "sha": "97cdd5d3c33eda77be4f96a43f72d6916d3badbb",
      "short_sha": "97cdd5d",
      "message": "[eslint] Do not allow useEffectEvent fns to be called in arbitrary closures (#33544)\n\nSummary:\n\nuseEffectEvent is meant to be used specifically in combination with\nuseEffect, and using\nthe feature in arbitrary closures can lead to surprising reactivity\nsemantics. In order to\nminimize risk in the experimental rollout, we are going to restrict its\nusage to being\ncalled directly inside an effect or another useEffectEvent, effectively\nenforcing the function\ncoloring statically. Without an effect system this is the best we can\ndo.",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-07-10T16:51:12-04:00",
      "committed_date": "2025-07-10T16:51:12-04:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js",
        "packages/eslint-plugin-react-hooks/src/rules/RulesOfHooks.ts"
      ]
    },
    {
      "sha": "eb7f8b42c92ed804bbf7f700d2bdda276d591007",
      "short_sha": "eb7f8b4",
      "message": "[Flight] Add Separate Outgoing Debug Channel (#33754)\n\nThis lets us pass a writable on the server side and readable on the\nclient side to send debug info through a separate channel so that it\ndoesn't interfere with the main payload as much. The main payload refers\nto chunks defined in the debug info which means it's still blocked on it\nthough. This ensures that the debug data has loaded by the time the\nvalue is rendered so that the next step can forward the data.\n\nThis will be a bit fragile to race conditions until #33665 lands.\nAnother follow up needed is the ability to skip the debug channel on the\nreceiving side. Right now it'll block forever if you don't provide one\nsince we're blocking on the debug data.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-10T16:22:44-04:00",
      "committed_date": "2025-07-10T16:22:44-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-markup/src/ReactMarkupServer.js",
        "packages/react-noop-renderer/src/ReactNoopFlightClient.js",
        "packages/react-server-dom-esm/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-esm/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-esm/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "eed25607629f5e67f13f53e91edec12b3388559f",
      "short_sha": "eed2560",
      "message": "[Flight] Treat empty message as a close signal (#33756)\n\nWe typically treat an empty message as closing the debug channel stream\nbut for the Noop renderer we don't use an intermediate stream but just\npass the message through.\n\n\nhttps://github.com/facebook/react/blob/bbc13fa17be8eebef3e6ee47f48c76c0c44e2f36/packages/react-server-dom-webpack/src/client/ReactFlightDOMClientBrowser.js#L59-L60\n\nFor that simple case we should just treat it as a close without an\nintermediate stream.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-10T16:16:57-04:00",
      "committed_date": "2025-07-10T16:16:57-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "463b808176ad7c9429a4981bb45a1da225fd4b85",
      "short_sha": "463b808",
      "message": "[Fizz] Reset the segent id assignment when postponing the root (#33755)\n\nWhen postponing the root we encode the segment Id into the postponed\nstate but we should really be reseting it to zero so we can restart the\ncounter from the beginning when the resume is actually just a re-render.\n\nThis also no longer assigns the root segment id based on the postponed\nstate when resuming the root for the same reason. In the future we may\nuse the embedded replay segment id if we implement resuming the root\nwithout re-rendering everything but that is not yet implemented or\nplanned.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-07-10T12:12:09-07:00",
      "committed_date": "2025-07-10T12:12:09-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "96c61b7f1f145b9fe5103051b636959cdeb20cc8",
      "short_sha": "96c61b7",
      "message": "[compiler] Add CompilerError.UnsupportedJS variant (#33750)\n\nWe use this variant for syntax we intentionally don't support: with\nstatements, eval, and inline class declarations.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33750).\n* #33753\n* #33752\n* #33751\n* __->__ #33750\n* #33748",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-09T22:24:20-07:00",
      "committed_date": "2025-07-09T22:24:20-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/CompilerError.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-eval-unsupported.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-kitchensink.expect.md"
      ]
    },
    {
      "sha": "0bfa404bacbad78af5b39c080ba67535f2e53044",
      "short_sha": "0bfa404",
      "message": "[compiler] More precise errors for invalid import/export/namespace statements (#33748)\n\nimport, export, and TS namespace statements can only be used at the\ntop-level of a module, which is enforced by parsers already. Here we add\na backup validation of that. As of this PR, we now have only major\nstatement type (class declarations) listed as a todo.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33748).\n* #33753\n* #33752\n* #33751\n* #33750\n* __->__ #33748",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-09T22:24:07-07:00",
      "committed_date": "2025-07-09T22:24:07-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts"
      ]
    },
    {
      "sha": "81e1ee7476a68fdf13c63d3002e5ef1b699b6842",
      "short_sha": "81e1ee7",
      "message": "[compiler] Support inline enums (flow/ts), type declarations (#33747)\n\nSupports inline enum declarations in both Flow and TS by treating the\nnode as pass-through (enums can't capture values mutably). Related, this\nPR extends the set of type-related declarations that we ignore.\nPreviously we threw a todo for things like DeclareClass or\nDeclareVariable, but these are type related and can simply be dropped\njust like we dropped TypeAlias.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33747).\n* #33753\n* #33752\n* #33751\n* #33750\n* #33748\n* __->__ #33747",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-09T22:21:02-07:00",
      "committed_date": "2025-07-09T22:21:02-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneNonEscapingScopes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/flow-enum-inline.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/flow-enum-inline.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ts-enum-inline.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ts-enum-inline.tsx"
      ]
    },
    {
      "sha": "4a3ff8eed65f96cda7617150f92de3544d5ddf6a",
      "short_sha": "4a3ff8e",
      "message": "[compiler] Errors for eval(), with statments, class declarations (#33746)\n\n* Error for `eval()`\n* More specific error message for `with (expr) { ... }` syntax\n* More specific error message for class declarations\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33746).\n* #33752\n* #33751\n* #33750\n* #33748\n* #33747\n* __->__ #33746",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-09T22:18:30-07:00",
      "committed_date": "2025-07-09T22:18:30-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-eval-unsupported.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-eval-unsupported.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-kitchensink.expect.md"
      ]
    },
    {
      "sha": "ec4374c3872b320af60f322289c30cd3d7066bdf",
      "short_sha": "ec4374c",
      "message": "[compiler] Show logged errors in playground (#33740)\n\nIn playground it's helpful to show all errors, even those that don't\ncompletely abort compilation. For example, to help demonstrate that the\ncompiler catches things like setState in effects. This detects these\nerrors and ensures we show them.",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-09T12:22:49-04:00",
      "committed_date": "2025-07-09T09:22:49-07:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx"
      ]
    },
    {
      "sha": "60b5271a9ad0e9eec2489b999ce774d39d09285b",
      "short_sha": "60b5271",
      "message": "[Flight] Call finishHaltedTask on sync aborted tasks in stream abort listeners (#33743)\n\nThis is the same as we do for currently rendering tasks. They get\neffectively sync aborted when the listener is invoked.\n\nWe potentially miss out on some debug info in that case but that would\nonly apply to any entries inside the stream which doesn't really have\ntheir own debug info anyway.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-09T10:43:56-04:00",
      "committed_date": "2025-07-09T10:43:56-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "033edca72199f5b0dac87e4662b6a4d32a9610ce",
      "short_sha": "033edca",
      "message": "[Flight] Yolo Retention of Promises (#33737)\n\nFollow up to #33736.\n\nIf we need to save on CPU/memory pressure, we can instead just pray and\nhope that a Promise doesn't get garbage collected before we need to read\nit.\n\nThis can cause fragile access to the Promise value in devtools\nespecially if it's a slow and pressured render.\n\nBasically, you'd have to hope that GC doesn't run after the inner await\nfinishes its microtask callback and before the resolution of the\ncomponent being rendered is invoked.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-09T10:39:08-04:00",
      "committed_date": "2025-07-09T10:39:08-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js"
      ]
    },
    {
      "sha": "e6dc25daea3d949fa5eae3bdffb8b6b79e30fc82",
      "short_sha": "e6dc25d",
      "message": "[Flight] Always defer Promise values if they're not already resolved (#33742)\n\nIf we have the ability to lazy load Promise values, i.e. if we have a\ndebug channel, then we should always use it for Promises that aren't\nalready resolved and instrumented.\n\nThere's little downside to this since they're async anyway.\n\nThis also lets us avoid adding `.then()` listeners too early. E.g. if\nadding the listener would have side-effect. This avoids covering up\n\"unhandled rejection\" errors. Since if we listen to a promise eagerly,\nincluding reject listeners, we'd have marked that Promise's rejection as\nhandled where as maybe it wouldn't have been otherwise.\n\nIn this mode we can also indefinitely wait for the Promise to resolve\ninstead of just waiting a microtask for it to resolve.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-09T09:08:27-04:00",
      "committed_date": "2025-07-09T09:08:27-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "150f022444466266bc09302b8fd47c3e4ce4d791",
      "short_sha": "150f022",
      "message": "[Flight] Ignore async stack frames when determining if a Promise was created from user space (#33739)\n\nWe use the stack of a Promise as the start of the I/O instead of the\nactual I/O since that can symbolize the start of the operation even if\nthe actual I/O is batched, deduped or pooled. It can also group multiple\nI/O operations into one.\n\nWe want the deepest possible Promise since otherwise it would just be\nthe Component's Promise.\n\nHowever, we don't really need deeper than the boundary between first\nparty and third party. We can't just take the outer most that has third\nparty things on the stack though because third party can have callbacks\ninto first party and then we want the inner one. So we take the inner\nmost Promise that depends on I/O that has a first party stack on it.\n\nThe realization is that for the purposes of determining whether we have\na first party stack we need to ignore async stack frames. They can\nappear on the stack when we resume third party code inside a resumption\nframe of a first party stack.\n\n<img width=\"832\" alt=\"Screenshot 2025-07-08 at 6 34 25 PM\"\nsrc=\"https://github.com/user-attachments/assets/1636f980-be4c-4340-ad49-8d2b31953436\"\n/>\n\n---------\n\nCo-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-09T09:08:09-04:00",
      "committed_date": "2025-07-09T09:08:09-04:00",
      "changed_files": [
        "fixtures/flight/server/region.js",
        "fixtures/flight/src/App.js",
        "fixtures/flight/src/library.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightStackConfigV8.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "49ded1d12a4c2771f4fa6e4592de2f97184700a9",
      "short_sha": "49ded1d",
      "message": "[Flight] Optimize Retention of Weak Promises Abit (#33736)\n\nWe don't really need to retain a reference to whatever Promise another\nPromise was created in. Only awaits need to retain both their trigger\nand their previous context.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-09T09:07:06-04:00",
      "committed_date": "2025-07-09T09:07:06-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js"
      ]
    },
    {
      "sha": "3a43e72d665af98b62d9c3c54bd288597dd27e6e",
      "short_sha": "3a43e72",
      "message": "[Flight] Create a fast path parseStackTrace which skips generating a string stack (#33735)\n\nWhen we know that the object that we pass in is immediately parsed, then\nwe know it couldn't have been reified into a unstructured stack yet. In\nthis path we assume that we'll trigger `Error.prepareStackTrace`.\n\nSince we know that nobody else will read the stack after us, we can skip\ngenerating a string stack and just return empty. We can also skip\ncaching.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-09T09:06:55-04:00",
      "committed_date": "2025-07-09T09:06:55-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js",
        "packages/react-server/src/ReactFlightStackConfigV8.js"
      ]
    },
    {
      "sha": "8ba3501cd9c982676fab35f1c8092302060d728c",
      "short_sha": "8ba3501",
      "message": "[Flight] Don't dedupe references to deferred objects (#33741)\n\nIf we're about to defer an object, then we shouldn't store a reference\nto it because then we can end up deduping by referring to the deferred\nstring. If in a different context, we should still be able to emit the\nobject.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-08T21:47:33-04:00",
      "committed_date": "2025-07-08T21:47:33-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "956d770adf59e1f8a00a7b7c52b5727ef9e353e7",
      "short_sha": "956d770",
      "message": "[compiler] Improve IIFE inlining (#33726)\n\nWe currently inline IIFEs by creating a temporary and a labeled block w\nthe original code. The original return statements turn into an\nassignment to the temporary and break out of the label. However, many\ncases of IIFEs are due to inlining of manual `useMemo()`, and these\ncases often have only a single return statement. Here, the output is\ncleaner if we avoid the temporary and label - so that's what we do in\nthis PR.\n\nNote that the most complex part of the change is actually around\nValidatePreserveExistingMemo - we have some logic to track the IIFE\ntemporary reassignmetns which needs to be updated to handle the simpler\nversion of inlining.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33726).\n* __->__ #33726\n* #33725",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-08T19:36:57-04:00",
      "committed_date": "2025-07-08T16:36:57-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InlineImmediatelyInvokedFunctionExpressions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneNonEscapingScopes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/align-scopes-iife-return-modified-later-logical.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-modify-global-in-callback-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/babel-existing-react-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/babel-existing-react-kitchensink-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/babel-existing-react-namespace-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/babel-existing-react-runtime-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/block-scoping-switch-variable-scoping.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife-reassign.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife-storeprop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/consecutive-use-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/context-variable-as-jsx-element-tag.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/deeply-nested-function-expressions-with-params.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/drop-methodcall-usememo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/existing-variables-with-c-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fast-refresh-dont-refresh-const-changes-prod.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fast-refresh-refresh-on-const-changes-dev.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fast-refresh-reloading.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-repro-invalid-mutable-range-destructured-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/for-of-nonmutating-loop-local-collection.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/function-expression-prototype-call-mutating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hooks-with-prefix.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/iife-return-modified-later.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/use-memo-returned.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nested-function-with-param-as-captured-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-identity-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-identity.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-control-flow-sensitive-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-transitivity-createfrom-capture-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-add-captured-array-to-itself.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-createfrom-capture.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-phi-assign-or-capture.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/typed-identity-function-frozen-input.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useMemo-reordering-depslist-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-inverted-optionals-parallel-paths.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/maybe-invalid-useMemo-no-memoblock-sideeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/prune-nonescaping-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/todo-ensure-constant-prop-decls-get-removed.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-alias-property-load-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-conditional-access-alloc.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-conditional-access-noAlloc.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-constant-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-dep-array-literal-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-in-other-reactive-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-infer-fewer-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-infer-more-specific.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-infer-nonallocating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-infer-scope-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-inner-decl.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-invoke-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-controlflow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-with-no-depslist.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-inverted-optionals-parallel-paths.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/props-method-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/recursive-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reordering-across-blocks.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-memoization-lack-of-phi-types-explicit-types.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-memoization-lack-of-phi-types.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-no-declarations-in-reactive-scope-with-early-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-renaming-conflicting-decls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-log-default-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-log.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-store-capture-namespace-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-store-capture.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-operator-call-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-operator-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-operator-method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useEffect-global-pruned.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useEffect-namespace-pruned.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-independently-memoizeable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-labeled-statement-unconditional-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-logical.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-mabye-modified-free-variable-dont-preserve-memoization-guarantees.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-mabye-modified-free-variable-preserve-memoization-guarantees.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-maybe-modified-later-dont-preserve-memoization-guarantees.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-maybe-modified-later-preserve-memoization-guarantees.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-nested-ifs.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-return-empty.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-simple.expect.md"
      ]
    },
    {
      "sha": "d35fef9e21100463b0bfecb975e9d9eca45c963f",
      "short_sha": "d35fef9",
      "message": "[compiler] Fix for consecutive DCE'd branches with phis (#33725)\n\nThis is an optimized version of @asmjmp0's fix in\nhttps://github.com/facebook/react/pull/31940. When we merge consecutive\nblocks we need to take care to rewrite later phis whose operands will\nnow be different blocks due to merging. Rather than iterate all the\nblocks on each merge as in #31940, we can do a single iteration over all\nthe phis at the end to fix them up.\n\nNote: this is a redo of #31959\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33725).\n* #33726\n* __->__ #33725",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-07-08T19:36:47-04:00",
      "committed_date": "2025-07-08T16:36:47-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/MergeConsecutiveBlocks.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-phi-after-dce-merge-scopes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-phi-after-dce-merge-scopes.js"
      ]
    },
    {
      "sha": "a7a116577daf3b135c226ed9db8a8c2f9166c023",
      "short_sha": "a7a1165",
      "message": "[Flight] Don't track Promise stack if there's no owner (#33734)\n\nThis is a compromise because there can be a lot of Promise instances\ncreated. They're useful because they generally provide a better stack\nwhen batching/pooled connections are used.\n\nThis restores stack collection for I/O nodes so we have something to\nfallback on if there's no owner.\n\nThat way we can at least get a name or something out of I/O that was\nspawned outside a render but mostly avoids collecting starting I/O\noutside of render.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-08T13:02:29-04:00",
      "committed_date": "2025-07-08T13:02:29-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightAsyncSequence.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js"
      ]
    },
    {
      "sha": "777264b4ef52797f63d0ed3e9e21b66b7ae6780e",
      "short_sha": "777264b",
      "message": "[Flight] Fix stack getting object limited (#33733)\n\nBecause the object limit is unfortunately depth first due to limitations\nof JSON stringify, we need to ensure that things we really don't want\noutlined are first in the enumeration order.\n\nWe add the stack length to the object limit to ensure that the stack\nframes aren't outlined. In console all the user space arguments are at\nthe end of the args. In server component props, the props are at the end\nof the properties of the element.\n\nFor the `value` of I/O we had it before the stack so it could steal the\nlimit from the stack. The fix is to put it at the end.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-08T12:54:29-04:00",
      "committed_date": "2025-07-08T12:54:29-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "befc1246b07a04b401bc6e914b7f336a442dca1a",
      "short_sha": "befc124",
      "message": "[Fizz] Render preamble eagerly (#33730)\n\nWe unnecessarily render the preamble in a task. This updates the\nimplementation to perform this render inline.\n\nTesting this is tricky because one of the only ways you could assert\nthis was even happening is based on how things error if you abort while\nrendering the root.\n\nWhile adding a test for this I discovered that not all abortable tasks\nreport errors when aborted during a normal render. I've asserted the\ncurrent behavior and will address the other issue at another time and\nupdated the assertion later as necessary",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-07-08T11:20:12-04:00",
      "committed_date": "2025-07-08T08:20:12-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "bbea677b77ebf5d696623e2f634c69744eaf9d86",
      "short_sha": "bbea677",
      "message": "[Flight] Lazy load objects from the debug channel (#33728)\n\nWhen a debug channel is available, we now allow objects to be lazily\nrequested though the debug channel and only then will the server send\nit.\n\nThe client will actually eagerly ask for the next level of objects once\nit parses its payload. That way those objects have likely loaded by the\ntime you actually expand that deep e.g. in the console repl. This is\nneeded since the console repl is synchronous when you ask it to invoke\ngetters.\n\nEach level is lazily parsed which means that we don't parse the next\nlevel even though we eagerly loaded it. We parse it once the getter is\ninvoked (in Chrome DevTools you have to click a little `(...)` to invoke\nthe getter). When the getter is invoked, the chunk is initialized and\nparsed. This then causes the next level to be asked for through the\ndebug channel. Ensuring that if you expand one more level you can do so\nsynchronously.\n\nCurrently debug chunks are eagerly parsed, which means that if you have\nthings like server component props that are lazy they can end up being\nimmediately asked for, but I'm trying to move to make the debug chunks\nlazy.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-08T10:49:25-04:00",
      "committed_date": "2025-07-08T10:49:25-04:00",
      "changed_files": [
        "fixtures/flight/src/App.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "f1ecf82bfb5fdfa5d1c3aedcf114415fc29bd2da",
      "short_sha": "f1ecf82",
      "message": "[Flight] Optimize Async Stack Collection (#33727)\n\nWe need to optimize the collection of debug info for dev mode. This is\nan incredibly hot path since it instruments all I/O and Promises in the\napp.\n\nThese optimizations focus primarily on the collection of stack traces.\nThey are expensive to collect because we need to eagerly collect the\nstacks since they can otherwise cause memory leaks. We also need to do\nsome of the processing of them up front. We also end up only using a few\nof them in the end but we don't know which ones we'll use.\n\nThe first compromise here is that I now only collect the stacks of\n\"awaits\" if they were in a specific request's render. In some cases it's\nuseful to collect them even outside of this if they're part of a\nsequence that started early. I still collect stacks for the created\nPromises outside of this though which can still provide some context.\n\nThe other optimization to awaits, is that since we'll only use the inner\nmost one that had an await directly in userspace, we can stop collecting\nstacks on a chain of awaits after we find one. This requires a quick\nfilter on a single callsite to determine. Since we now only collect\nstacks from awaits that belongs to a specific Request we can use that\nrequest's specific filter option. Technically this might not be quite\ncorrect if that same thing ends up deduped across Requests but that's an\nedge case.\n\nAdditionally, I now stop collecting stack for I/O nodes. They're almost\nalways superseded by the Promise that wraps them anyway. Even if you\nwrite mostly Promise free code, you'll likely end up with a Promise at\nthe root of the component eventually anyway and then you end up using\nits stack anyway. You have to really contort the code to end up with\nzero Promises at which point it's not very useful anyway. At best it's\nmaybe mostly useful for giving a name to the I/O when the rest is just\nstuff like `new Promise`.\n\nHowever, a possible alternative optimization could be to *only* collect\nthe stack of spawned I/O and not the stack of Promises. The issue with\nPromises (not awaits) is that we never know what will end up resolving\nthem in the end when they're created so we have to always eagerly\ncollect stacks. This could be an issue when you have a lot of\nabstractions that end up not actually be related to I/O at all. The\nissue with collecting stacks only for I/O is that the actual I/O can be\npooled or batched so you end up not having the stack when the conceptual\nstart of each operation within the batch started. Which is why I decided\nto keep the Promise stack.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-08T10:49:08-04:00",
      "committed_date": "2025-07-08T10:49:08-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightAsyncSequence.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "b44a99bf58d69d52b5288d9eadcc6d226d705e11",
      "short_sha": "b44a99b",
      "message": "[Fiber] Name content inside \"Suspense fallback\" (#33724)\n\nSame as #33723 but for Fiber.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-08T00:00:00-04:00",
      "committed_date": "2025-07-08T00:00:00-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberComponentStack.js",
        "packages/react-reconciler/src/__tests__/ReactErrorStacks-test.js"
      ]
    },
    {
      "sha": "e4314a0a0f6ea1ab8f739c9119583d148c1be657",
      "short_sha": "e4314a0",
      "message": "[tests] Assert on component stack for Maximum Update error (#33686)\n\nGood to assert these include the component stack",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-07-07T13:58:03-04:00",
      "committed_date": "2025-07-07T13:58:03-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactUpdates-test.js"
      ]
    },
    {
      "sha": "e43986f1f3e6e94f7eef86fb21c830959e0ade6c",
      "short_sha": "e43986f",
      "message": "Finally remove favorSafetyOverHydrationPerf (#33619)\n\nThis is rolled out to 100%.\n\nLet me merge it though.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-07-07T13:57:51-04:00",
      "committed_date": "2025-07-07T13:57:51-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMUseId-test.js",
        "packages/react-dom/src/__tests__/ReactRenderDocument-test.js",
        "packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js",
        "packages/react-dom/src/__tests__/utils/ReactDOMServerIntegrationTestUtils.js",
        "packages/react-reconciler/src/ReactFiberHydrationContext.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "c932e457800f077352b1b322f14a796e589299fb",
      "short_sha": "c932e45",
      "message": "[Fizz] Name content inside \"Suspense fallback\" (#33723)\n\nContent in Suspense fallbacks are really not considered part of the\nSuspense but since it does have some behavior it should be marked\nsomehow separately from the Suspense content.\n\nA follow up would be to do the same in Fiber.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-07T13:48:33-04:00",
      "committed_date": "2025-07-07T13:48:33-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "223f81d87728cdc843baa4fc5704c2f3b66fbd45",
      "short_sha": "223f81d",
      "message": "[Flight] Flush performance track once we have no more pending chunks (#33719)\n\nStacked on #33718. Alternative to #33716.\n\nThe issue with flushing the Server Components track in its current form\nis that we need to decide how long to wait before flushing whatever we\nhave. That's because the root's end time will be determined by the end\ntime of that last child.\n\nHowever, if a child isn't actually used then we don't necessarily need\nto include it in the Server Components track since it wasn't blocking\nthe initial render.\n\nThis waits for 100ms after the last pending chunk is resolved and if\nnothing is invoking any more lazy initializers after that then we log\nthe Server Components track with the information we have at that point.\nWe also don't eagerly initialize any chunks that wasn't already\ninitialized so if nothing was rendered, then nothing will be logged.\n\nThis is somewhat an artifact of the current visualization. If we did\nanother transposed form we wouldn't necessarily need to wait until the\nend and can log things as they're discovered.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-07T11:42:30-04:00",
      "committed_date": "2025-07-07T11:42:30-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "8a6c589be74a389e62a996e74f8777ccd2a237ac",
      "short_sha": "8a6c589",
      "message": "[Flight] Keep a separate ref count for debug chunks (#33717)\n\nSame as #33716 but without the separate close signal.\n\nWe'll need the ref count for separate debug channel anyway but I'm not\nsure we'll need the separate close signal.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-07T11:42:20-04:00",
      "committed_date": "2025-07-07T11:42:20-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "7cafeff340f44fff840b332d3463533dc2d3734b",
      "short_sha": "7cafeff",
      "message": "[Flight] Close Debug Channel when All Lazy References Have Been GC:ed (#33718)\n\nWhen we have a debug channel open that can ask for more objects. That\ndoesn't close until all lazy objects have been explicitly asked for. If\nyou GC an object before the lazy references inside of it before asking\nfor or releasing the objects, then it'll never close.\n\nThis ensures that if there are no more PendingChunk and no more\nResolvedModelChunk then we can close the connection.\n\nThere's two sources of retaining the Response object. On one side we\nhave a handle to it from the stream coming from the server. On the other\nside we have a handle to it from ResolvedModelChunk to ask for more data\nwhen we lazily parse a model.\n\nThis PR makes a weak handle from the stream to the Response. However, it\nkeeps a strong reference alive whenever we're waiting on a pending chunk\nbecause then the stream might be the root if the only listeners are the\ncallbacks passed to the promise and no references to the promise itself.\n\nThe pending chunks count can end up being zero even if we might get more\ndata because the references might be inside lazy chunks. In this case\nthe lazy chunks keeps the Response alive. When the lazy chunk gets\nparsed it can find more chunks that then end up pending to keep the\nresponse strongly alive until they resolve.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-07T11:28:15-04:00",
      "committed_date": "2025-07-07T11:28:15-04:00",
      "changed_files": [
        "fixtures/flight/src/index.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js"
      ]
    },
    {
      "sha": "0378b46e7e4c5c15ac57308e2894b6d78d5fb488",
      "short_sha": "0378b46",
      "message": "[Flight] Include I/O not awaited in user space (#33715) \n\nIf I/O is not awaited in user space in a \"previous\" path we used to just\ndrop it on the floor. There's a few strategies we could apply here. My\nfirst commit just emits it without an await but that would mean we don't\nhave an await stack when there's no I/O in a follow up.\n\nI went with a strategy where the \"previous\" I/O is used only if the\n\"next\" didn't have I/O. This may still drop I/O on the floor if there's\ntwo back to back within internals for example. It would only log the\nfirst one even though the outer await may have started earlier.\n\nIt may also log deeper in the \"next\" path if that had user space stacks\nand then the outer await will appear as if it awaited after.\n\nSo it's not perfect.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-07T10:33:27-04:00",
      "committed_date": "2025-07-07T10:33:27-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "bb402876f7413ae2e6809ad442405a5a90c69b45",
      "short_sha": "bb40287",
      "message": "[Flight] Pass line/column to `filterStackFrame` (#33707)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-07T13:51:53+02:00",
      "committed_date": "2025-07-07T13:51:53+02:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "9a645e1d1027962047d2b6b26af12357203784c9",
      "short_sha": "9a645e1",
      "message": "[Flight] Ignore \"new Promise\" and async_hooks even if they're not ignore listed (#33714)\n\nThese are part of the internals of Promises and async functions even if\nanonymous functions are otherwise not ignore listed.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-06T17:05:15-04:00",
      "committed_date": "2025-07-06T17:05:15-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "2d7f0c425902d13617f5c02c1b7c0f2cd95cd6d9",
      "short_sha": "2d7f0c4",
      "message": "[Flight] Insert an extra await node for awaiting on the promise returned by then callback (#33713)\n\nWhen a `.then()` callback returns another Promise, there's effectively\nanother \"await\" on that Promise that happens in the internals but that\nwas not modeled. In effect the Promise returned by `.then()` is blocked\non both the original Promise AND the promise returned by the callback.\n\nThis models that by cloning the original node and treat that as the\nawait on the original Promise. Then we use the existing Node to await\nthe new Promise but its \"previous\" points to the clone. That way we have\na forked node that awaits both.\n\n---------\n\nCo-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-06T15:34:36-04:00",
      "committed_date": "2025-07-06T15:34:36-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "4aad5e45bafe213cf2993614633d5f8d22d5d793",
      "short_sha": "4aad5e4",
      "message": "[Flight] Consistent format of virtual `rsc:` sources (#33706)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-07-06T09:45:43+02:00",
      "committed_date": "2025-07-06T09:45:43+02:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "453a19a107d02dbcde1f722361918db24426de64",
      "short_sha": "453a19a",
      "message": "[Flight] Collect Debug Info from Rejections in Aborted Render (#33708)\n\nThis delays the abort by splitting the abort into a first step that just\nflags a task as abort and tracks the time that we aborted. This first\nstep also invokes the `cacheSignal()` abort handler.\n\nThen in a macrotask do we finish flushing the abort (or halt). This\nensures that any microtasks after the abort signal can finish flushing\nwhich may emit rejections or fulfill (e.g. if you try/catch the abort or\nif it was allSettled). These rejections are themselves signals for which\npromise was blocked on what promise which forms a graph that we can use\nfor debug info. Notably this doesn't include any additional data in the\noutput since we don't include any data produced after the abort. It just\nuses the additional execution to collect more debug info.\n\nThe abort itself might not have been spawned from I/O but it's still\ninteresting to mark Promises that aborted as interesting since they may\nhave been blocked on I/O. So we take the inner most Promise that\nresolved after the end time (presumably due to the abort signal but also\ncould've just finished after but that's still after the abort).\n\nSince the microtasks can spawn new Promises after the ones that reject\nwe ignore any of those that started after the abort.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-05T17:01:41-04:00",
      "committed_date": "2025-07-05T17:01:41-04:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "5d87cd224452c68d09bef99656b6261e9772a210",
      "short_sha": "5d87cd2",
      "message": "React DevTools 6.1.4 -> 6.1.5 (#33702)\n\nSame as 6.1.4, but with 2 hotfixes:\n* fix: check if profiling for all profiling hooks\n([hoxyq](https://github.com/hoxyq) in\n[#33701](https://github.com/facebook/react/pull/33701))\n* fix: fallback to reading string stack trace when failed\n([hoxyq](https://github.com/hoxyq) in\n[#33700](https://github.com/facebook/react/pull/33700))",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-07-04T16:31:00+01:00",
      "committed_date": "2025-07-04T16:31:00+01:00",
      "changed_files": [
        "packages/react-devtools-core/package.json",
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-inline/package.json",
        "packages/react-devtools-timeline/package.json",
        "packages/react-devtools/CHANGELOG.md",
        "packages/react-devtools/package.json"
      ]
    },
    {
      "sha": "5f71eed2ebade22ffd374d291b2a21d94c35ffa7",
      "short_sha": "5f71eed",
      "message": "[devtools] fix: check if profiling for all profiling hooks (#33701)\n\nFollow-up to https://github.com/facebook/react/pull/33652.\n\nDon't know how the other were missed. Double-checked that Profiler works\nin dev mode.\n\nNow all hooks start with `!isProfiling` check and return, if true.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-07-04T16:21:51+01:00",
      "committed_date": "2025-07-04T16:21:51+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/profilingHooks.js"
      ]
    },
    {
      "sha": "455424dbf3d46d7e9326a64409de063e8f768848",
      "short_sha": "455424d",
      "message": "[devtools] fix: fallback to reading string stack trace when failed (#33700)\n\nDiscovered while testing with Hermes.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-07-04T15:36:52+01:00",
      "committed_date": "2025-07-04T15:36:52+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/utils/index.js"
      ]
    },
    {
      "sha": "9fd4c09d6887ccd5d8a6fe69673cd89338172b5f",
      "short_sha": "9fd4c09",
      "message": "React DevTools 6.1.3 -> 6.1.4 (#33699)\n\nChanges from 6.1.3:\n* feat: static Components panel layout\n([hoxyq](https://github.com/hoxyq) in\n[#33696](https://github.com/facebook/react/pull/33696))\n* fix: support optionality of structured stack trace function name\n([hoxyq](https://github.com/hoxyq) in\n[#33697](https://github.com/facebook/react/pull/33697))\n* fix: rename bottom stack frame ([hoxyq](https://github.com/hoxyq) in\n[#33680](https://github.com/facebook/react/pull/33680))",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-07-04T12:55:53+01:00",
      "committed_date": "2025-07-04T12:55:53+01:00",
      "changed_files": [
        "packages/react-devtools-core/package.json",
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-inline/package.json",
        "packages/react-devtools-timeline/package.json",
        "packages/react-devtools/CHANGELOG.md",
        "packages/react-devtools/package.json"
      ]
    },
    {
      "sha": "d45db667d4509a5d82d4509e4aa51fdb266aa136",
      "short_sha": "d45db66",
      "message": "feat: static Components panel layout (#33696)\n\n## Summary\n\nFollow-up to https://github.com/facebook/react/pull/33517.\n\nWith https://github.com/facebook/react/pull/33517, we now preserve at\nleast some minimal indent. This actually doesn't work with the current\nsetup, because we don't allow the container to overflow, so basically\ndeeply nested elements will go off the screen.\n\nWith these changes, we completely change the approach:\n- The layout will be static and it will have a constant indentation that\nwill always be preserved.\n- The container will allow overflows, so users will be able to scroll\nhorizontally and vertically.\n- We will implement automatic horizontal and vertical scrolls, if\nselected element is not in a viewport.\n- New: added vertical delimiter that can be used for simpler visual\nnavigation.\n\n## Demo\n### Current public release\n\nhttps://github.com/user-attachments/assets/58645d42-c6b8-408b-b76f-95fb272f2e1e\n\n### With https://github.com/facebook/react/pull/33517 \n\nhttps://github.com/user-attachments/assets/845285c8-5a01-4739-bcd7-ffc089e771bf\n\n### This PR\n\nhttps://github.com/user-attachments/assets/72086b84-8d84-4626-94b3-e22e114e028e",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-07-04T12:29:19+01:00",
      "committed_date": "2025-07-04T12:29:19+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/store.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Components.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Element.css",
        "packages/react-devtools-shared/src/devtools/views/Components/Element.js",
        "packages/react-devtools-shared/src/devtools/views/Components/SelectedTreeHighlight.css",
        "packages/react-devtools-shared/src/devtools/views/Components/SelectedTreeHighlight.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.css",
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.js"
      ]
    },
    {
      "sha": "3fc1bc6f28bec1742b5f07d23148f25927e21d41",
      "short_sha": "3fc1bc6",
      "message": "[devtools] fix: support optionality of structured stack trace function name (#33697)\n\nFollow-up to https://github.com/facebook/react/pull/33680.\n\nTurns out `.getFunctionName` not always returns string.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-07-04T10:32:09+01:00",
      "committed_date": "2025-07-04T10:32:09+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/utils/index.js"
      ]
    },
    {
      "sha": "ef8b6fa257aba6c4a07b5cdb152859704aa045bc",
      "short_sha": "ef8b6fa",
      "message": "[Flight] Don't double badge consoles that are replayed from a third party (#33685)\n\nIf a FlightClient runs inside a FlightServer like fetching from a third\nparty and that logs, then we currently double badge them since we just\nadd on another badge. The issue is that this might be unnecessarily\nnoisy but we also transfer the original format of the current server\ninto the second badge.\n\nThis extracts our own badge and then adds the environment name as\nstructured data which lets the client decide how to format it.\n\nBefore:\n\n<img width=\"599\" alt=\"Screenshot 2025-07-02 at 2 30 07 PM\"\nsrc=\"https://github.com/user-attachments/assets/4bf26a29-b3a8-4024-8eb9-a3f90dbff97a\"\n/>\n\nAfter:\n\n<img width=\"590\" alt=\"Screenshot 2025-07-02 at 2 32 56 PM\"\nsrc=\"https://github.com/user-attachments/assets/f06bbb6d-fbb1-4ae6-b0e3-775849fe3c53\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-02T18:22:14-04:00",
      "committed_date": "2025-07-02T18:22:14-04:00",
      "changed_files": [
        "packages/react-client/src/ReactClientConsoleConfigBrowser.js",
        "packages/react-client/src/ReactClientConsoleConfigPlain.js",
        "packages/react-client/src/ReactClientConsoleConfigServer.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactServerConsoleConfigBrowser.js",
        "packages/react-server/src/ReactServerConsoleConfigPlain.js",
        "packages/react-server/src/ReactServerConsoleConfigServer.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.custom.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-browser-esm.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-browser-parcel.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-browser-turbopack.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-browser.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-bun.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-edge-parcel.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-edge-turbopack.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-edge.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-legacy.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node-esm.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node-parcel.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node-turbopack.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.markup.js"
      ]
    },
    {
      "sha": "0b78161d7d76b7fb9786f25dd222010b9e417191",
      "short_sha": "0b78161",
      "message": "[Fiber] Highlight a Component with Deeply Equal Props in the Performance Track (#33660)\n\nStacked on #33658 and #33659.\n\nIf we detect that a component is receiving only deeply equal objects,\nthen we highlight it as potentially problematic and worth looking into.\n\n<img width=\"1055\" alt=\"Screenshot 2025-06-27 at 4 15 28 PM\"\nsrc=\"https://github.com/user-attachments/assets/e96c6a05-7fff-4fd7-b59a-36ed79f8e609\"\n/>\n\nIt's fairly conservative and can bail out for a number of reasons:\n\n- We only log it on the first parent that triggered this case since\nother children could be indirect causes.\n- If children has changed then we bail out since this component will\nrerender anyway. This means that it won't warn for a lot of cases that\nreceive plain DOM children since the DOM children won't themselves get\nlogged.\n- If the component's total render time including children is 100ms or\nless then we skip warning because rerendering might not be a big deal.\n- We don't warn if you have shallow equality but could memoize the JSX\nelement itself since we don't typically recommend that and React\nCompiler doesn't do that. It only warns if you have nested objects too.\n- If the depth of the objects is deeper than like the 3 levels that we\nprint diffs for then we wouldn't warn since we don't know if they were\nequal (although we might still warn on a child).\n- If the component had any updates scheduled on itself (e.g. setState)\nthen we don't warn since it would rerender anyway. This should really\nconsider Context updates too but we don't do that atm. Technically you\nshould still memoize the incoming props even if you also had unrelated\nupdates since it could apply to deeper bailouts.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-02T17:33:07-04:00",
      "committed_date": "2025-07-02T17:33:07-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/shared/ReactPerformanceTrackProperties.js"
      ]
    },
    {
      "sha": "dcf83f7c2db2de64ec370df73294cedb658bd896",
      "short_sha": "dcf83f7",
      "message": "Disable ScrollTimeline in Safari (#33499)\n\nStacked on #33501.\n\nThis disables the use of ScrollTimeline when detected in Safari in the\nrecommended SwipeRecognizer approach. I'm instead using a polyfill using\ntouch events on iOS.\n\nSafari seems set to [release ScrollTimeline\nsoon](https://webkit.org/blog/16993/news-from-wwdc25-web-technology-coming-this-fall-in-safari-26-beta/).\nUnfortunately it's not really what you'd expect.\n\nFirst of all, [it's not running in sync with the\nscroll](https://bugs.webkit.org/show_bug.cgi?id=288402) which is kind of\nits main point. Instead, it is running at 60fps and out of sync with the\nscroll just like JS. In fact, it is worse than JS because with JS you\ncan at least spawn CSS animations that run at 120fps. So our polyfill\ncan respond to touches at 60fps while gesturing and then run at 120fps\nupon release. That's better than with ScrollTimeline.\n\nSecond, [there's a bug which interrupts scrolling if you start a\nViewTransition](https://bugs.webkit.org/show_bug.cgi?id=288795) when the\nelement is being removed as part of that. The element can still respond\nto touches so in a polyfill this isn't an issue. But it essentially\nmakes it useless to use ScrollTimeline with swipe-away gestures.\n\nSo we're better off in every scenario by not using it.\n\nThe UA detection is a bit unfortunate. Not sure if there's something\nmore specific but we also had to do a UA detection for Chrome for View\nTransitions. Those are the only two we have in all of React.\n\n\n![safarimeme](https://github.com/user-attachments/assets/d4ca9eba-489e-4ade-b462-2ffeee3a470c)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-02T17:01:49-04:00",
      "committed_date": "2025-07-02T17:01:49-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/SwipeRecognizer.js"
      ]
    },
    {
      "sha": "94fce500bcd314ea19c5c89c6385be6e62397c09",
      "short_sha": "94fce50",
      "message": "[Flight] Use a heuristic to extract a useful description of I/O from the Promise value (#33662)\n\nIt's useful to be able to distinguish between different invocations of\ncommon helper libraries (like fetch) without having to click through\neach one.\n\nThis adds a heuristic to extract a useful description of I/O from the\nPromise value. We try to find things like getUser(id) -> User where\nUser.id is the id or fetch(url) -> Response where Response.url is the\nurl.\n\nFor urls we use the filename (or hostname if there is none) as the short\nname if it can fit. The full url is in the tooltip.\n\n<img width=\"845\" alt=\"Screenshot 2025-06-27 at 7 58 20 PM\"\nsrc=\"https://github.com/user-attachments/assets/95f10c08-13a8-449e-97e8-52f0083a65dc\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-02T16:12:37-04:00",
      "committed_date": "2025-07-02T16:12:37-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightPerformanceTrack.js"
      ]
    },
    {
      "sha": "508f7aa78ff53d058ee1151505efd5c4a4aefa01",
      "short_sha": "508f7aa",
      "message": "[Fiber] Switch back to using performance.measure for trigger logs (#33659)\n\nStacked on #33658.\n\nUnfortunately `console.timeStamp` has the same bug that\n`performance.measure` used to have where equal start/end times stack in\ncall order instead of reverse call-order. We rely on that in general so\nwe should really switch back all.\n\nBut there is one case in particular where we always add the same\nstart/time and that's for the \"triggers\" -\nMount/Unmount/Reconnect/Disconnect. Switching to `console.timeStamp`\nbroke this because they now showed below the thing that mounted.\n\nAfter:\n\n<img width=\"726\" alt=\"Screenshot 2025-06-27 at 3 31 16 PM\"\nsrc=\"https://github.com/user-attachments/assets/422341c8-bef6-4909-9403-933d76b71508\"\n/>\n\nAlso fixed a bug where clamped update times could end up logging zero\nwidth entries that stacked up on top of each other causing a two row\nscheduler lane which should always be one row.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-02T16:10:52-04:00",
      "committed_date": "2025-07-02T16:10:52-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js"
      ]
    },
    {
      "sha": "e104795f635e2bb423fe9264b1cfdfff15f551e5",
      "short_sha": "e104795",
      "message": "[Fiber] Show Diff Render Props in Performance Track in DEV (#33658)\n\n<img width=\"634\" alt=\"Screenshot 2025-06-27 at 1 13 20 PM\"\nsrc=\"https://github.com/user-attachments/assets/dc8c488b-4a23-453f-918f-36b245364934\"\n/>\n\nWe have to be careful with performance in DEV. It can slow down DX since\nthese are ran whether you're currently running a performance trace or\nnot. It can also show up as misleading since these add time to the\n\"Remaining Effects\" entry.\n\nI'm not adding all props to the entries. Instead, I'm only adding the\nchanged props after diffing and none for initial mount. I'm trying to as\nmuch as possible pick a fast path when possible. I'm also only logging\nthis for the \"render\" entries and not the effects. If we did something\nfor effects, it would be more like checking with dep changed.\n\nThis could still have a negative effect on dev performance since we're\nnow also using the slower `performance.measure` API when there's a diff.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-02T16:10:07-04:00",
      "committed_date": "2025-07-02T16:10:07-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/shared/ReactPerformanceTrackProperties.js"
      ]
    },
    {
      "sha": "c0d151ce7ed9ebdcbcb7ea69c31d68b03b852d37",
      "short_sha": "c0d151c",
      "message": "Clear width/height from Keyframes to Optimize View Transitions (#33576)\n\nView Transitions has this annoying quirk where it adds `width` and\n`height` to keyframes automatically when generating keyframes even when\nit's not needed. This causes them to deopt from running on the\ncompositor thread in both Chrome and Safari. @bramus has a [good article\non\nit](https://www.bram.us/2025/02/07/view-transitions-applied-more-performant-view-transition-group-animations/).\n\nIn React we can automatically rewrite the keyframes when we're starting\na View Transition to drop the `width` and `height` from the keyframes\nwhen they have the same value and the same value as the pseudo element.\n\nTo compare it against the pseudo element we first apply the new\nkeyframes without the width/height and then read it back to see if it\nhas changed. For gestures, we have already cancelled the previous\nanimation so we can just read out from that.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-02T16:09:26-04:00",
      "committed_date": "2025-07-02T16:09:26-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "fc41c24aa6e674319aed5bd0b25ca6fb92c268df",
      "short_sha": "fc41c24",
      "message": "Add ScrollTimeline Polyfill for Swipe Recognizer using a new CustomTimeline protocol (#33501)\n\nThe React API is just that we now accept this protocol as an alternative\nto a native `AnimationTimeline` to be passed to\n`startGestureTransition`. This is specifically the DOM version.\n\n```js\ninterface CustomTimeline {\n  currentTime: number;\n  animate(animation: Animation): void | (() => void);\n}\n```\n\nInstead, of passing this to the `Animation` that we start to control the\nView Transition keyframes, we instead inverse the control and pass the\n`Animation` to this one. It lets any custom implementation drive the\nupdates. It can do so by updating the time every frame or letting it run\na time based animation (such as momentum scroll).\n\nIn this case I added a basic polyfill for `ScrollTimeline` in the\nexample but we'll need a better one.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-07-02T16:07:46-04:00",
      "committed_date": "2025-07-02T16:07:46-04:00",
      "changed_files": [
        ".eslintrc.js",
        "fixtures/view-transition/loader/package.json",
        "fixtures/view-transition/loader/server.js",
        "fixtures/view-transition/package.json",
        "fixtures/view-transition/server/index.js",
        "fixtures/view-transition/server/render.js",
        "fixtures/view-transition/src/components/App.js",
        "fixtures/view-transition/src/components/Page.js",
        "fixtures/view-transition/src/components/SwipeRecognizer.js",
        "fixtures/view-transition/src/index.js",
        "fixtures/view-transition/yarn.lock",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "73aa744b7029556430f409ec3887a714940698ba",
      "short_sha": "73aa744",
      "message": "Remove now dead argument from resolveClassComponentProps (#33682)\n\nNo longer used after https://github.com/facebook/react/pull/33648",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-07-02T10:45:37-04:00",
      "committed_date": "2025-07-02T10:45:37-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberClassComponent.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js"
      ]
    },
    {
      "sha": "602917c8cb521e6f9b8eae7070985e2a698fc0d0",
      "short_sha": "602917c",
      "message": "Cleanup disableDefaultPropsExceptForClasses flag (#33648)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-07-01T15:52:56-04:00",
      "committed_date": "2025-07-01T15:52:56-04:00",
      "changed_files": [
        "packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js",
        "packages/react-dom/src/__tests__/ReactDeprecationWarnings-test.js",
        "packages/react-dom/src/__tests__/ReactFunctionComponent-test.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberClassComponent.js",
        "packages/react-reconciler/src/ReactFiberLazyComponent.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactMemo-test.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react/src/ReactLazy.js",
        "packages/react/src/__tests__/ReactElementClone-test.js",
        "packages/react/src/__tests__/forwardRef-test.js",
        "packages/react/src/jsx/ReactJSXElement.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "91d097b2c588a0977a7a10ed12512dc8a34e3a5b",
      "short_sha": "91d097b",
      "message": "fix: rename bottom stack frame (#33680)\n\n`react-stack-bottom-frame` -> `react_stack_bottom_frame`.\n\nThis survives `@babel/plugin-transform-function-name`, but now frames\nwill be displayed as `at Object.react_stack_bottom_frame (...)` in V8.\nChecks that were relying on exact function name match were updated to\nuse either `.indexOf()` or `.includes()`\n\nFor backwards compatibility, both React DevTools and Flight Client will\nlook for both options. I am not so sure about the latter and if React\nversion is locked.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-07-01T18:06:26+01:00",
      "committed_date": "2025-07-01T18:06:26+01:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-devtools-shared/src/backend/shared/DevToolsOwnerStack.js",
        "packages/react-devtools-shared/src/backend/utils/index.js",
        "packages/react-reconciler/src/ReactFiberCallUserSpace.js",
        "packages/react-server/src/ReactFizzCallUserSpace.js",
        "packages/react-server/src/ReactFlightCallUserSpace.js",
        "packages/react-server/src/ReactFlightStackConfigV8.js",
        "packages/react/src/jsx/ReactJSXElement.js",
        "packages/shared/ReactOwnerStackFrames.js"
      ]
    },
    {
      "sha": "7216c0f002222cdee3075410f7432d64724640cc",
      "short_sha": "7216c0f",
      "message": "[Flight] Don't assume _debugStack and _owner is defined for prod elements (#33675)\n\nWe generally treat these types of fields as optional on ReactDebugInfo\nand should on ReactElement too.\n\nThat way we can consume prod payloads from third parties.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-30T16:15:19-04:00",
      "committed_date": "2025-06-30T16:15:19-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "6a3d16ca74acd28632dabccc142d42ce411a811b",
      "short_sha": "6a3d16c",
      "message": "Back out \"Remove Dead Code in WWW JS\" (#33673)\n\nOriginal commit changeset: 65c4decb565b\n\nThis was removed by dead code removal. Adding back the TODO with\ncommented out code.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-06-30T15:26:45-04:00",
      "committed_date": "2025-06-30T15:26:45-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "65c4decb565b4eb1423518e76dbda7bc40a01c04",
      "short_sha": "65c4dec",
      "message": "Remove Dead Code in WWW JS\n\nDifferential Revision: D77531947\n\nPull Request resolved: https://github.com/facebook/react/pull/33672",
      "author": {
        "name": "Facebook Community Bot",
        "email": "facebook-github-bot@users.noreply.github.com"
      },
      "authored_date": "2025-06-30T08:24:29-07:00",
      "committed_date": "2025-06-30T08:24:29-07:00",
      "changed_files": [
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "1e0d12b6f273d7345e32c16cd937475ed7c512ad",
      "short_sha": "1e0d12b",
      "message": "Align `AttributeConfiguration` type in `ReactNativeTypes` (#33671)",
      "author": {
        "name": "Dawid Małecki",
        "email": "maleckidawid@meta.com"
      },
      "authored_date": "2025-06-30T16:36:49+02:00",
      "committed_date": "2025-06-30T15:36:49+01:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeTypes.js"
      ]
    },
    {
      "sha": "e9cab42ece435ac3478ec85847e352177e596ae0",
      "short_sha": "e9cab42",
      "message": "Special case printing Promises in Performance Track Properties (#33670)\n\nBefore:\n<img width=\"266\" alt=\"Screenshot 2025-06-30 at 8 32 23 AM\"\nsrc=\"https://github.com/user-attachments/assets/98aae5e1-4b2c-49bd-9b71-040b788c36ba\"\n/>\n\nAfter:\n<img width=\"342\" alt=\"Screenshot 2025-06-30 at 8 39 17 AM\"\nsrc=\"https://github.com/user-attachments/assets/cd91c4a6-f6ae-4bec-9cd9-f42f4af468fe\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-30T09:21:04-04:00",
      "committed_date": "2025-06-30T09:21:04-04:00",
      "changed_files": [
        "packages/shared/ReactPerformanceTrackProperties.js"
      ]
    },
    {
      "sha": "3cfcdfb30720a5b8de0e981c8fdabec1abb61588",
      "short_sha": "3cfcdfb",
      "message": "[Flight] Resolve Deep Cycles (#33664)\n\nStacked on #33666.\n\nIf we ever get a future reference to a cycle and that reference gets\neagerly parsed before the target has loaded then we can end up with a\ncycle that never gets resolved. That's because our cycle resolution only\nworks if the cyclic future reference is created synchronously within the\nparsing path of the child.\n\nI haven't been able to construct a normal scenario where this would\nbreak. So this doesn't fail any tests. However, I can construct it with\ndebug info since those are eagerly evaluated. It's also a prerequisite\nif the debug data can come out of order, like if it's on a different\nstream.\n\nThe fix here is to make all the internal dependencies in the \"listener\"\nlist into introspectable objects instead of closures. That way we can\ntraverse the list of dependencies of a blocked reference to see if it\nends up in a cycle and therefore skip the reference.\n\nIt would be nice to address this once and for all to be more resilient\nto server changes, but I'm not sure if it's worth this complexity and\nthe extra CPU cost of tracing the dependencies. Especially if it's just\nfor debug data.\n\ncloses #32316\nfixes vercel/next.js#72104\n\n---------\n\nCo-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-29T10:56:16-04:00",
      "committed_date": "2025-06-29T10:56:16-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js"
      ]
    },
    {
      "sha": "9c2a8dd5f87266308a8a8e55fb7f029ba530d36a",
      "short_sha": "9c2a8dd",
      "message": "[Flight] Ensure we dedupe references if we later discover that it's the model root (#33666)\n\nI noticed we weren't deduping these cases.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-29T10:47:33-04:00",
      "committed_date": "2025-06-29T10:47:33-04:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "811e203ed42c1a496790426a687d5045c473653d",
      "short_sha": "811e203",
      "message": "[Flight] Don't replay performance logs when replayConsoleLogs is false (#33656)\n\nThis is the same principle. They're both side-effects and go to the\n`console.*` namespace.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-27T16:27:45-04:00",
      "committed_date": "2025-06-27T16:27:45-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "d92056efb3dc7f1f5579934ea46132a658d418f4",
      "short_sha": "d92056e",
      "message": "React DevTools 6.1.2 -> 6.1.3 (#33657)\n\nFull list of changes:\n\n* devtools: emit performance entries only when profiling\n([hoxyq](https://github.com/hoxyq) in\n[#33652](https://github.com/facebook/react/pull/33652))\n* Get Server Component Function Location for Parent Stacks using Child's\nOwner Stack ([sebmarkbage](https://github.com/sebmarkbage) in\n[#33629](https://github.com/facebook/react/pull/33629))\n* Added minimum indent size to Component Tree\n([jsdf](https://github.com/jsdf) in\n[#33517](https://github.com/facebook/react/pull/33517))\n* [devtools-shell] layout options for testing\n([jsdf](https://github.com/jsdf) in\n[#33516](https://github.com/facebook/react/pull/33516))\n* Remove feature flag enableRenderableContext\n([kassens](https://github.com/kassens) in\n[#33505](https://github.com/facebook/react/pull/33505))\n* refactor[devtools]: update css for settings and support css variables\nin shadow dom scnenario ([hoxyq](https://github.com/hoxyq) in\n[#33487](https://github.com/facebook/react/pull/33487))\n* [mcp] Add MCP tool to print out the component tree of the currently\nopen React App ([jorge-cab](https://github.com/jorge-cab) in\n[#33305](https://github.com/facebook/react/pull/33305))\n* [scripts] Switch back to flow parser for prettier\n([rickhanlonii](https://github.com/rickhanlonii) in\n[#33414](https://github.com/facebook/react/pull/33414))\n* upgrade json5 ([rickhanlonii](https://github.com/rickhanlonii) in\n[#33358](https://github.com/facebook/react/pull/33358))\n* Get source location from structured callsites in prepareStackTrace\n([sebmarkbage](https://github.com/sebmarkbage) in\n[#33143](https://github.com/facebook/react/pull/33143))\n* Clean up enableSiblingPrerendering flag\n([jackpope](https://github.com/jackpope) in\n[#32319](https://github.com/facebook/react/pull/32319))",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-06-27T16:17:08+01:00",
      "committed_date": "2025-06-27T16:17:08+01:00",
      "changed_files": [
        "packages/react-devtools-core/package.json",
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-inline/package.json",
        "packages/react-devtools-timeline/package.json",
        "packages/react-devtools/CHANGELOG.md",
        "packages/react-devtools/package.json"
      ]
    },
    {
      "sha": "58ac15cdc953a21ac1b352b6300abc3da87fa3d6",
      "short_sha": "58ac15c",
      "message": "devtools: emit performance entries only when profiling (#33652)\n\n## Summary\n\nThis floods Timings track in dev mode and also hurts performance in dev.\n\nMaking sure we are buffering Performance entries (all of them are marks)\nonly when profiling in RDT. This should be removed once we roll out Perf\ntracks.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-06-27T15:32:08+01:00",
      "committed_date": "2025-06-27T15:32:08+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/profilingHooks.js"
      ]
    },
    {
      "sha": "bfc8801e0f0bfacb46bc71244e8244736bd995f4",
      "short_sha": "bfc8801",
      "message": "[Flight] Write Debug Info to Separate Priority Queue (#33654)\n\nThis writes all debug info to a separate priority queue. In the future\nI'll put this on a different channel.\n\nIdeally I think we'd put it in the bottom of the stream but because it\nactually blocks the elements from resolving anyway it ends up being\nbetter to put them ahead. At least for now.\n\nWhen we have two separate channels it's not possible to rely on the\norder for consistency Even then we might write to that queue first for\nthis reason. We can't rely on it though. Which will show up like things\nturning into Lazy instead of Element similar to how outlining can.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-27T09:45:11-04:00",
      "committed_date": "2025-06-27T09:45:11-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "d2a288febf61a1755b78ce98b3cb17dd412b81e3",
      "short_sha": "d2a288f",
      "message": "Include Component Props in Performance Track (#33655)\n\nSimilar to how we can include a Promise resolved value we can include\nComponent Props.\n\nFor now I left out props for Client Components for perf unless they\nerror. I'll try it for Client Components in general in a separate PR.\n\n<img width=\"730\" alt=\"Screenshot 2025-06-26 at 5 54 29 PM\"\nsrc=\"https://github.com/user-attachments/assets/f0c86911-2899-4b5f-b45f-5326bdbc630f\"\n/>\n<img width=\"762\" alt=\"Screenshot 2025-06-26 at 5 54 12 PM\"\nsrc=\"https://github.com/user-attachments/assets/97540d19-5950-4346-99e6-066af086040e\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-27T08:45:56-04:00",
      "committed_date": "2025-06-27T08:45:56-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-client/src/ReactFlightPropertyAccess.js",
        "packages/shared/ReactPerformanceTrackProperties.js"
      ]
    },
    {
      "sha": "4db4b21c63ebc4edc508c5f7674f9df50d8f9744",
      "short_sha": "4db4b21",
      "message": "Fix typo \"Complier\" to \"Compiler\" and remove duplicate issue reference (#33653)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\nFixed a typo in the changelog.md file: corrected \"Complier\" to\n\"Compiler\" and removed a duplicate issue reference for improved clarity.\n<!--\nExplain the **motivation** for making this change. What existing problem\ndoes the pull request solve?\n-->\n\n## How did you test this change?\nManually reviewed the changelog text to ensure correctness. No code\nchanges were made.\n<!--\nDemonstrate the code is solid. Example: The exact commands you ran and\ntheir output, screenshots / videos if the pull request changes the user\ninterface.\nHow exactly did you verify that your PR solves the issue you wanted to\nsolve?\n  If you leave this empty, your PR will very likely be closed.\n-->",
      "author": {
        "name": "Dhruv",
        "email": "dhruv2015@hotmail.co.uk"
      },
      "authored_date": "2025-06-26T16:34:45+01:00",
      "committed_date": "2025-06-26T08:34:45-07:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "31d91651e042e4939021f21a3d8799c13684a84b",
      "short_sha": "31d9165",
      "message": "[Fizz] Rename ReactFizzContext to ReactFizzLegacyContext (#33649)\n\n#33622 forgot these.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-25T21:18:25-04:00",
      "committed_date": "2025-06-25T21:18:25-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFizzClassComponent.js",
        "packages/react-server/src/ReactFizzContext.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "9406162bc95f1db78169a7f5e11bc56d324b2071",
      "short_sha": "9406162",
      "message": "[Flight] Emit start time before an await if one wasn't emitted already (#33646)\n\nThere's a special case where if we create a new task, e.g. to serialize\na promise like `<div>{promise}</div>` then that row doesn't have any\nstart time emitted but it has a `task.time` inherited. We mostly don't\nneed this because every other operation emits its own start time. E.g.\nwhen we started rendering a Server Component or the real start time of a\nreal `await`.\n\nFor these implied awaits we don't have a start time. Ideally it would\nprobably be when we started the serialization, like when we called\n`.then()` but we can't just emit that eagerly and we can't just advance\nthe `task.time` because that time represents the last render or previous\nawait and we use that to cut off awaits. However for this case we don't\nwant to cut off any inner awaits inside the node we're serializing if\nthey happened before the `.then()`.\n\nTherefore, I just use the time of the previous operation - which is\nlikely either the resolution of a previous promise that blocked the\n`<div>` like the promise of the Server Component that rendered it, or\njust the start of the Server Component if it was sync.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-25T17:28:59-04:00",
      "committed_date": "2025-06-25T17:28:59-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "9b2a545b32ef19c6b67812d2c3444a709406a58b",
      "short_sha": "9b2a545",
      "message": "[Flight] Add tests for component and owner stacks of halted components (#33644)\n\nThis PR adds tests for the Node.js and Edge builds to verify that\ncomponent stacks and owner stacks of halted components appear as\nexpected, now that recent enhancements for those have been implemented\n(the latest one being #33634).\n\n---------\n\nCo-authored-by: Sebastian \"Sebbie\" Silbermann <silbermann.sebastian@gmail.com>",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-06-25T22:34:35+02:00",
      "committed_date": "2025-06-25T22:34:35+02:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js"
      ]
    },
    {
      "sha": "bb6c9d521e7f44eb9a9754a14cde62c8e6439e5e",
      "short_sha": "bb6c9d5",
      "message": "[Flight] Log aborted await and component renders (#33641)\n\n<img width=\"926\" alt=\"Screenshot 2025-06-25 at 1 02 14 PM\"\nsrc=\"https://github.com/user-attachments/assets/1877d13d-5259-4cc4-8f48-12981e3073fe\"\n/>\n\nThe I/O entry doesn't show as aborted in the Server Request track\nbecause technically it wasn't. The end time is just made up. It's still\ngoing. It's not aborted until the abort signal propagates and if we do\nget that signal wired up before it emits, it instead would show up as\nrejected.\n\n---------\n\nCo-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-25T16:28:54-04:00",
      "committed_date": "2025-06-25T16:28:54-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "123ff13b193cd361a61b99056dd08f2decd7f55d",
      "short_sha": "123ff13",
      "message": "[compiler] Consolidate HIRFunction return information (#33640)\n\nWe now have `HIRFunction.returns: Place` as well as `returnType: Type`.\nI want to add additional return information, so as a first step i'm\nconsolidating everything under an object at `HIRFunction.returns:\n{place: Place}`. We use the type of this place as the return type. Next\nstep is to add more properties to this object to represent things like\nthe return kind.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33640).\n* #33643\n* #33642\n* __->__ #33640\n* #33625\n* #33624",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-25T11:10:38-07:00",
      "committed_date": "2025-06-25T11:10:38-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OutlineJsx.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts"
      ]
    },
    {
      "sha": "e130c08b06470b5fc4ec8095310d19e782924427",
      "short_sha": "e130c08",
      "message": "[compiler] Avoid empty switch cases (#33625)\n\nSmall cosmetic win, found this when i was looking at some code\ninternally with lots of cases that all share the same logic. Previously,\nall the but last one would have an empty block.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33625).\n* #33643\n* #33642\n* #33640\n* __->__ #33625\n* #33624",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-25T11:10:26-07:00",
      "committed_date": "2025-06-25T11:10:26-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/block-scoping-switch-variable-scoping.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/dominator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reverse-postorder.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-switch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/switch-with-fallthrough.expect.md"
      ]
    },
    {
      "sha": "9894c488e0d9a4d9759d80ba8666d4d094b894e9",
      "short_sha": "9894c48",
      "message": "[compiler] Fix bug with reassigning function param in destructuring (#33624)\n\nCloses #33577, a bug with ExtractScopeDeclarationsFromDestructuring and\ncodegen when a function param is reassigned.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33624).\n* #33643\n* #33642\n* #33640\n* #33625\n* __->__ #33624",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-25T11:10:09-07:00",
      "committed_date": "2025-06-25T11:10:09-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/ExtractScopeDeclarationsFromDestructuring.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-reassign-props.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-reassign-props.js"
      ]
    },
    {
      "sha": "cee7939b0017ff58230e19663c22393bfd9025ef",
      "short_sha": "cee7939",
      "message": "[Fizz] Push a stalled await from debug info to the ownerStack/debugTask (#33634)\n\nIf an aborted task is not rendering, then this is an async abort.\nConceptually it's as if the abort happened inside the async gap. The\nabort reason's stack frame won't have that on the stack so instead we\nuse the owner stack and debug task of any halted async debug info.\n\nOne thing that's a bit awkward is that if you do have a sync abort and\nyou use that error as the \"reason\" then that thing still has a sync\nstack in a different component. In another approach I was exploring\nhaving different error objects for each component but I don't think\nthat's worth it.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-25T11:14:49-04:00",
      "committed_date": "2025-06-25T11:14:49-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFizzComponentStack.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "b42341ddc757129db062298f9fe3ad041c580d2a",
      "short_sha": "b42341d",
      "message": "[Flight] Use cacheController instead of abortListeners for Streams (#33633)\n\nNow that we have `cacheSignal()` we can just use that instead of the\n`abortListeners` concept which was really just the same thing for\ncancelling the streams (ReadableStream, Blob, AsyncIterable).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-25T09:41:21-04:00",
      "committed_date": "2025-06-25T09:41:21-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "7a3ffef70339c10f8d65a27b88cd73bfbe13eb8a",
      "short_sha": "7a3ffef",
      "message": "[react-native] Consume ReactNativeAttributePayloadFabric from ReactNativePrivateInterface (#33616)\n\n## Summary\n\nReactNativeAttributePayloadFabric was synced to react-native in\nhttps://github.com/facebook/react-native/commit/0e42d33cbcfadcf5d787108da785d56a83d07a9f.\nWe should now consume these methods from the\nReactNativePrivateInterface.\n\nMoving these methods to the React Native repo gives us more flexibility\nto experiment with new techniques for bridging and diffing props\npayloads.\n\nI did have to leave some stub implementations for existing unit tests,\nbut moved all detailed tests to the React Native repo.\n\n## How did you test this change?\n\n* `yarn prettier`\n* `yarn test ReactFabric-test`",
      "author": {
        "name": "Pieter De Baets",
        "email": "pieterdb@meta.com"
      },
      "authored_date": "2025-06-25T10:23:36+01:00",
      "committed_date": "2025-06-25T10:23:36+01:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/ReactNativeAttributePayloadFabric.js",
        "packages/react-native-renderer/src/ReactNativeTypes.js",
        "packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/ReactNativePrivateInterface.js",
        "packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/createAttributePayload.js",
        "packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/diffAttributePayloads.js",
        "packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js",
        "packages/react-native-renderer/src/__tests__/ReactNativeAttributePayloadFabric-test.internal.js",
        "scripts/flow/react-native-host-hooks.js"
      ]
    },
    {
      "sha": "e67b4fe22e0c3c267303ee6737aec1db48055022",
      "short_sha": "e67b4fe",
      "message": "[Flight] Emit Partial Debug Info if we have any at the point of aborting a render (#33632)\n\nWhen we abort a render we don't really have much information about the\ntask that was aborted. Because before a Promise resolves there's no\nindication about would have resolved it. In particular we don't know\nwhich I/O would've ultimately called resolve().\n\nHowever, we can at least emit any information we do have at the point\nwhere we emit it. At the least the stack of the top most Promise.\n\nCurrently we synchronously flush at the end of an `abort()` but we\nshould ideally schedule the flush in a macrotask and emit this debug\ninformation right before that. That way we would give an opportunity for\nany `cacheSignal()` abort to trigger rejections all the way up and those\nrejections informs the awaited stack.\n\n---------\n\nCo-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-24T16:36:21-04:00",
      "committed_date": "2025-06-24T16:36:21-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "4a523489b7dc64cd397f619e50223edda1b9a321",
      "short_sha": "4a52348",
      "message": "Get Server Component Function Location for Parent Stacks using Child's Owner Stack (#33629)\n\nThis is using the same trick as #30798 but for runtime code too. It's\nessential zero cost.\n\nThis lets us include a source location for parent stacks of Server\nComponents when it has an owned child's location. Either from JSX or\nI/O.\n\nIronically, a Component that throws an error will likely itself not get\nthe stack because it won't have any JSX rendered yet.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-24T16:35:28-04:00",
      "committed_date": "2025-06-24T16:35:28-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-reconciler/src/ReactFiberComponentStack.js",
        "packages/react-server/src/ReactFizzComponentStack.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js",
        "packages/shared/ReactComponentStackFrame.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "94cf60bede7cd6685e07a4374d1e3aa90445130b",
      "short_sha": "94cf60b",
      "message": "[compiler] New inference repros/fixes (#33584)\n\nSubstantially improves the last major known issue with the new inference\nmodel's implementation: inferring effects of function expressions. I\nknowingly used a really simple (dumb) approach in\nInferFunctionExpressionAliasingEffects but it worked surprisingly well\non a ton of code. However, investigating during the sync I saw that we\nthe algorithm was literally running out of memory, or crashing from\narrays that exceeded the maximum capacity. We were accumluating data\nflow in a way that could lead to lists of data flow captures compounding\non themselves and growing very large very quickly. Plus, we were\nincorrectly recording some data flow, leading to cases where we reported\nfalse positive \"can't mutate frozen value\" for example.\n\nSo I went back to the drawing board. InferMutationAliasingRanges already\nbuilds up a data flow graph which it uses to figure out what values\nwould be affected by mutations of other values, and update mutable\nranges. Well, the key question that we really want to answer for\ninferring a function expression's aliasing effects is which values\nalias/capture where. Per the docs I wrote up, we only have to record\nsuch aliasing _if they are observable via mutations_. So, lightbulb:\nsimulate mutations of the params, free variables, and return of the\nfunction expression and see which params/free-vars would be affected!\nThat's what we do now, giving us precise information about which such\nvalues alias/capture where. When the \"into\" is a param/context-var we\nuse Capture, iwhen the destination is the return we use Alias to be\nconservative.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33584).\n* #33626\n* #33625\n* #33624\n* __->__ #33584",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-24T10:01:58-07:00",
      "committed_date": "2025-06-24T10:01:58-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferFunctionExpressionAliasingEffectsSignature.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/MUTABILITY_ALIASING_MODEL.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capture-in-function-expression-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capture-in-function-expression-indirect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-identity-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-identity-function-expression.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-identity.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-identity.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-function-expression-effects-stack-overflow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-function-expression-effects-stack-overflow.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-invalid-function-expression-effects-phi.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-invalid-function-expression-effects-phi.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-mutate-new-set-of-frozen-items-in-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-mutate-new-set-of-frozen-items-in-callback.js"
      ]
    },
    {
      "sha": "bbc13fa17be8eebef3e6ee47f48c76c0c44e2f36",
      "short_sha": "bbc13fa",
      "message": "[Flight] Add Debug Channel option for stateful connection to the backend in DEV (#33627)\n\nThis adds plumbing for opening a stream from the Flight Client to the\nFlight Server so it can ask for more data on-demand. In this mode, the\nFlight Server keeps the connection open as long as the client is still\nalive and there's more objects to load. It retains any depth limited\nobjects so that they can be asked for later. In this first PR it just\nreleases the object when it's discovered on the server and doesn't\nactually lazy load it yet. That's coming in a follow up.\n\nThis strategy is built on the model that each request has its own\nchannel for this. Instead of some global registry. That ensures that\nreferential identity is preserved within a Request and the Request can\nrefer to previously written objects by reference.\n\nThe fixture implements a WebSocket per request but it doesn't have to be\ndone that way. It can be multiplexed through an existing WebSocket for\nexample. The current protocol is just a Readable(Stream) on the server\nand WritableStream on the client. It could even be sent through a HTTP\nrequest body if browsers implemented full duplex (which they don't).\n\nThis PR only implements the direction of messages from Client to Server.\nHowever, I also plan on adding Debug Channel in the other direction to\nallow debug info (optionally) be sent from Server to Client through this\nchannel instead of through the main RSC request. So the `debugChannel`\noption will be able to take writable or readable or both.\n\n---------\n\nCo-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-24T11:16:09-04:00",
      "committed_date": "2025-06-24T11:16:09-04:00",
      "changed_files": [
        "fixtures/flight/server/global.js",
        "fixtures/flight/server/region.js",
        "fixtures/flight/src/App.js",
        "fixtures/flight/src/index.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlightDebugChannel-test.js",
        "packages/react-markup/src/ReactMarkupServer.js",
        "packages/react-noop-renderer/src/ReactNoopFlightClient.js",
        "packages/react-noop-renderer/src/ReactNoopFlightServer.js",
        "packages/react-server-dom-esm/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-esm/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server/src/ReactFlightServer.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "12eaef7ef5fbf6c9d7ec6e16a04bc207a1a68b91",
      "short_sha": "12eaef7",
      "message": "[refactor] remove unused fiberstack functions (#33623)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-06-23T20:07:04-04:00",
      "committed_date": "2025-06-23T20:07:04-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberStack.js"
      ]
    },
    {
      "sha": "c80c69fa965a517c2978b0cb39bdb49c0e1cb5c8",
      "short_sha": "c80c69f",
      "message": "[Flight] Remove back pointers to the Response from the Chunks (#33620)\n\nThis frees some memory that will be even more important in a follow up.\n\nCurrently, all `ReactPromise` instances hold onto their original\n`Response`. The `Response` holds onto all objects that were in that\nresponse since they're needed in case the parsed content ends up\nreferring to an existing object. If everything you retain are plain\nobjects then that's fine and the `Response` gets GC:ed, but if you're\nretaining a `Promise` itself then it holds onto the whole `Response`.\n\nThe only thing that needs this reference at all is a\n`ResolvedModelChunk` since it will lazily initialize e.g. by calling\n`.then` on itself and so we need to know where to find any sibling\nchunks it may refer to. However, we can just store the `Response` on the\n`reason` field for this particular state.\n\nThat way when all lazy values are touched and initialized the `Response`\nis freed. We also free up some memory by getting rid of the extra field.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-23T18:37:52-04:00",
      "committed_date": "2025-06-23T18:37:52-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "aab72cb1cbfc30f07af7b949fb9dc8d7497d73ca",
      "short_sha": "aab72cb",
      "message": "rename ReactFiberContext to ReactFiberLegacyContext (#33622)\n\nIt wasn't immediately obvious to me, that all the exports here are\nrelated to legacy context, so renaming for clarity.\n\nModern context lives in `ReactFiberNewContext` which we could probably\nalso raname in a separate step to just Context.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-06-23T17:21:18-04:00",
      "committed_date": "2025-06-23T17:21:18-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberClassComponent.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberHotReloading.js",
        "packages/react-reconciler/src/ReactFiberContext.js",
        "packages/react-reconciler/src/ReactFiberReconciler.js",
        "packages/react-reconciler/src/ReactFiberUnwindWork.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "fa3feba6720c96ca10fb42d5f53a9b4fa9aa6ccd",
      "short_sha": "fa3feba",
      "message": "Fix prelease workflows for `dry: false` (#33582)\n\n## Summary\n\nFollow-up to https://github.com/facebook/react/pull/33525\n\nFixes `Unsupported tag: \"false\"`\n(https://github.com/facebook/react/actions/runs/15773778995/job/44463562733#step:13:12)\nwhich also affects nightly releases.\n\n## How did you test this change?\n\n- [x] Run successful, manual prerelease from this branch:\nhttps://github.com/facebook/react/actions/runs/15774083406",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-06-23T17:47:07+02:00",
      "committed_date": "2025-06-23T11:47:07-04:00",
      "changed_files": [
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml"
      ]
    },
    {
      "sha": "2a911f27dd99c46778c27ba004f9d8fe898efd21",
      "short_sha": "2a911f2",
      "message": "[Flight] Send the awaited Promise to the client as additional debug information (#33592)\n\nStacked on #33588, #33589 and #33590.\n\nThis lets us automatically show the resolved value in the UI.\n\n<img width=\"863\" alt=\"Screenshot 2025-06-22 at 12 54 41 AM\"\nsrc=\"https://github.com/user-attachments/assets/a66d1d5e-0513-4767-910c-5c7169fc2df4\"\n/>\n\nWe can also show rejected I/O that may or may not have been handled with\nthe error message.\n\n<img width=\"838\" alt=\"Screenshot 2025-06-22 at 12 55 06 AM\"\nsrc=\"https://github.com/user-attachments/assets/e0a8b6ae-08ba-46d8-8cc5-efb60956a1d1\"\n/>\n\nTo get this working we need to keep the Promise around for longer so\nthat we can access it once we want to emit an async sequence. I do this\nby storing the WeakRefs but to ensure that the Promise doesn't get\ngarbage collected, I keep a WeakMap of Promise to the Promise that it\ndepended on. This lets the VM still clean up any Promise chains that\nhave leaves that are cleaned up. So this makes Promises live until the\nlast Promise downstream is done. At that point we can go back up the\nchain to read the values out of them.\n\nAdditionally, to get the best possible value we don't want to get a\nPromise that's used by internals of a third-party function. We want the\nvalue that the first party gets to observe. To do this I had to change\nthe logic for which \"await\" to use, to be the one that is the first\nawait that happened in user space. It's not enough that the await has\nany first party at all on the stack - it has to be the very first frame.\nThis is a little sketchy because it relies on the `.then()` call or\n`await` call not having any third party wrappers. But it gives the best\nobject since it hides all the internals. For example when you call\n`fetch()` we now log that actual `Response` object.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-23T10:12:45-04:00",
      "committed_date": "2025-06-23T10:12:45-04:00",
      "changed_files": [
        "fixtures/flight/src/App.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-client/src/ReactFlightPropertyAccess.js",
        "packages/react-server/src/ReactFlightAsyncSequence.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "18ee505e7791f2bb55f0e520667c51588df7ba48",
      "short_sha": "18ee505",
      "message": "[Flight] Support classes in renderDebugModel (#33590)\n\nThis adds better support for serializing class instances as Debug\nvalues.\n\nIt adds a new marker on the object `{ \"\": \"$P...\", ... }` which\nindicates which constructor's prototype to use for this object's\nprototype. It doesn't encode arbitrary prototypes and it doesn't encode\nany of the properties on the prototype. It might get some of the\nproperties from the prototype by virtue of `toString` on a `class`\nconstructor will include the whole class's body.\n\nThis will ensure that the instance gets the right name in logs.\n\nAdditionally, this now also invokes getters if they're enumerable on the\nprototype. This lets us reify values that can only be read from native\nclasses.\n\n---------\n\nCo-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-22T18:00:08-04:00",
      "committed_date": "2025-06-22T18:00:08-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactSerializationErrors.js"
      ]
    },
    {
      "sha": "1d1b26c701893f4821ebdc6547bcd1efc392f679",
      "short_sha": "1d1b26c",
      "message": "[Flight] Serialize already resolved Promises as debug models (#33588)\n\nWe already support serializing the values of instrumented Promises as\ndebug values such as in console logs. However, we don't support plain\nnative promises.\n\nThis waits a microtask to see if we can read the value within a\nmicrotask and if so emit it. This is so that we can still close the\nconnection.\n\nOtherwise, we emit a \"halted\" row into its row id which replaces the old\n\"Infinite Promise\" reference.\n\nWe could potentially wait until the end of the render before cancelling\nso that if it resolves before we exit we can still include its value but\nthat would require a bit more work. Ideally we'd have a way to get these\nlazily later anyway.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-22T17:51:31-04:00",
      "committed_date": "2025-06-22T17:51:31-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-noop-renderer/src/ReactNoopFlightClient.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "fe3f0ec0374b7323bf259e4154eb4ee739caac7b",
      "short_sha": "fe3f0ec",
      "message": "[Flight] Don't use object property initializer for async iterable (#33591)\n\nIt turns out this was being compiled to a `_defineProperty` helper by\nBabel or Closure. We're supposed to have it error the build when we use\nfeatures like this that might get compiled.\n\nWe should stick to simple ES5 features.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-22T10:40:56-04:00",
      "committed_date": "2025-06-22T10:40:56-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "d70ee32b8867f6cf99b1787f8adb4f3705756805",
      "short_sha": "d70ee32",
      "message": "[Flight] Eagerly parse stack traces in DebugNode (#33589)\n\nThere's a memory leak in DebugNode where the `Error` objects that we\ninstantiate retains their callstacks which can have Promises on them. In\nfact, it's very likely since the current callsite has the \"resource\" on\nit which is the Promise itself. If those Promises are retained then\ntheir `destroy` async hook is never fired which doesn't clean up our map\nwhich can contains the `Error` object. Creating a cycle that can't be\ncleaned up.\n\nThis fix is just eagerly reifying and parsing the stacks.\n\nI totally expect this to be crazy slow since there's so many Promises\nthat we end up not needing to visit otherwise. We'll need to optimize it\nsomehow. Perhaps by being smarter about which ones we might need stacks\nfor. However, at least it doesn't leak indefinitely.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-22T10:40:33-04:00",
      "committed_date": "2025-06-22T10:40:33-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightAsyncSequence.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js"
      ]
    },
    {
      "sha": "6c7b1a1d9898025bb087a3b97d875091e4f67cf3",
      "short_sha": "6c7b1a1",
      "message": "Rename serializeConsoleMap/Set to serializeDebugMap/Set (#33587)\n\nFollow up to #33583. I forgot to rename these too.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-21T10:36:07-04:00",
      "committed_date": "2025-06-21T10:36:07-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "ed077194b5b76df6f8fdbf805e1b895e2deb5a07",
      "short_sha": "ed07719",
      "message": "[Flight] Dedupe objects serialized as Debug Models in a separate set (#33583)\n\nStacked on #33539.\n\nStores dedupes of `renderConsoleValue` in a separate set. This allows us\nto dedupe objects safely since we can't write objects using this\nalgorithm if they might also be referenced by the \"real\" serialization.\n\nAlso renamed it to `renderDebugModel` since it's not just for console\nanymore.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-20T13:36:39-04:00",
      "committed_date": "2025-06-20T13:36:39-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "643257ca52c92d74ef7b7c7b474e5cae9e5451e4",
      "short_sha": "643257c",
      "message": "[Flight] Serialize functions by reference (#33539)\n\nOn pages that have a high number of server components (e.g. common when\ndoing syntax highlighting), the debug outlining can produce extremely\nlarge RSC payloads. For example a documentation page I was working on\nhad a 13.8 MB payload. I noticed that a majority of this was the source\ncode for the same function components repeated over and over again (over\n4000 times) within `$E()` eval commands.\n\nThis PR deduplicates the same functions by serializing by reference,\nsimilar to what is already done for objects. Doing this reduced the\npayload size of my page from 13.8 MB to 4.6 MB, and resulted in only 31\nevals instead of over 4000. As a result it reduced development page load\nand hydration time from 4 seconds to 1.5 seconds. It also means the\ndeserialized functions will have reference equality just as they did on\nthe server.",
      "author": {
        "name": "Devon Govett",
        "email": "devongovett@gmail.com"
      },
      "authored_date": "2025-06-20T10:36:07-07:00",
      "committed_date": "2025-06-20T13:36:07-04:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "06e89951be5b4b23ca343d02721521fe392e94c5",
      "short_sha": "06e8995",
      "message": "[Fizz] Ignore error if content node is gone before reveal (#33531)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-06-20T14:21:57+02:00",
      "committed_date": "2025-06-20T14:21:57+02:00",
      "changed_files": [
        "fixtures/view-transition/src/components/App.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js"
      ]
    },
    {
      "sha": "79d9aed7edb52e89b3ef9ba3d6b480b04180b664",
      "short_sha": "79d9aed",
      "message": "[Fizz] Clean up the replay nodes if we're already rendered past an element  (#33581)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-20T03:26:26-04:00",
      "committed_date": "2025-06-20T09:26:26+02:00",
      "changed_files": [
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "c8822e926b79205fd2e828c81e031bd0afc0effc",
      "short_sha": "c8822e9",
      "message": "Make it clearer what runtime release failed (#33579)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-06-20T09:11:27+02:00",
      "committed_date": "2025-06-20T09:11:27+02:00",
      "changed_files": [
        ".github/workflows/runtime_prereleases.yml"
      ]
    },
    {
      "sha": "a947eba4f2c8741d2c61a3b33fd79cf13bf9f39d",
      "short_sha": "a947eba",
      "message": "Fix CI (#33578)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-06-19T23:40:59+02:00",
      "committed_date": "2025-06-19T23:40:59+02:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "374dfe8edf8beef62e5bb312f99c600a232f353f",
      "short_sha": "374dfe8",
      "message": "build: make enableComponentPerformanceTrack dynamic for native-fb (#33560)\n\n## Summary\n\nMake this flag dynamic, so it can be controlled internally.\n\n## How did you test this change?\n\nBuild, observe that `console.timeStamp` is only present in FB artifacts\nand `enableComponentPerformanceTrack` is referenced.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "28902667+hoxyq@users.noreply.github.com"
      },
      "authored_date": "2025-06-19T09:47:23+01:00",
      "committed_date": "2025-06-19T09:47:23+01:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js"
      ]
    },
    {
      "sha": "2bee34867d30083ce01232baccb72b6fa696456b",
      "short_sha": "2bee348",
      "message": "[compiler] Cleanup debugging code (#33571)\n\nRemoves unnecessary debugging code in the new inference passes now that\nthey've stabilized more.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33571).\n* __->__ #33571\n* #33558\n* #33547",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T16:00:55-07:00",
      "committed_date": "2025-06-18T16:00:55-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingRanges.ts"
      ]
    },
    {
      "sha": "d37faa041bce86c1cbb05fdbc839440c9d9de9cf",
      "short_sha": "d37faa0",
      "message": "[compiler] Preserve Create effects, guarantee effects initialize once (#33558)\n\nEnsures that effects are well-formed with respect to the rules:\n* For a given instruction, each place is only initialized once (w one of\nCreate, CreateFrom, Assign)\n* Ensures that Alias targets are already initialized within the same\ninstruction (should have a Create before them)\n* Preserves Create and similar instructions\n* Avoids duplicate instructions when inferring effects of function\nexpressions\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33558).\n* #33571\n* __->__ #33558\n* #33547",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T16:00:45-07:00",
      "committed_date": "2025-06-18T16:00:45-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts"
      ]
    },
    {
      "sha": "3a2ff8b51b5ab54c22f55a5f826c53419f718887",
      "short_sha": "3a2ff8b",
      "message": "[compiler] Fix <ValidateMemoization> (#33547)\n\nBy accident we were only ever checking the compiled output, but the\nintention was in general to be able to compare memoization with/without\nforget.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33547).\n* #33571\n* #33558\n* __->__ #33547",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T16:00:36-07:00",
      "committed_date": "2025-06-18T16:00:36-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-control-flow-sensitive-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-control-flow-sensitive-mutation.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-transitivity-createfrom-capture-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-transitivity-createfrom-capture-lambda.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-add-captured-array-to-itself.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-add-captured-array-to-itself.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom-lambda.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-createfrom-capture.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-createfrom-capture.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-phi-assign-or-capture.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-phi-assign-or-capture.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/typed-identity-function-frozen-input.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/typed-identity-function-frozen-input.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/weakmap-constructor.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/weakmap-constructor.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/weakset-constructor.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/weakset-constructor.js",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "cc3806377a43f0bd339d54ceaf2e1e16b0b113bf",
      "short_sha": "cc38063",
      "message": "[compiler] Tests for different orders of createfrom/capture w/wo function expressions (#33543)\n\nAdds some typed helpers to represent aliasing, assign, capture,\ncreatefrom, and mutate effects along with representative runtime\nbehavior, and then adds tests to demonstrate that we model\ncapture->createfrom and createfrom->capture correctly.\n\nThere is one case (createfrom->capture in a lambda) where we infer a\nless precise effect, but in the more conservative direction (we include\nmore code/deps than necesssary rather than fewer).\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33543).\n* #33571\n* #33558\n* #33547\n* __->__ #33543",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T15:56:27-07:00",
      "committed_date": "2025-06-18T15:56:27-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/MUTABILITY_ALIASING_MODEL.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-control-flow-sensitive-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-control-flow-sensitive-mutation.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-transitivity-createfrom-capture-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-transitivity-createfrom-capture-lambda.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-add-captured-array-to-itself.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-add-captured-array-to-itself.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom-lambda.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-createfrom-capture.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-createfrom-capture.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-phi-assign-or-capture.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-phi-assign-or-capture.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts",
        "compiler/packages/snap/src/compiler.ts",
        "compiler/packages/snap/src/runner-worker.ts",
        "compiler/packages/snap/src/sprout/shared-runtime-type-provider.ts",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "4f543f326cdf99d1bb2accd1c4f4e5bfffffeb4b",
      "short_sha": "4f543f3",
      "message": "[compiler] Docs describing new inference model (#33533)\n\nStart of docs describing the effects and the inference rules.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33533).\n* #33571\n* #33558\n* #33547\n* #33543\n* __->__ #33533\n* #33532\n* #33530",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T15:48:01-07:00",
      "committed_date": "2025-06-18T15:48:01-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/MUTABILITY_ALIASING_MODEL.md"
      ]
    },
    {
      "sha": "7ceb10035faf79eb6a645938ab15099126714381",
      "short_sha": "7ceb100",
      "message": "[compiler] Rename InferFunctionExprAliasingEffectsSignature (#33532)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33532).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* __->__ #33532\n* #33530",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T15:47:52-07:00",
      "committed_date": "2025-06-18T15:47:52-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingFunctionEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingRanges.ts"
      ]
    },
    {
      "sha": "4335f699870920932c8f30b6ad52173c3d819d16",
      "short_sha": "4335f69",
      "message": "[compiler] More readable alias signature declarations (#33530)\n\nNow that we have support for defining aliasing signatures in\nmoduleTypeProvider, which uses string names for\nreceiver/args/returns/etc, we can reuse that same form for builtin\ndeclarations. The declarations are written in the unparsed form and than\nparsed/validated when registered (in the addFunction/addHook call).\n\nThis also required flushing out configs/schemas for more effect types.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33530).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* __->__ #33530",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T15:47:43-07:00",
      "committed_date": "2025-06-18T15:47:43-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/TypeSchema.ts"
      ]
    },
    {
      "sha": "34179fe3449e141e980bbeaa8fc0a61b156113bb",
      "short_sha": "34179fe",
      "message": "[compiler] moduleTypeProvider support for aliasing signatures (#33526)\n\nThis allows us to type things like `nullthrows()` or `identity()`\nfunctions where the return type is polymorphic on the input.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33526).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* __->__ #33526\n* #33522\n* #33518",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T15:43:48-07:00",
      "committed_date": "2025-06-18T15:43:48-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/TypeSchema.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/typed-identity-function-frozen-input.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/typed-identity-function-frozen-input.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/typed-identity-function-mutable-input.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/typed-identity-function-mutable-input.js",
        "compiler/packages/snap/src/sprout/shared-runtime-type-provider.ts",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "0e7cdebb32817de0e0bbee3b362f0959e36c959c",
      "short_sha": "0e7cdeb",
      "message": "[compiler] Repro for case of lost precision in new inference (#33522)\n\nIn comparing compilation output of the old/new inference models I found\nthis case (heavily distilled into a fixture). Roughly speaking the\nscenario is:\n\n* Create a mutable object `x`\n* Extract part of that object and pass it to a hook/jsx so that _part_\nbecomes frozen\n* Mutate `x`, even indirectly.\n\nIn the old model we can still independently memoize the value from the\nmiddle step, since we assume that part of the larger value is not\nchanging. In the new model, the mutation from the later step effectively\noverrides the freeze effect in step 2, and considers the value to have\nchanged later anyway.\n\nWe've already rolled out and vetted the previous behavior, confirming\nthat the heuristic of \"that part of the mutable object is fozen now\" is\ngenerally safe. I'll fix in a follow-up.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33522).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* __->__ #33522\n* #33518",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T15:43:33-07:00",
      "committed_date": "2025-06-18T15:43:33-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-jsx-captures-value-mutated-later.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-jsx-captures-value-mutated-later.js"
      ]
    },
    {
      "sha": "81d81151169be4b1b0ad8bd6439e94cfc982bb5a",
      "short_sha": "81d8115",
      "message": "[compiler] Fix infinite loop due to uncached applied signatures (#33518)\n\nWhen we apply new aliasing signatures we can generate new temporaries,\nwhich causes the abstract memory model to not converge. The fix is to\nmake sure we cache the applications of these signatures.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33518).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* __->__ #33518",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T15:43:23-07:00",
      "committed_date": "2025-06-18T15:43:23-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-compiler-infinite-loop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-compiler-infinite-loop.js"
      ]
    },
    {
      "sha": "8f4ce72f0bfe02e51e9a7c704dc33122d909f292",
      "short_sha": "8f4ce72",
      "message": "[commit] Improve error for hoisting violations (#33514)\n\nThe previous error for hoisting violations pointed only to the variable\ndeclaration, but didn't show where the value was accessed before that\ndeclaration. We now track where each hoisted variable is first accessed\nand report two errors, one for the reference and one for the\ndeclaration. When we improve our diagnostic infra to support reporting\nerrors at multiple locations we can merge these into a single conceptual\nerror.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33514).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* __->__ #33514\n* #33573",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T15:24:41-07:00",
      "committed_date": "2025-06-18T15:24:41-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hoisting-setstate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-referencing-frozen-hoisted-storecontext-const.expect.md"
      ]
    },
    {
      "sha": "7ce2a63acc199a4f8829625470ea56a347632340",
      "short_sha": "7ce2a63",
      "message": "[compiler] update fixtures (#33573)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33573).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* #33514\n* __->__ #33573",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T15:24:30-07:00",
      "committed_date": "2025-06-18T15:24:30-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-named-callback-cross-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-map-named-callback-cross-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/shared-hook-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/shared-hook-calls.expect.md"
      ]
    },
    {
      "sha": "b067c6fe7962ce2c8ddca6deeadcb21afe2538f8",
      "short_sha": "b067c6f",
      "message": "[compiler] Improve error message for mutating hook args/return (#33513)\n\nThe previous error message was generic, because the old style function\nsignature didn't support a way to specify a reason alongside a freeze\neffect. This meant we could only say why a value was frozen for\ninstructions, but not hooks which use function signatures. By defining a\nnew aliasing signature for custom hooks we can specify a reason and\nprovide a better error message.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33513).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* #33514\n* __->__ #33513",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T13:04:53-07:00",
      "committed_date": "2025-06-18T13:04:53-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferFunctionEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-identifier.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-non-imported-reanimated-shared-value-writes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/retry-no-emit.expect.md"
      ]
    },
    {
      "sha": "e081cb344652dc3003d9194cca618292a889ff2a",
      "short_sha": "e081cb3",
      "message": "[compiler] FunctionExpression context locations point to first reference (#33512)\n\nThis has always been awkward: `FunctionExpression.context` places have\nlocations set to the declaration of the identifier, whereas other\nreferences have locations pointing to the reference itself. Here, we\nupdate context operands to have their location point to the first\nreference of that variable within the function.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33512).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* #33514\n* #33513\n* __->__ #33512\n* #33504\n* #33500\n* #33497\n* #33496",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T13:02:43-07:00",
      "committed_date": "2025-06-18T13:02:43-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-valid-functiondecl-hoisting.expect.md"
      ]
    },
    {
      "sha": "7b67dc92b0339062ce8b6a1d64a458d7c8f04561",
      "short_sha": "7b67dc9",
      "message": "[commit] Better error message for invalid hoisting (#33504)\n\nWe're already tracking which variables are hoisted context variables, so\nif we see a mutation of a frozen value we can emit a custom error\nmessage to help users identify the problem.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33504).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* #33514\n* #33513\n* #33512\n* __->__ #33504\n* #33500\n* #33497\n* #33496",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T13:02:32-07:00",
      "committed_date": "2025-06-18T13:02:32-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hoisting-setstate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-referencing-frozen-hoisted-storecontext-const.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-referencing-frozen-hoisted-storecontext-const.js"
      ]
    },
    {
      "sha": "7c28c154651f54a63a6823e4dc54faa218c05a89",
      "short_sha": "7c28c15",
      "message": "[compiler] Fix AnalyzeFunctions to fully reset context identifiers (#33500)\n\nAnalyzeFunctions had logic to reset the mutable ranges of context\nvariables after visiting inner function expressions. However, there was\na bug in that logic: InferReactiveScopeVariables makes all the\nidentifiers in a scope point to the same mutable range instance. That\nmeant that it was possible for a later function expression to indirectly\ncause an earlier function expressions' context variables to get a\nnon-zero mutable range.\n\nThe fix is to not just reset start/end of context var ranges, but assign\na new range instance. Thanks for the help on debugging, @mofeiz!\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33500).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* #33514\n* #33513\n* #33512\n* #33504\n* __->__ #33500\n* #33497\n* #33496",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T13:02:23-07:00",
      "committed_date": "2025-06-18T13:02:23-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-internal-compiler-shared-mutablerange-bug.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/repro-internal-compiler-shared-mutablerange-bug.js"
      ]
    },
    {
      "sha": "90ccbd71c158a8aeb1bf3ec704011ddd58842b71",
      "short_sha": "90ccbd7",
      "message": "[compiler] Enable new inference by default (#33497)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33497).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* #33514\n* #33513\n* #33512\n* #33504\n* #33500\n* __->__ #33497\n* #33496",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T13:02:12-07:00",
      "committed_date": "2025-06-18T13:02:12-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/aliased-nested-scope-truncated-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-alias-computed-load-2-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-alias-computed-load-3-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-alias-computed-load-4-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-alias-computed-load-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-impure-functions-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-non-imported-reanimated-shared-value-writes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.not-useEffect-external-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassignment-to-global-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-setState.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-named-callback-cross-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-expression-computed-key-object-mutated-later.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-expression-computed-member.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-reordering-deplist-controlflow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-reordering-depslist-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/shared-hook-calls.expect.md"
      ]
    },
    {
      "sha": "0cf6d0c929e14d4a3c5bcc11a7347b4cad250e7f",
      "short_sha": "0cf6d0c",
      "message": "[compiler] Update fixtures for new inference (#33496)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33496).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* #33514\n* #33513\n* #33512\n* #33504\n* #33500\n* #33497\n* __->__ #33496",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T13:01:56-07:00",
      "committed_date": "2025-06-18T13:01:56-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/aliased-nested-scope-truncated-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/aliased-nested-scope-truncated-dep.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-map-named-callback-cross-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-map-named-callback-cross-context.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-2-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-2-iife.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-3-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-3-iife.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-4-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-4-iife.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-iife.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-impure-functions-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-impure-functions-in-render.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-reassign-local-variable-in-jsx-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-reassign-local-variable-in-jsx-callback.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-hook-argument.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.not-useEffect-external-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.not-useEffect-external-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global-indirect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.todo-repro-named-function-with-shadowed-local-same-name.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-optional-chain.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-ref-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/object-expression-computed-key-object-mutated-later.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/object-expression-computed-key-object-mutated-later.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/object-expression-computed-member.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/object-expression-computed-member.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/reactive-setState.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/reactive-setState.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/retry-no-emit.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/shared-hook-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/shared-hook-calls.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-deplist-controlflow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-deplist-controlflow.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-depslist-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-depslist-assignment.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useMemo-reordering-depslist-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useMemo-reordering-depslist-assignment.ts"
      ]
    },
    {
      "sha": "df080d228bdf5260067235c64daaa57ec3cfac23",
      "short_sha": "df080d2",
      "message": "[compiler] Copy fixtures affected by new inference (#33495)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33495).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* #33514\n* #33513\n* #33512\n* #33504\n* #33500\n* #33497\n* #33496\n* __->__ #33495\n* #33494\n* #33572",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T12:58:16-07:00",
      "committed_date": "2025-06-18T12:58:16-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/aliased-nested-scope-truncated-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/aliased-nested-scope-truncated-dep.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-map-named-callback-cross-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-map-named-callback-cross-context.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-2-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-2-iife.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-3-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-3-iife.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-4-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-4-iife.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capturing-function-alias-computed-load-iife.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-impure-functions-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-impure-functions-in-render.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-hook-argument.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-hook-argument.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.not-useEffect-external-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.not-useEffect-external-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global-indirect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.reassignment-to-global.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.todo-repro-named-function-with-shadowed-local-same-name.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-optional-chain.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect-ref-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-after-useeffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/object-expression-computed-key-object-mutated-later.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/object-expression-computed-key-object-mutated-later.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/object-expression-computed-member.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/object-expression-computed-member.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/reactive-setState.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/reactive-setState.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/retry-no-emit.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/shared-hook-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/shared-hook-calls.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-deplist-controlflow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-deplist-controlflow.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-depslist-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-depslist-assignment.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useMemo-reordering-depslist-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useMemo-reordering-depslist-assignment.ts"
      ]
    },
    {
      "sha": "66cfe048d3ab02afd3eeba9e8d7710acb3a4ab38",
      "short_sha": "66cfe04",
      "message": "[compiler] New mutability/aliasing model (#33494)\n\nSquashed, review-friendly version of the stack from\nhttps://github.com/facebook/react/pull/33488.\n\nThis is new version of our mutability and inference model, designed to\nreplace the core algorithm for determining the sets of instructions\ninvolved in constructing a given value or set of values. The new model\nreplaces InferReferenceEffects, InferMutableRanges (and all of its\nsubcomponents), and parts of AnalyzeFunctions. The new model does not\nuse per-Place effect values, but in order to make this drop-in the end\n_result_ of the inference adds these per-Place effects.\n\nI'll write up a larger document on the model, first i'm doing some\nhousekeeping to rebase the PR.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33494).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* #33514\n* #33513\n* #33512\n* #33504\n* #33500\n* #33497\n* #33496\n* #33495\n* __->__ #33494\n* #33572",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T12:58:06-07:00",
      "committed_date": "2025-06-18T12:58:06-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/AssertValidMutableRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/MergeConsecutiveBlocks.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ScopeDependencyUtils.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/visitors.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/DropManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferFunctionEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutableRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingFunctionEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InlineImmediatelyInvokedFunctionExpressions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/InlineJsxTransform.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OutlineJsx.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Transform/TransformFire.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/utils.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoFreezingKnownMutableFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-aliased-capture-aliased-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-aliased-capture-aliased-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-aliased-capture-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-aliased-capture-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-capturing-func-maybealias-captured-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-capturing-func-maybealias-captured-mutate.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-phi-as-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-phi-as-dependency.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-object-expression-computed-key-modified-during-after-construction-hoisted-sequence-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-object-expression-computed-key-modified-during-after-construction-hoisted-sequence-expr.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-separate-memoization-due-to-callback-capturing.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-separate-memoization-due-to-callback-capturing.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.assign-global-in-jsx-spread-attribute.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.assign-global-in-jsx-spread-attribute.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bug-old-inference-false-positive-ref-validation-in-use-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bug-old-inference-false-positive-ref-validation-in-use-effect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-setstate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-setstate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hook-function-argument-mutates-local-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-captures-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-captures-context-variable.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-mutable-function-as-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-return-mutable-function-from-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-uncalled-function-capturing-mutable-values-memoizes-with-captures-values.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-uncalled-function-capturing-mutable-values-memoizes-with-captures-values.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutable-range-shared-inner-outer-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutable-range-shared-inner-outer-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.object-capture-global-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.object-capture-global-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-captures-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-filter.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-filter.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-map-captures-receiver-noAlias.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-map-captures-receiver-noAlias.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-push.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/array-push.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/basic-mutation-via-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/basic-mutation-via-function-expression.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/basic-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/basic-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capture-backedge-phi-with-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/capture-backedge-phi-with-later-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-reassign-local-variable-in-jsx-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-reassign-local-variable-in-jsx-callback.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-useCallback-captures-reassigned-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-useCallback-captures-reassigned-context.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-frozen-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.mutate-frozen-value.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/iife-return-modified-later-phi.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/iife-return-modified-later-phi.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-boxing-unboxing-function-call-indirections-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-boxing-unboxing-function-call-indirections-2.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-boxing-unboxing-function-call-indirections.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-boxing-unboxing-function-call-indirections.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-boxing-unboxing-indirections.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-boxing-unboxing-indirections.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-propertyload.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-propertyload.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/nullable-objects-assume-invoked-direct-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/nullable-objects-assume-invoked-direct-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/potential-mutation-in-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/potential-mutation-in-function-expression.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/reactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/reactive-ref.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/set-add-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/set-add-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/ssa-renaming-ternary-destruction.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/ssa-renaming-ternary-destruction.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitive-mutation-before-capturing-value-created-earlier.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitive-mutation-before-capturing-value-created-earlier.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-access-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-access-assignment.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-aliased-capture-aliased-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-aliased-capture-aliased-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-aliased-capture-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-aliased-capture-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-capturing-func-maybealias-captured-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-capturing-func-maybealias-captured-mutate.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-false-positive-ref-validation-in-use-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-false-positive-ref-validation-in-use-effect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-invalid-phi-as-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-invalid-phi-as-dependency.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-object-expression-computed-key-modified-during-after-construction-hoisted-sequence-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-object-expression-computed-key-modified-during-after-construction-hoisted-sequence-expr.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-separate-memoization-due-to-callback-capturing.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-separate-memoization-due-to-callback-capturing.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-uncalled-function-capturing-mutable-values-memoizes-with-captures-values.expect.md",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "ae962653d63ca88b6727d6f585026f2bbfa313a1",
      "short_sha": "ae96265",
      "message": "[compiler] Remove unnecessary fixture (#33572)\n\nThis is covered by iife-inline-ternary\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33572).\n* #33571\n* #33558\n* #33547\n* #33543\n* #33533\n* #33532\n* #33530\n* #33526\n* #33522\n* #33518\n* #33514\n* #33513\n* #33512\n* #33504\n* #33500\n* #33497\n* #33496\n* #33495\n* #33494\n* __->__ #33572",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-06-18T12:57:54-07:00",
      "committed_date": "2025-06-18T12:57:54-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-iife-inline-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-iife-inline-ternary.js"
      ]
    },
    {
      "sha": "e1dc03492eedaec517e14a6e32b8fda571d00767",
      "short_sha": "e1dc034",
      "message": "Expose cacheSignal() alongside cache() (#33557)\n\nThis was really meant to be there from the beginning. A `cache()`:ed\nentry has a life time. On the server this ends when the render finishes.\nOn the client this ends when the cache of that scope gets refreshed.\n\nWhen a cache is no longer needed, it should be possible to abort any\noutstanding network requests or other resources. That's what\n`cacheSignal()` gives you. It returns an `AbortSignal` which aborts when\nthe cache lifetime is done based on the same execution scope as a\n`cache()`ed function - i.e. `AsyncLocalStorage` on the server or the\nrender scope on the client.\n\n```js\nimport {cacheSignal} from 'react';\nasync function Component() {\n  await fetch(url, { signal: cacheSignal() });\n}\n```\n\nFor `fetch` in particular, a patch should really just do this\nautomatically for you. But it's useful for other resources like database\nconnections.\n\nAnother reason it's useful to have a `cacheSignal()` is to ignore any\nerrors that might have triggered from the act of being aborted. This is\njust a general useful JavaScript pattern if you have access to a signal:\n\n```js\nasync function getData(id, signal) {\n  try {\n     await queryDatabase(id, { signal });\n  } catch (x) {\n     if (!signal.aborted) {\n       logError(x); // only log if it's a real error and not due to cancellation\n     }\n     return null;\n  }\n}\n```\n\nThis just gets you a convenient way to get to it without drilling\nthrough so a more idiomatic code in React might look something like.\n\n```js\nimport {cacheSignal} from \"react\";\n\nasync function getData(id) {\n  try {\n     await queryDatabase(id);\n  } catch (x) {\n     if (!cacheSignal()?.aborted) {\n       logError(x);\n     }\n     return null;\n  }\n}\n```\n\nIf it's called outside of a React render, we normally treat any cached\nfunctions as uncached. They're not an error call. They can still load\ndata. It's just not cached. This is not like an aborted signal because\nthen you couldn't issue any requests. It's also not like an infinite\nabort signal because it's not actually cached forever. Therefore,\n`cacheSignal()` returns `null` when called outside of a React render\nscope.\n\nNotably the `signal` option passed to `renderToReadableStream` in both\nSSR (Fizz) and RSC (Flight Server) is not the same instance that comes\nout of `cacheSignal()`. If you abort the `signal` passed in, then the\n`cacheSignal()` is also aborted with the same reason. However, the\n`cacheSignal()` can also get aborted if the render completes\nsuccessfully or fatally errors during render - allowing any outstanding\nwork that wasn't used to clean up. In the future we might also expand on\nthis to give different\n[`TaskSignal`](https://developer.mozilla.org/en-US/docs/Web/API/TaskSignal)\nto different scopes to pass different render or network priorities.\n\nOn the client version of `\"react\"` this exposes a noop (both for\nFiber/Fizz) due to `disableClientCache` flag but it's exposed so that\nyou can write shared code.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-17T17:04:40-04:00",
      "committed_date": "2025-06-17T17:04:40-04:00",
      "changed_files": [
        "packages/react-noop-renderer/src/ReactNoopFlightServer.js",
        "packages/react-reconciler/src/ReactFiberAsyncDispatcher.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/__tests__/ReactCache-test.js",
        "packages/react-server/src/ReactFizzAsyncDispatcher.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/flight/ReactFlightAsyncDispatcher.js",
        "packages/react-suspense-test-utils/src/ReactSuspenseTestUtils.js",
        "packages/react/index.development.js",
        "packages/react/index.experimental.development.js",
        "packages/react/index.experimental.js",
        "packages/react/index.fb.js",
        "packages/react/index.js",
        "packages/react/index.stable.development.js",
        "packages/react/index.stable.js",
        "packages/react/src/ReactCacheClient.js",
        "packages/react/src/ReactCacheImpl.js",
        "packages/react/src/ReactCacheServer.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactServer.experimental.development.js",
        "packages/react/src/ReactServer.experimental.js",
        "packages/react/src/ReactServer.fb.js",
        "packages/react/src/ReactServer.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "90bee819028bfecb724df298da798607b6a76abf",
      "short_sha": "90bee81",
      "message": "[compiler] Do not inline IIFEs in value blocks (#33548)\n\nAs discussed in chat, this is a simple fix to stop introducing labels\ninside expressions.\n\nThe useMemo-with-optional test was added in\nhttps://github.com/facebook/react/commit/d70b2c2c4e85c2a7061214c15a8ff13167d10422\nand crashes for the same reason- an unexpected label as a value block\nterminal.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33548).\n* __->__ #33548\n* #33546",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-06-16T21:53:50-04:00",
      "committed_date": "2025-06-16T21:53:50-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InlineImmediatelyInvokedFunctionExpressions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useMemo-with-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useMemo-with-optional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/iife-inline-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/iife-inline-ternary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-with-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-with-optional.js"
      ]
    },
    {
      "sha": "75e78d243f749d009fa1c5c09c3464301b992718",
      "short_sha": "75e78d2",
      "message": "[compiler] Add repro for IIFE in ternary causing a bailout (#33546)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33546).\n* #33548\n* __->__ #33546",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-06-16T21:53:27-04:00",
      "committed_date": "2025-06-16T21:53:27-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-iife-inline-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-iife-inline-ternary.js"
      ]
    },
    {
      "sha": "5d24c64cc9c019fc644c4c6f0da640131b80ba18",
      "short_sha": "5d24c64",
      "message": "Remove feature flag enableDO_NOT_USE_disableStrictPassiveEffect (#33524)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-06-16T12:22:47-04:00",
      "committed_date": "2025-06-16T12:22:47-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactTypeOfMode.js",
        "packages/react-reconciler/src/__tests__/ActivityStrictMode-test.js",
        "packages/react/src/__tests__/ReactStrictMode-test.internal.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "6b7e207cabe4c1bc9390d862dd9228e94e9edf4b",
      "short_sha": "6b7e207",
      "message": "[ci] Don't skip experimental prerelease incorrectly (#33527)\n\nPreviously the experimental workflow relied on the canary one running\nfirst to avoid race conditions. However, I didn't account for the fact\nthat the canary one can now be skipped.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-06-13T15:29:59-04:00",
      "committed_date": "2025-06-13T15:29:59-04:00",
      "changed_files": [
        ".github/workflows/runtime_prereleases_manual.yml"
      ]
    },
    {
      "sha": "d60f77a533da830613431ddef83d0eda928697ad",
      "short_sha": "d60f77a",
      "message": "[ci] Update prerelease workflows to allow publishing specific packages (#33525)\n\nIt may be useful at times to publish only specific packages as an\nexperimental tag. For example, if we need to cherry pick some fixes for\nan old release, we can first do so by creating that as an experimental\nrelease just for that package to allow for quick testing by downstream\nprojects.\n\nSimilar to .github/workflows/runtime_releases_from_npm_manual.yml I\nadded three options (`dry`, `only_packages`, `skip_packages`) to\n`runtime_prereleases.yml` which both the manual and nightly workflows\nreuse. I also added a discord notification when the manual workflow is\nrun.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-06-13T14:22:55-04:00",
      "committed_date": "2025-06-13T14:22:55-04:00",
      "changed_files": [
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_prereleases_manual.yml",
        ".github/workflows/runtime_prereleases_nightly.yml"
      ]
    },
    {
      "sha": "12bc60f50989a7e10b96c6fad429af7739c537df",
      "short_sha": "12bc60f",
      "message": "[devtools] Added minimum indent size to Component Tree (#33517)\n\n## Summary\n\nThe devtools Components tab's component tree view currently has a\nbehavior where the indentation of each level of the tree scales based on\nthe available width of the view. If the view is narrow or component\nnames are long, all indentation showing the hierarchy of the tree scales\ndown with the view width until there is no indentation at all. This\nmakes it impossible to see the nesting of the tree, making the tree view\nmuch less useful. With long component names and deep hierarchies this\nissue is particularly egregious. For comparison, the Chrome Dev Tools\nElements panel uses a fixed indentation size, so it doesn't suffer from\nthis issue.\n\nThis PR adds a minimum pixel value for the indentation width, so that\neven when the window is narrow some indentation will still be visible,\nmaintaining the visual representation of the component tree hierarchy.\n\nAlternatively, we could match the behavior of the Chrome Dev Tools and\njust use a constant indentation width.\n\n## How did you test this change?\n\n- tests (yarn test-build-devtools)\n- tested in browser:\n- added an alternate left/right split pane layout to\nreact-devtools-shell to test with\n(https://github.com/facebook/react/pull/33516)\n- tested resizing the tree view in different layout modes\n\n### before this change:\n\n\n\nhttps://github.com/user-attachments/assets/470991f1-dc05-473f-a2cb-4f7333f6bae4\n\nwith a long component name:\n\n\n\nhttps://github.com/user-attachments/assets/1568fc64-c7d7-4659-bfb1-9bfc9592fb9d\n\n\n\n\n\n### after this change:\n\n\n\n\nhttps://github.com/user-attachments/assets/f60bd7fc-97f6-4680-9656-f0db3d155411\n\nwith a long component name:\n\n\nhttps://github.com/user-attachments/assets/6ac3f58c-42ea-4c5a-9a52-c3b397f37b45",
      "author": {
        "name": "James Friend",
        "email": "james@kitefire.com"
      },
      "authored_date": "2025-06-13T10:28:31-04:00",
      "committed_date": "2025-06-13T15:28:31+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.js"
      ]
    },
    {
      "sha": "ed023cfc7304e4e02a79195c68601eff7606136a",
      "short_sha": "ed023cf",
      "message": "[devtools-shell] layout options for testing (#33516)\n\n## Summary\n\nThis PR adds a 'Layout' selector to the devtools shell main example, as\nwell as a resizable split pane, allowing more realistic testing of how\nthe devtools behaves when used in a vertical or horizontal layout and at\ndifferent sizes (e.g. when resizing the Chrome Dev Tools pane).\n\n## How did you test this change?\n\n\n\nhttps://github.com/user-attachments/assets/81179413-7b46-47a9-bc52-4f7ec414e8be",
      "author": {
        "name": "James Friend",
        "email": "james@kitefire.com"
      },
      "authored_date": "2025-06-13T10:25:04-04:00",
      "committed_date": "2025-06-13T15:25:04+01:00",
      "changed_files": [
        "packages/react-devtools-shell/index.html"
      ]
    },
    {
      "sha": "a00ca6f6b51e46a0ccec54a2231bfe7a1ed9ae1d",
      "short_sha": "a00ca6f",
      "message": "[Fizz] Delay detachment of completed boundaries until reveal (#33511)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-06-11T21:24:24+02:00",
      "committed_date": "2025-06-11T21:24:24+02:00",
      "changed_files": [
        "fixtures/view-transition/src/components/App.js",
        "fixtures/view-transition/src/components/NestedReveal.js",
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js"
      ]
    },
    {
      "sha": "888ea60d8e6059790382c0b849be13915b4bcc30",
      "short_sha": "888ea60",
      "message": "[compiler][repro] Postfix operator is incorrectly compiled (#33508)\n\nThis bug was reported via our wg and appears to only affect values\ncreated as a ref.\n\nCurrently, postfix operators used in a callback gets compiled to:\n\n```js\nmodalId.current = modalId.current + 1; // 1\nconst id = modalId.current; // 1\nreturn id;\n```\n\nwhich is semantically incorrect. The postfix increment operator should\nreturn the value before incrementing. In other words something like this\nshould have been compiled instead:\n\n```js\nconst id = modalId.current; // 0\nmodalId.current = modalId.current + 1; // 1\nreturn id;\n```\n\nThis bug does not trigger when the incremented value is a plain\nprimitive, instead there is a TODO bailout.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-06-11T14:40:42-04:00",
      "committed_date": "2025-06-11T14:40:42-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-ref-prefix-postfix-operator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-ref-prefix-postfix-operator.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "b7e2de632b2a160bc09edda1fbb9b8f85a6914e8",
      "short_sha": "b7e2de6",
      "message": "Stringify context as SomeContext instead of SomeContext.Provider (#33507)\n\nThis matches the change in React 19 to use `<SomeContext>` as the\npreferred way to provide a context.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-06-11T12:08:04-04:00",
      "committed_date": "2025-06-11T12:08:04-04:00",
      "changed_files": [
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react-reconciler/src/getComponentNameFromFiber.js",
        "packages/shared/getComponentNameFromType.js"
      ]
    },
    {
      "sha": "ff93c4448c44e8e5562a4102394ebf9f2b0ec847",
      "short_sha": "ff93c44",
      "message": "[Flight] Track Debug Info from Synchronously Unwrapped Promises (#33485)\n\nStacked on #33482.\n\nThere's a flaw with getting information from the execution context of\nthe ping. For the soft-deprecated \"throw a promise\" technique, this is a\nbit unreliable because you could in theory throw the same one multiple\ntimes. Similarly, a more fundamental flaw with that API is that it\ndoesn't allow for tracking the information of Promises that are already\nsynchronously able to resolve.\n\nThis stops tracking the async debug info in the case of throwing a\nPromise and only when you render a Promise. That means some loss of data\nbut we should just warn for throwing a Promise anyway.\n\nInstead, this also adds support for tracking `use()`d thenables and\nforwarding `_debugInfo` from then. This is done by extracting the info\nfrom the Promise after the fact instead of in the resolve so that it\nonly happens once at the end after the pings are done.\n\nThis also supports passing the same Promise in multiple places and\ntracking the debug info at each location, even if it was already\ninstrumented with a synchronous value by the time of the second use.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-11T12:07:10-04:00",
      "committed_date": "2025-06-11T12:07:10-04:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server-dom-turbopack/src/ReactFlightTurbopackReferences.js",
        "packages/react-server-dom-webpack/src/ReactFlightWebpackReferences.js",
        "packages/react-server/src/ReactFlightHooks.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNoop.js",
        "packages/react-server/src/ReactFlightServerTemporaryReferences.js",
        "packages/react-server/src/ReactFlightThenable.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js",
        "scripts/flow/environment.js"
      ]
    },
    {
      "sha": "6c86e56a0fa3c8f253da133330cd5b7d1d20e7e5",
      "short_sha": "6c86e56",
      "message": "Remove feature flag enableRenderableContext (#33505)\n\nThe flag is fully rolled out.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-06-11T11:53:04-04:00",
      "committed_date": "2025-06-11T11:53:04-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-devtools-shared/src/utils.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationNewContext-test.js",
        "packages/react-dom/src/__tests__/ReactServerRendering-test.js",
        "packages/react-is/src/ReactIs.js",
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberNewContext.js",
        "packages/react-reconciler/src/ReactFiberScope.js",
        "packages/react-reconciler/src/ReactFiberUnwindWork.js",
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactNewContext-test.js",
        "packages/react-reconciler/src/getComponentNameFromFiber.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react/src/ReactContext.js",
        "packages/react/src/__tests__/ReactContextValidator-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/ReactSymbols.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "packages/shared/getComponentNameFromType.js"
      ]
    },
    {
      "sha": "56408a5b12fa4099e9dbbeca7f6bc59e1307e507",
      "short_sha": "56408a5",
      "message": "[Flight] Emit timestamps only in forwards advancing time in debug info (#33482)\n\nPreviously you weren't guaranteed to have only advancing time entries,\nyou could jump back in time, but now it omits unnecessary duplicates and\nclamps automatically if you emit a previous time entry to enforce\nforwards order only.\n\nThe reason I didn't do this originally is because `await` can jump in\nthe order because we're trying to encode a graph into a flat timeline\nfor simplicity of the protocol and consumers.\n\n```js\nasync function a() {\n  await fetch1();\n  await fetch2();\n}\n\nasync function b() {\n  await fetch3();\n}\n\nasync function foo() {\n  const p = a();\n  await b();\n  return p;\n}\n```\n\nThis can effectively create two parallel sequences:\n\n```\n--1.................----2.......--\n------3......---------------------\n```\n\nThis can now be flattened to either:\n\n```\n--1.................3---2.......--\n```\n\nOr:\n\n```\n------3......1......----2.......--\n```\n\nDepending on which one we visit first. Regardless, information is lost.\n\nI'd say that the second one is worse encoding of this scenario because\nit pretends that we weren't waiting for part of the timespan that we\nwere. To solve this I think we should probably make `emitAsyncSequence`\ncreate a temporary flat list and then sort it by start time before\nemitting.\n\nAlthough we weren't actually blocked since there was some CPU time that\nwas able to proceed to get to 3. So maybe the second one is actually\nbetter. If we wanted that consistently we'd have to figure out what the\nintersection was.\n\n---------\n\nCo-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-10T11:03:20-04:00",
      "committed_date": "2025-06-10T11:03:20-04:00",
      "changed_files": [
        "fixtures/flight/src/App.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server/src/ReactFlightAsyncSequence.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "c38e26897848374c34ac6b651fce4a9088ed4dd0",
      "short_sha": "c38e268",
      "message": "[Fiber] Fix hydration of useId in SuspenseList (#33491)\n\nIncludes #31412.\n\nThe issue is that `pushTreeFork` stores some global state when reconcile\nchildren. This gets popped by `popTreeContext` in `completeWork`.\nNormally `completeWork` returns its own `Fiber` again if it wants to do\na second pass which will call `pushTreeFork` again in the next pass.\nHowever, `SuspenseList` doesn't return itself, it returns the next child\nto work on.\n\nThe fix is to keep track of the count and push it again it when we\nreturn the next child to attempt.\n\nThere are still some outstanding issues with hydration. Like the\nbackwards test still has the wrong behavior in it because it hydrates\nbackwards and so it picks up the DOM nodes in reverse order.\n`tail=\"hidden\"` also doesn't work correctly.\n\nThere's also another issue with `useId` and `AsyncIterable` in\nSuspenseList when there's an unknown number of children. We don't\nsupport those showing one at a time yet though so it's not an issue yet.\nTo fix it we need to add variable total count to the `useId` algorithm.\nE.g. by falling back to varint encoding.\n\n---------\n\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>\nCo-authored-by: Ricky <rickhanlonii@gmail.com>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-09T19:37:49-04:00",
      "committed_date": "2025-06-09T19:37:49-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMUseId-test.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberSuspenseComponent.js"
      ]
    },
    {
      "sha": "80c03eb7e0f05da5e0de6faebbe8dbb434455454",
      "short_sha": "80c03eb",
      "message": "refactor[devtools]: update css for settings and support css variables in shadow dom scnenario (#33487)\n\n## Summary\n\nMinor changes around css and styling of Settings dialog.\n\n1. `:root` selector was updated to `:is(:root, :host)` to make css\nvariables available on Shadow Root\n2. CSS tweaks around Settings dialog: removed references to deleted\nstyles, removed unused styles, ironed out styling for cases when input\nstyles are enhanced by user agent stylesheet\n\n<!--\nExplain the **motivation** for making this change. What existing problem\ndoes the pull request solve?\n-->\n\n## How did you test this change?\n\n| Before | After |\n|--------|--------|\n| ![Screenshot 2025-06-09 at 15 35\n55](https://github.com/user-attachments/assets/1ac5d002-744b-4b10-9501-d4f2a7c827d2)\n| ![Screenshot 2025-06-09 at 15 26\n12](https://github.com/user-attachments/assets/8cc07cda-99a5-4930-973b-b139b193e349)\n|\n| ![Screenshot 2025-06-09 at 15 36\n02](https://github.com/user-attachments/assets/1af4257c-928d-4ec6-a614-801cc1936f4b)\n| ![Screenshot 2025-06-09 at 15 26\n25](https://github.com/user-attachments/assets/7a3a0f7c-5f3d-4567-a782-dd37368a15ae)\n|\n| ![Screenshot 2025-06-09 at 15 36\n05](https://github.com/user-attachments/assets/a1e00381-2901-4e22-b1c6-4a3f66ba78c9)\n| ![Screenshot 2025-06-09 at 15 26\n30](https://github.com/user-attachments/assets/bdefce68-cbb5-4b88-b44c-a74f28533f7d)\n|\n| ![Screenshot 2025-06-09 at 15 36\n12](https://github.com/user-attachments/assets/4eda6234-0ef0-40ca-ad9d-5990a2b1e8b4)\n| ![Screenshot 2025-06-09 at 15 26\n37](https://github.com/user-attachments/assets/5cac305e-fd29-460c-b0b8-30e477b8c26e)\n|",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-06-09T18:25:19+01:00",
      "committed_date": "2025-06-09T18:25:19+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Settings/ComponentsSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/DebuggingSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/GeneralSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/ProfilerSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsShared.css",
        "packages/react-devtools-shared/src/devtools/views/root.css"
      ]
    },
    {
      "sha": "b6c0aa88140bba2a61c1de16bda2505c89b26235",
      "short_sha": "b6c0aa8",
      "message": "[compiler]: fix link compiler & 4 broken tests from path containing spaces (#33409)\n\n## Summary\n\nProblem #1: Running the `link-compiler.sh` bash script via `\"prebuild\"`\nscript fails if a developer has cloned the `react` repo into a folder\nthat contains _any_ spaces. 3 tests fail because of this.\n\n<img width=\"1003\" alt=\"fail-1\"\nsrc=\"https://github.com/user-attachments/assets/1fbfa9ce-4f84-48d7-b49c-b6e967b8c7ca\"\n/>\n<img width=\"1011\" alt=\"fail-2\"\nsrc=\"https://github.com/user-attachments/assets/0a8c6371-a2df-4276-af98-38f4784cf0da\"\n/>\n<img width=\"1027\" alt=\"fail-3\"\nsrc=\"https://github.com/user-attachments/assets/1c4f4429-800c-4b44-b3da-a59ac85a16b9\"\n/>\n\nFor example, my current folder is:\n`/Users/wes/Development/Open Source Contributions/react`\n\nThe link compiler error returns:\n`./scripts/react-compiler/link-compiler.sh: line 15: cd:\n/Users/wes/Development/Open: No such file or directory`\n\nProblem #2: 1 test in `ReactChildren-test.js` fails due the existing\nstack trace regex which should be lightly revised.\n\n`([^(\\[\\n]+)[^\\n]*/g` is more robust for stack traces: it captures the\nfunction/class name (with dots) and does not break on spaces in file\npaths.\n`([\\S]+)[^\\n]*/g` is simpler but breaks if there are spaces and doesn't\nhandle dotted names well.\n\nAdditionally, we trim the whitespace off the name to resolve extra\nspaces breaking this test as well:\n\n```\n-     in div (at **)\n+     in div  (at **)\n```\n\n<img width=\"987\" alt=\"fail-4\"\nsrc=\"https://github.com/user-attachments/assets/56a673bc-513f-4458-95b2-224129c77144\"\n/>\n\nAll of the above tests pass if I hyphenate my local folder:\n`/Users/wes/Development/Open-Source-Contributions/react`\n\nI selfishly want to keep spaces in my folder names. 🫣\n\n## How did you test this change?\n\n**npx yarn prebuild**\n\nBefore:\n<img width=\"896\" alt=\"Screenshot at Jun 01 11-42-56\"\nsrc=\"https://github.com/user-attachments/assets/4692775c-1e5c-4851-9bd7-e12ed5455e47\"\n/>\n\nAfter:\n<img width=\"420\" alt=\"Screenshot at Jun 01 11-43-42\"\nsrc=\"https://github.com/user-attachments/assets/4e303c00-02b7-4540-ba19-927b2d7034fb\"\n/>\n\n**npx yarn test**\n**npx yarn test\n./packages/react/src/\\_\\_tests\\_\\_/ReactChildren-test.js**\n**npx yarn test -r=xplat --env=development --variant=true --ci\n--shard=3/5**\n\nBefore:\n<img width=\"438\" alt=\"before\"\nsrc=\"https://github.com/user-attachments/assets/f5eedb22-18c3-4124-a04b-daa95c0f7652\"\n/>\n\nAfter:\n<img width=\"439\" alt=\"after\"\nsrc=\"https://github.com/user-attachments/assets/a94218ba-7c6a-4f08-85d3-57540e9d0029\"\n/>\n\n<img width=\"650\" alt=\"Screenshot at Jun 02 18-03-39\"\nsrc=\"https://github.com/user-attachments/assets/3eae993c-a56b-46c8-ae02-d249cb053fe7\"\n/>\n\n<img width=\"685\" alt=\"Screenshot at Jun 03 12-53-47\"\nsrc=\"https://github.com/user-attachments/assets/5b2caa33-d3dc-4804-981d-52cb10b6226f\"\n/>",
      "author": {
        "name": "Wesley LeMahieu",
        "email": "wlemahieu@users.noreply.github.com"
      },
      "authored_date": "2025-06-09T08:40:27-07:00",
      "committed_date": "2025-06-09T08:40:27-07:00",
      "changed_files": [
        "compiler/apps/playground/scripts/link-compiler.sh",
        "packages/internal-test-utils/consoleMock.js",
        "scripts/react-compiler/link-compiler.sh"
      ]
    },
    {
      "sha": "428ab8200128d9421828dbe644c3448d21ea8c45",
      "short_sha": "428ab82",
      "message": "[Flight] Simulate fetch to third party in fixture (#33484)\n\nThis adds some I/O to go get the third party thing to test how it\noverlaps.\n\nWith #33482, this is what it looks like. The await gets cut off when the\nthird party component starts rendering. I.e. after the latency to start.\n\n<img width=\"735\" alt=\"Screenshot 2025-06-08 at 5 42 46 PM\"\nsrc=\"https://github.com/user-attachments/assets/f68d9a84-05a1-4125-b3f0-8f3e4eaaa5c1\"\n/>\n\nThis doesn't fully simulate everything because it should actually also\nsimulate each chunk of the stream coming back too. We could wrap the\nReadableStream to simulate that. In that scenario, it would probably get\nsome awaits on the chunks at the end too.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-09T10:04:40-04:00",
      "committed_date": "2025-06-09T10:04:40-04:00",
      "changed_files": [
        "fixtures/flight/src/App.js"
      ]
    },
    {
      "sha": "4df098c4c2c51a033592ebc84abc47cc49a6bfb2",
      "short_sha": "4df098c",
      "message": "[compiler] Don't include useEffectEvent values in autodeps (#33450)\n\nSummary: useEffectEvent values are not meant to be added to the dep\narray",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-06-09T09:26:45-04:00",
      "committed_date": "2025-06-09T09:26:45-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-effect-event.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-effect-event.js"
      ]
    },
    {
      "sha": "95bcf87e6b29f4efee26d0a79cbdc84776180cce",
      "short_sha": "95bcf87",
      "message": "Format `ReactNativeAttributePayloadFabric.js` with Prettier (#33486)\n\nThe prettier check for this file is currently failing on `main`, after\n#32119 was merged.",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-06-09T13:42:10+02:00",
      "committed_date": "2025-06-09T12:42:10+01:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeAttributePayloadFabric.js"
      ]
    },
    {
      "sha": "911dbd9e34048b21e96f24acb837b926687aa939",
      "short_sha": "911dbd9",
      "message": "feat(ReactNative): prioritize attribute config `process` function to allow processing function props (#32119)\n\n## Summary\n\nIn react-native props that are passed as function get converted to a\nboolean (`true`). This is the default pattern for event handlers in\nreact-native.\nHowever, there are reasons for why you might want to opt-out of this\nbehavior, and instead, pass along the actual function as the prop.\nRight now, there is no way to do this, and props that are functions\nalways get set to `true`.\nThe `ViewConfig` attributes already have the API for a `process`\nfunction. I simply moved the check for the process function up, so if a\nViewConfig's prop attribute configured a process function this is always\ncalled first.\nThis provides an API to opt out of the default behavior. \n\nThis is the accompanied PR for react-native:\n\n- https://github.com/facebook/react-native/pull/48777\n\n## How did you test this change?\n\n<!--\nDemonstrate the code is solid. Example: The exact commands you ran and\ntheir output, screenshots / videos if the pull request changes the user\ninterface.\nHow exactly did you verify that your PR solves the issue you wanted to\nsolve?\n  If you leave this empty, your PR will very likely be closed.\n-->\n\nI modified the code manually in a template react-native app and\nconfirmed its working. This is a code path you only need in very special\ncases, thus it's a bit hard to provide a test for this. I recorded a\nvideo where you can see that the changes are active and the prop is\nbeing passed as native value.\n\nFor this I created a custom native component with a view config that\nlooked like this:\n\n```js\nconst viewConfig = {\n  uiViewClassName: 'CustomView',\n  bubblingEventTypes: {},\n  directEventTypes: {},\n  validAttributes: {\n    nativeProp: {\n      process: (nativeProp) => {\n\t\t// Identity function that simply returns the prop function callback\n        // to opt out of this prop being set to `true` as its a function\n        return nativeProp\n      },\n    },\n  },\n}\n```\n\n\n\nhttps://github.com/user-attachments/assets/493534b2-a508-4142-a760-0b1b24419e19\n\nAdditionally I made sure that this doesn't conflict with any existing\nview configs in react native. In general, this shouldn't be a breaking\nchange, as for existing view configs it didn't made a difference if you\nsimply set `myProp: true` or `myProp: { process: () => {...} }` because\nas soon as it was detected that the prop is a function the config\nwouldn't be used (which is what this PR fixes).\nProbably everyone, including the react-native core components use\n`myProp: true` for callback props, so this change should be fine.",
      "author": {
        "name": "Hanno J. Gödecke",
        "email": "die.drei99@yahoo.de"
      },
      "authored_date": "2025-06-09T11:55:28+02:00",
      "committed_date": "2025-06-09T10:55:28+01:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeAttributePayloadFabric.js",
        "packages/react-native-renderer/src/__tests__/ReactNativeAttributePayloadFabric-test.internal.js"
      ]
    },
    {
      "sha": "c0b5a0cad32cbf237d4c0134bef702d6ba3e393c",
      "short_sha": "c0b5a0c",
      "message": "[Flight] Use Web Streams APIs for 3rd-party component in Flight fixture (#33481)",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-06-08T06:33:25+02:00",
      "committed_date": "2025-06-08T06:33:25+02:00",
      "changed_files": [
        "fixtures/flight/src/App.js"
      ]
    },
    {
      "sha": "e4b88ae4c6c30791b6c1c2794d5a8e32ed19c931",
      "short_sha": "e4b88ae",
      "message": "[Flight] Add Web Streams APIs to unbundled Node entries for Webpack (#33480)",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-06-07T23:39:25+02:00",
      "committed_date": "2025-06-07T23:39:25+02:00",
      "changed_files": [
        "packages/react-server-dom-webpack/npm/server.node.unbundled.js",
        "packages/react-server-dom-webpack/server.node.unbundled.js",
        "packages/react-server-dom-webpack/static.node.unbundled.js"
      ]
    },
    {
      "sha": "6c8bcdaf1b0c3340150e174a342429d94e729fbb",
      "short_sha": "6c8bcda",
      "message": "[Flight] Clarify Semantics for Awaiting Cached Data (#33438)\n\nTechnically the async call graph spans basically all the way back to the\nstart of the app potentially, but we don't want to include everything.\nSimilarly we don't want to include everything from previous components\nin every child component. So we need some heuristics for filtering out\ndata.\n\nWe roughly want to be able to inspect is what might contribute to a\nSuspense loading sequence even if it didn't this time e.g. due to a race\ncondition.\n\nOne flaw with the previous approach was that awaiting a cached promise\nin a sibling that happened to finish after another sibling would be\nexcluded. However, in a different race condition that might end up being\nused so I wanted to include an empty \"await\" in that scenario to have\nsome association from that component.\n\nHowever, for data that resolved fully before the request even started,\nit's a little different. This can be things that are part of the start\nup sequence of the app or externally cached data. We decided that this\nshould be excluded because it doesn't contribute to the loading sequence\nin the expected scenario. I.e. if it's cached. Things that end up being\ncache misses would still be included. If you want to test externally\ncached data misses, then it's up to you or the framework to simulate\nthose. E.g. by dropping the cache. This also helps free up some noise\nsince static / cached data can be excluded in visualizations.\n\nI also apply this principle to forwarding debug info. If you reuse a\ncached RSC payload, then the Server Component render time and its awaits\ngets clamped to the caller as if it has zero render/await time. The I/O\nentry is still back dated but if it was fully resolved before we started\nthen it's completely excluded.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-07T17:26:36-04:00",
      "committed_date": "2025-06-07T17:26:36-04:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "b367b60927dd85239852bfee60715034c7ca97ba",
      "short_sha": "b367b60",
      "message": "[Flight] Add \"use ...\" boundary after the change instead of before it (#33478)\n\nI noticed that the ThirdPartyComponent in the fixture was showing the\nwrong stack and the `\"use third-party\"` is in the wrong location.\n\n<img width=\"628\" alt=\"Screenshot 2025-06-06 at 11 22 11 PM\"\nsrc=\"https://github.com/user-attachments/assets/f0013380-d79e-4765-b371-87fd61b3056b\"\n/>\n\nWhen creating the initial JSX inside the third party server, we should\nmake sure that it has no owner. In a real cross-server environment you\nget this by default by just executing in different context. But since\nthe fixture example is inside the same AsyncLocalStorage as the parent\nit already has an owner which gets transferred. So we should make sure\nthat were we create the JSX has no owner to simulate this.\n\nWhen we then parse a null owner on the receiving side, we replace its\nowner/stack with the owner/stack of the call to `createFrom...` to\nconnect them. This worked fine with only two environments. The bug was\nthat when we did this and then transferred the result to a third\nenvironment we took the original parsed stack trace. We should instead\nparse a new one from the replaced stack in the current environment.\n\nThe second bug was that the `\"use third-party\"` badge ends up in the\nwrong place when we do this kind of thing. Because the stack of the\nthing entering the new environment is the call to `createFrom...` which\nis in the old environment even though the component itself executes in\nthe new environment. So to see if there's a change we should be\ncomparing the current environment of the task to the owner's environment\ninstead of the next environment after the task.\n\nAfter:\n\n<img width=\"494\" alt=\"Screenshot 2025-06-07 at 1 13 28 AM\"\nsrc=\"https://github.com/user-attachments/assets/e2e870ba-f125-4526-a853-bd29f164cf09\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-07T11:28:57-04:00",
      "committed_date": "2025-06-07T11:28:57-04:00",
      "changed_files": [
        "fixtures/flight/src/App.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "9666605abfee7e525a22931ce38d40bb29ddc8a5",
      "short_sha": "9666605",
      "message": "[Flight] Add Web Stream support to the Flight Server in Node (#33474)\n\nThis needs some tweaks to the implementation and a conversion but simple\nenough.\n\n---------\n\nCo-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-07T10:40:09-04:00",
      "committed_date": "2025-06-07T10:40:09-04:00",
      "changed_files": [
        "packages/react-server-dom-parcel/npm/server.node.js",
        "packages/react-server-dom-parcel/npm/static.node.js",
        "packages/react-server-dom-parcel/server.node.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-parcel/static.node.js",
        "packages/react-server-dom-turbopack/npm/server.node.js",
        "packages/react-server-dom-turbopack/npm/static.node.js",
        "packages/react-server-dom-turbopack/server.node.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-turbopack/static.node.js",
        "packages/react-server-dom-webpack/npm/server.node.js",
        "packages/react-server-dom-webpack/npm/static.node.js",
        "packages/react-server-dom-webpack/server.node.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.unbundled.js",
        "packages/react-server-dom-webpack/static.node.js"
      ]
    },
    {
      "sha": "65ec57df3781d2c62456bb136c7f160f7e834492",
      "short_sha": "65ec57d",
      "message": "[Fizz] Add Web Streams to Fizz Node entry point (#33475)\n\nNew take on #33441.\n\nThis uses a wrapper instead of a separate bundle.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-06T20:16:43-04:00",
      "committed_date": "2025-06-06T20:16:43-04:00",
      "changed_files": [
        "packages/react-dom/npm/server.node.js",
        "packages/react-dom/npm/static.node.js",
        "packages/react-dom/server.node.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticNode-test.js",
        "packages/react-dom/src/server/ReactDOMFizzServerNode.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticEdge.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticNode.js",
        "packages/react-dom/src/server/react-dom-server.node.js",
        "packages/react-dom/src/server/react-dom-server.node.stable.js",
        "packages/react-dom/static.node.js",
        "packages/react-server/src/ReactServerStreamConfigNode.js"
      ]
    },
    {
      "sha": "b3d5e9078685c000e7e9ee3668a7a4b4f3256b1f",
      "short_sha": "b3d5e90",
      "message": "[Fizz] Include unit of threshold in rel=expect deopt error (#33476)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-06-07T02:11:33+02:00",
      "committed_date": "2025-06-07T02:11:33+02:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServerEdge-test.js",
        "packages/react-server/src/ReactFizzServer.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "280ff6fed2a84b6ad7588c72d3e66b20f0f3c91a",
      "short_sha": "280ff6f",
      "message": "[Flight] Add Web Stream support to the Flight Client in Node (#33473)\n\nThis effectively lets us consume Web Streams in a Node build. In fact\nthe Node entry point is now just adding Node stream APIs.\n\nFor the client, this is simple because the configs are not actually\nstream type specific. The server is a little trickier.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-06T17:14:15-04:00",
      "committed_date": "2025-06-06T17:14:15-04:00",
      "changed_files": [
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientNode.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "82f3684c63fd60fdacbe4d536214596ffd7a465f",
      "short_sha": "82f3684",
      "message": "Revert Node Web Streams (#33472)\n\nReverts #33457, #33456 and #33442.\n\nThere are too many issues with wrappers, lazy init, stateful modules,\nduplicate instantiation of async_hooks and duplication of code.\n\nInstead, we'll just do a wrapper polyfill that uses Node Streams\ninternally.\n\nI kept the client indirection files that I added for consistency with\nthe server though.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-06T16:26:36-04:00",
      "committed_date": "2025-06-06T16:26:36-04:00",
      "changed_files": [
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webstreams-parcel.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webstreams-turbopack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webstreams-webpack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webstreams.js",
        "packages/react-dom/npm/server.node.js",
        "packages/react-dom/npm/static.node.js",
        "packages/react-dom/server.node.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerNodeWebStreams-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticNodeWebStreams-test.js",
        "packages/react-dom/src/server/react-dom-server.node-webstreams.js",
        "packages/react-dom/src/server/react-dom-server.node-webstreams.stable.js",
        "packages/react-dom/static.node.js",
        "packages/react-server-dom-parcel/npm/client.node.js",
        "packages/react-server-dom-parcel/npm/server.node.js",
        "packages/react-server-dom-parcel/src/client/react-flight-dom-client.node-webstreams.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.node-webstreams.js",
        "packages/react-server-dom-turbopack/npm/client.node.js",
        "packages/react-server-dom-turbopack/npm/server.node.js",
        "packages/react-server-dom-turbopack/src/client/react-flight-dom-client.node-webstreams.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node-webstreams.js",
        "packages/react-server-dom-webpack/npm/client.node.js",
        "packages/react-server-dom-webpack/npm/client.node.unbundled.js",
        "packages/react-server-dom-webpack/npm/server.node.js",
        "packages/react-server-dom-webpack/npm/server.node.unbundled.js",
        "packages/react-server-dom-webpack/src/client/react-flight-dom-client.node-webstreams.js",
        "packages/react-server-dom-webpack/src/client/react-flight-dom-client.node-webstreams.unbundled.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node-webstreams.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node-webstreams.unbundled.js",
        "packages/react-server/src/ReactServerStreamConfigNodeWebStreams.js",
        "packages/react-server/src/forks/ReactServerStreamConfig.dom-node-webstreams.js",
        "scripts/jest/setupTests.js",
        "scripts/rollup/bundles.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "142aa0744d0e73dc5390bc19d4d41dd8aeda2b19",
      "short_sha": "142aa07",
      "message": "[Fizz] Support deeply nested Suspense inside fallback (#33467)\n\nWhen deeply nested Suspense boundaries inside a fallback of another\nboundary resolve it is possible to encounter situations where you either\nattempt to flush an aborted Segment or you have a boundary without any\nroot segment. We intended for both of these conditions to be impossible\nto arrive at legitimately however it turns out in this situation you\ncan. The fix is two-fold\n\n1. allow flushing aborted segments by simply skipping them. This does\nremove some protection against future misconfiguraiton of React because\nit is no longer an invariant that you hsould never attempt to flush an\naborted segment but there are legitimate cases where this can come up\nand simply omitting the segment is fine b/c we know that the user will\nnever observe this. A semantically better solution would be to avoid\nflushing boudaries inside an unneeded fallback but to do this we would\nneed to track all boundaries inside a fallback or create back pointers\nwhich add to memory overhead and possibly make GC harder to do\nefficiently. By flushing extra we're maintaining status quo and only\nsuffer in performance not with broken semantics.\n\n2. when queuing completed segments allow for queueing aborted segments\nand if we are eliding the enqueued segment allow for child segments that\nare errored to be enqueued too. This will mean that we can maintain the\ninvariant that a boundary must have a root segment the first time we\nflush it, it just might be aborted (see point 1 above).\n\nThis change has two seemingly similar test cases to exercise this fix.\nThe reason we need both is that when you have empty segments you hit\ndifferent code paths within Fizz and so each one (without this fix)\ntriggers a different error pathway.\n\nThis change also includes a fix to our tests where we were not\nappropriately setting CSPnonce back to null at the start of each test so\nin some contexts scripts would not run for some tests",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-06-06T11:59:15-07:00",
      "committed_date": "2025-06-06T11:59:15-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "6ccf328499f06c140ffe96a096744c22319394cc",
      "short_sha": "6ccf328",
      "message": "[Fizz] Shorten throttle to hit a specific target metric (#33463)\n\nAdding throttling or delaying on images, can obviously impact metrics.\nHowever, it's all in the name of better actual user experience overall.\n(Note that it's not strictly worse even for metric. Often it's actually\nstrictly better due to less work being done overall thanks to batching.)\n\nMetrics can impact things like search ranking but I believe this is on a\ncurve. If you're already pretty good, then a slight delay won't suddenly\nmake you rank in a completely different category. Similarly, if you're\nalready pretty bad then a slight delay won't make it suddenly way worse.\nIt's still in the same realm. It's just one weight of many. I don't\nthink this will make a meaningful practical impact and if it does,\nthat's probably a bug in the weights that will get fixed.\n\nHowever, because there's a race to try to \"make everything green\" in\nterms of web vitals, if you go from green to yellow only because of some\nthrottling or suspensey images, it can feel bad. Therefore this\nimplements a heuristic where if the only reason we'd miss a specific\ntarget is because of throttling or suspensey images, then we shorten the\ntimeout to hit the metric. This is a worse user experience because it\ncan lead to extra flashing but feeling good about \"green\" matters too.\n\nIf you then have another reveal that happens to be the largest\ncontentful paint after that, then that's throttled again so that it\ndoesn't become flashy after that. If you've already missed the deadline\nthen you're not going to hit your metric target anyway. It can affect\naverage but not median.\n\nThis is mainly about LCP. It doesn't affect FCP since that doesn't have\na throttle. If your LCP is the same as your FCP then it also doesn't\nmatter.\n\nWe assume that `performance.now()`'s zero point starts at the \"start of\nthe navigation\" which makes this simple. Even if we used the\n`PerformanceNavigationTiming` API it would just tell us the same thing.\n\nThis only implements for Fizz since these metrics tend to currently only\nby tracked for initial loads, but with soft navs tracking we could\nconsider implementing the same for Fiber throttles.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-06T14:01:15-04:00",
      "committed_date": "2025-06-06T14:01:15-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js"
      ]
    },
    {
      "sha": "a374e0ec87ec1d45a94b69e26c747529ea5dbab0",
      "short_sha": "a374e0e",
      "message": "[ci] Fix missing permissions for stale job (#33466)\n\nMissed these the last time.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-06-06T13:32:51-04:00",
      "committed_date": "2025-06-06T13:32:51-04:00",
      "changed_files": [
        ".github/workflows/shared_stale.yml"
      ]
    },
    {
      "sha": "ab859e31be5db56106161060033109c9f2d26eca",
      "short_sha": "ab859e3",
      "message": "[Flight] Build Node.js Web Streams builds for Turbopack and Parcel (#33457)\n\nSame as #33456 and #33442 but for Turbopack and Parcel.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-06T11:07:40-04:00",
      "committed_date": "2025-06-06T11:07:40-04:00",
      "changed_files": [
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webstreams-parcel.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webstreams-turbopack.js",
        "packages/react-server-dom-parcel/client.browser.js",
        "packages/react-server-dom-parcel/client.edge.js",
        "packages/react-server-dom-parcel/client.node.js",
        "packages/react-server-dom-parcel/npm/client.node.js",
        "packages/react-server-dom-parcel/npm/server.node.js",
        "packages/react-server-dom-parcel/src/client/react-flight-dom-client.browser.js",
        "packages/react-server-dom-parcel/src/client/react-flight-dom-client.edge.js",
        "packages/react-server-dom-parcel/src/client/react-flight-dom-client.node-webstreams.js",
        "packages/react-server-dom-parcel/src/client/react-flight-dom-client.node.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.node-webstreams.js",
        "packages/react-server-dom-turbopack/client.browser.js",
        "packages/react-server-dom-turbopack/client.edge.js",
        "packages/react-server-dom-turbopack/client.node.js",
        "packages/react-server-dom-turbopack/npm/client.node.js",
        "packages/react-server-dom-turbopack/npm/server.node.js",
        "packages/react-server-dom-turbopack/src/client/react-flight-dom-client.browser.js",
        "packages/react-server-dom-turbopack/src/client/react-flight-dom-client.edge.js",
        "packages/react-server-dom-turbopack/src/client/react-flight-dom-client.node-webstreams.js",
        "packages/react-server-dom-turbopack/src/client/react-flight-dom-client.node.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node-webstreams.js",
        "packages/react-server-dom-webpack/client.browser.js",
        "packages/react-server-dom-webpack/client.edge.js",
        "packages/react-server-dom-webpack/client.node.js",
        "packages/react-server-dom-webpack/client.node.unbundled.js",
        "scripts/rollup/bundles.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "e8d15fa19efcd18f0947fe4189652f5b64f74256",
      "short_sha": "e8d15fa",
      "message": "[Flight] Build node-webstreams version of bundled webpack server (#33456)\n\nFollow up to #33442. This is the bundled version.\n\nTo keep type check passes from exploding and the maintainance of the\nannoying `paths: []` list small, this doesn't add this to flow type\nchecks. We might miss some config but every combination should already\nbe covered by other one passes.\n\nI also don't add any jest tests because to test these double export\nentry points we need conditional importing to cover builds and\nnon-builds which turns out to be difficult for the Flight builds so\nthese aren't covered by any basic build tests.\n\nThis approach is what I'm going for, for the other bundlers too.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-06T11:07:15-04:00",
      "committed_date": "2025-06-06T11:07:15-04:00",
      "changed_files": [
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webstreams-webpack.js",
        "packages/react-server-dom-webpack/npm/client.node.js",
        "packages/react-server-dom-webpack/npm/server.node.js",
        "packages/react-server-dom-webpack/src/client/react-flight-dom-client.node-webstreams.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node-webstreams.js",
        "scripts/jest/setupTests.js",
        "scripts/rollup/bundles.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "d177272802b7f86a847312c23b7e60a6f56434de",
      "short_sha": "d177272",
      "message": "[Fizz] Error and deopt from rel=expect for large documents without boundaries (#33454)\n\nWe want to make sure that we can block the reveal of a well designed\ncomplete shell reliably. In the Suspense model, client transitions don't\nhave any way to implicitly resolve. This means you need to use Suspense\nor SuspenseList to explicitly split the document. Relying on implicit\nwould mean you can't add a Suspense boundary later where needed. So we\nhighly encourage the use of them around large content.\n\nHowever, if you have constructed a too large shell (e.g. by not adding\nany Suspense boundaries at all) then that might take too long to render\non the client. We shouldn't punish users (or overzealous metrics\ntracking tools like search engines) in that scenario.\n\nThis opts out of render blocking if the shell ends up too large to be\nintentional and too slow to load. Instead it deopts to showing the\ncontent split up in arbitrary ways (browser default). It only does this\nfor SSR, and not client navs so it's not reliable.\n\nIn fact, we issue an error to `onError`. This error is recoverable in\nthat the document is still produced. It's up to your framework to decide\nif this errors the build or just surface it for action later.\n\nWhat should be the limit though? There's a trade off here. If this limit\nis too low then you can't fit a reasonably well built UI within it\nwithout getting errors. If it's too high then things that accidentally\nfall below it might take too long to load.\n\nI came up with 512kB of uncompressed shell HTML. See the comment in code\nfor the rationale for this number. TL;DR: Data and theory indicates that\nhaving this much content inside `rel=\"expect\"` doesn't meaningfully\nchange metrics. Research of above-the-fold content on various websites\nindicate that this can comfortable fit all of them which should be\nenough for any intentional initial paint.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-06T10:29:48-04:00",
      "committed_date": "2025-06-06T10:29:48-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerEdge-test.js",
        "packages/react-dom/src/__tests__/ReactDOMLegacyFloat-test.js",
        "packages/react-dom/src/__tests__/ReactRenderDocument-test.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-server/src/ReactFizzServer.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "22b929156c325eaf52c375f0c62801831951814a",
      "short_sha": "22b9291",
      "message": "[Fizz] Suspensey Images for View Transition Reveals (#33433)\n\nBlock the view transition on suspensey images Up to 500ms just like the\nclient.\n\nWe can't use `decode()` because a bug in Chrome where those are blocked\non `startViewTransition` finishing we instead rely on sync decoding but\nalso that the image is live when it's animating in and we assume it\ndoesn't start visible.\n\nHowever, we can block the View Transition from starting on the `\"load\"`\nor `\"error\"` events.\n\nThe nice thing about blocking inside `startViewTransition` is that we\nhave already done the layout so we can only wait on images that are\nwithin the viewport at this point. We might want to do that in Fiber\ntoo. If many image doesn't have fixed size but need to load first, they\ncan all end up in the viewport. We might consider only doing this for\nimages that have a fixed size or only a max number that doesn't have a\nfixed size.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-06T10:14:13-04:00",
      "committed_date": "2025-06-06T10:14:13-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js"
      ]
    },
    {
      "sha": "a3be6829c6425f306a8bef9f7dba72d1347a64b3",
      "short_sha": "a3be682",
      "message": "[tests] remove pretest compiler script (#33452)\n\nThis shouldn't be needed now that the lint rule was move",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-06-06T09:16:58-04:00",
      "committed_date": "2025-06-06T09:16:58-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml",
        "package.json",
        "scripts/jest/config.base.js"
      ]
    },
    {
      "sha": "b1759882c0b8045aff27fa9e41600534d396f69c",
      "short_sha": "b175988",
      "message": "[Flight] Bypass caches in Flight fixture if requested (#33445)",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-06-06T06:42:58+02:00",
      "committed_date": "2025-06-06T06:42:58+02:00",
      "changed_files": [
        "fixtures/flight/server/global.js",
        "fixtures/flight/server/region.js",
        "fixtures/flight/src/App.js"
      ]
    },
    {
      "sha": "dddcae7a11b8241cbd6e2de55f9e68881baea458",
      "short_sha": "dddcae7",
      "message": "Enable the `enableEagerAlternateStateNodeCleanup` Feature Flag (#33447)\n\n## Summary\n\nEnables the `enableEagerAlternateStateNodeCleanup` feature flag for all\nvariants, while maintaining the `__VARIANT__` for the internal React\nNative flavor for backtesting reasons.\n\n## How did you test this change?\n\n```\n$ yarn test\n```",
      "author": {
        "name": "Timothy Yung",
        "email": "yungsters@meta.com"
      },
      "authored_date": "2025-06-05T14:22:35-07:00",
      "committed_date": "2025-06-05T14:22:35-07:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "43714eb4e970d0200fdc5eac887691df7fae53d5",
      "short_sha": "43714eb",
      "message": "Do not notify Discord for draft pull requests (#33446)\n\nWhen I added the `ready_for_review` event in #32344, no notifications\nfor opened draft PRs were sent due to some other condition. This is not\nthe case anymore, so we need to exclude draft PRs from triggering a\nnotification when the workflow is run because of an `opened` event. This\nevent is still needed because the `ready_for_review` event only fires\nwhen an existing draft PR is converted to a non-draft state. It does not\ntrigger for pull requests that are opened directly as ready-for-review.",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-06-05T21:08:57+02:00",
      "committed_date": "2025-06-05T15:08:57-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml"
      ]
    },
    {
      "sha": "a5110b22f0a02cb87cd2bca5dc4527c73e2f281b",
      "short_sha": "a5110b2",
      "message": "[Flight] Add a Node.js Web Streams bundle for unbundled client/server for Webpack (#33442)\n\nLike #33441 but for Flight.\n\nThis is just one of the many combinations needed. I'm just starting with\none.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-05T14:29:02-04:00",
      "committed_date": "2025-06-05T14:29:02-04:00",
      "changed_files": [
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webstreams.js",
        "packages/react-server-dom-webpack/npm/client.node.unbundled.js",
        "packages/react-server-dom-webpack/npm/server.node.unbundled.js",
        "packages/react-server-dom-webpack/src/client/react-flight-dom-client.browser.js",
        "packages/react-server-dom-webpack/src/client/react-flight-dom-client.edge.js",
        "packages/react-server-dom-webpack/src/client/react-flight-dom-client.node-webstreams.unbundled.js",
        "packages/react-server-dom-webpack/src/client/react-flight-dom-client.node.js",
        "packages/react-server-dom-webpack/src/client/react-flight-dom-client.node.unbundled.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node-webstreams.unbundled.js",
        "scripts/rollup/bundles.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "b4477d3800ccb0bdf26670cd1f021d094159c38f",
      "short_sha": "b4477d3",
      "message": "[Flight] Add a cached 3rd-party component to the Flight fixture (#33443)\n\nThis should allow us to visualize what\nhttps://github.com/facebook/react/pull/33438 is trying to convey.\n\nAn uncached 3rd-party component is displayed like this in the dev tools:\n\n<img width=\"1072\" alt=\"Screenshot 2025-06-05 at 12 57 32\"\nsrc=\"https://github.com/user-attachments/assets/d418ae23-d113-4dc9-98b8-ab426710454a\"\n/>\n\nHowever, when the component is restored from a cache, it looks like\nthis:\n\n<img width=\"1072\" alt=\"Screenshot 2025-06-05 at 12 56 56\"\nsrc=\"https://github.com/user-attachments/assets/a0e34379-d8c0-4b14-8b54-b5c06211232b\"\n/>\n\nThe `Server Components ⚛` track is missing completely here, and the\n`Loading profile...` phase also took way longer than without caching the\n3rd-party component.\n\nOn `main`, the `Server Components ⚛` track is not missing:\n\n<img width=\"1072\" alt=\"Screenshot 2025-06-05 at 14 31 20\"\nsrc=\"https://github.com/user-attachments/assets/c35e405d-27ca-4b04-a34c-03bd959a7687\"\n/>\n\nThe cached 3rd-party component starts before the current render, and is\nalso not excluded here, which is of course expected without #33438.",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-06-05T17:19:54+02:00",
      "committed_date": "2025-06-05T17:19:54+02:00",
      "changed_files": [
        "fixtures/flight/src/App.js"
      ]
    },
    {
      "sha": "93f1668045b924294f5832d5044fa049cd7af16e",
      "short_sha": "93f1668",
      "message": "[Fizz] Add Node Web Streams bundle for SSR (#33441)\n\nWe highly recommend using Node Streams in Node.js because it's much\nfaster and it is less likely to cause issues when chained in things like\ncompression algorithms that need explicit flushing which the Web Streams\necosystem doesn't have a good solution for. However, that said, people\nwant to be able to use the worse option for various reasons.\n\nThe `.edge` builds aren't technically intended for Node.js. A Node.js\nenvironments needs to be patched in various ways to support it. It's\nalso less optimal since it can't use [Node.js exclusive\nfeatures](https://github.com/facebook/react/pull/33388) and have to use\n[the lowest common\ndenominator](https://github.com/facebook/react/pull/27399) such as JS\nimplementations instead of native.\n\nThis adds a Web Streams build of Fizz but exclusively for Node.js so\nthat in it we can rely on Node.js modules. The main difference compared\nto Edge is that SSR now uses `createHash` from the `\"crypto\"` module and\nimports `TextEncoder` from `\"util\"`. We use `setImmediate` instead of\n`setTimeout`.\n\nThe public API is just `react-dom/server` which in Node.js automatically\nimports `react-dom/server.node` which re-exports the legacy bundle, Node\nStreams bundle and Node Web Streams bundle. The main downside is if your\nbundler isn't smart to DCE this barrel file.\n\nWith Flight the difference is larger but that's a bigger lift.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-05T10:50:41-04:00",
      "committed_date": "2025-06-05T10:50:41-04:00",
      "changed_files": [
        "packages/react-dom/npm/server.node.js",
        "packages/react-dom/npm/static.node.js",
        "packages/react-dom/server.node.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerNodeWebStreams-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticNodeWebStreams-test.js",
        "packages/react-dom/src/server/react-dom-server.node-webstreams.js",
        "packages/react-dom/src/server/react-dom-server.node-webstreams.stable.js",
        "packages/react-dom/static.node.js",
        "packages/react-server/src/ReactServerStreamConfigNodeWebStreams.js",
        "packages/react-server/src/forks/ReactServerStreamConfig.dom-node-webstreams.js",
        "packages/react/src/__tests__/ReactMismatchedVersions-test.js",
        "scripts/rollup/bundles.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "37054867c15a7381abe0f73d98f3fecd06da52da",
      "short_sha": "3705486",
      "message": "[Flight] Forward debugInfo from awaited instrumented Promises (#33415)\n\nStacked on #33403.\n\nWhen a Promise is coming from React such as when it's passed from\nanother environment, we should forward the debug information from that\nenvironment. We already do that when rendered as a child.\n\nThis makes it possible to also `await promise` and have the information\nfrom that instrumented promise carry through to the next render.\n\nThis is a bit tricky because the current protocol is that we have to\nread it from the Promise after it resolves so it has time to be assigned\nto the promise. `async_hooks` doesn't pass us the instance (even though\nit has it) when it gets resolved so we need to keep it around. However,\nwe have to be very careful because if we get this wrong it'll cause a\nmemory leak since we retain things by `asyncId` and then manually listen\nfor `destroy()` which can only be called once a Promise is GC:ed, which\nit can't be if we retain it. We have to therefore use a `WeakRef` in\ncase it never resolves, and then read the `_debugInfo` when it resolves.\nWe could maybe install a setter or something instead but that's also\nheavy.\n\nThe other issues is that we don't use native Promises in\nReactFlightClient so our instrumented promises aren't picked up by the\n`async_hooks` implementation and so we never get a handle to our\nthenable instance. To solve this we can create a native wrapper only in\nDEV.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-04T00:49:03-04:00",
      "committed_date": "2025-06-04T00:49:03-04:00",
      "changed_files": [
        ".eslintrc.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server/src/ReactFlightAsyncSequence.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNoop.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js",
        "scripts/rollup/validate/eslintrc.cjs.js",
        "scripts/rollup/validate/eslintrc.cjs2015.js",
        "scripts/rollup/validate/eslintrc.esm.js",
        "scripts/rollup/validate/eslintrc.fb.js",
        "scripts/rollup/validate/eslintrc.rn.js"
      ]
    },
    {
      "sha": "d742611ce40545127032f4e221c78bf9f70eb437",
      "short_sha": "d742611",
      "message": "Replace Implicit Options on SuspenseList with Explicit Options (#33424)\n\nWe want to change the defaults for `revealOrder` and `tail` on\nSuspenseList. This is an intermediate step to allow experimental users\nto upgrade.\n\nTo explicitly specify these options I added `revealOrder=\"independent\"`\nand `tail=\"visible\"`.\n\nI then added warnings if `undefined` or `null` is passed. You must now\nalways explicitly specify them. However, semantics are still preserved\nfor now until the next step.\n\nWe also want to change the rendering order of the `children` prop for\n`revealOrder=\"backwards\"`. As an intermediate step I first added\n`revealOrder=\"unstable_legacy-backwards\"` option. This will only be\ntemporary until all users can switch to the new `\"backwards\"` semantics\nonce we flip it in the next step.\n\nI also clarified the types that the directional props requires iterable\nchildren but not iterable inside of those. Rows with multiple items can\nbe modeled as explicit fragments.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-03T17:40:30-04:00",
      "committed_date": "2025-06-03T17:40:30-04:00",
      "changed_files": [
        ".eslintrc.js",
        "fixtures/ssr/src/components/LargeContent.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzSuspenseList-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMServerSuspense-test.internal.js",
        "packages/react-dom/src/__tests__/ReactWrongReturnPointer-test.js",
        "packages/react-reconciler/src/ReactChildFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberSuspenseComponent.js",
        "packages/react-reconciler/src/__tests__/ReactContextPropagation-test.js",
        "packages/react-reconciler/src/__tests__/ReactErrorStacks-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseyCommitPhase-test.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "154008172573d64519ebbc23da611a27073b0a8c",
      "short_sha": "1540081",
      "message": "[Flight] Encode Async I/O Tasks using the Enclosing Line/Column (#33403)\n\nStacked on #33402.\n\nThere's a bug in Chrome Performance tracking which uses the enclosing\nline/column instead of the callsite in stacks.\n\nFor our fake eval:ed functions that represents functions on the server,\nwe can position the enclosing function body at the position of the\ncallsite to simulate getting the right line.\n\nUnfortunately, that doesn't give us exactly the right callsite when it's\nused for other purposes that uses the callsite like console logs and\nerror reporting and stacks inside breakpoints. So I don't think we want\nto always do this.\n\nFor ReactAsyncInfo/ReactIOInfo, the only thing we're going to use the\nfake task for is the Performance tracking, so it doesn't have any\ndownsides until Chrome fixes the bug and we'd have to revert it.\nTherefore this PR uses that techniques only for those entries.\n\nWe could do this for Server Components too but we're going to use those\nfor other things too like console logs. I don't think it's worth\nduplicating the Task objects. That would also make it inconsistent with\nClient Components.\n\nFor Client Components, we could in theory also generate fake evals but\nthat would be way slower since there's so many of them and currently we\nrely on the native implementation for those. So doesn't seem worth\nfixing.\n\nBut since we can at least fix it for RSC I/O/awaits we can do this hack.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-03T17:30:31-04:00",
      "committed_date": "2025-06-03T17:30:31-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "9cc74fec749bcca2e0f5d1e41aa612b2135641ff",
      "short_sha": "9cc74fe",
      "message": "[Flight] Emit the time we awaited something inside a Server Component (#33402)\n\nStacked on #33400. \n\n<img width=\"1261\" alt=\"Screenshot 2025-06-01 at 10 27 47 PM\"\nsrc=\"https://github.com/user-attachments/assets/a5a73ee2-49e0-4851-84ac-e0df6032efb5\"\n/>\n\nThis is emitted with the start/end time and stack of the \"await\". Which\nmay be different than the thing that started the I/O.\n\nThese awaits aren't quite as simple as just every await since you can\nstart a sequence in parallel there can actually be multiple overlapping\nawaits and there can be CPU work interleaved with the await on the same\ncomponent.\n\n```js\nfunction getData() {\n  await fetch(...);\n  await fetch(...);\n}\nconst promise = getData();\ndoWork();\nawait promise;\n```\n\nThis has two \"I/O\" awaits but those are actually happening in parallel\nwith `doWork()`.\n\nSince these also could have started before we started rendering this\nsequence (e.g. a component) we have to clamp it so that we don't\nconsider awaits that start before the component.\n\nWhat we're conceptually trying to convey is the time this component was\nblocked due to that I/O resource. Whether it's blocked from completing\nthe last result or if it's blocked from issuing a waterfall request.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-03T17:29:41-04:00",
      "committed_date": "2025-06-03T17:29:41-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-server/src/ReactFlightAsyncSequence.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js"
      ]
    },
    {
      "sha": "157ac578ded11352330dbdfb8cf339b28c6a16d6",
      "short_sha": "157ac57",
      "message": "[Flight] Include env in ReactAsyncInfo and ReactIOInfo (#33400)\n\nStacked on #33395.\n\nThis lets us keep track of which environment this was fetched and\nawaited.\n\nCurrently the IO and await is in the same environment. It's just kept\nwhen forwarded. Once we support forwarding information from a Promise\nfetched from another environment and awaited in this environment then\nthe await can end up being in a different environment.\n\nThere's a question of when the await is inside Flight itself such as\nwhen you return a promise fetched from another environment whether that\nshould mean that the await is in the current environment. I don't think\nso since the original stack trace is the best stack trace. It's only if\nyou `await` it in user space in this environment first that this might\nhappen and even then it should only be considered if there wasn't a\nbetter await earlier or if reading from the other environment was itself\nI/O.\n\nThe timing of *when* we read `environmentName()` is a little interesting\nhere too.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-03T17:28:46-04:00",
      "committed_date": "2025-06-03T17:28:46-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "45da4e055dc7a2b9de6abdae0709e242f8091636",
      "short_sha": "45da4e0",
      "message": "[Flight] Track Owner on AsyncInfo and IOInfo (#33395)\n\nStacked on #33394.\n\nThis lets us create async stack traces to the owner that was in context\nwhen the I/O was started or awaited.\n\n<img width=\"615\" alt=\"Screenshot 2025-06-01 at 12 31 52 AM\"\nsrc=\"https://github.com/user-attachments/assets/6ff5a146-33d6-4a4b-84af-1b57e73047d4\"\n/>\n\nThis owner might not be the immediate closest parent where the I/O was\nawaited.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-03T16:12:26-04:00",
      "committed_date": "2025-06-03T16:12:26-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server/src/ReactFlightAsyncSequence.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "d8919a0a6854715a4a77db24ed7a94a124487d86",
      "short_sha": "d8919a0",
      "message": "[Flight] Log \"Server Requests\" Track (#33394)\n\nStacked on #33392.\n\nThis adds another track to the Performance Track called `\"Server\nRequests\"`.\n\n<img width=\"1015\" alt=\"Screenshot 2025-06-01 at 12 02 14 AM\"\nsrc=\"https://github.com/user-attachments/assets/c4d164c4-cfdf-4e14-9a87-3f011f65fd20\"\n/>\n\nThis logs the flat list of I/O awaited on by Server Components. There\nwill be other views that are more focused on what data blocks a specific\nComponent or Suspense boundary but this is just the list of all the I/O\nbasically so you can get an overview of those waterfalls without the\nnoise of all the Component trees and rendering. It's similar to what the\n\"Network\" track is on the client.\n\nI've been going back and forth on what to call this track but I went\nwith `\"Server Requests\"` for now. The idea is that the name should\ncommunicate that this is something that happens on the server and is a\npairing with the `\"Server Components\"` track. Although we don't use that\nfeature, since it's missing granularity, it's also similar to \"Server\nTimings\".",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-03T15:31:12-04:00",
      "committed_date": "2025-06-03T15:31:12-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js"
      ]
    },
    {
      "sha": "2e9f8cd3e031212bc507e31e2888f8f96b1de138",
      "short_sha": "2e9f8cd",
      "message": "Clear bundler cache before bundling fixtures (#33426)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-06-03T21:10:13+02:00",
      "committed_date": "2025-06-03T21:10:13+02:00",
      "changed_files": [
        "fixtures/fizz/package.json",
        "fixtures/flight-esm/package.json",
        "fixtures/flight/package.json",
        "fixtures/owner-stacks/package.json",
        "fixtures/view-transition/package.json"
      ]
    },
    {
      "sha": "65a46c7eebb731ba5c1602afef87365491beb75d",
      "short_sha": "65a46c7",
      "message": "[Flight] Track the function name that was called for I/O entries (#33392)\n\nStacked on #33390.\n\nThe stack trace doesn't include the thing you called when calling into\nignore listed content. We consider the ignore listed content\nconceptually the abstraction that you called that's interesting.\n\nThis extracts the name of the first ignore listed function that was\ncalled from user space. For example `\"fetch\"`. So we can know what kind\nof request this is.\n\nThis could be enhanced and tweaked with heuristics in the future. For\nexample, when you create a Promise yourself and call I/O inside of it\nlike my `delay` examples, then we use that Promise as the I/O node but\nits stack doesn't have the actual I/O performed. It might be better to\nuse the inner I/O node in that case. E.g. `setTimeout`. Currently I pick\nthe name from the first party code instead - in my example `delay`.\n\nAnother case that could be improved is the case where your whole\ncomponent is third-party. In that case we still log the I/O but it has\nno context about what kind of I/O since the whole stack is ignored it\njust gets the component name for example. We could for example look at\nthe first name that is in a different package than the package name of\nthe ignored listed component. So if\n`node_modules/my-component-library/index.js` calls into\n`node_modules/mysql/connection.js` then we could use the name from the\ninner.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-03T15:04:28-04:00",
      "committed_date": "2025-06-03T15:04:28-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightStackConfigV8.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "3fb17d16a4838e132d0d6dbb08f91b7e7da691eb",
      "short_sha": "3fb17d1",
      "message": "[Flight] Encode ReactIOInfo as its own row type (#33390)\n\nStacked on #33388.\n\nThis encodes the I/O entries as their own row type (`\"J\"`). This makes\nit possible to parse them directly without first parsing the debug info\nfor each component. E.g. if you're just interested in logging the I/O\nwithout all the places it was awaited.\n\nThis is not strictly necessary since the debug info is also readily\navailable without parsing the actual trees. (That's how the Server\nComponents Performance Track works.) However, we might want to exclude\nthis information in profiling builds while retaining some limited form\nof I/O tracking.\n\nIt also allows for logging side-effects that are not awaited if we\nwanted to.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-03T14:16:34-04:00",
      "committed_date": "2025-06-03T14:16:34-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "acee65d6d031697ab8c71932a5b028351cbc3b03",
      "short_sha": "acee65d",
      "message": "[Flight] Track Awaits on I/O as Debug Info (#33388)\n\nThis lets us track what data each Server Component depended on. This\nwill be used by Performance Track and React DevTools.\n\nWe use Node.js `async_hooks`. This has a number of downside. It is\nNode.js specific so this feature is not available in other runtimes\nuntil something equivalent becomes available. It's [discouraged by\nNode.js docs](https://nodejs.org/api/async_hooks.html#async-hooks). It's\nalso slow which makes this approach only really viable in development\nmode. At least with stack traces. However, it's really the only solution\nthat gives us the data that we need.\n\nThe [Diagnostic\nChannel](https://nodejs.org/api/diagnostics_channel.html) API is not\nsufficient. Not only is many Node.js built-in APIs missing but all\nlibraries like databases are also missing. Were as `async_hooks` covers\npretty much anything async in the Node.js ecosystem.\n\nHowever, even if coverage was wider it's not actually showing the\ninformation we want. It's not enough to show the low level I/O that is\nhappening because that doesn't provide the context. We need the stack\ntrace in user space code where it was initiated and where it was\nawaited. It's also not each low level socket operation that we want to\nsurface but some higher level concept which can span a sequence of I/O\noperations but as far as user space is concerned.\n\nTherefore this solution is anchored on stack traces and ignore listing\nto determine what the interesting span is. It is somewhat\nPromise-centric (and in particular async/await) because it allows us to\nmodel an abstract span instead of just random I/O. Async/await points\nare also especially useful because this allows Async Stacks to show the\nfull sequence which is not supported by random callbacks. However, if no\nPromises are involved we still to our best to show the stack causing\nplain I/O callbacks.\n\nAdditionally, we don't want to track all possible I/O. For example,\nside-effects like logging that doesn't affect the rendering performance\ndoesn't need to be included. We only want to include things that\nactually block the rendering output. We also need to track which data\nblocks each component so that we can track which data caused a\nparticular subtree to suspend.\n\nWe can do this using `async_hooks` because we can track the graph of\nwhat resolved what and then spawned what.\n\nTo track what suspended what, something has to resolve. Therefore it\nneeds to run to completion before we can show what it was suspended on.\nSo something that never resolves, won't be tracked for example.\n\nWe use the `async_hooks` in `ReactFlightServerConfigDebugNode` to build\nup an `ReactFlightAsyncSequence` graph that collects the stack traces\nfor basically all I/O and Promises allocated in the whole app. This is\npretty heavy, especially the stack traces, but it's because we don't\nknow which ones we'll need until they resolve. We don't materialize the\nstacks until we need them though.\n\nOnce they end up pinging the Flight runtime, we collect which current\nexecuting task that pinged the runtime and then log the sequence that\nled up until that runtime into the RSC protocol. Currently we only\ninclude things that weren't already resolved before we started rendering\nthis task/component, so that we don't log the entire history each time.\n\nEach operation is split into two parts. First a `ReactIOInfo` which\nrepresents an I/O operation and its start/end time. Basically the start\npoint where it was start. This is basically represents where you called\n`new Promise()` or when entering an `async function` which has an\nimplied Promise. It can be started in a different component than where\nit's awaited and it can be awaited in multiple places. Therefore this is\nglobal information and not associated with a specific Component.\n\nThe second part is `ReactAsyncInfo`. This represents where this I/O was\n`await`:ed or `.then()` called. This is associated with a point in the\ntree (usually the Promise that's a direct child of a Component). Since\nyou can have multiple different I/O awaited in a sequence technically it\nforms a dependency graph but to simplify the model these awaits as\nflattened into the `ReactDebugInfo` list. Basically it contains each\nawait in a sequence that affected this part from unblocking.\n\nThis means that the same `ReactAsyncInfo` can appear in mutliple\ncomponents if they all await the same `ReactIOInfo` but the same Promise\nonly appears once.\n\nPromises that are only resolved by other Promises or immediately are not\nconsidered here. Only if they're resolved by an I/O operation. We pick\nthe Promise basically on the border between user space code and ignored\nlisted code (`node_modules`) to pick the most specific span but abstract\nenough to not give too much detail irrelevant to the current audience.\nSimilarly, the deepest `await` in user space is marked as the relevant\n`await` point.\n\nThis feature is only available in the `node` builds of React. Not if you\nuse the `edge` builds inside of Node.js.\n\n---------\n\nCo-authored-by: Sebastian \"Sebbie\" Silbermann <silbermann.sebastian@gmail.com>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-03T14:14:40-04:00",
      "committed_date": "2025-06-03T14:14:40-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightAsyncSequence.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNode.js",
        "packages/react-server/src/ReactFlightServerConfigDebugNoop.js",
        "packages/react-server/src/__tests__/ReactFlightAsyncDebugInfo-test.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-edge-parcel.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-edge-turbopack.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-edge.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node-esm.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node-parcel.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node-turbopack.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node.js",
        "packages/shared/ReactTypes.js",
        "scripts/jest/setupTests.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "1ae0a845bde5b95dfc319cadf366cb7b3fb1ca92",
      "short_sha": "1ae0a84",
      "message": "Use underscore instead of « » for useId algorithm (#33422)\n\nAlternative to #33421. The difference is that this also adds an\nunderscore between the \"R\" and the ID.\n\nThe reason we wanted to use special characters is because we use the\nfull spectrum of A-Z 0-9 in our ID generation so we can basically\ncollide with any common word (or anyone using a similar algorithm,\nbase64 or even base16). It's a little less likely that someone would put\n`_R_` specifically unless you generate like two IDs separated by\nunderscore.\n\n\n![9w2ogt](https://github.com/user-attachments/assets/21b2d2ac-1a3a-4657-ba0b-1616e49dfdee)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-06-03T11:30:17-04:00",
      "committed_date": "2025-06-03T11:30:17-04:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerEdge-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticNode-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzViewTransition-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-dom/src/__tests__/ReactDOMLegacyFloat-test.js",
        "packages/react-dom/src/__tests__/ReactDOMUseId-test.js",
        "packages/react-dom/src/__tests__/ReactRenderDocument-test.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js",
        "packages/react-server-dom-fb/src/__tests__/ReactDOMServerFB-test.internal.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server/src/ReactFlightHooks.js"
      ]
    },
    {
      "sha": "2b4064eb9b40f65d20a03ce93b246ad762d562e6",
      "short_sha": "2b4064e",
      "message": "[mcp] Add MCP tool to print out the component tree of the currently open React App (#33305)\n\n## Summary\n\nThis tool leverages DevTools to get the component tree from the\ncurrently open React App. This gives realtime information to agents\nabout the state of the app.\n\n## How did you test this change?\n\nTested integration with Claude Desktop",
      "author": {
        "name": "Jorge Cabiedes",
        "email": "57368278+jorge-cab@users.noreply.github.com"
      },
      "authored_date": "2025-06-02T21:42:34-07:00",
      "committed_date": "2025-06-02T21:42:34-07:00",
      "changed_files": [
        ".eslintrc.js",
        "compiler/packages/react-mcp-server/src/index.ts",
        "compiler/packages/react-mcp-server/src/tools/componentTree.ts",
        "packages/react-devtools-core/webpack.backend.js",
        "packages/react-devtools-core/webpack.standalone.js",
        "packages/react-devtools-extensions/webpack.backend.js",
        "packages/react-devtools-extensions/webpack.config.js",
        "packages/react-devtools-fusebox/webpack.config.frontend.js",
        "packages/react-devtools-inline/webpack.config.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "scripts/flow/react-devtools.js",
        "scripts/jest/devtools/setupEnv.js"
      ]
    },
    {
      "sha": "3531b2672955285c0a59f84be06ac92b0d987a3e",
      "short_sha": "3531b26",
      "message": "[scripts] Switch back to flow parser for prettier (#33414)\n\nPrettier 3.3 (which we're on) should support modern flow features\naccording to https://prettier.io/blog/2024/06/01/3.3.0",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-06-03T00:00:28-04:00",
      "committed_date": "2025-06-03T00:00:28-04:00",
      "changed_files": [
        ".prettierrc.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ternary-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ternary-expression.js",
        "package.json",
        "packages/react-devtools-shared/src/devtools/ContextMenu/types.js",
        "packages/react-devtools-shared/src/hooks/astUtils.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "scripts/flow/config/flowconfig",
        "yarn.lock"
      ]
    },
    {
      "sha": "4a1f29079ccc61659e026bbcf205bc8d53780927",
      "short_sha": "4a1f290",
      "message": "[Fizz] Add Owner Stacks when render is aborted (#32735)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-06-02T19:27:49+02:00",
      "committed_date": "2025-06-02T19:27:49+02:00",
      "changed_files": [
        "packages/react-noop-renderer/src/ReactNoopServer.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/__tests__/ReactServer-test.js"
      ]
    },
    {
      "sha": "526dd340b3e77193846fe5eed02b9bb89d7c2d15",
      "short_sha": "526dd34",
      "message": "[compiler][patch] Emit unary expressions instead of negative numbers (#33383)\n\nThis is a babel bug + edge case.\n\nBabel compact mode produces invalid JavaScript (i.e. parse error) when\ngiven a `NumericLiteral` with a negative value.\n\nSee https://codesandbox.io/p/devbox/5d47fr for repro.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-06-02T11:43:45-04:00",
      "committed_date": "2025-06-02T11:43:45-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/babel-repro-compact-negative-number.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/babel-repro-compact-negative-number.js",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "ee76351917106c6146745432a52e9a54a41ee181",
      "short_sha": "ee76351",
      "message": "fix typo in compiler validation filename (#33345)\n\n## Summary\n\nWhile investigating the root cause of #33208, I noticed a clear typo for\none of the validation files.\n\n## How did you test this change?\n\nInside `/react/compiler/packages/babel-plugin-react-compiler` I ran the\ntest script successfully:\n\n<img width=\"415\" alt=\"Screenshot at May 22 16-43-06\"\nsrc=\"https://github.com/user-attachments/assets/3fe8c5e1-37ce-4a31-b35e-7e323e57cd9d\"\n/>",
      "author": {
        "name": "Wesley LeMahieu",
        "email": "wlemahieu@users.noreply.github.com"
      },
      "authored_date": "2025-05-30T16:31:16-07:00",
      "committed_date": "2025-05-30T16:31:16-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/index.ts"
      ]
    },
    {
      "sha": "8b55eb4e724271206bd5dec7dba0a35aedc74493",
      "short_sha": "8b55eb4",
      "message": "Cleanup props diffing experiments (#33381)\n\n## Summary\n\nWe completed testing on these internally, so can cleanup the separate\nfast and slow paths and remove the `enableShallowPropDiffing` flag which\nwe're not pursuing.\n\n## How did you test this change?\n\n```\nyarn test ReactNativeAttributePayloadFabric\n```",
      "author": {
        "name": "Pieter De Baets",
        "email": "pieterdb@meta.com"
      },
      "authored_date": "2025-05-30T17:17:59+01:00",
      "committed_date": "2025-05-30T17:17:59+01:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeAttributePayloadFabric.js",
        "packages/react-native-renderer/src/__tests__/ReactNativeAttributePayloadFabric-test.internal.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "14094f80cbf52cad4024211080d8491f3334ef61",
      "short_sha": "14094f8",
      "message": "Allow `nonce` to be used on hoistable styles (#32461)\n\nfixes https://github.com/facebook/react/issues/32449\n\nThis is my first time touching this code. There are multiple systems in\nplace here and I wouldn't be surprised to learn that this has to be\nhandled in some other areas too. I have found some other style-related\ncode areas but I had no time yet to double-check them.\n\ncc @gnoff",
      "author": {
        "name": "Mateusz Burzyński",
        "email": "mateuszburzynski@gmail.com"
      },
      "authored_date": "2025-05-29T17:17:10+02:00",
      "committed_date": "2025-05-29T08:17:10-07:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-dom/src/server/ReactDOMFizzServerBrowser.js",
        "packages/react-dom/src/server/ReactDOMFizzServerBun.js",
        "packages/react-dom/src/server/ReactDOMFizzServerEdge.js",
        "packages/react-dom/src/server/ReactDOMFizzServerNode.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticBrowser.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticEdge.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticNode.js"
      ]
    },
    {
      "sha": "5717f1933f2e8b10406fde1043c3047cbfbddc82",
      "short_sha": "5717f19",
      "message": "[react-dom] Enforce small gap between completed navigation and default Transition indicator (#33354)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-05-28T19:46:12+02:00",
      "committed_date": "2025-05-28T19:46:12+02:00",
      "changed_files": [
        "fixtures/flight/src/App.js",
        "fixtures/flight/src/Navigate.js",
        "packages/react-dom/src/client/ReactDOMDefaultTransitionIndicator.js"
      ]
    },
    {
      "sha": "b07717d857422af5fb1c2ee0930e5a2a62df2b0e",
      "short_sha": "b07717d",
      "message": "[devtools] upgrade json5 (#33358)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-05-28T10:31:09-04:00",
      "committed_date": "2025-05-28T10:31:09-04:00",
      "changed_files": [
        "packages/react-devtools-shared/package.json",
        "yarn.lock"
      ]
    },
    {
      "sha": "283f87f083f285c060582e1096cebed794d4b748",
      "short_sha": "283f87f",
      "message": "Revert \"enableViewTransition in www\" (#33362)\n\nWe need to do some more testing here.\n\nReverts facebook/react#33357",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-27T17:17:45-04:00",
      "committed_date": "2025-05-27T17:17:45-04:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "f9ae0a4c2edc9ad93507b550f2aeb60119955336",
      "short_sha": "f9ae0a4",
      "message": "[compiler][gating] Custom opt out directives (experimental option) (#33328)\n\nAdding an experimental / unstable compiler config to enable custom\nopt-out directives",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-27T12:02:29-04:00",
      "committed_date": "2025-05-27T12:02:29-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/TestUtils.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/custom-opt-out-directive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/custom-opt-out-directive.tsx"
      ]
    },
    {
      "sha": "f702620cea32f59a101d4f60fbff7a7495df76f7",
      "short_sha": "f702620",
      "message": "[fb-www] ship enableViewTransition (#33357)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-27T11:23:27-04:00",
      "committed_date": "2025-05-27T11:23:27-04:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "c0464aedb16b1c970d717651bba8d1c66c578729",
      "short_sha": "c0464ae",
      "message": "[Fizz] Block on Suspensey Fonts during reveal (#33342)\n\nThis is the same technique we do for the client except we don't check\nwhether this is newly created font loading to keep code small.\n\nUnfortunately, we can't use this technique for Suspensey images. They'll\nneed to block before we call `startViewTransition` in a separate\nrefactor. This is due to a bug in Chrome where `img.decode()` doesn't\nresolve until `startViewTransition` does.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-23T13:26:02-04:00",
      "committed_date": "2025-05-23T13:26:02-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js"
      ]
    },
    {
      "sha": "6a1dfe37776e5a41f4c1e07c33cf1f26c4a82979",
      "short_sha": "6a1dfe3",
      "message": "Disable moveBefore experiment (#33348)\n\nThere seems to be some bugs still to work out in Chrome. See #33187.\n\nAdditionally, since you can't really rely on this function existing\nacross browsers, it's hard to depend on its behavior anyway. In fact,\nyou now have a source of inconsistent behaviors across browsers to deal\nwith.\n\nIdeally it would also be more widely spread in fake DOM implementations\nlike JSDOM so that we can use it unconditionally. #33177.\n\nWe still want to enable this since it's a great feature but maybe not\nuntil it's more widely available cross-browsers with fewer bugs.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-23T13:25:13-04:00",
      "committed_date": "2025-05-23T13:25:13-04:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "99efc627a5a8cb56f50cfffee544c86c49572b6f",
      "short_sha": "99efc62",
      "message": "[eslint] Add an option to require dependencies on effect hooks (#33344)\n\nSummary:\n\nTo prepare for automatic effect dependencies, some codebases may want to\ncodemod\nexisting useEffect calls with no deps to include an explicit undefined\nsecond argument\nin order to preserve the \"run on every render\" behavior. In sufficiently\nlarge codebases,\nthis may require a temporary enforcement period where all effects\nprovide an explicit\ndependencies argument.\n\nOutside of migration, relying on a component to render can lead to real\nbugs,\nespecially when working with memoization.",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-05-23T10:09:41-04:00",
      "committed_date": "2025-05-23T10:09:41-04:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js",
        "packages/eslint-plugin-react-hooks/src/rules/ExhaustiveDeps.ts"
      ]
    },
    {
      "sha": "bfaeb4a46175fa0f4edf2eba58349d5029e5e86e",
      "short_sha": "bfaeb4a",
      "message": "Fix incorrect use of NoLanes in executionContext check (#33170)\n\n## Summary\n\nThis PR fixes a likely incorrect condition in the\n`scheduleUpdateOnFiber` function inside `ReactFiberWorkLoop.js`.\n\nPreviously, the code checked:\n\n```js\n(executionContext & RenderContext) !== NoLanes\n````\n\nHowever, `NoLanes` is part of the lane priority system, not the\nexecution context flags. The intent here seems to be to detect whether\nthe current execution context includes `RenderContext`, which should be\ncompared against `NoContext`, not `NoLanes`.\n\nThis fix replaces `NoLanes` with `NoContext` for semantic correctness\nand consistency with other checks throughout the codebase.\n\n**Fixes\n[[#33169](https://github.com/facebook/react/issues/33169)](https://github.com/facebook/react/issues/33169)**\n\n---\n\n## How did you test this change?\n\nI ran the following commands to validate correctness and ensure nothing\nwas broken:\n\n* `yarn lint`\n* `yarn linc`\n* `yarn test`\n* `yarn test --prod`\n* `yarn flow`\n* `yarn prettier`\n\nAll checks passed. Since this is a minor internal logic fix and doesn't\nchange public behavior or APIs, no additional tests are necessary at\nthis time.",
      "author": {
        "name": "0xFango",
        "email": "silencerichard@163.com"
      },
      "authored_date": "2025-05-23T09:02:39+07:00",
      "committed_date": "2025-05-22T22:02:39-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "3e9db65fc3341148a5248b3ffc6bc68c0640fd3f",
      "short_sha": "3e9db65",
      "message": "Fix typo in error message. (#33313)\n\n## Summary\n\nI am writing code that isn't so good, so I saw this error message many\ntimes. It appears to have a typo. This PR fixes the typo.\n\n## How did you test this change?\n\nRan the tests",
      "author": {
        "name": "Christoph Nakazawa",
        "email": "christoph.pojer@gmail.com"
      },
      "authored_date": "2025-05-23T05:18:23+09:00",
      "committed_date": "2025-05-22T16:18:23-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactCompositeComponentState-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydrationActivity-test.internal.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/Activity-test.js"
      ]
    },
    {
      "sha": "0d072884f9201f645ae298936f2933970b73bec4",
      "short_sha": "0d07288",
      "message": "[compiler] Inferred effect dependencies now include optional chains (#33326)\n\nInferred effect dependencies now include optional chains.\n\nThis is a temporary solution while\nhttps://github.com/facebook/react/pull/32099 and its followups are\nworked on. Ideally, we should model reactive scope dependencies in the\nIR similarly to `ComputeIR` -- dependencies should be hoisted and all\nreferences rewritten to use the hoisted dependencies.\n\n`\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33326).\n* __->__ #33326\n* #33325\n* #32286",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-22T16:14:49-04:00",
      "committed_date": "2025-05-22T16:14:49-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ScopeDependencyUtils.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-optional-chain.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-optional-chain-complex.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-optional-chain-complex.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-optional-chain.js"
      ]
    },
    {
      "sha": "abf9fd559d584278c1c5f5464e35290651cf82bc",
      "short_sha": "abf9fd5",
      "message": "[compiler] Add reactive flag on scope dependencies (#33325)\n\nWhen collecting scope dependencies, mark each dependency with `reactive:\ntrue | false`. This prepares for later PRs\nhttps://github.com/facebook/react/pull/33326 and\nhttps://github.com/facebook/react/pull/32099 which rewrite scope\ndependencies into instructions.\n\nNote that some reactive objects may have non-reactive properties, but we\ndo not currently track this.\n\nTechnically, state[0] is reactive and state[1] is not. Currently, both\nwould be marked as reactive.\n```js\nconst state = useState();\n```\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33325).\n* #33326\n* __->__ #33325\n* #32286",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-22T16:14:05-04:00",
      "committed_date": "2025-05-22T16:14:05-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectOptionalChainDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/DeriveMinimalDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReactivePlaces.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/MergeReactiveScopesThatInvalidateTogether.ts"
      ]
    },
    {
      "sha": "13f20044f3a5a9433eb4c6ef4c6577b8f0d13350",
      "short_sha": "13f2004",
      "message": "[compiler] Prepare HIRBuilder to be used by later passes (#32286)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32286).\n* #33326\n* #33325\n* __->__ #32286",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-22T16:13:50-04:00",
      "committed_date": "2025-05-22T16:13:50-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts"
      ]
    },
    {
      "sha": "8ce15b0f56a066ece465963ca1370e46113bb868",
      "short_sha": "8ce15b0",
      "message": "[Fizz] Apply View Transition Name and Class to SSR:ed View Transitions (#33332)\n\nStacked on #33330.\n\nThis walks the element tree to activate the various classes under\ndifferent scenarios. There are some edge case things that are a little\ndifferent since we can't express every scenario without virtual nodes.\n\nThe main thing that's still missing though is avoiding animating updates\nif it can be contained to a layout or enter/exit/share if they're out of\nthe viewport. I.e. layout stuff.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-22T10:40:28-04:00",
      "committed_date": "2025-05-22T10:40:28-04:00",
      "changed_files": [
        "fixtures/view-transition/server/render.js",
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js"
      ]
    },
    {
      "sha": "91ac1fea1aacf80c9eb2815956e230921b55808c",
      "short_sha": "91ac1fe",
      "message": "[Fizz] Pass batch as argument to revealCompletedBoundaries (#33330)\n\nFollow up to #33293.\n\nThis solves a race condition when boundaries are added to the batch\nafter the `startViewTransition` call.\n\nThis doesn't matter yet but it will once we start assigning names before\nthe `startViewTransition` call.\n\nA possible alternative solution might be to ensure the names are added\nsynchronously in the event that adds to the batch. It's possible to keep\nadding to a batch until the snapshot has happened.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-22T10:25:13-04:00",
      "committed_date": "2025-05-22T10:25:13-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js"
      ]
    },
    {
      "sha": "08064ea6713ff55730c5d4f50b733891ebe0e875",
      "short_sha": "08064ea",
      "message": "[Fizz] Make ViewTransition enter/exit/share null the same as none (#33331)\n\nI believe that these mean the same thing. We don't have to emit the\nattribute if it's `none` for these cases because if there is no matching\nscenario we won't apply the animation in this case.\n\nThe only case where we have to emit `none` in the attribute is for\n`vt-update` because those can block updates from propagating upwards.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-22T10:21:28-04:00",
      "committed_date": "2025-05-22T10:21:28-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js"
      ]
    },
    {
      "sha": "99781d605b6a6fd332bba654ac0c328e41df888c",
      "short_sha": "99781d6",
      "message": "[Fizz] Track boundaries in future rows as postponed (#33329)\n\nFollow up to #33321.\n\nWe can mark boundaries that were blocked in the prerender as postponed\nbut without anything to replayed inside them. That way they're not\nemitted in the prerender but is unblocked when replayed.\n\nTechnically this does some unnecessary replaying of the path to the\notherwise already completed boundary but it simplifies our model by just\nmarking the boundary as needing replaying.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-22T10:20:13-04:00",
      "committed_date": "2025-05-22T10:20:13-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "459a2c4298187cb0ee45605e2575ff35f4a81183",
      "short_sha": "459a2c4",
      "message": "[compiler][gating] Experimental directive based gating (#33149)\n\nAdds `dynamicGating` as an experimental option for testing rollout DX at\nMeta. If specified, this enables dynamic gating which matches `use memo\nif(...)` directives.\n\n#### Example usage\nInput file\n```js\n// @dynamicGating:{\"source\":\"myModule\"}\nexport function MyComponent() {\n  'use memo if(isEnabled)';\n   return <div>...</div>;\n}\n```\nCompiler output\n```js\nimport {isEnabled} from 'myModule';\nexport const MyComponent = isEnabled()\n  ? <optimized version>\n  : <original version>;\n```\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33149).\n* __->__ #33149\n* #33148",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-21T17:23:29-04:00",
      "committed_date": "2025-05-21T17:23:29-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-annotation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-annotation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-bailout-nopanic.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-bailout-nopanic.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-disabled.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-disabled.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-enabled.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-enabled.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-invalid-identifier-nopanic.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-invalid-identifier-nopanic.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-invalid-multiple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-invalid-multiple.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-noemit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/dynamic-gating-noemit.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.dynamic-gating-invalid-identifier-nopanic-required-feature.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.dynamic-gating-invalid-identifier-nopanic-required-feature.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.dynamic-gating-invalid-identifier.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.dynamic-gating-invalid-identifier.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-dynamic-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-dynamic-gating.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-gating.js",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "1c43d0aed74de4aae210ba7081b60f944df31954",
      "short_sha": "1c43d0a",
      "message": "Unify serverAct helpers (#33327)\n\nThis uses the richer `serverAct` helper that we already use in other\ntests.\n\nThis avoids using the `Scheduler`. We don't use that package on the\nserver so it doesn't make sense to simulate going through it.\nAdditionally, we really should be getting rid of it on the client too to\nfavor `postTask` polyfills.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-21T16:13:54-04:00",
      "committed_date": "2025-05-21T16:13:54-04:00",
      "changed_files": [
        "packages/internal-test-utils/internalAct.js",
        "packages/react-dom/src/__tests__/ReactClassComponentPropResolutionFizz-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzDeferredValue-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticFloat-test.js",
        "packages/react-dom/src/test-utils/FizzTestUtils.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOM-test.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMBrowser-test.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMNode-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMReply-test.js",
        "scripts/jest/patchMessageChannel.js",
        "scripts/jest/patchSetImmediate.js"
      ]
    },
    {
      "sha": "1835b3f7d9c0541259a8812c5dfaf3d77f0721eb",
      "short_sha": "1835b3f",
      "message": "New children notify fragment instances in Fabric (#33093)\n\nWhen a new child of a fragment instance is inserted, we need to notify\nthe instance to keep any relevant tracking up to date. For example, we\nautomatically observe the new child with any active\nIntersectionObserver.\n\nFor mutable renderers (DOM), we reuse the existing traversal in\n`commitPlacement` that does the insertions for HostComponents. Immutable\nrenderers (Fabric) exit this path before the traversal though, so\ncurrently we can't notify the fragment instances.\n\nHere I've created a separate traversal in `commitPlacement`,\nspecifically for immutable renders when `enableFragmentRefs` is on.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-05-21T15:47:47-04:00",
      "committed_date": "2025-05-21T15:47:47-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/__tests__/ReactFabricFragmentRefs-test.internal.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js"
      ]
    },
    {
      "sha": "f4041aa388b7eeba94a26f6c273e9f4c18e2d2b3",
      "short_sha": "f4041aa",
      "message": "[Fizz] Unblock SuspenseList when prerendering (#33321)\n\nThere's an interesting case when a SuspenseList is partially prerendered\nbut some of the completed boundaries are blocked by rows to be resumed.\n\nThis handles it but just unblocking the future rows to avoid stalling.\n\nHowever, the correct semantics will need special handling in the\npostponed state.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-21T15:31:22-04:00",
      "committed_date": "2025-05-21T15:31:22-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "3710c4d4f9ffb6aa07e291b822e4ec7d69ed5a32",
      "short_sha": "3710c4d",
      "message": "Prevent errors from comment node roots with enableViewTransition (#33205)\n\nWe have many cases internally where the `containerInstance` resolves to\na comment node. `restoreRootViewTransitionName` is called when\n`enableViewTransition` is on, even without introducing a\n`<ViewTransition />`. So that means it can crash pages because\n`containerInstance.style` is `undefined` just by turning on the flag.\n\nThis skips cancel/restore of root view transition name if a comment node is the root.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-05-21T13:57:35-04:00",
      "committed_date": "2025-05-21T13:57:35-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "2388481283640d034fd6b4edfca4f11e67953673",
      "short_sha": "2388481",
      "message": "[Fizz] Set keyPath for SuspenseList (#33320)\n\nI missed setting the `keyPath` because the `renderChildrenArray` that\nthis is forked from doesn't need to set a path but since this is\nrendered from the `SuspenseList` element it needs it.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-20T21:08:47-04:00",
      "committed_date": "2025-05-20T21:08:47-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "9c7b10e22ea4c184c0465df15705f17ba36b115a",
      "short_sha": "9c7b10e",
      "message": "[Fizz] Clean up row that was blocked by an aborted boundary (#33318)\n\nFixes a bug that we caused us to hang after an abort because we didn't\nmanage the ref count correctly.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-20T20:31:16-04:00",
      "committed_date": "2025-05-20T20:31:16-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzSuspenseList-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "50389e179273558d0919d45bc5db99a21b258b03",
      "short_sha": "50389e1",
      "message": "[Fizz] Hoist hoistables to each row and transfer the dependencies to future rows (#33312)\n\nStacked on #33311.\n\nWhen a row contains Suspense boundaries that themselves depend on CSS,\nthey will not resolve until the CSS has loaded on the client. We need\nfuture rows in a list to be blocked until this happens. We could do\nsomething in the runtime but a simpler approach is to just add those CSS\ndependencies to all those boundaries as well.\n\nTo do this, we first hoist the HoistableState from a completed boundary\nonto its parent row. Then when the row finishes do we hoist it onto the\nnext row and onto any boundaries within that row.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-20T14:48:51-04:00",
      "committed_date": "2025-05-20T14:48:51-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "99aa685cefc3c828d4523da04d7830c1e494a6bd",
      "short_sha": "99aa685",
      "message": "[Fizz] Support SuspenseList revealOrder=\"together\" (#33311)\n\nStacked on #33308.\n\nFor \"together\" mode, we can be a self-blocking row that adds all its\nboundaries to the blocked set, but there's no parent row that unblocks\nit.\n\nA particular quirk of this mode is that it's not enough to just unblock\nthem all on the server together. Because if one boundary downloads all\nits html and then issues a complete instruction it'll appear before the\nothers while streaming in. What we actually want is to reveal them all\nin a single batch.\n\nThis implementation takes a short cut by unblocking the rows in\n`flushPartialBoundary`. That ensures that all the segments of every\nboundary has a chance to flush before we start emitting any of the\ncomplete boundary instructions. Once the last one unblocks, all the\ncomplete boundary instructions are queued. Ideally this would be a\nsingle `<script>` tag so that they can't be split up even if we get a\nchunk containing some of them.\n\n~A downside of this approach is that we always outline these boundaries.\nWe could inline them if they all complete before the parent flushes.\nE.g. by checking if the row is blocked only by its own boundaries and if\nall the boundaries would fit without getting outlined, then we can\ninline them all at once.~ I went ahead and did this because it solves an\nissue with `renderToString` where it doesn't support the script runtime\nso it can only handle this if inlined.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-20T14:42:05-04:00",
      "committed_date": "2025-05-20T14:42:05-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzSuspenseList-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "d38c7e10d3625c550744ce36c623a73c15c2b5d8",
      "short_sha": "d38c7e1",
      "message": "Remove leftover Rust script (#33314)\n\nFor now we removed Rust from the codebase, remove this leftover script.\n\nAlso remove some dupes and Rust related files from `.gitignore`.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-20T12:20:51-04:00",
      "committed_date": "2025-05-20T12:20:51-04:00",
      "changed_files": [
        "compiler/.gitignore",
        "compiler/scripts/rustfmt.sh"
      ]
    },
    {
      "sha": "c4676e72a630f3e93634c2b004b3be07b17a79c8",
      "short_sha": "c4676e7",
      "message": "[Fizz] Handle nested SuspenseList (#33308)\n\nFollow up to #33306.\n\nIf we're nested inside a SuspenseList and we have a row, then we can\npoint our last row to block the parent row and unblock the parent when\nthe last child unblocks.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-20T09:39:46-04:00",
      "committed_date": "2025-05-20T09:39:46-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzSuspenseList-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "4c6967be290fc31182c61cfdac19915fdb16aa60",
      "short_sha": "4c6967b",
      "message": "[Fiber] Support AsyncIterable children in SuspenseList (#33299)\n\nWe support AsyncIterable (more so when it's a cached form like in coming\nfrom Flight) as children.\n\nThis fixes some warnings and bugs when passed to SuspenseList.\n\nIdeally SuspenseList with `tail=\"hidden\"` should support unblocking\nbefore the full result has resolved but that's an optimization on top.\nWe also might want to change semantics for this for\n`revealOrder=\"backwards\"` so it becomes possible to stream items in\nreverse order.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-20T09:39:25-04:00",
      "committed_date": "2025-05-20T09:39:25-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactChildFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js"
      ]
    },
    {
      "sha": "c6c2a52ad8fb1894b03a3bb618eb57e5deca5aa0",
      "short_sha": "c6c2a52",
      "message": "[compiler] Fix error message for custom hooks (#33310)\n\nWe were printing \"Custom\" instead of \"hook\".",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-05-19T15:29:58-07:00",
      "committed_date": "2025-05-19T15:29:58-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateHooksUsage.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-3d692676194b.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-8503ca76d6f8.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-in-nested-function-expression-object-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-in-nested-object-method.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-0a1dbff27ba0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-0de1224ce64b.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-449a37146a83.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-76a74b4666e9.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-d842d36db450.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-d952b82c2597.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-nested-use-effect.expect.md"
      ]
    },
    {
      "sha": "5dc1b212c330b6f456789f8d58e0f87abefbb86c",
      "short_sha": "5dc1b21",
      "message": "[Fizz] Support basic SuspenseList forwards/backwards revealOrder (#33306)\n\nBasically we track a `SuspenseListRow` on the task. These keep track of\n\"pending tasks\" that block the row. A row is blocked by:\n\n- First itself completing rendering.\n- A previous row completing.\n- Any tasks inside the row and before the Suspense boundary inside the\nrow. This is mainly because we don't yet know if we'll discover more\nSuspenseBoundaries.\n- Previous row's SuspenseBoundaries completing.\n\nIf a boundary might get outlined, then we can't consider it completed\nuntil we have written it because it determined whether other future\nboundaries in the row can finish.\n\nThis is just handling basic semantics. Features not supported yet that\nneed follow ups later:\n\n- CSS dependencies of previous rows should be added as dependencies of\nfuture row's suspense boundary. Because otherwise if the client is\nblocked on CSS then a previous row could be blocked but the server\ndoesn't know it.\n- I need a second pass on nested SuspenseList semantics.\n- `revealOrder=\"together\"`\n- `tail=\"hidden\"`/`tail=\"collapsed\"`. This needs some new runtime\nsemantics to the Fizz runtime and to allow the hydration to handle\nmissing rows in the HTML. This should also be future compatible with\nAsyncIterable where we don't know how many rows upfront.\n- Need to double check resuming semantics.\n\n---------\n\nCo-authored-by: Sebastian \"Sebbie\" Silbermann <silbermann.sebastian@gmail.com>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-19T15:16:42-04:00",
      "committed_date": "2025-05-19T15:16:42-04:00",
      "changed_files": [
        "fixtures/ssr/src/components/LargeContent.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzSuspenseList-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "a3abf5f2f835ad0c61e2325f5cbac2d1d9045517",
      "short_sha": "a3abf5f",
      "message": "[eslint-plugin-react-hooks] add experimental_autoDependenciesHooks option (#33294)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-19T15:08:30-04:00",
      "committed_date": "2025-05-19T15:08:30-04:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js",
        "packages/eslint-plugin-react-hooks/src/rules/ExhaustiveDeps.ts"
      ]
    },
    {
      "sha": "462d08f9ba41d48ab36bf405235c1c22023603dc",
      "short_sha": "462d08f",
      "message": "Move SuspenseListProps into a shared/ReactTypes (#33298)\n\nSo they can be shared by server. Incorporates the types from definitely\ntyped too.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-17T20:00:56-04:00",
      "committed_date": "2025-05-17T20:00:56-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberSuspenseComponent.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "6060367ef8a7a5bac12e0f830367bb13626db83a",
      "short_sha": "6060367",
      "message": "[Fizz] Wrap revealCompletedBoundaries in a ViewTransitions aware version (#33293)\n\nWhen needed.\n\nFor the external runtime we always include this wrapper.\n\nFor others, we only include it if we have an ViewTransitions affecting.\nIf we discover the ViewTransitions late, then we can upgrade an already\nemitted instruction.\n\nThis doesn't yet do anything useful with it, that's coming in a follow\nup. This is just the mechanism for how it gets installed.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-17T18:18:24-04:00",
      "committed_date": "2025-05-17T18:18:24-04:00",
      "changed_files": [
        "fixtures/view-transition/server/render.js",
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInlineCompleteBoundary.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInlineCompleteBoundaryUpgradeToViewTransitions.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetExternalRuntime.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-server/src/ReactFizzServer.js",
        "scripts/rollup/generate-inline-fizz-runtime.js"
      ]
    },
    {
      "sha": "c250b7d980864be49facf2306f06455e7f9e305d",
      "short_sha": "c250b7d",
      "message": "[Fizz] Should be considered complete inside onShellReady callback (#33295)\n\nWe decremented `allPendingTasks` after invoking `onShellReady`. Which\nmeans that in that scope it wasn't considered fully complete.\n\nSince the pattern for flushing in Node.js is to start piping in\n`onShellReady` and that's how you can get sync behavior, this led us to\nthink that we had more work left to do. For example we emitted the\n`writeShellTimeInstruction` in this scenario before.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-16T14:53:40-04:00",
      "committed_date": "2025-05-16T14:53:40-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "4448b18760d867f9e009e810571e7a3b8930bb19",
      "short_sha": "4448b18",
      "message": "[eslint-plugin-react-hooks] fix exhaustive deps lint rule with component syntax (#33182)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-15T12:51:18-04:00",
      "committed_date": "2025-05-15T12:51:18-04:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js",
        "packages/eslint-plugin-react-hooks/src/rules/ExhaustiveDeps.ts"
      ]
    },
    {
      "sha": "4a45ba92c4097a97333c04b5516ba2d5c81af716",
      "short_sha": "4a45ba9",
      "message": "[sync] Fix noop for xplat (#33214)\n\nNoop detection for xplat syncs broke because `eslint-plugin-react-hooks`\nuses versions like:\n\n- `0.0.0-experimental-d85f86cf-20250514`\n\nBut xplat expects them to be of the form:\n\n- `19.2.0-native-fb-63d664b2-20250514`\n\nThis PR fixes the noop by ignoring\n`eslint-plugin-react-hooks/package.json` changes. This means we won't\ncreate a sync if only that package.json changes, but that should be rare\nand we can follow up with better detection if needed.\n\n[Example failed\naction](https://github.com/facebook/react/actions/runs/15032346805/job/42247414406):\n\n<img width=\"1031\" alt=\"Screenshot 2025-05-15 at 11 31 17 AM\"\nsrc=\"https://github.com/user-attachments/assets/d902079c-1afe-4e18-af1d-25e60e28929e\"\n/>\n\nI believe the regression was caused by\nhttps://github.com/facebook/react/pull/33104",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-05-15T12:12:51-04:00",
      "committed_date": "2025-05-15T12:12:51-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "08cb2d7ee732f35ef1935c75c081754bd81d60b9",
      "short_sha": "08cb2d7",
      "message": "[ci] Log author_association (#33213)\n\nFor debugging purposes, log author_association",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-05-15T11:49:56-04:00",
      "committed_date": "2025-05-15T11:49:56-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "203df2c9409f580fd63eeacd4f80d70c2741bd4f",
      "short_sha": "203df2c",
      "message": "[compiler] Update changelog for 19.1.0-rc.2 (#33207)\n\nUpdate the changelog.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-05-15T10:34:11-04:00",
      "committed_date": "2025-05-15T10:34:11-04:00",
      "changed_files": [
        "compiler/CHANGELOG.md"
      ]
    },
    {
      "sha": "65b5aae010002ef88221cc4998711eaef6068006",
      "short_sha": "65b5aae",
      "message": "[Fizz] Add vt- prefix attributes to annotate <ViewTransition> in HTML (#33206)\n\nStacked on #33194 and #33200.\n\nWhen Suspense boundaries reveal during streaming, the Fizz runtime will\nbe responsible for animating the reveal if necessary (not in this PR).\nHowever, for the future runtime to know what to do it needs to know\nabout the `<ViewTransition>` configuration to apply.\n\nOfc, these are virtual nodes that disappear from the HTML. We could\nmodel them as comments like we do with other virtual nodes like Suspense\nand Activity. However, that doesn't let us target them with\nquerySelector and CSS (for no-JS transitions). We also don't have to\nmodel every ViewTransition since not every combination can happen using\nonly the server runtime. So instead this collapses `<ViewTransition>`\nand applies the configuration to the inner DOM nodes.\n\n```js\n<ViewTransition name=\"hi\">\n  <div />\n  <div />\n</ViewTransition>\n```\n\nBecomes:\n\n```html\n<div vt-name=\"hi\" vt-update=\"auto\"></div>\n<div vt-name=\"hi_1\" vt-update=\"auto\"></div>\n```\n\nI use `vt-` prefix as opposed to `data-` to keep these virtual\nattributes away from user specific ones but we're effectively claiming\nthis namespace.\n\nThere are four triggers `vt-update`, `vt-enter`, `vt-exit` and\n`vt-share`. The server resolves which ones might apply to this DOM node.\nThe value represents the class name (after resolving\nview-transition-type mappings) or `\"auto\"` if no specific class name is\nneeded but this is still a trigger.\n\nThe value can also be `\"none\"`. This is different from missing because\nfor example an `vt-update=\"none\"` will block mutations inside it from\ntriggering the boundary where as a missing `vt-update` would bubble up\nto be handled by a parent.\n\n`vt-name` is technically only necessary when `vt-share` is specified to\nfind a pair. However, since an explicit name can also be used to target\nspecific CSS selectors, we include it even for other cases.\n\nWe want to exclude as many of these annotations as possible.\n\n`vt-enter` can only affect the first DOM node inside a Suspense\nboundary's content since the reveal would cause it to enter but nothing\ndeeper inside. Similarly `vt-exit` can only affect the first DOM node\ninside a fallback. So for every other case we can exclude them. (For\nfuture MPA ViewTransitions of the whole document it might also be\nsomething we annotate to children inside the `<body>` as well.) Ideally\nwe'd only include `vt-enter` for Suspense boundaries that actually\nflushed a fallback but since we prepare all that content earlier it's\nhard to know.\n\n`vt-share` can be anywhere inside an fallback or content. Technically we\ndon't have to include it outside the root most Suspense boundary or for\nboundaries that are inlined into the root shell. However, this is tricky\nto detect. It would also not be correct for future MPA ViewTransitions\nbecause in that case the shared scenario can affect anything in the two\ndocuments so it needs to be in every node everywhere which is\neffectively what we do. If a `share` class is specified but it has no\nexplicit name, we can exclude it since it can't match anything.\n\n`vt-update` is only necessary if something below or a sibling might\nupdate like a Suspense boundary. However, since we don't know when\nrendering a segment if it'll later asynchronously add a Suspense\nboundary later we have to assume that anywhere might have a child. So\nthese are always included. We collapse to use the inner most one when\ndirectly nested though since that's the one that ends up winning.\n\nThere are some weird edge cases that can't be fully modeled by the lack\nof virtual nodes.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-15T01:04:10-04:00",
      "committed_date": "2025-05-15T01:04:10-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzViewTransition-test.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-noop-renderer/src/ReactNoopServer.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/ReactFizzViewTransitionComponent.js",
        "packages/react-server/src/forks/ReactFizzConfig.custom.js"
      ]
    },
    {
      "sha": "3f67d0857efc3ab21b9d30851f5a8451471166ab",
      "short_sha": "3f67d08",
      "message": "[Fizz] Track whether we're in a fallback on FormatContext (#33194)\n\nRemoves the `isFallback` flag on Tasks and tracks it on the\nformatContext instead.\n\nLess memory and avoids passing and tracking extra arguments to all the\npushStartInstance branches that doesn't need it.\n\nWe'll need to be able to track more Suspense related contexts on this\nfor View Transitions anyway.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-15T00:06:06-04:00",
      "committed_date": "2025-05-15T00:06:06-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-noop-renderer/src/ReactNoopServer.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/forks/ReactFizzConfig.custom.js"
      ]
    },
    {
      "sha": "96eb84e493c4ff2c280990659057164c0f16bbb8",
      "short_sha": "96eb84e",
      "message": "Claim the useId name space for every auto named ViewTransition (#33200)\n\nThis is a partial revert of #33094. It's true that we don't need the\nserver and client ViewTransition names to line up. However the server\ndoes need to be able to generate deterministic names for itself. The\ncheapest way to do that is using the useId algorithm. When it's used by\nthe server, the client needs to also materialize an ID even if it\ndoesn't use it.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-14T17:52:41-04:00",
      "committed_date": "2025-05-14T17:52:41-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "63d664b220b1587da0f3b4ced895456f3d8320da",
      "short_sha": "63d664b",
      "message": "Don't consider Portals animating unless they're wrapped in a ViewTransition (#33191)\n\nAnd that doesn't disable with `update=\"none\"`.\n\nThe principle here is that we want the content of a Portal to animate if\nother things are animating with it but if other things aren't animating\nthen we don't.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-14T17:50:56-04:00",
      "committed_date": "2025-05-14T17:50:56-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "d85f86cf017151bcf5908d593c3899d876656a01",
      "short_sha": "d85f86c",
      "message": "Delete stray file (#33199)\n\nNot sure where this was coming from.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-14T11:27:36-04:00",
      "committed_date": "2025-05-14T11:27:36-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-method-shorthand-3.expect.md~051f3e57 ([hir] Do not memoize object methods separately)"
      ]
    },
    {
      "sha": "3a5b326d8180f005a10e34a07ded6d5632efe337",
      "short_sha": "3a5b326",
      "message": "[Fiber] Trigger default indicator for isomorphic async actions with no root associated (#33190)\n\nStacked on #33160, #33162, #33186 and #33188.\n\nWe have a special case that's awkward for default indicators. When you\nstart a new async Transition from `React.startTransition` then there's\nnot yet any associated root with the Transition because you haven't\nnecessarily `setState` on anything yet until the promise resolves.\nThat's what `entangleAsyncAction` handles by creating a lane that\neverything entangles with until all async actions are done.\n\nIf there are no sync updates before the end of the event, we should\ntrigger a default indicator until either the async action completes\nwithout update or if it gets entangled with some roots we should keep it\ngoing until those roots are done.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-13T16:10:28-04:00",
      "committed_date": "2025-05-13T16:10:28-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-reconciler/src/ReactFiberAsyncAction.js",
        "packages/react-reconciler/src/ReactFiberReconciler.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/__tests__/ReactDefaultTransitionIndicator-test.js"
      ]
    },
    {
      "sha": "59440424d05360cca32ca6f46ae33661f70d43e2",
      "short_sha": "5944042",
      "message": "Implement Navigation API backed default indicator for DOM renderer (#33162)\n\nStacked on #33160.\n\nBy default, if `onDefaultTransitionIndicator` is not overridden, this\nwill trigger a fake Navigation event using the Navigation API. This is\nintercepted to create an on-going navigation until we complete the\nTransition. Basically each default Transition is simulated as a\nNavigation.\n\nThis triggers the native browser loading state (in Chrome at least). So\nnow by default the browser spinner spins during a Transition if no other\nloading state is provided. Firefox and Safari hasn't shipped Navigation\nAPI yet and even in the flag Safari has, it doesn't actually trigger the\nnative loading state.\n\nTo ensures that you can still use other Navigations concurrently, we\ndon't start our fake Navigation if there's one on-going already.\nSimilarly if our fake Navigation gets interrupted by another. We wait\nfor on-going ones to finish and then start a new fake one if we're\nsupposed to be still pending.\n\nThere might be other routers on the page that might listen to intercept\nNavigation Events. Typically you'd expect them not to trigger a refetch\nwhen navigating to the same state. However, if they want to detect this\nwe provide the `\"react-transition\"` string in the `info` field for this\npurpose.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-13T16:00:38-04:00",
      "committed_date": "2025-05-13T16:00:38-04:00",
      "changed_files": [
        ".eslintrc.js",
        "fixtures/flight/src/actions.js",
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-dom/src/client/ReactDOMDefaultTransitionIndicator.js",
        "packages/react-dom/src/client/ReactDOMRoot.js",
        "scripts/flow/environment.js",
        "scripts/rollup/validate/eslintrc.cjs.js",
        "scripts/rollup/validate/eslintrc.cjs2015.js",
        "scripts/rollup/validate/eslintrc.esm.js",
        "scripts/rollup/validate/eslintrc.fb.js",
        "scripts/rollup/validate/eslintrc.rn.js"
      ]
    },
    {
      "sha": "b480865db0babfcad602a1a1909775069b5779f9",
      "short_sha": "b480865",
      "message": "[Fiber] Always flush Default priority in the microtask if a Transition was scheduled (#33186)\n\nStacked on #33160.\n\nThe purpose of this is to avoid calling `onDefaultTransitionIndicator`\nwhen a Default priority update acts as the loading indicator, but still\ncall it when unrelated Default updates happens nearby.\n\nWhen we schedule Default priority work that gets batched with other\nevents in the same frame more or less. This helps optimize by doing less\nwork. However, that batching means that we can't separate work from one\nsetState from another. If we would consider all Default priority work in\na frame when determining whether to show the default we might never show\nit in cases like when you have a recurring timer updating something.\n\nThis instead flushes the Default priority work eagerly along with the\nsync work at the end of the event, if this event scheduled any\nTransition work. This is then used to determine if the default indicator\nneeds to be shown.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-13T15:52:44-04:00",
      "committed_date": "2025-05-13T15:52:44-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/__tests__/ReactDefaultTransitionIndicator-test.js"
      ]
    },
    {
      "sha": "62d3f36ea79fc0a10b514d4bbcc4ba3f21b3206e",
      "short_sha": "62d3f36",
      "message": "[Fiber] Trigger default transition indicator if needed (#33160)\n\nStacked on #33159.\n\nThis implements `onDefaultTransitionIndicator`.\n\nThe sequence is:\n\n1) In `markRootUpdated` we schedule Transition updates as needing\n`indicatorLanes` on the root. This tracks the lanes that currently need\nan indicator to either start or remain going until this lane commits.\n2) Track mutations during any commit. We use the same hook that view\ntransitions use here but instead of tracking it just per view transition\nscope, we also track a global boolean for the whole root.\n3) If a sync/default commit had any mutations, then we clear the\nindicator lane for the `currentEventTransitionLane`. This requires that\nthe lane is still active while we do these commits. See #33159. In other\nwords, a sync update gets associated with the current transition and it\nis assumed to be rendering the loading state for that corresponding\ntransition so we don't need a default indicator for this lane.\n4) At the end of `processRootScheduleInMicrotask`, right before we're\nabout to enter a new \"event transition lane\" scope, it is no longer\npossible to render any more loading states for the current transition\nlane. That's when we invoke `onDefaultTransitionIndicator` for any roots\nthat have new indicator lanes.\n5) When we commit, we remove the finished lanes from `indicatorLanes`\nand once that reaches zero again, then we can clean up the default\nindicator. This approach means that you can start multiple different\ntransitions while an indicator is still going but it won't stop/restart\neach time. Instead, it'll wait until all are done before stopping.\n\nFollow ups:\n\n- [x] Default updates are currently not enough to cancel because those\naren't flush in the same microtask. That's unfortunate. #33186\n- [x] Handle async actions before the setState. Since these don't\nnecessarily have a root this is tricky. #33190\n- [x] Disable for `useDeferredValue`. ~Since it also goes through\n`markRootUpdated` and schedules a Transition lane it'll get a default\nindicator even though it probably shouldn't have one.~ EDIT: Turns out\nthis just works because it doesn't go through `markRootUpdated` when\nwork is left behind.\n- [x] Implement built-in DOM version by default. #33162",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-13T15:45:11-04:00",
      "committed_date": "2025-05-13T15:45:11-04:00",
      "changed_files": [
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberMutationTracking.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/__tests__/ReactDefaultTransitionIndicator-test.js"
      ]
    },
    {
      "sha": "0cac32d60dd4482b27fe8a54dffbabceb22c6272",
      "short_sha": "0cac32d",
      "message": "[Fiber] Stash the entangled async action lane on currentEventTransitionLane (#33188)\n\nWhen we're entangled with an async action lane we use that lane instead\nof the currentEventTransitionLane. Conversely, if we start a new async\naction lane we reuse the currentEventTransitionLane.\n\nSo they're basically supposed to be in sync but they're not if you\nresolve the async action and then schedule new stuff in the same event.\nThen you end up with two transitions in the same event with different\nlanes.\n\nBy stashing it like this we fix that but it also gives us an opportunity\nto check just the currentEventTransitionLane to see if this event\nscheduled any regular Transition updates or Async Transitions.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-13T15:20:59-04:00",
      "committed_date": "2025-05-13T15:20:59-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "676f0879f315130309262ff3532707029f0288bb",
      "short_sha": "676f087",
      "message": "Reset currentEventTransitionLane after flushing sync work (#33159)\n\nThis keeps track of the transition lane allocated for this event. I want\nto be able to use the current one within sync work flushing to know\nwhich lane needs its loading indicator cleared.\n\nIt's also a bit weird that transition work scheduled inside sync updates\nin the same event aren't entangled with other transitions in that event\nwhen `flushSync` is.\n\nTherefore this moves it to reset after flushing.\n\nIt should have no impact. Just splitting it out into a separate PR for\nan abundance of caution.\n\nThe only thing this might affect would be if the React internals throws\nand it doesn't reset after. But really it doesn't really have to reset\nand they're all entangled anyway.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-13T15:18:02-04:00",
      "committed_date": "2025-05-13T15:18:02-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberRootScheduler.js"
      ]
    },
    {
      "sha": "997c7bc930304142b3af37bcb21599181124aeb4",
      "short_sha": "997c7bc",
      "message": "[DevTools] Get source location from structured callsites in prepareStackTrace (#33143)\n\nWhen we get the source location for \"View source for this element\" we\nshould be using the enclosing function of the callsite of the child. So\nthat we don't just point to some random line within the component.\n\nThis is similar to the technique in #33136.\n\nThis technique is now really better than the fake throw technique, when\navailable. So I now favor the owner technique. The only problem it's\nonly available in DEV and only if it has a child that's owned (and not\nfiltered).\n\nWe could implement this same technique for the error that's thrown in\nthe fake throwing solution. However, we really shouldn't need that at\nall because for client components we should be able to call\n`inspect(fn)` at least in Chrome which is even better.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-13T12:39:10-04:00",
      "committed_date": "2025-05-13T12:39:10-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/shared/DevToolsOwnerStack.js",
        "packages/react-devtools-shared/src/backend/utils/index.js"
      ]
    },
    {
      "sha": "b94603b95504130aec72f61e02d7b66d48f33653",
      "short_sha": "b94603b",
      "message": "[Fizz] Gate rel=\"expect\" behind enableFizzBlockingRender (#33183)\n\nEnabled in experimental channel.\n\nWe know this is critical semantics to enforce at the HTML level since if\nyou don't then you can't add explicit boundaries after the fact.\nHowever, this might have to go in a major release to allow for\nupgrading.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-13T10:17:53-04:00",
      "committed_date": "2025-05-13T10:17:53-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerEdge-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticNode-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-dom/src/__tests__/ReactDOMLegacyFloat-test.js",
        "packages/react-dom/src/__tests__/ReactRenderDocument-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "2bcf06b69254cad6f7e702bf7d65c4f30478668c",
      "short_sha": "2bcf06b",
      "message": "[ReactFlightWebpackPlugin] Add support for .mjs file extension (#33028)\n\n## Summary\nOur builds generate files with a `.mjs` file extension. These are\ncurrently filtered out by `ReactFlightWebpackPlugin` so I am updating it\nto support this file extension.\n\nThis fixes https://github.com/facebook/react/issues/33155\n\n## How did you test this change?\nI built the plugin with this change and used `yalc` to test it in my\nproject. I confirmed the expected files now show up in\n`react-client-manifest.json`",
      "author": {
        "name": "Jenny Steele",
        "email": "jenny@jennyscript.com"
      },
      "authored_date": "2025-05-12T18:16:15-07:00",
      "committed_date": "2025-05-12T21:16:15-04:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/ReactFlightWebpackPlugin.js"
      ]
    },
    {
      "sha": "5d04d73274a884ed53106677d56dd837ae668c45",
      "short_sha": "5d04d73",
      "message": "Add eager alternate.stateNode cleanup (#33161)\n\nThis is a fix for a problem where React retains shadow nodes longer than\nit needs to. The behaviour is shown in React Native test:\nhttps://github.com/facebook/react-native/blob/main/packages/react-native/src/private/__tests__/utilities/__tests__/ShadowNodeReferenceCounter-itest.js#L169\n\n# Problem\nWhen React commits a new shadow tree, old shadow nodes are stored inside\n`fiber.alternate.stateNode`. This is not cleared up until React clones\nthe node again. This may be problematic if mutation deletes a subtree,\nin that case `fiber.alternate.stateNode` will retain entire subtree\nuntil next update. In case of image nodes, this means retaining entire\nimages.\n\nSo when React goes from revision A: `<View><View /></View>` to revision\nB: `<View />`, `fiber.alternate.stateNode` will be pointing to Shadow\nNode that represents revision A..\n\n\n![image](https://github.com/user-attachments/assets/076b677e-d152-4763-8c9d-4f923212b424)\n\n\n# Fix\nTo fix this, this PR adds a new feature flag\n`enableEagerAlternateStateNodeCleanup`. When enabled,\n`alternate.stateNode` is proactively pointed towards finishedWork's\nstateNode, releasing resources sooner.\n\nI have verified this fixes the issue [demonstrated by React Native\ntests](https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/__tests__/utilities/__tests__/ShadowNodeReferenceCounter-itest.js#L169).\nAll existing React tests pass when the flag is enabled.",
      "author": {
        "name": "Samuel Susla",
        "email": "samuel.susla@gmail.com"
      },
      "authored_date": "2025-05-12T17:39:20+01:00",
      "committed_date": "2025-05-12T17:39:20+01:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "3820740a7fbfc3b27a5127b43bdad44382ff3ce0",
      "short_sha": "3820740",
      "message": "[compiler][entrypoint] Fix edgecases for noEmit and opt-outs (#33148)\n\nTitle\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33148).\n* #33149\n* __->__ #33148",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-09T13:37:49-04:00",
      "committed_date": "2025-05-09T13:37:49-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Imports.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-opt-in--no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-bailout-nopanic-shouldnt-outline.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-memo-noemit.expect.md"
      ]
    },
    {
      "sha": "5069e18060e00d7c07b2b04ebc8a3fa21e2d810a",
      "short_sha": "5069e18",
      "message": "[compiler][be] Make program traversal more readable (#33147)\n\nReact Compiler's program traversal logic is pretty lengthy and complex\nas we've added a lot of features piecemeal. `compileProgram` is 300+\nlines long and has confusing control flow (defining helpers inline,\ninvoking visitors, mutating-asts-while-iterating, mutating global\n`ALREADY_COMPILED` state).\n\n- Moved more stuff to `ProgramContext`\n- Separated `compileProgram` into a bunch of helpers\n\nTested by syncing this stack to a Meta codebase and observing no\ncompilation output changes (D74487851, P1806855669, P1806855379)\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33147).\n* #33149\n* #33148\n* __->__ #33147",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-09T13:23:08-04:00",
      "committed_date": "2025-05-09T13:23:08-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Imports.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/ValidateNoUntransformedReferences.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit-lint-repro.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit-lint-repro.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-no-emit.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-opt-in--no-emit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit/retry-opt-in--no-emit.js"
      ]
    },
    {
      "sha": "21fdf308a1a01af69c28c00a70086aa1bd4c2411",
      "short_sha": "21fdf30",
      "message": "Use a shared noop function from shared/noop (#33154)\n\nStacked on #33150.\n\nWe use `noop` functions in a lot of places as place holders. I don't\nthink there's any real optimizations we get from having separate\ninstances. This moves them to use a common instance in `shared/noop`.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-08T21:33:18-04:00",
      "committed_date": "2025-05-08T21:33:18-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/ReactDOMSharedInternals.js",
        "packages/react-dom/src/ReactDOMSharedInternalsFB.js",
        "packages/react-dom/src/client/ReactDOMRootFB.js",
        "packages/react-reconciler/src/ReactFiberThenable.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/ReactFizzThenable.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightThenable.js",
        "packages/react-test-renderer/src/ReactTestRenderer.js",
        "packages/react/src/ReactChildren.js",
        "packages/react/src/ReactStartTransition.js",
        "packages/shared/noop.js"
      ]
    },
    {
      "sha": "4ca97e4891b6a664b4c3a183f16b81139655ff57",
      "short_sha": "4ca97e4",
      "message": "Clean up enableSiblingPrerendering flag (#32319)",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-05-08T20:49:23-04:00",
      "committed_date": "2025-05-08T20:49:23-04:00",
      "changed_files": [
        "packages/react-cache/src/__tests__/ReactCacheOld-test.internal.js",
        "packages/react-devtools-shared/src/__tests__/TimelineProfiler-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-dom/src/__tests__/ReactDOMForm-test.js",
        "packages/react-dom/src/__tests__/ReactDOMSuspensePlaceholder-test.js",
        "packages/react-dom/src/__tests__/ReactWrongReturnPointer-test.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ActivityLegacySuspense-test.js",
        "packages/react-reconciler/src/__tests__/ActivityStrictMode-test.js",
        "packages/react-reconciler/src/__tests__/ActivitySuspense-test.js",
        "packages/react-reconciler/src/__tests__/ReactActWarnings-test.js",
        "packages/react-reconciler/src/__tests__/ReactAsyncActions-test.js",
        "packages/react-reconciler/src/__tests__/ReactBatching-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactCPUSuspense-test.js",
        "packages/react-reconciler/src/__tests__/ReactConcurrentErrorRecovery-test.js",
        "packages/react-reconciler/src/__tests__/ReactContextPropagation-test.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-reconciler/src/__tests__/ReactExpiration-test.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactSiblingPrerendering-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseCallback-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemantics-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseFallback-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspensePlaceholder-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactTransition-test.js",
        "packages/react-reconciler/src/__tests__/ReactTransitionTracing-test.js",
        "packages/react-reconciler/src/__tests__/ReactUse-test.js",
        "packages/react-reconciler/src/__tests__/StrictEffectsMode-test.js",
        "packages/react-reconciler/src/__tests__/useSyncExternalStore-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "scripts/jest/TestFlags.js"
      ]
    },
    {
      "sha": "9b79292ae7c2980acb531f1dff3cf1ca2d2f40b7",
      "short_sha": "9b79292",
      "message": "Add plumbing for onDefaultTransitionIndicator (#33150)\n\nThis just adds the options at the root and wire it up to the root but it\ndoesn't do anything yet.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-08T20:42:50-04:00",
      "committed_date": "2025-05-08T20:42:50-04:00",
      "changed_files": [
        "packages/react-art/src/ReactART.js",
        "packages/react-dom/src/client/ReactDOMRoot.js",
        "packages/react-dom/src/client/ReactDOMRootFB.js",
        "packages/react-native-renderer/src/ReactFabric.js",
        "packages/react-native-renderer/src/ReactNativeRenderer.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberReconciler.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-test-renderer/src/ReactTestRenderer.js",
        "packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.internal.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "ac06829246287751e6b74bd99cd1b39d1aeba06a",
      "short_sha": "ac06829",
      "message": "feat(compiler): Implement constant propagation for template literals  (#33139)\n\nNew take on #29716\n\n## Summary\nTemplate literals consisting entirely of constant values will be inlined\nto a string literal, effectively replacing the backticks with a double\nquote.\n\nThis is done primarily to make the resulting instruction a string\nliteral, so it can be processed further in constant propatation. So this\nis now correctly simplified to `true`:\n```js\n`` === \"\" // now true\n`a${1}` === \"a1\" // now true\n```\n\nIf a template string literal can only partially be comptime-evaluated,\nit is not that useful for dead code elimination or further constant\nfolding steps and thus, is left as-is in that case. Same is true if the\nliteral contains an array, object, symbol or function.\n\n## How did you test this change?\n\nSee added tests.",
      "author": {
        "name": "Niklas Mollenhauer",
        "email": "nikeee@users.noreply.github.com"
      },
      "authored_date": "2025-05-08T18:24:22+02:00",
      "committed_date": "2025-05-08T09:24:22-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/ConstantPropagation.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/constant-propagation-template-literal.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/constant-propagation-template-literal.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/labeled-break-within-label-switch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/sequential-destructuring-assignment-to-scope-declarations.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/sequential-destructuring-both-mixed-local-and-scope-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/template-literal.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/unlabeled-break-within-label-switch.expect.md"
      ]
    },
    {
      "sha": "38ef6550a88f7744f5dcd4a3de7af6f13a540be5",
      "short_sha": "38ef655",
      "message": "[compiler][playground][tests] Standardize more pragmas (#33146)\n\n(Almost) all pragmas are now one of the following:\n- `@...TestOnly`: custom pragma for test fixtures\n- `@<configName>` | `@<configName>:true`: enables with either true or a\ndefault enabled value\n- `@<configName>:<json value>`",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-08T11:26:53-04:00",
      "committed_date": "2025-05-08T11:26:53-04:00",
      "changed_files": [
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/compilationMode-all-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/compilationMode-infer-output.txt",
        "compiler/apps/playground/__tests__/e2e/page.spec.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/TestUtils.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/arrow-function-with-implicit-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/arrow-function-with-implicit-return.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/class-component-with-render-helper.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/class-component-with-render-helper.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-instrument-forget-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-instrument-forget-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/component-declaration-basic.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/component-declaration-basic.flow.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/conflict-codegen-instrument-forget.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/conflict-codegen-instrument-forget.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bailout-on-suppression-of-custom-rule.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bailout-on-suppression-of-custom-rule.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-destructure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-destructure.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-property-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-property-load.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-write-ref-prop-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-write-ref-prop-in-render.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hoisted-function-in-unreachable-code.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hoisted-function-in-unreachable-code.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-blocklisted-imports.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-blocklisted-imports.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fast-refresh-dont-refresh-const-changes-prod.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fast-refresh-dont-refresh-const-changes-prod.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fast-refresh-refresh-on-const-changes-dev.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fast-refresh-refresh-on-const-changes-dev.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/codegen-instrument-forget-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/codegen-instrument-forget-gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test-export-default-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test-export-default-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test-export-function-and-default.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test-export-function-and-default.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test-export-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test-export-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/infer-function-expression-React-memo-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/infer-function-expression-React-memo-gating.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-declaration-basic.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-declaration-basic.flow.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-method-no-outlining-wildcard.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-method-no-outlining-wildcard.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-method-no-outlining.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-method-no-outlining.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-no-outlining.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-no-outlining.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-compile-hooks-with-multiple-params.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-compile-hooks-with-multiple-params.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-dont-compile-components-with-multiple-params.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-dont-compile-components-with-multiple-params.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn-default-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn-default-import.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.non-inlined-effect-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.non-inlined-effect-fn.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-import-default-property-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-import-default-property-useEffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-syntax.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.use-no-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.use-no-memo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-granular-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-granular-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-function-React-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-function-React-memo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-function-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-function-assignment.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-function-expression-component.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-function-expression-component.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-function-forwardRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-function-forwardRef.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-functions-component-with-hook-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-functions-component-with-hook-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-functions-component-with-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-functions-component-with-jsx.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-functions-component-with-ref-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-functions-component-with-ref-arg.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-functions-hook-with-hook-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-functions-hook-with-hook-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-functions-hook-with-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-functions-hook-with-jsx.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-nested-object-method.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-nested-object-method.jsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-no-component-annot.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-no-component-annot.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-no-component-nested-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-no-component-nested-jsx.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-no-component-obj-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-no-component-obj-return.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-skip-components-without-hooks-or-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-skip-components-without-hooks-or-jsx.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-jsx-in-catch-in-outer-try-with-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-jsx-in-catch-in-outer-try-with-catch.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-jsx-in-try-with-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-jsx-in-try-with-catch.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect-transitive.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/log-pruned-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/log-pruned-memoization.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/meta-isms/repro-cx-assigned-to-temporary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/meta-isms/repro-cx-assigned-to-temporary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/meta-isms/repro-cx-namespace-assigned-to-temporary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/meta-isms/repro-cx-namespace-assigned-to-temporary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multiple-components-first-is-invalid.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multiple-components-first-is-invalid.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/props-method-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/props-method-dependency.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-dont-add-hook-guards-on-retry.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-dont-add-hook-guards-on-retry.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-retain-source-when-bailout.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-retain-source-when-bailout.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-in-nested-function-expression-object-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-in-nested-function-expression-object-expression.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-in-nested-object-method.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-in-nested-object-method.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-0592bd574811.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-0592bd574811.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-2bec02ac982b.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-2bec02ac982b.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-33a6e23edac1.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-33a6e23edac1.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-8f1c2c3f71c9.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-8f1c2c3f71c9.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-fe6042f7628b.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-fe6042f7628b.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/should-bailout-without-compilation-annotation-mode.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/should-bailout-without-compilation-annotation-mode.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/should-bailout-without-compilation-infer-mode.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/should-bailout-without-compilation-infer-mode.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-conditionally-assigned-dynamically-constructed-component-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-conditionally-assigned-dynamically-constructed-component-in-render.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-construct-component-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-construct-component-in-render.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-method-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-new.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-new.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/target-flag-meta-internal.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/target-flag.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-capitalized-fn-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-capitalized-fn-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-eslint-suppressions.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-eslint-suppressions.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-preserve-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-preserve-memo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-prop-write.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-prop-write.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-ref-current-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-ref-current-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-syntax.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.untransformed-fire-reference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.untransformed-fire-reference.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.use-no-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.use-no-memo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/infer-deps-on-retry.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/infer-deps-on-retry.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/no-fire-todo-syntax-shouldnt-throw.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/no-fire-todo-syntax-shouldnt-throw.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-validate-conditional-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-validate-conditional-hook.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/repro-dont-add-hook-guards-on-retry.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/repro-dont-add-hook-guards-on-retry.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/unclosed-eslint-suppression-skips-all-components.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/unclosed-eslint-suppression-skips-all-components.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-no-memo-module-scope-usememo-function-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-no-memo-module-scope-usememo-function-scope.js",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "b629a865fb18b899d251bf5c3c5ca2580d222720",
      "short_sha": "b629a86",
      "message": "[compiler][be] Move test pragma to separate file (#33145)\n\n`Environment.ts` is getting complex so let's separate test / playground\nparsing logic from it\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33145).\n* #33146\n* __->__ #33145",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-08T11:24:44-04:00",
      "committed_date": "2025-05-08T11:24:44-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/TestUtils.ts",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts",
        "compiler/packages/snap/src/compiler.ts",
        "compiler/packages/snap/src/runner-worker.ts"
      ]
    },
    {
      "sha": "fbe7bc21b9aa00afa230132b3f7eee6d2b5c94a7",
      "short_sha": "fbe7bc2",
      "message": "[compiler][be] repro edge cases for noEmit and module opt-outs (#33144)\n\nsee test fixtures\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33144).\n* #33146\n* #33145\n* __->__ #33144",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-08T11:18:16-04:00",
      "committed_date": "2025-05-08T11:18:16-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-bailout-nopanic-shouldnt-outline.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-bailout-nopanic-shouldnt-outline.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-memo-noemit.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-memo-noemit.js"
      ]
    },
    {
      "sha": "9518f1185621aecb99fd72385cdb137c6e8bd8fe",
      "short_sha": "9518f11",
      "message": "Root import types from react-native in ReactNativeTypes (#33063)",
      "author": {
        "name": "Dawid Małecki",
        "email": "maleckidawid@meta.com"
      },
      "authored_date": "2025-05-08T13:12:35+02:00",
      "committed_date": "2025-05-08T12:12:35+01:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeTypes.js",
        "scripts/flow/react-native-host-hooks.js"
      ]
    },
    {
      "sha": "557a64795c6b55e32a87c468c9069b05319d3b9b",
      "short_sha": "557a647",
      "message": "React DevTools 6.1.1 -> 6.1.2 (#33142)\n\nPatch release to mitigate https://github.com/facebook/react/issues/32659\n\nEssentially just 6.1.1 with:\n* Restore all Transitions for Tree updates\n([eps1lon](https://github.com/eps1lon) in\n[#33042](https://github.com/facebook/react/pull/33042))\n* Restore \"double-click to view owners tree\" functionality\n([eps1lon](https://github.com/eps1lon) in\n[#33039](https://github.com/facebook/react/pull/33039))",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-05-08T08:01:17+01:00",
      "committed_date": "2025-05-08T08:01:17+01:00",
      "changed_files": [
        "packages/react-devtools-core/package.json",
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-inline/package.json",
        "packages/react-devtools-timeline/package.json",
        "packages/react-devtools/CHANGELOG.md",
        "packages/react-devtools/package.json"
      ]
    },
    {
      "sha": "8a8df5dbdd57bf63d5156c1a9cba21ac6106b83d",
      "short_sha": "8a8df5d",
      "message": "Add dispatchEvent to fragment instances (#32813)\n\n`fragmentInstance.dispatchEvent(evt)` calls `element.dispatchEvent(evt)`\non the fragment's host parent. This mimics bubbling if the\n`fragmentInstance` could receive an event itself.\n\nIf the parent is disconnected, there is a dev warning and no event is\ndispatched.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-05-07T14:00:59-04:00",
      "committed_date": "2025-05-07T14:00:59-04:00",
      "changed_files": [
        "fixtures/dom/src/components/fixtures/fragment-refs/EventDispatchCase.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/index.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFragmentRefs-test.js"
      ]
    },
    {
      "sha": "946da518eb2d64d808f9204a72e05892d3005f3f",
      "short_sha": "946da51",
      "message": "feat(compiler): implement constant folding for unary minus (#33140)\n\n## Summary\n`-constant` is represented as a `UnaryExpression` node that is currently\nnot part of constant folding. If the operand is a constant number, the\nnode is folded to `constant * -1`. This also coerces `-0` to `0`,\nresulting in `0 === -0` being folded to `true`.\n\n## How did you test this change?\nSee attached tests",
      "author": {
        "name": "Niklas Mollenhauer",
        "email": "nikeee@users.noreply.github.com"
      },
      "authored_date": "2025-05-07T19:15:11+02:00",
      "committed_date": "2025-05-07T10:15:11-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/ConstantPropagation.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/constant-propagation-unary-number.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/constant-propagation-unary-number.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/constant-propagation-unary.expect.md"
      ]
    },
    {
      "sha": "a437c99ff7a45025367571363653c2ad5db482a7",
      "short_sha": "a437c99",
      "message": "[Flight] Clarify that location field is a FunctionLocation not a CallSite (#33141)\n\nFollow up to #33136.\n\nThis clarifies in the types where the conversion happens from a CallSite\nwhich we use to simulate getting the enclosing line/col to a\nFunctionLocation which doesn't represent a CallSite but actually just\nthe function which only has an enclosing line/col.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-07T13:02:41-04:00",
      "committed_date": "2025-05-07T13:02:41-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "4206fe49825787eda57a5d142640a63772ccbf2b",
      "short_sha": "4206fe4",
      "message": "Allow fragment refs to attempt focus/focusLast on nested host children (#33058)\n\nThis enables `focus` and `focusLast` methods on FragmentInstances to\nsearch nested host components, depth first. Attempts focus on each child\nand bails if one is successful. Previously, only the first level of host\nchildren would attempt focus.\n\nNow if we have an example like\n\n```\ncomponent MenuItem() {\n  return (<div><a>{...}</a></div>)\n}\n\ncomponent Menu() {\n  return <Fragment>{items.map(i => <MenuItem i={i} />)}</Fragment>\n}\n```\nWe can target focus on the first or last a tag, rather than checking\neach wrapping div and then noop.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-05-07T12:47:28-04:00",
      "committed_date": "2025-05-07T12:47:28-04:00",
      "changed_files": [
        "fixtures/dom/src/components/fixtures/fragment-refs/FocusCase.js",
        "fixtures/dom/src/style.css",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFragmentRefs-test.js",
        "packages/react-reconciler/src/ReactFiberTreeReflection.js"
      ]
    },
    {
      "sha": "4a702865dd0c5849c1b454091560c3ef26121611",
      "short_sha": "4a70286",
      "message": "[Flight] Encode enclosing line/column numbers and use it to align the fake function (#33136)\n\nStacked on #33135.\n\nThis encodes the line/column of the enclosing function as part of the\nstack traces. When that information is available.\n\nI adjusted the fake function code generation so that the beginning of\nthe arrow function aligns with these as much as possible.\n\nThis ensures that when the browser tries to look up the line/column of\nthe enclosing function, such as for getting the function name, it gets\nthe right one. If we can't get the enclosing line/column, then we encode\nit at the beginning of the file. This is likely to get a miss in the\nsource map identifiers, which means that the function name gets\nextracted from the runtime name instead which is better.\n\nAnother thing where this is used is the in the Performance Track.\nIdeally that would be fixed by\nhttps://issues.chromium.org/u/1/issues/415968771 but the enclosing\ninformation is useful for other things like the function name resolution\nanyway.\n\nWe can also use this for the \"View source for this element\" in React\nDevTools.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-07T12:34:55-04:00",
      "committed_date": "2025-05-07T12:34:55-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-server/src/ReactFlightStackConfigV8.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "0ff1d13b8055c801d8b9b6779958c09fd0dc63e0",
      "short_sha": "0ff1d13",
      "message": "[Flight] Parse Stack Trace from Structured CallSite if available (#33135)\n\nThis is first step to include more enclosing line/column in the parsed\ndata.\n\nWe install our own `prepareStackTrace` to collect structured callsite\ndata and only fall back to parsing the string if it was already\nevaluated or if `prepareStackTrace` doesn't work in this environment.\n\nWe still mirror the default V8 format for encoding the function name\npart. A lot of this is covered by tests already.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-07T11:43:37-04:00",
      "committed_date": "2025-05-07T11:43:37-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightStackConfigV8.js"
      ]
    },
    {
      "sha": "53c9f81049b4440a02b5ed3edb128516821c0279",
      "short_sha": "53c9f81",
      "message": "[DevTools] Use Popover API for TraceUpdates highlighting (#32614)\n\n## Summary\n\nWhen using React DevTools to highlight component updates, the highlights\nwould sometimes appear behind elements that use the browser's\n[top-layer](https://developer.mozilla.org/en-US/docs/Glossary/Top_layer)\n(such as `<dialog>` elements or components using the Popover API). This\nmade it difficult to see which components were updating when they were\ninside or behind top-layer elements.\n\nThis PR fixes the issue by using the Popover API to ensure that\nhighlighting appears on top of all content, including elements in the\ntop-layer. The implementation maintains backward compatibility with\nbrowsers that don't support the Popover API.\n\n## How did you test this change?\n\nI tested this change in the following ways:\n\n1. Manually tested in Chrome (which supports the Popover API) with:\n- Created a test application with React components inside `<dialog>`\nelements and custom elements using the Popover API\n- Verified that component highlighting appears above these elements when\nthey update\n- Confirmed that highlighting displays correctly for nested components\nwithin top-layer elements\n\n2. Verified backward compatibility:\n- Tested in browsers without Popover API support to ensure fallback\nbehavior works correctly\n- Confirmed that no errors occur and highlighting still functions as\nbefore\n\n3. Ran the React DevTools test suite:\n   - All tests pass successfully\n   - No regressions were introduced\n\n[demo-page](https://devtools-toplayer-demo.vercel.app/)\n[demo-repo](https://github.com/yongsk0066/devtools-toplayer-demo)\n\n### AS-IS\n\nhttps://github.com/user-attachments/assets/dc2e1281-969f-4f61-82c3-480153916969\n\n### TO-BE\n\nhttps://github.com/user-attachments/assets/dd52ce35-816c-42f0-819b-0d5d0a8a21e5",
      "author": {
        "name": "YongSeok Jang (장용석)",
        "email": "yongsk0066@naver.com"
      },
      "authored_date": "2025-05-07T23:48:17+09:00",
      "committed_date": "2025-05-07T15:48:17+01:00",
      "changed_files": [
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-shared/src/backend/views/TraceUpdates/canvas.js",
        "packages/react-devtools-shell/src/app/TraceUpdatesTest/index.js",
        "packages/react-devtools-shell/src/app/index.js"
      ]
    },
    {
      "sha": "e5a8de81e57181692d33ce916dfd6aa23638ec92",
      "short_sha": "e5a8de8",
      "message": "Add compareDocumentPosition to fragment instances (#32722)\n\nThis adds `compareDocumentPosition(otherNode)` to fragment instances.\n\nThe semantics implemented are meant to match typical element\npositioning, with some fragment specifics. See the unit tests for all\nexpectations.\n\n- An element preceding a fragment is `Node.DOCUMENT_POSITION_PRECEDING`\n- An element after a fragment is `Node.DOCUMENT_POSITION_FOLLOWING`\n- An element containing the fragment is\n`Node.DOCUMENT_POSITION_PRECEDING` and\n`Node.DOCUMENT_POSITION_CONTAINING`\n- An element within the fragment is\n`Node.DOCUMENT_POSITION_CONTAINED_BY`\n- An element compared against an empty fragment will result in\n`Node.DOCUMENT_POSITION_DISCONNECTED` and\n`Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC`\n\nSince we assume a fragment instances target children are DOM siblings\nand we want to compare the full fragment as a pseudo container, we can\ncompare against the first target child outside of handling the special\ncases (empty fragments and contained elements).",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-05-06T13:01:40-04:00",
      "committed_date": "2025-05-06T13:01:40-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/events/DOMPluginEventSystem.js",
        "packages/react-dom/src/__tests__/ReactDOMFragmentRefs-test.js",
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-reconciler/src/ReactFiberTreeReflection.js"
      ]
    },
    {
      "sha": "7a2c7045aed222b1ece44a18db6326f2f10c89e3",
      "short_sha": "7a2c704",
      "message": "[mcp] Add proper web-vitals metric collection (#33109)\n\nMultiple things here:\n- Improve the mean calculation for metrics so we don't report 0 when\nweb-vitals fail to be retrieved\n- improve ui chaos monkey to use puppeteer APIs since only those trigger\nINP/CLS metrics since we need emulated mouse clicks\n- Add logic to navigate to a temp page after render since some\nweb-vitals metrics are only calculated when the page is backgrounded\n- Some readability improvements",
      "author": {
        "name": "Jorge Cabiedes",
        "email": "57368278+jorge-cab@users.noreply.github.com"
      },
      "authored_date": "2025-05-06T08:50:40-07:00",
      "committed_date": "2025-05-06T08:50:40-07:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/index.ts",
        "compiler/packages/react-mcp-server/src/tools/runtimePerf.ts"
      ]
    },
    {
      "sha": "845d93742fb090e7a35abea409a55e2a14613255",
      "short_sha": "845d937",
      "message": "Remove useId semantics from View Transition name generation (#33094)\n\nOriginally I thought it was important that SSR used the same View\nTransition name as the client so that the Fizz runtime could emit those\nnames and then the client could pick up and take over. However, I no\nlonger believe that approach is feasible. Instead, the names can be\ngenerated only during that particular animation.\n\nTherefore we can simplify the auto name assignment to not have to\nconsider the hydration.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-06T10:33:03-04:00",
      "committed_date": "2025-05-06T10:33:03-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "54a50729cc47a884c2110d7c59dd5f850748e142",
      "short_sha": "54a5072",
      "message": "[Fiber] Replay events between commits (#33130)\n\nStacked on #33129. Flagged behind `enableHydrationChangeEvent`.\n\nIf you type into a controlled input before hydration and something else\nrerenders like a setState in an effect, then the controlled input will\nreset to whatever React thought it was. Even with event replaying that\nthis is stacked on, if the second render happens before event replaying\nhas fired in a separate task.\n\nWe don't want to flush inside the commit phase because then things like\nflushSync in these events wouldn't work since they're inside the commit\nstack.\n\nThis flushes all event replaying between renders by flushing it at the\nend of `flushSpawned` work. We've already committed at that point and is\nabout to either do subsequent renders or yield to event loop for passive\neffects which could have these events fired anyway. This just ensures\nthat they've already happened by the time subsequent renders fire. This\nmeans that there's now a type of event that fire between sync render\npasses.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-06T00:23:27-04:00",
      "committed_date": "2025-05-06T00:23:27-04:00",
      "changed_files": [
        "fixtures/ssr/src/components/Page.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/events/ReactDOMEventReplaying.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationUserInteraction-test.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoHydration.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js"
      ]
    },
    {
      "sha": "587cb8f8967866139bbfdbae3f519cb37e68a054",
      "short_sha": "587cb8f",
      "message": "[Fiber] Replay onChange Events if input/textarea/select has changed before hydration (#33129)\n\nThis fixes a long standing issue that controlled inputs gets out of sync\nwith the browser state if it's changed before we hydrate.\n\nThis resolves the issue by replaying the change events (click, input and\nchange) if the value has changed by the time we commit the hydration.\nThat way you can reflect the new value in state to bring it in sync. It\ndoes this whether controlled or uncontrolled.\n\nThe idea is that this should be ok to replay because it's similar to the\ncontinuous events in that it doesn't replay a sequence but only reflects\nthe current state of the tree.\n\nSince this is a breaking change I added it behind\n`enableHydrationChangeEvent` flag.\n\nThere is still an additional issue remaining that I intend to address in\na follow up. If a `useLayoutEffect` triggers an sync rerender on\nhydration (always a bad idea) then that can rerender before we have had\na chance to replay the change events. If that renders through a input\nthen that input will always override the browser value with the\ncontrolled value. Which will reset it before we've had a change to\nupdate to the new value.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-06T00:10:05-04:00",
      "committed_date": "2025-05-06T00:10:05-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom-bindings/src/client/ReactDOMInput.js",
        "packages/react-dom-bindings/src/client/ReactDOMSelect.js",
        "packages/react-dom-bindings/src/client/ReactDOMTextarea.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/client/inputValueTracking.js",
        "packages/react-dom-bindings/src/events/ReactDOMEventReplaying.js",
        "packages/react-dom/src/__tests__/ReactDOMInput-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationUserInteraction-test.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoHydration.js",
        "packages/react-reconciler/src/ReactFiberFlags.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "79586c7eb626c6b9362c308a54c9ee5b66e640e5",
      "short_sha": "79586c7",
      "message": "Add test for multiple form submissions (#33059)\n\nTest for #30041 and #33055",
      "author": {
        "name": "Matt Carroll",
        "email": "7158882+mattcarrollcode@users.noreply.github.com"
      },
      "authored_date": "2025-05-05T14:47:47-07:00",
      "committed_date": "2025-05-05T14:47:47-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMForm-test.js"
      ]
    },
    {
      "sha": "edf550b67936f2c62534ad5549bf580a4f581bd8",
      "short_sha": "edf550b",
      "message": "Ship enableFabricCompleteRootInCommitPhase (#33064)\n\nThis was shipped internally. Cleaning up the flag.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-05-05T13:36:44-04:00",
      "committed_date": "2025-05-05T13:36:44-04:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "b9cfa0d3083f80bdd11ba76a55aa08fa659b7359",
      "short_sha": "b9cfa0d",
      "message": "[Flight] Prevent serialized size leaking across requests (#33121)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-05-05T18:30:33+02:00",
      "committed_date": "2025-05-05T18:30:33+02:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "c129c2424b662a371865a0145c562a1cf934b023",
      "short_sha": "c129c24",
      "message": "[compiler][repro] Nested fbt test fixture (#32779)\n\nIdeally we should detect and bail out on this case to avoid babel build\nfailures.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-05T11:52:45-04:00",
      "committed_date": "2025-05-05T11:52:45-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-fbt-param-nested-fbt.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-fbt-param-nested-fbt.js"
      ]
    },
    {
      "sha": "0c1575cee8a78dd097edcafc307522ad000e372c",
      "short_sha": "0c1575c",
      "message": "[compiler][bugfix] Bail out when a memo block declares hoisted fns (#32765)\n\nNote that bailing out adds false positives for hoisted functions whose\nonly references are within other functions. For example, this rewrite\nwould be safe.\n```js\n// source program\n  function foo() {\n    return bar();\n  }\n  function bar() {\n    return 42;\n  }\n\n// compiler output\nlet bar;\nif (/* deps changed */) {\n  function foo() {\n    return bar();\n  }\n  bar = function bar() {\n    return 42;\n  }\n}\n```\nThese false positives are difficult to detect because any maybe-call of\nfoo before the definition of bar would be invalid.\n\nInstead of bailing out, we should rewrite hoisted function declarations\nto the following form.\n```js\nlet bar$0;\nif (/* deps changed */) {\n  // All references within the declaring memo block\n  // or before the function declaration should use\n  // the original identifier `bar`\n  function foo() {\n    return bar();\n  }\n  function bar() {\n    return 42;\n  }\n  bar$0 = bar;\n}\n// All references after the declaring memo block\n// or after the function declaration should use\n// the rewritten declaration `bar$0`\n```",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-05-05T11:45:58-04:00",
      "committed_date": "2025-05-05T11:45:58-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneHoistedContexts.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-functiondecl-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-functiondecl-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-functiondecl-hoisting.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-valid-functiondecl-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-valid-functiondecl-hoisting.tsx"
      ]
    },
    {
      "sha": "52ea641449570bbc32eb90fb1a76740249b6bcf5",
      "short_sha": "52ea641",
      "message": "[Flight] Don't increase serializedSize for every recursive pass (#33123)\n\nI noticed that we increase this in the recursive part of the algorithm.\nThis would mean that we'd count a key more than once if it has Server\nComponents inside it recursively resolving. This moves it out to where\nwe enter from toJSON. Which is called once per JSON entry (and therefore\nonce per key).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-05T11:37:39-04:00",
      "committed_date": "2025-05-05T11:37:39-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "3ec88e797f7352c87cb79292b02fdfc53050133f",
      "short_sha": "3ec88e7",
      "message": "[eslint-plugin-react-hooks] update doc url for rules of hooks (#33118)",
      "author": {
        "name": "Stephen Zhou",
        "email": "38493346+hyoban@users.noreply.github.com"
      },
      "authored_date": "2025-05-05T23:37:06+08:00",
      "committed_date": "2025-05-05T17:37:06+02:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/src/rules/RulesOfHooks.ts"
      ]
    },
    {
      "sha": "0ca8420f9d051285c452a590ac4a4c9476406bef",
      "short_sha": "0ca8420",
      "message": "[Flight] Use valid CSS selectors in `useId` format (#33099)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-05-04T13:47:32+02:00",
      "committed_date": "2025-05-04T13:47:32+02:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightHooks.js"
      ]
    },
    {
      "sha": "0db8db178c1521f979535bdba32bf9db9f47ca05",
      "short_sha": "0db8db1",
      "message": "[compiler] Validate against mutable functions being frozen\n\nThis revisits a validation I built a while ago, trying to make it more strict this time to ensure that it's high-signal.\n\nWe detect function expressions which are *known* mutable — they definitely can modify a variable defined outside of the function expression itself (modulo control flow). This uses types to look for known Store and Mutate effects only, and disregards mutations of effects. Any such function passed to a location with a Freeze effect is reported as a validation error.\n\nThis is behind a flag and disabled by default. If folks agree this makes sense to revisit, i'll test out internally and we can consider enabling by default.\n\nghstack-source-id: 075a731444ce95e52dbd5ea3be85c16d428927f5\nPull Request resolved: https://github.com/facebook/react/pull/33079",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2025-05-03T09:15:32+09:00",
      "committed_date": "2025-05-03T09:15:32+09:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoFreezingKnownMutableFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hook-function-argument-mutates-local-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-hook-function-argument-mutates-local-variable.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-mutable-function-as-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-pass-mutable-function-as-prop.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-return-mutable-function-from-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-return-mutable-function-from-hook.js"
      ]
    },
    {
      "sha": "8570116bd1ba872537132de42b997ec56c726659",
      "short_sha": "8570116",
      "message": "[compiler] Fix for uncalled functions that are known-mutable\n\nIf a function captures a mutable value but never gets called, we don't infer a mutable range for that function. This means that we also don't alias the function with its mutable captures.\n\nThis case is tricky, because we don't generally know for sure what is a mutation and what may just be a normal function call. For example:\n\n```js\nhook useFoo() {\n  const x = makeObject();\n  return () => {\n    return readObject(x); // could be a mutation!\n  }\n}\n```\n\nIf we pessimistically assume that all such cases are mutations, we'd have to group lots of memo scopes together unnecessarily. However, if there is definitely a mutation:\n\n```js\nhook useFoo(createEntryForKey) {\n  const cache = new WeakMap();\n  return (key) => {\n    let entry = cache.get(key);\n    if (entry == null) {\n      entry = createEntryForKey(key);\n      cache.set(key, entry); // known mutation!\n    }\n    return entry;\n  }\n}\n```\n\nThen we have to ensure that the function and its mutable captures alias together and end up in the same scope. However, aliasing together isn't enough if the function and operands all have empty mutable ranges (end = start + 1).\n\nThis pass finds function expressions and object methods that have an empty mutable range and known-mutable operands which also don't have a mutable range, and ensures that the function and those operands are aliased together *and* that their ranges are updated to end after the function expression. This is sufficient to ensure that a reactive scope is created for the alias set.\n\nNOTE: The alternative is to reject these cases. If we do that we'd also want to similarly disallow cases like passing a mutable function to a hook.\n\nghstack-source-id: 5d8158246a320e80d8da3f0e395ac1953d8920a2\nPull Request resolved: https://github.com/facebook/react/pull/33078",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2025-05-03T09:15:32+09:00",
      "committed_date": "2025-05-03T09:15:32+09:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InerAliasForUncalledFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutableRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-uncalled-function-capturing-mutable-values-memoizes-with-captures-values.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-uncalled-function-capturing-mutable-values-memoizes-with-captures-values.js"
      ]
    },
    {
      "sha": "4f1d2ddf95906e9a3436552c524410e9d39f48ca",
      "short_sha": "4f1d2dd",
      "message": "[compiler] Add types for WeakMap, WeakSet, and reanimated shared values\n\nBuilding on mofeiz's recent work to type constructors. Also, types for reanimated values which are useful in the next PR.\n\nghstack-source-id: 1c81e213a11337ac7e9c85a429ecf3f1d1adef66\nPull Request resolved: https://github.com/facebook/react/pull/33077",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2025-05-03T09:15:32+09:00",
      "committed_date": "2025-05-03T09:15:32+09:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/weakmap-constructor.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/weakmap-constructor.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/weakset-constructor.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/weakset-constructor.js"
      ]
    },
    {
      "sha": "73d7e816b7746c700ab843964aaf11c17351fac1",
      "short_sha": "73d7e81",
      "message": "[compiler] ValidatePreservedManualMemoization reports detailed errors\n\nThis pass didn't previously report the precise difference btw inferred/manual dependencies unless a debug flag was set. But the error message is really good (nice job mofeiz): the only catch is that in theory the inferred dep could be a temporary that can't trivially be reported to the user.\n\nBut the messages are really useful for quickly verifying why the compiler couldn't preserve memoization. So here we switch to outputting a detailed message about the discrepancy btw inferred/manual deps so long as the inferred dep root is a named variable. I also slightly adjusted the message to handle the case where there is no diagnostic, which can occur if there were no manual deps but the compiler inferred a dependency.\n\nghstack-source-id: 534f6f1fec0855e05e85077eba050eb2ba254ef8\nPull Request resolved: https://github.com/facebook/react/pull/33095",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2025-05-03T09:09:34+09:00",
      "committed_date": "2025-05-03T09:09:34+09:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoist-optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoist-optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-optional-member-expression-as-memo-dep-non-optional-in-body.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-like-name-not-Ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-like-name-not-a-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-conditional-access-own-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-infer-conditional-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useCallback-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-invalid-useMemo-read-maybeRef.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.preserve-use-memo-ref-missing-reactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-aliased-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-conditional-access-noAlloc.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-property-call-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-aliased-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-property-call-chained-object.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-property-call-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-unrelated-mutation-in-depslist.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-with-conditional.expect.md"
      ]
    },
    {
      "sha": "ac2cae524576b8091a6d78d9ab05627053949df1",
      "short_sha": "ac2cae5",
      "message": "[compiler] Fix for string attribute values with emoji\n\nIf a JSX attribute value is a string that contains unicode or other characters that need special escaping, we wrap the attribute value in an expression container. However, our unicode to detect this only handled the basic unicode character plane, not the \"astral\" plane which includes emojis.\n\nThis PR updates the regex to detect such extended characters and also use an expression container.\n\nghstack-source-id: 6d9c8e4dd22285077108e2fa53d66154d1b781fb\nPull Request resolved: https://github.com/facebook/react/pull/33096",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2025-05-03T09:07:50+09:00",
      "committed_date": "2025-05-03T09:07:50+09:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-string-attribute-expression-container.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-string-attribute-expression-container.js"
      ]
    },
    {
      "sha": "66de8e5a9975a4b53734ebed8a1c1f07892426a8",
      "short_sha": "66de8e5",
      "message": "[eslint-plugin-react-hooks] move eslint plugin once again (#33110)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-02T18:14:56-04:00",
      "committed_date": "2025-05-02T18:14:56-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "26ecc98a0014700524e78d938e3654c73213cf3b",
      "short_sha": "26ecc98",
      "message": "[mcp] Prompt improvements for smarter tool composition (#33108)\n\nOur runtime results are still bogus, but so far this tweak let's the llm\nuse the tools a little more intelligently.\n\nexample:\n---\n\n```js\nimport React from 'react';\n\nfunction App() {\n  const [count, setCount] = React.useState(0);\n  const [data, setData] = React.useState([]);\n\n  React.useEffect(() => {\n    const processData = () => {\n      console.log(\"Processing data...\");\n      const newData = [];\n      for (let i = 0; i < 1000000000; i++) {\n        newData.push({ id: i, value: Math.random() * count });\n      }\n      return newData;\n    };\n\n    const processedData = processData();\n    setData(processedData);\n  }, [count]);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <p>Data Length: {data.length}</p>\n      <ul>\n        {data.slice(0, 5).map((item) => (\n          <li key={item.id}>Item {item.id}: {item.value.toFixed(2)}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n```\nwhy is this component slow? use the react tools to figure this out.\n\n> I'll analyze why this component is slow using the React tools. Let's\nfirst evaluate the performance of the original code.\n>\n[review-react-runtime ...]\n>\n> The performance measurement tool timed out, which is a strong\nindication of just how severe the performance issue is in this\ncomponent. Let's now try to compile the code to see if React Compiler\ncan identify any issues:\n>\n[compile...]\n>\n> Now I understand the issue. Let's analyze why this component > is\nextremely slow:\n> Main Performance Issues:\n>\n> Massive Data Processing: The component is trying to create an array\nwith a billion (1,000,000,000) objects in the processData function. This\nis an enormous amount of data that will:\n>\n> Consume massive amounts of memory\n> Take an extremely long time to process\n> Likely crash the browser\n>\n>\n> Unnecessary Recalculation: The effect depends on [count], meaning\nevery time the count changes, it will reprocess this enormous dataset.\n> Inefficient Data Handling: Even though only 5 items are displayed, the\ncomponent processes a billion items.\n>\n> Let's fix these issues:\n>\n[compile...]\n>\n> Now let's check if our modified code performs better:\n>\n[review-react-runtime...]\n>\n> Excellent! The performance has dramatically improved. Now let's check\nthe React documentation to make sure we're following the best practices:\n>\n[query-react-dev-docs...]\n\n(hit the maximum length conversation limit because i'm on a free plan)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-05-02T17:50:39-04:00",
      "committed_date": "2025-05-02T17:50:39-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/index.ts"
      ]
    },
    {
      "sha": "f0ca53d1337780ccfd49c132170d378c789cb463",
      "short_sha": "f0ca53d",
      "message": "[eslint-plugin-react-hooks] another CI update... (#33107)\n\nWe currently created a nested directory, this should remove that.\n\nSee:\n\nhttps://github.com/facebook/react/tree/builds/facebook-fbsource/compiled-rn/facebook-fbsource/xplat/js/RKJSModules/vendor/react/eslint-plugin-react-hooks/eslint-plugin-react-hooks",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-02T17:05:56-04:00",
      "committed_date": "2025-05-02T17:05:56-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "e39b380a21aa4ef48d5880aa2c800ec5b1b044bd",
      "short_sha": "e39b380",
      "message": "[mcp] Fix unresolved imports (#33105)\n\nWe need to explicitly import the modules so they'll be inlined correctly\ninto the bundle.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-05-02T16:54:17-04:00",
      "committed_date": "2025-05-02T16:54:17-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/tools/runtimePerf.ts"
      ]
    },
    {
      "sha": "9de0304ad72bc3f8a77d2d84efa530b8051d1c15",
      "short_sha": "9de0304",
      "message": "Add missing copyright header (#33106)\n\nThis made the build fail since there was no file header comment.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-02T16:52:17-04:00",
      "committed_date": "2025-05-02T16:52:17-04:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/npm/index.d.ts",
        "packages/eslint-plugin-react-hooks/npm/index.js"
      ]
    },
    {
      "sha": "0d695bea10c04d32df4fae7813aa5f448213014a",
      "short_sha": "0d695be",
      "message": "[eslint-plugin-react-hooks] update fbsource build (#33104)\n\nIn order to sync the lint rules directly to internal, include the eslint\nplugin in the build output for fbsource.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-02T16:03:06-04:00",
      "committed_date": "2025-05-02T16:03:06-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "4c4a57c4f9f7f7d44e4cbe868c066e3691cd4038",
      "short_sha": "4c4a57c",
      "message": "[eslint-plugin-react-hooks] updates for component syntax (#33089)\n\nAdds support for Flow's component and hook syntax.\n[docs](https://flow.org/en/docs/react/component-syntax/)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2025-05-02T15:04:45-04:00",
      "committed_date": "2025-05-02T15:04:45-04:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js",
        "packages/eslint-plugin-react-hooks/src/code-path-analysis/LICENSE",
        "packages/eslint-plugin-react-hooks/src/code-path-analysis/README.md",
        "packages/eslint-plugin-react-hooks/src/code-path-analysis/assert.js",
        "packages/eslint-plugin-react-hooks/src/code-path-analysis/code-path-analyzer.js",
        "packages/eslint-plugin-react-hooks/src/code-path-analysis/code-path-segment.js",
        "packages/eslint-plugin-react-hooks/src/code-path-analysis/code-path-state.js",
        "packages/eslint-plugin-react-hooks/src/code-path-analysis/code-path.js",
        "packages/eslint-plugin-react-hooks/src/code-path-analysis/fork-context.js",
        "packages/eslint-plugin-react-hooks/src/code-path-analysis/id-generator.js",
        "packages/eslint-plugin-react-hooks/src/rules/RulesOfHooks.ts"
      ]
    },
    {
      "sha": "dc2b11817bbfcd39f1dbdc8945acbf18cb5e41c3",
      "short_sha": "dc2b118",
      "message": "[mcp] Refactor (#33085)\n\nJust some cleanup. Mainly, we now take the number of iterations as an\nargument. Everything else is just code movement and small tweaks.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-05-02T14:15:12-04:00",
      "committed_date": "2025-05-02T14:15:12-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/index.ts",
        "compiler/packages/react-mcp-server/src/tools/runtimePerf.ts"
      ]
    },
    {
      "sha": "b5450b07389b5d64841ef2998561f25fc11c066a",
      "short_sha": "b5450b0",
      "message": "[mcp] Update prompts (#33084)\n\nSome tweaks to the prompt to provide more context on how to use them.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33084).\n* #33085\n* __->__ #33084\n* #33083",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-05-02T14:06:20-04:00",
      "committed_date": "2025-05-02T14:06:20-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/index.ts"
      ]
    },
    {
      "sha": "f150c046ec8bd91d37a260614c53459a131ab92f",
      "short_sha": "f150c04",
      "message": "[mcp] Move to /tools (#33083)\n\nMoves to a tools directory.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33083).\n* #33085\n* #33084\n* __->__ #33083",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-05-02T14:06:11-04:00",
      "committed_date": "2025-05-02T14:06:11-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/index.ts",
        "compiler/packages/react-mcp-server/src/utils/runtimePerf.ts"
      ]
    },
    {
      "sha": "12b094d2f66b48c0b34cdfdf997fefac373d47a8",
      "short_sha": "12b094d",
      "message": "[mcp] Update plugins (#33082)\n\nAdds typescript support.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33082).\n* #33085\n* #33084\n* #33083\n* __->__ #33082\n* #33101",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-05-02T13:56:45-04:00",
      "committed_date": "2025-05-02T13:56:45-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/utils/runtimePerf.ts"
      ]
    },
    {
      "sha": "e5f0315efa60a76332b32f21e495e36b26bdd36e",
      "short_sha": "e5f0315",
      "message": "[mcp] Fix package.json (#33101)\n\nSince we use esbuild we need to correctly move dependencies that are\nrequired at runtime into `dependencies` and other packages that are only\nused in development in to `devDependencies`. This ensures the correct\npackages are included in the build.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33101).\n* #33085\n* #33084\n* #33083\n* #33082\n* __->__ #33101",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-05-02T13:56:01-04:00",
      "committed_date": "2025-05-02T13:56:01-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "f739642745577a8e4dcb9753836ac3589b9c590a",
      "short_sha": "f739642",
      "message": "[Fizz] Always load the external runtime if one is provided (#33091)\n\nBecause we now decided whether to outline in the flushing phase, when\nwe're writing the preamble we don't yet know if we will make that\ndecision so we don't know if it's safe to omit the external runtime.\n\nHowever, if you are providing an external runtime it's probably a pretty\nsafe bet you're streaming something dynamically that's likely to need it\nso we can always include it.\n\nThe main thing is that this makes it hard to test it because it affects\nour tests in ways it wouldn't otherwise so we have to add a bunch of\nconditions.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-01T18:14:42-04:00",
      "committed_date": "2025-05-01T18:14:42-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "0ed6ceb9f6c19f28c504cf46193cef40166a61f6",
      "short_sha": "0ed6ceb",
      "message": "[Fizz] Add \"Queued\" Status to SSR:ed Suspense Boundaries (#33087)\n\nStacked on #33076.\n\nThis fixes a bug where we used the \"complete\" status but the\nDOMContentLoaded event. This checks for not \"loading\" instead.\n\nWe also add a new status where the boundary has been marked as complete\nby the server but has not yet flushed either due to being throttled,\nsuspended on CSS or animating.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-01T16:11:54-04:00",
      "committed_date": "2025-05-01T16:11:54-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js"
      ]
    },
    {
      "sha": "ee7fee8f8875052afde53c5bfc8aedad43ff9d8e",
      "short_sha": "ee7fee8",
      "message": "[Fizz] Batch Suspense Boundary Reveal with Throttle (#33076)\n\nStacked on #33073.\n\nReact semantics is that Suspense boundaries reveal with a throttle\n(300ms). That helps avoid flashing reveals when a stream reveals many\nindividual steps back to back. It can also improve overall performance\nby batching the layout and paint work that has to happen at each step.\n\nUnfortunately we never implemented this for SSR streaming - only for\nclient navigations. This is highly noticeable on very dynamic sites with\nlots of Suspense boundaries. It can look good with a client nav but feel\nglitchy when you reload the page or initial load.\n\nThis fixes the Fizz runtime to be throttled and reveals batched into a\nsingle paint at a time. We do this by first tracking the last paint\nafter the complete (this will be the first paint if `rel=\"expect\"` is\nrespected). Then in the `completeBoundary` operation we queue the\noperation and then flush it all into a throttled batch.\n\nAnother motivation is that View Transitions need to operate as a batch\nand individual steps get queued in a sequence so it's extra important to\ninclude as much content as possible in each animated step. This will be\ndone in a follow up for SSR View Transitions.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-01T16:09:37-04:00",
      "committed_date": "2025-05-01T16:09:37-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInlineCompleteBoundary.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInlineShellTime.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetExternalRuntime.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-noop-renderer/src/ReactNoopServer.js",
        "packages/react-server/src/ReactFizzServer.js",
        "scripts/rollup/generate-inline-fizz-runtime.js"
      ]
    },
    {
      "sha": "ee077b6ccddd916440bb7570ba6f53673d920700",
      "short_sha": "ee077b6",
      "message": "[Fizz] Don't handle errors in completeBoundary instruction (#33073)\n\nStacked on #33066 and #33068.\n\nCurrently we're passing `errorDigest` to `completeBoundary` if there is\na client side error (only CSS loading atm). This only exists because of\n`completeBoundaryWithStyles`. Normally if there's a server-side error\nwe'd emit the `clientRenderBoundary` instruction instead. This adds\nunnecessary code to the common case where all styles are in the head.\nThis is about to get worse with batching because client render shouldn't\nbe throttled but complete should be.\n\nThe first commit moves the client render logic inline into\n`completeBoundaryWithStyles` so we only pay for it when styles are used.\n\nHowever, the approach I went with in the second commit is to reuse the\n`$RX` instruction instead (`clientRenderBoundary`). That way if you have\nboth it ends up being amortized. However, it does mean we have to emit\nthe `$RX` (along with the `$RC` helper if any\n`completeBoundaryWithStyles` instruction is needed.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-01T15:44:17-04:00",
      "committed_date": "2025-05-01T15:44:17-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js"
      ]
    },
    {
      "sha": "bb57fa7351776a86448c1a094bea8108fd6b34ff",
      "short_sha": "bb57fa7",
      "message": "[Fizz] Share code between inline and external runtime (#33066)\n\nStacked on #33065.\n\nThe runtime is about to be a lot more complicated so we need to start\nsharing some more code.\n\nThe problem with sharing code is that we want the inline runtime to as\nmuch as possible be isolated in its scope using only a few global\nvariables to refer across runtimes.\n\nA problem with Closure Compiler is that it refuses to inline functions\nif they have closures inside of them. Which makes sense because of how\nVMs work it can cause memory leaks. However, in our cases this doesn't\nmatter and code size matters more. So we can't use many clever tricks.\n\nSo this just favors writing the source in the inline form. Then we add\nan extra compiler pass to turn those global variables into local\nvariables in the external runtime.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-05-01T14:25:10-04:00",
      "committed_date": "2025-05-01T14:25:10-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactDOMServerExternalRuntime.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInlineClientRenderBoundary.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInlineCompleteBoundary.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInlineCompleteBoundaryWithStyles.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInlineCompleteSegment.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetExternalRuntime.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineSource.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js",
        "scripts/rollup/build.js",
        "scripts/rollup/generate-inline-fizz-runtime.js",
        "scripts/rollup/plugins/external-runtime-plugin.js"
      ]
    },
    {
      "sha": "e9db3cc2d4175849578418a37f33a6fde5b3c6d8",
      "short_sha": "e9db3cc",
      "message": "[compiler] PruneNonEscapingScopes understands terminal operands\n\nWe weren't treating terminal operands as eligible for memoization in PruneNonEscapingScopes, which meant that they could end up un-memoized. Terminal operands can also be compound ReactiveValues like SequenceExpressions, so part of the fix is to make sure we don't just recurse into compound values but record the full aliasing information we would for top-level instructions.\n\nStill WIP, this needs to handle terminals other than for..of.\n\nghstack-source-id: 09a29230514e3bc95d1833cd4392de238fabbeda\nPull Request resolved: https://github.com/facebook/react/pull/33062",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2025-05-01T12:41:26+09:00",
      "committed_date": "2025-05-01T12:41:27+09:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PrintReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneNonEscapingScopes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-memoize-for-of-collection-when-loop-body-returns.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-memoize-for-of-collection-when-loop-body-returns.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.memoize-loops-that-produce-memoizeable-values.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.memoize-loops-that-produce-memoizeable-values.js"
      ]
    },
    {
      "sha": "d8074cbc798a500a5e76d19fe0c17edec22b2593",
      "short_sha": "d8074cb",
      "message": "[mcp] Make tool more reliable and fix integration issues with babel (#33074)\n\n## Summary\n\nFix babel presets, and add a bit more context to the tool so that it is\nmore reliable\n\n## How did you test this change?\n\nManually tested the mcp integrated with claude desktop",
      "author": {
        "name": "Jorge Cabiedes",
        "email": "57368278+jorge-cab@users.noreply.github.com"
      },
      "authored_date": "2025-04-30T15:42:00-07:00",
      "committed_date": "2025-04-30T15:42:00-07:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/index.ts",
        "compiler/packages/react-mcp-server/src/utils/runtimePerf.ts"
      ]
    },
    {
      "sha": "71797c871b6bfa45988cba38f3388bac095b26cf",
      "short_sha": "71797c8",
      "message": "[Fizz] Ignore error if content node is gone (#33068)\n\nWe normally expect the segment to exist whatever the client does while\nstreaming. However, when hydration errors at the root of the shell for a\nwhole document render, then we clear nodes from body which can include\nour segments. We don't need them anymore because we switched to client\nrendering.\n\nIt triggers an error accessing parent node which can safely be ignored.\nThis just helps avoid confusion in this scenario.\n\nThis also covers up the error in #33067. Which doesn't actually cause\nany visible problems other than error logging. However, ideally we\nwouldn't emit completeBoundary instructions if the boundary is inside a\ncancelled fallback.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-30T17:51:39-04:00",
      "committed_date": "2025-04-30T17:51:39-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js"
      ]
    },
    {
      "sha": "9d795d3808f3202b36740a7a8eb60567bd7f6d90",
      "short_sha": "9d795d3",
      "message": "[compiler][bugfix] expand StoreContext to const / let / function variants (#32747)\n\n```js\nfunction Component() {\n  useEffect(() => {\n    let hasCleanedUp = false;\n    document.addEventListener(..., () => hasCleanedUp ? foo() : bar());\n    // effect return values shouldn't be typed as frozen\n    return () => {\n      hasCleanedUp = true;\n    }\n  };\n}\n```\n### Problem\n`PruneHoistedContexts` currently strips hoisted declarations and\nrewrites the first `StoreContext` reassignment to a declaration. For\nexample, in the following example, instruction 0 is removed while a\nsynthetic `DeclareContext let` is inserted before instruction 1.\n\n```js\n// source\nconst cb = () => x; // reference that causes x to be hoisted\n\nlet x = 4;\nx = 5;\n\n// React Compiler IR\n[0] DeclareContext HoistedLet 'x'\n...\n[1] StoreContext reassign 'x' = 4\n[2] StoreContext reassign 'x' = 5\n```\n\nCurrently, we don't account for `DeclareContext let`. As a result, we're\nrewriting to insert duplicate declarations.\n```js\n// source\nconst cb = () => x; // reference that causes x to be hoisted\n\nlet x;\nx = 5;\n\n// React Compiler IR\n[0] DeclareContext HoistedLet 'x'\n...\n[1] DeclareContext Let 'x'\n[2] StoreContext reassign 'x' = 5\n```\n\n### Solution\n\nInstead of always lowering context variables to a DeclareContext\nfollowed by a StoreContext reassign, we can keep `kind: 'Const' | 'Let'\n| 'Reassign' | etc` on StoreContext.\nPros:\n- retain more information in HIR, so we can codegen easily `const` and\n`let` context variable declarations back\n- pruning hoisted `DeclareContext` instructions is simple.\n\nCons:\n- passes are more verbose as we need to check for both `DeclareContext`\nand `StoreContext` declarations\n\n~(note: also see alternative implementation in\nhttps://github.com/facebook/react/pull/32745)~\n\n### Testing\nContext variables are tricky. I synced and diffed changes in a large\nmeta codebase and feel pretty confident about landing this. About 0.01%\nof compiled files changed. Among these changes, ~25% were [direct\nbugfixes](https://www.internalfb.com/phabricator/paste/view/P1800029094).\nThe [other\nchanges](https://www.internalfb.com/phabricator/paste/view/P1800028575)\nwere primarily due to changed (corrected) mutable ranges from\nhttps://github.com/facebook/react/pull/33047. I tried to represent most\ninteresting changes in new test fixtures\n\n`",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-04-30T17:18:58-04:00",
      "committed_date": "2025-04-30T17:18:58-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutableLifetimes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneHoistedContexts.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-alias-computed-load-3-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-alias-computed-load-3.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife-reassign.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/context-variable-reassigned-outside-of-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/for-loop-with-context-variable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/for-loop-with-context-variable-iterator.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisted-context-variable-in-outlined-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisted-context-variable-in-outlined-fn.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-invalid-tdz-let.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-let-declaration-without-initialization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-let-declaration-without-initialization.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-nested-let-declaration-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-nested-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-reassigned-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-reassigned-twice-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-simple-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-captures-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-captures-context-variable.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lambda-reassign-shadowed-primitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/mutate-captured-arg-separately.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-extended-contextvar-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-reordering-deplist-controlflow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-controlflow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-context-var-reassign-no-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-context-var-reassign-no-scope.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-returned-inner-fn-reassigns-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-effect-cleanup-reassigns.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-effect-cleanup-reassigns.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-operator-conditional.expect.md"
      ]
    },
    {
      "sha": "12f4cb85c5847758ece81fc95b7eaedc1fb9ebd0",
      "short_sha": "12f4cb8",
      "message": "[compiler][bugfix] Returned functions are not always frozen (#33047)\n\nFixes an edge case in React Compiler's effects inference model.\n\nReturned values should only be typed as 'frozen' if they are (1) local\nand (2) not a function expression which may capture and mutate this\nfunction's outer context. See test fixtures for details\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33047).\n* #32765\n* #32747\n* __->__ #33047",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-04-30T15:50:54-04:00",
      "committed_date": "2025-04-30T15:50:54-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-returned-inner-fn-mutates-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-returned-inner-fn-mutates-context.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-returned-inner-fn-reassigns-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-returned-inner-fn-reassigns-context.js"
      ]
    },
    {
      "sha": "90a124a9802a5ab6509d5838e65b9f4d4fbbc16b",
      "short_sha": "90a124a",
      "message": "[mdn] Initial experiment for adding performance tool (#33045)\n\n## Summary\nAdd a way for the agent to get some data on the performance of react\ncode\n\n## How did you test this change?\nTested function independently and directly with claude desktop app\n\n---------\n\nCo-authored-by: Sebastian \"Sebbie\" Silbermann <sebastian.silbermann@vercel.com>",
      "author": {
        "name": "Jorge Cabiedes",
        "email": "57368278+jorge-cab@users.noreply.github.com"
      },
      "authored_date": "2025-04-30T12:44:05-07:00",
      "committed_date": "2025-04-30T12:44:05-07:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/package.json",
        "compiler/packages/react-mcp-server/src/index.ts",
        "compiler/packages/react-mcp-server/src/utils/runtimePerf.ts",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "49ea8bf5698f017022517be79f5f53e6f6a4dad3",
      "short_sha": "49ea8bf",
      "message": "[Flight] Defer Elements if the parent chunk is too large (#33030)\n\nSame principle as #33029 but for Flight.\n\nWe pretty aggressively create separate rows for things in Flight (every\nServer Component that's an async function create a microtask). However,\nsync Server Components and just plain Host Components are not. Plus we\nshould ideally ideally inline more of the async ones in the same way\nFizz does.\n\nThis means that we can create rows that end up very large. Especially if\nall the data is already available. We can't show the parent content\nuntil the whole thing loads on the client.\n\nWe don't really know where Suspense boundaries are for Flight but any\nElement is potentially a point that can be split.\n\nThis heuristic counts roughly how much we've serialized to block the\ncurrent chunk and once a limit is exceeded, we start deferring all\nElements. That way they get outlined into future chunks that are later\nin the stream. Since they get replaced by Lazy references the parent can\npotentially get unblocked.\n\nThis can help if you're trying to stream a very large document with a\nclient nav for example.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-30T14:21:28-04:00",
      "committed_date": "2025-04-30T14:21:28-04:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "9a52ad9fd9c6211d056942a455435c2804869854",
      "short_sha": "9a52ad9",
      "message": "[Fizz] Remove globals from external runtime (#33065)\n\nWe never emit any inline functions when we use external runtime so this\nglobal shouldn't be needed.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-30T14:21:14-04:00",
      "committed_date": "2025-04-30T14:21:14-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactDOMServerExternalRuntime.js"
      ]
    },
    {
      "sha": "fa8e3a251e7840fa220a1649dec616e72658473e",
      "short_sha": "fa8e3a2",
      "message": "[devtools] Restore all Transitions for Tree updates (#33042)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-04-30T19:51:40+02:00",
      "committed_date": "2025-04-30T19:51:40+02:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/Element.js",
        "packages/react-devtools-shared/src/devtools/views/Components/OwnersListContext.js",
        "packages/react-devtools-shared/src/devtools/views/Components/OwnersStack.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/TreeContext.js"
      ]
    },
    {
      "sha": "408d055a3b89794088130ed39bf42ca540766275",
      "short_sha": "408d055",
      "message": "Add Fragment Refs to Fabric with intersection observer support (#33056)\n\nAdds Fragment Ref support to RN through the Fabric config, starting with\n`observeUsing`/`unobserveUsing`. This is mostly a copy from the\nimplementation on DOM, and some of it can likely be shared in the future\nbut keeping it separate for now and we can refactor as we add more\nfeatures.\n\nAdded a basic test with Fabric, but testing specific methods requires so\nmuch mocking that it doesn't seem valuable here.\n\nI built Fabric and ran on the Catalyst app internally to test with\nintersection observers end to end.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-04-30T10:47:18-04:00",
      "committed_date": "2025-04-30T10:47:18-04:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/__tests__/ReactFabricFragmentRefs-test.internal.js",
        "packages/react-reconciler/src/ReactFiberTreeReflection.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "fbf29ccaa3598c6443d8d550aa406f9c6f654076",
      "short_sha": "fbf29cc",
      "message": "[devtools] Restore \"double-click to view owners tree\" functionality (#33039)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-04-30T11:11:33+02:00",
      "committed_date": "2025-04-30T11:11:33+02:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/TreeContext.js"
      ]
    },
    {
      "sha": "62960c67c84da7e85d7515ef8447cea0ba0824a6",
      "short_sha": "62960c6",
      "message": "Run Component Track Logs in the console.createTask() of the Fiber (#32809)\n\nStacked on #32736.\n\nThat way you can find the owner stack of each component that rerendered\nfor context.\n\nIn addition to the JSX callsite tasks that we already track, I also\nadded tracking of the first `setState` call before rendering.\n\nWe then run the \"Update\" entries in that task. That way you can find the\ncallsite of the first setState and therefore the \"cause\" of a render\nstarting by selecting the \"Update\" track.\n\nUnfortunately this is blocked on bugs in Chrome that makes it so that\nthese stacks are not reliable in the Performance tab. It basically just\ndoesn't work.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-29T22:17:17-04:00",
      "committed_date": "2025-04-29T22:17:17-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberClassComponent.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberReconciler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "cd4e4d759975916a503d14abe46052f9f5826048",
      "short_sha": "cd4e4d7",
      "message": "Use console.timeStamp instead of performance.measure in Component Performance Track (#32736)\n\nThis is a new extension that Chrome added to the existing\n`console.timeStamp` similar to the extensions added to\n`performance.measure`. This one should be significantly faster because\nit doesn't have the extra object indirection, it doesn't return a\n`PerformanceMeasure` entry and doesn't register itself with the global\nsystem of entries.\n\nI also use `performance.measure` in DEV for errors since we can attach\nthe error to the `properties` extension which doesn't exist for\n`console.timeStamp`.\n\nA downside of using this API is that there's no programmatic API for the\nsite itself to collect its own logs from React. Which the previous\nallowed us to use the standard `performance.getEntries()` for. The\nrecommendation instead will be for the site to patch `console.timeStamp`\nif it wants to collect measurements from React just like you're\nrecommended to patch `console.error` or `fetch` or whatever to collect\nother instrumentation metrics.\n\nThis extension works in Chrome canary but it doesn't yet work fully in\nChrome stable. We might want to wait until it has propagated to Chrome\nto stable. It should be in Chrome 136.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-29T21:40:10-04:00",
      "committed_date": "2025-04-29T21:40:10-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "scripts/flow/environment.js"
      ]
    },
    {
      "sha": "18212ca960ee2f0acf538c2198f7ba36c3042ecd",
      "short_sha": "18212ca",
      "message": "[Fizz] Outline if a boundary would add too many bytes to the next completion (#33029)\n\nFollow up to #33027.\n\nThis enhances the heuristic so that we accumulate the size of the\ncurrently written boundaries. Starting from the size of the root (minus\npreamble) for the shell.\n\nThis ensures that if you have many small boundaries they don't all\ncontinue to get inlined. For example, you can wrap each paragraph in a\ndocument in a Suspense boundary to regain document streaming\ncapabilities if that's what you want.\n\nHowever, one consideration is if it's worth producing a fallback at all.\nMaybe if it's like `null` it's free but if it's like a whole alternative\npage, then it's not. It's possible to have completely useless Suspense\nboundaries such as when you nest several directly inside each other. So\nthis uses a limit of at least 500 bytes of the content itself for it to\nbe worth outlining at all. It also can't be too small because then for\nexample a long list of paragraphs can never be outlined.\n\nIn the fixture I straddle this limit so some paragraphs are too small to\nbe considered. An unfortunate effect of that is that you can end up with\nsome of them not being outlined which means that they appear out of\norder. SuspenseList is supposed to address that but it's unfortunate.\n\nThe limit is still fairly high though so it's unlikely that by default\nyou'd start outlining anything within the viewport at all. I had to\nreduce the `progressiveChunkSize` by an order of magnitude in my fixture\nto try it out properly.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-29T19:13:28-04:00",
      "committed_date": "2025-04-29T19:13:28-04:00",
      "changed_files": [
        "fixtures/ssr/server/render.js",
        "fixtures/ssr/src/components/Chrome.js",
        "fixtures/ssr/src/components/LargeContent.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "88b976740467f9dfabae03c79a8eff9033c35050",
      "short_sha": "88b9767",
      "message": "Hack to recover from reading the wrong Fiber (#33055)\n\n`requestFormReset` incorrectly tries to get the current dispatch queue\nfrom the Fiber. However, the Fiber might be the workInProgress which is\nan inconsistent state.\n\nThis hack just tries the other Fiber if it detects one of the known\ninconsistent states but there can be more.\n\nReally we should stash the dispatch queue somewhere stateful which is\neffectively what `setState` does by binding it to the closure.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-29T13:36:19-04:00",
      "committed_date": "2025-04-29T13:36:19-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHooks.js"
      ]
    },
    {
      "sha": "0038c501a307e5ddc0cb80027e55740ddda09520",
      "short_sha": "0038c50",
      "message": "[react-native] Pull up enableFastAddPropertiesInDiffing check (#33043)\n\n## Summary\n\nWe don't need the isArray check for this experiment, as\n`fastAddProperties` already does the same. Also renaming\nslowAddProperties to make it clearer we can fully remove this codepath\nonce fastAddProperties is fully rolled out.\n\n## How did you test this change?\n\n```\nyarn test packages/react-native-renderer -r=xplat --variant=true\n```",
      "author": {
        "name": "Pieter De Baets",
        "email": "pieterdb@meta.com"
      },
      "authored_date": "2025-04-29T11:10:18+01:00",
      "committed_date": "2025-04-29T11:10:18+01:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeAttributePayloadFabric.js"
      ]
    },
    {
      "sha": "5dc00d6b2b7798266c1e3b6132f1d076fa9f55d7",
      "short_sha": "5dc00d6",
      "message": "[Fizz] Reset Instructions on ResumableState (#33046)\n\nWhen we end up creating an incomplete state in the shell we end up not\nflushing anything. As a hack, in this case we need to reset the\nResumableState because some of the ResumableState is still relevant\n(e.g. any preloads that went into headers) but some of the\nResumableState needs to be reset since they assume that what we produced\nactually flushed.\n\nWe didn't reset the instructions state but we haven't actually flushed\nany of the instructions so it needs to reset.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-28T15:50:06-04:00",
      "committed_date": "2025-04-28T15:50:06-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js"
      ]
    },
    {
      "sha": "c498bfce8b9baa3dd21bd0d5124eb3a4549886f1",
      "short_sha": "c498bfc",
      "message": "[devtools] Allow inspecting cause, name, message, stack of Errors in props (#33023)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-04-26T07:20:57+02:00",
      "committed_date": "2025-04-26T07:20:57+02:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/inspectedElement-test.js",
        "packages/react-devtools-shared/src/hydration.js",
        "packages/react-devtools-shared/src/utils.js",
        "packages/react-devtools-shell/src/app/Hydration/index.js"
      ]
    },
    {
      "sha": "8e9a5fc6c1a6252ca1727ab8fe0d4ee13f2568ec",
      "short_sha": "8e9a5fc",
      "message": "[Fizz] Enable the progressiveChunkSize option (#33027)\n\nSince the very beginning we have had the `progressiveChunkSize` option\nbut we never actually took advantage of it because we didn't count the\nbytes that we emitted. This starts counting the bytes by taking a pass\nover the added chunks each time a segment completes.\n\nThat allows us to outline a Suspense boundary to stream in late even if\nit is already loaded by the time that back-pressure flow and in a\n`prerender`. Meaning it gets inserted with script.\n\nThe effect can be seen in the fixture where if you have large HTML\ncontent that can block initial paint (thanks to\n[`rel=\"expect\"`](https://github.com/facebook/react/pull/33016) but also\nnested Suspense boundaries). Before this fix, the paint would be blocked\nuntil the large content loaded. This lets us paint the fallback first in\nthe case that the raw bytes of the content takes a while to download.\n\nYou can set it to `Infinity` to opt-out. E.g. if you want to ensure\nthere's never any scripts. It's always set to `Infinity` in\n`renderToHTML` and the legacy `renderToString`.\n\nOne downside is that if we might choose to outline a boundary, we need\nto let its fallback complete.\n\nWe don't currently discount the size of the fallback but really just\nconsider them additive even though in theory the fallback itself could\nalso add significant size or even more than the content. It should maybe\nreally be considered the delta but that would require us to track the\nsize of the fallback separately which is tricky.\n\nOne problem with the current heuristic is that we just consider the size\nof the boundary content itself down to the next boundary. If you have a\nlot of small boundaries adding up, it'll never kick in. I intend to\naddress that in a follow up.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-25T16:10:53-04:00",
      "committed_date": "2025-04-25T16:10:53-04:00",
      "changed_files": [
        "fixtures/ssr/src/components/Chrome.js",
        "fixtures/ssr/src/components/LargeContent.js",
        "packages/react-noop-renderer/src/ReactNoopServer.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/ReactServerStreamConfigFB.js"
      ]
    },
    {
      "sha": "89e8875ec48c86b366bf62398112923cdf76016a",
      "short_sha": "89e8875",
      "message": "[compiler] Fallback for inferred effect dependencies (#32984)\n\nWhen effect dependencies cannot be inferred due to memoization-related\nbailouts or unexpected mutable ranges (which currently often have to do\nwith writes to refs), fall back to traversing the effect lambda itself.\n\nThis fallback uses the same logic as PropagateScopeDependencies:\n1. Collect a sidemap of loads and property loads\n2. Find hoistable accesses from the control flow graph. Note that here,\nwe currently take into account the mutable ranges of instructions (see\n`mutate-after-useeffect-granular-access` fixture)\n3. Collect the set of property paths accessed by the effect\n4. Merge to get the set of minimal dependencies",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-04-25T15:44:39-04:00",
      "committed_date": "2025-04-25T15:44:39-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-granular-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-granular-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect-ref-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/mutate-after-useeffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-infer-deps-on-retry.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/infer-deps-on-retry.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-infer-deps-on-retry.js"
      ]
    },
    {
      "sha": "2d0a5e399f195bfc98fc5e1efa37aab9fa53e097",
      "short_sha": "2d0a5e3",
      "message": "[compiler] Patch for reactive refs in inferred effect dependencies (#32991)\n\nInferred effect dependencies and inlined jsx (both experimental\nfeatures) rely on `InferReactivePlaces` to determine their dependencies.\n\n\nSince adding type inference for phi nodes\n(https://github.com/facebook/react/pull/30796), we have been incorrectly\ninferring stable-typed value blocks (e.g. `props.cond ? setState1 :\nsetState2`) as non-reactive. This fix patches InferReactivePlaces\ninstead of adding a new pass since we want non-reactivity propagated\ncorrectly",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-04-25T15:42:40-04:00",
      "committed_date": "2025-04-25T15:42:40-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReactivePlaces.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-ref-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-ref-ternary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.expect.md"
      ]
    },
    {
      "sha": "0c28a09eefaa0e70a313644fd8e455c8ab7ba3eb",
      "short_sha": "0c28a09",
      "message": "[ci] Reduce non-deterministic builds for eslint-plugin-react-hooks (#33026)\n\nSee https://github.com/rollup/plugins/issues/1425\n\nCurrently, `@babel/helper-string-parser/lib/index.js` is either emitted\nas a wrapped esmodule or inline depending on the ordering of async\nfunctions in `rollup/commonjs`. Specifically,\n`@babel/types/lib/definitions/core.js` is cyclic (i.e. transitively\ndepends upon itself), but sometimes\n`@babel/helper-string-parser/lib/index.js` is emitted before this is\nrealized.\n\n\nA relatively straightforward patch is to wrap all modules (see\nhttps://github.com/rollup/plugins/issues/1425#issuecomment-1465626736).\nThis only regresses `eslint-plugin-react-hooks` bundle size by ~1.8% and\nis safer (see\nhttps://github.com/rollup/plugins/blob/master/packages/commonjs/README.md#strictrequires)\n\n> The default value of true will wrap all CommonJS files in functions\nwhich are executed when they are required for the first time, preserving\nNodeJS semantics. This is the safest setting and should be used if the\ngenerated code does not work correctly with \"auto\". Note that\nstrictRequires: true can have a small impact on the size and performance\nof generated code, but less so if the code is minified.\n\n(note that we're on an earlier version of `@rollup/commonjs` which does\nnot default to `strictRequires: true`)",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-04-25T14:26:59-04:00",
      "committed_date": "2025-04-25T14:26:59-04:00",
      "changed_files": [
        "scripts/rollup/build.js"
      ]
    },
    {
      "sha": "143d3e1b89d7f64d607bbfc844d1324b39ed93dc",
      "short_sha": "143d3e1",
      "message": "[Fizz] Emit link rel=\"expect\" to block render before the shell has fully loaded (#33016)\n\nThe semantics of React is that anything outside of Suspense boundaries\nin a transition doesn't display until it has fully unsuspended. With SSR\nstreaming the intention is to preserve that.\n\nWe explicitly don't want to support the mode of document streaming\nnormally supported by the browser where it can paint content as tags\nstream in since that leads to content popping in and thrashing in\nunpredictable ways. This should instead be modeled explictly by nested\nSuspense boundaries or something like SuspenseList.\n\nAfter the first shell any nested Suspense boundaries are only revealed,\nby script, once they're fully streamed in to the next boundary. So this\nis already the case there. However, for the initial shell we have been\nat the mercy of browser heuristics for how long it decides to stream\nbefore the first paint.\n\nChromium now has [an API explicitly for this use\ncase](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API/Using#stabilizing_page_state_to_make_cross-document_transitions_consistent)\nthat lets us model the semantics that we want. This is always important\nbut especially so with MPA View Transitions.\n\nAfter this a simple document looks like this:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n     <link rel=\"expect\" href=\"#«R»\" blocking=\"render\"/>\n  </head>\n  <body>\n    <p>hello world</p>\n    <script src=\"bootstrap.js\" id=\"«R»\" async=\"\"></script>\n    ...\n  </body>\n</html>\n```\n\nThe `rel=\"expect\"` tag indicates that we want to wait to paint until we\nhave streamed far enough to be able to paint the id `\"«R»\"` which\nindicates the shell.\n\nIdeally this `id` would be assigned to the root most HTML element in the\nbody. However, this is tricky in our implementation because there can be\nmultiple and we can render them out of order.\n\nSo instead, we assign the id to the first bootstrap script if there is\none since these are always added to the end of the shell. If there isn't\na bootstrap script then we emit an empty `<template\nid=\"«R»\"></template>` instead as a marker.\n\nSince we currently put as much as possible in the shell if it's loaded\nby the time we render, this can have some negative effects for very\nlarge documents. We should instead apply the heuristic where very large\nSuspense boundaries get outlined outside the shell even if they're\nimmediately available. This means that even prerenders can end up with\nscript tags.\n\nWe only emit the `rel=\"expect\"` if you're rendering a whole document.\nI.e. if you rendered either a `<html>` or `<head>` tag. If you're\nrendering a partial document, then we don't really know where the\nstreaming parts are anyway and can't provide such guarantees. This does\napply whether you're streaming or not because we still want to block\nrendering until the end, but in practice any serialized state that needs\nhydrate should still be embedded after the completion id.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-25T11:52:28-04:00",
      "committed_date": "2025-04-25T11:52:28-04:00",
      "changed_files": [
        "fixtures/ssr/server/render.js",
        "fixtures/ssr/src/components/Chrome.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerEdge-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStatic-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticNode-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-dom/src/__tests__/ReactDOMLegacyFloat-test.js",
        "packages/react-dom/src/__tests__/ReactDOMSingletonComponents-test.js",
        "packages/react-dom/src/__tests__/ReactRenderDocument-test.js",
        "packages/react-dom/src/test-utils/FizzTestUtils.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-server-dom-fb/src/__tests__/ReactDOMServerFB-test.internal.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "693803a9bb3073b2ff5c99f8ae804f855db9aae2",
      "short_sha": "693803a",
      "message": "Rename Suspense unstable_name to name (#33014)\n\nThis was only used by Transition Tracing which isn't really used\nanywhere.\n\nHowever, we want to start using it for other DevTools.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-24T16:53:34-04:00",
      "committed_date": "2025-04-24T16:53:34-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/__tests__/ReactTransitionTracing-test.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "24dfad3abb2786e96ff7efe90ab9fff5644af9f0",
      "short_sha": "24dfad3",
      "message": "[compiler] Add changelog (#32983)\n\nAdds CHANGELOG.md.\n\nThis entry contains changes from the very first beta\n`19.0.0-beta-9ee70a1-20241017` to `19.1.0-rc.1`.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-24T16:20:02-04:00",
      "committed_date": "2025-04-24T16:20:02-04:00",
      "changed_files": [
        "compiler/CHANGELOG.md"
      ]
    },
    {
      "sha": "bb74190c2635990ee6dd754c596a5c409b50ccda",
      "short_sha": "bb74190",
      "message": "[mcp] Convert docs resource to tool (#33009)\n\nSeems to work better as a tool. Also it now returns plaintext instead of\nmarkdown.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-24T14:57:44-04:00",
      "committed_date": "2025-04-24T14:57:44-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/package.json",
        "compiler/packages/react-mcp-server/src/index.ts",
        "compiler/packages/react-mcp-server/src/utils/algolia.ts",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "5010364d344bb5f5cc5536f5d56ed41e43b356fb",
      "short_sha": "5010364",
      "message": "[chore] Update caniuse-lite (#33013)\n\nsilence annoying warnings\n\n```\nnpx update-browserslist-db@latest\n```",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-24T13:50:03-04:00",
      "committed_date": "2025-04-24T13:50:03-04:00",
      "changed_files": [
        "compiler/apps/playground/yarn.lock",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "9938f83ca21f6e01e31b41ce8335a4516de276d1",
      "short_sha": "9938f83",
      "message": "[compiler] Emit CompileSkip before CompileSuccess event (#33012)\n\nPreviously the CompileSuccess event would emit first before CompileSkip,\nso the lsp's codelens would incorrectly flag skipped components/hooks\n(via 'use no memo') as being optimized.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33012).\n* __->__ #33012\n* #33011\n* #33010",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-24T13:30:36-04:00",
      "committed_date": "2025-04-24T13:30:36-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts"
      ]
    },
    {
      "sha": "2af218a7287e3ed5d41ff0ba6cb826850646f47c",
      "short_sha": "2af218a",
      "message": "[forgive][ez] Tweak logging (#33011)\n\nJust some tweaks\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33011).\n* #33012\n* __->__ #33011\n* #33010",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-24T13:30:16-04:00",
      "committed_date": "2025-04-24T13:30:16-04:00",
      "changed_files": [
        "compiler/packages/react-forgive/server/src/index.ts"
      ]
    },
    {
      "sha": "b06bb35ce9ca0cf283003a66db1aa079da93ad72",
      "short_sha": "b06bb35",
      "message": "[forgive] Don't look up user babel configs (#33010)\n\nProjects with existing babel config files may confuse the LSP, so\nexplictly opt out of looking them up.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33010).\n* #33012\n* #33011\n* __->__ #33010",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-24T13:29:56-04:00",
      "committed_date": "2025-04-24T13:29:56-04:00",
      "changed_files": [
        "compiler/packages/react-forgive/server/src/compiler/index.ts"
      ]
    },
    {
      "sha": "197d6a040368ee87308225f5534b013cb5512673",
      "short_sha": "197d6a0",
      "message": "[devtools] 1st class support of used Thenables (#32989)\n\nCo-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-04-24T13:46:31+02:00",
      "committed_date": "2025-04-24T13:46:31+02:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/inspectedElement-test.js",
        "packages/react-devtools-shared/src/hydration.js",
        "packages/react-devtools-shared/src/utils.js",
        "packages/react-devtools-shell/README.md",
        "packages/react-devtools-shell/src/app/Hydration/index.js",
        "packages/react-devtools-shell/webpack-server.js"
      ]
    },
    {
      "sha": "ad09027c161f1ce5d9b07bfcfb4ee4fb92444655",
      "short_sha": "ad09027",
      "message": "[compiler] Add missing copyrights (#33004)\n\n`yarn copyright`",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-23T22:04:44-04:00",
      "committed_date": "2025-04-23T22:04:44-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Reanimated.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/ValidateNoUntransformedReferences.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/AssertValidBlockNesting.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildReactiveScopeTerminalsHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectOptionalChainDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/MergeOverlappingReactiveScopesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PruneUnusedLabelsHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/StabilizeBlockIds.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Transform/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoCapitalizedCalls.ts",
        "compiler/packages/babel-plugin-react-compiler/tsup.config.ts",
        "compiler/packages/eslint-plugin-react-compiler/tsup.config.ts",
        "compiler/packages/make-read-only-util/tsup.config.ts",
        "compiler/packages/react-compiler-healthcheck/src/config.ts",
        "compiler/packages/react-compiler-healthcheck/tsup.config.ts",
        "compiler/packages/react-compiler-runtime/tsup.config.ts",
        "compiler/packages/react-forgive/client/src/autodeps.ts",
        "compiler/packages/react-forgive/client/src/colors.ts",
        "compiler/packages/react-forgive/client/src/extension.ts",
        "compiler/packages/react-forgive/client/src/mapping.ts",
        "compiler/packages/react-forgive/server/src/compiler/compat.ts",
        "compiler/packages/react-forgive/server/src/requests/autodepsdecorations.ts",
        "compiler/packages/react-forgive/server/src/utils/range.ts",
        "compiler/packages/react-mcp-server/src/types/algolia.ts",
        "compiler/packages/react-mcp-server/tsup.config.ts",
        "compiler/scripts/release/prompt-for-otp.js",
        "compiler/scripts/release/publish.js",
        "compiler/scripts/release/shared/build-packages.js",
        "compiler/scripts/release/shared/packages.js",
        "compiler/scripts/release/shared/utils.js"
      ]
    },
    {
      "sha": "8b9629c8106b55965ac6e4f078110b484b358101",
      "short_sha": "8b9629c",
      "message": "[compiler] Fix copyright script (#33003)\n\nDon't try to open directories\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33003).\n* #33004\n* __->__ #33003\n* #33002\n\n---------\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-23T21:55:24-04:00",
      "committed_date": "2025-04-23T21:55:24-04:00",
      "changed_files": [
        "compiler/scripts/copyright.js"
      ]
    },
    {
      "sha": "3a5335676f7df4318e8e399f8f69e880db724f78",
      "short_sha": "3a53356",
      "message": "[forgive] Polish decorations (#33002)\n\nPolishes up decorations.\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33002).\n* #33004\n* #33003\n* __->__ #33002\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-23T21:55:15-04:00",
      "committed_date": "2025-04-23T21:55:15-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/react-forgive/client/src/autodeps.ts",
        "compiler/packages/react-forgive/client/src/extension.ts",
        "compiler/packages/react-forgive/client/src/mapping.ts",
        "compiler/packages/react-forgive/server/src/index.ts",
        "compiler/packages/react-forgive/server/src/requests/autodepsdecorations.ts"
      ]
    },
    {
      "sha": "b75af0467099b7fd0e668b500adb0888b7b21d10",
      "short_sha": "b75af04",
      "message": "[forgive] Don't crash if we couldn't compile (#33001)\n\nCompiler shouldn't crash Forgive if it can't compile (eg parse error due\nto being mid-typing).\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33001).\n* #33002\n* __->__ #33001\n* #33000\n\n---------\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-23T21:32:11-04:00",
      "committed_date": "2025-04-23T21:32:11-04:00",
      "changed_files": [
        "compiler/packages/react-forgive/server/src/index.ts"
      ]
    },
    {
      "sha": "f765082996f056c2abb354eb43cec3a3bf535264",
      "short_sha": "f765082",
      "message": "[forgive] Add code action to remove dependency array (#33000)\n\nAdds a new codeaction event in the compiler and handler in forgive. This\nallows you to remove a dependency array when you're editing a range that\nis within an autodep eligible function.\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/33000).\n* #33002\n* #33001\n* __->__ #33000\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-23T21:31:57-04:00",
      "committed_date": "2025-04-23T21:31:57-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/react-forgive/server/src/index.ts",
        "compiler/packages/react-forgive/server/src/requests/autodepsdecorations.ts",
        "compiler/packages/react-forgive/server/src/utils/range.ts"
      ]
    },
    {
      "sha": "7b21c464890ec991d95c88b5d68802a6c8b3bd8e",
      "short_sha": "7b21c46",
      "message": "[forgive] Refactor inferred deps (#32999)\n\nRefactor.\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32999).\n* #33002\n* #33001\n* #33000\n* __->__ #32999\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-23T21:27:22-04:00",
      "committed_date": "2025-04-23T21:27:22-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/react-forgive/client/src/colors.ts",
        "compiler/packages/react-forgive/client/src/extension.ts",
        "compiler/packages/react-forgive/server/src/custom-requests/autodepsdecorations.ts",
        "compiler/packages/react-forgive/server/src/index.ts",
        "compiler/packages/react-forgive/server/src/requests/autodepsdecorations.ts",
        "compiler/packages/react-forgive/server/src/utils/lsp-adapter.ts",
        "compiler/packages/react-forgive/server/src/utils/range.ts",
        "compiler/packages/react-forgive/tsconfig.json"
      ]
    },
    {
      "sha": "e25e8c7575350a1dd217f56e7dcf530f14a90080",
      "short_sha": "e25e8c7",
      "message": "[forgive] Hacky first pass at adding decorations for inferred deps (#32998)\n\nDraws basic decorations for inferred deps on hover.\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32998).\n* #33002\n* #33001\n* #33000\n* #32999\n* __->__ #32998\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-23T21:21:44-04:00",
      "committed_date": "2025-04-23T21:21:44-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/react-forgive/client/src/extension.ts",
        "compiler/packages/react-forgive/server/src/custom-requests/autodepsdecorations.ts",
        "compiler/packages/react-forgive/server/src/index.ts",
        "compiler/packages/react-forgive/server/src/utils/lsp-adapter.ts"
      ]
    },
    {
      "sha": "cd7d236682ff3ba4996a5e1568f148bd6ac91862",
      "short_sha": "cd7d236",
      "message": "[forgive] Emit AutoDepsDecoration event when inferring effect deps (#32997)\n\nEmits a new event for decorating inferred effect dependencies.\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32997).\n* #33002\n* #33001\n* #33000\n* #32999\n* #32998\n* __->__ #32997\n* #32996\n\n---------\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-23T20:51:38-04:00",
      "committed_date": "2025-04-23T20:51:38-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts"
      ]
    },
    {
      "sha": "71d0896a4a1b31e14baeb7e427fc4724dbe972ff",
      "short_sha": "71d0896",
      "message": "[forgive] Log inferEffectDependencies (#32996)\n\nThis was missed earlier.\n\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32996).\n* #33002\n* #33001\n* #33000\n* #32999\n* #32998\n* #32997\n* __->__ #32996\n\nCo-authored-by: Jordan Brown <jmbrown@meta.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-23T20:49:25-04:00",
      "committed_date": "2025-04-23T20:49:25-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts"
      ]
    },
    {
      "sha": "914319ae595010cd5d3f0e277c77eb86da18e4f0",
      "short_sha": "914319a",
      "message": "[Flight] Don't hang forever when prerendering a rejected promise (#32953)",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-04-23T11:02:43+02:00",
      "committed_date": "2025-04-23T11:02:43+02:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "3ef31d196a83e45d4c70b300a265a9c657c386b4",
      "short_sha": "3ef31d1",
      "message": "Implement Partial Hydration for Activity (#32863)\n\nStacked on #32862 and #32842.\n\nThis means that Activity boundaries now act as boundaries which can have\ntheir effects mounted independently. Just like Suspense boundaries, we\nhydrate the outer content first and then start hydrating the content in\nan Offscreen lane. Flowing props or interacting with the content\nincreases the priority just like Suspense boundaries.\n\nThis skips emitting even the comments for `<Activity mode=\"hidden\">` so\nwe don't hydrate those. Instead those are deferred to a later client\nrender.\n\nThe implementation are just forked copies of the SuspenseComponent\nbranches and then carefully going through each line and tweaking it.\n\nThe main interesting bit is that, unlike Suspense, Activity boundaries\ndon't have fallbacks so all those branches where you might commit a\nsuspended tree disappears. Instead, if something suspends while\nhydration, we can just leave the dehydrated content in place. However,\nif something does suspend during client rendering then it should bubble\nup to the parent. Therefore, we have to be careful to only\npushSuspenseHandler when hydrating. That's really the main difference.\n\nThis just uses the existing basic Activity tests but I've started work\non port all of the applicable Suspense tests in SelectiveHydration-test\nand PartialHydration-test to Activity versions.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-22T21:00:30-04:00",
      "committed_date": "2025-04-22T21:00:30-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydrationActivity-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydrationActivity-test.internal.js",
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberActivityComponent.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberHydrationContext.js",
        "packages/react-reconciler/src/ReactFiberReconciler.js",
        "packages/react-reconciler/src/ReactFiberSuspenseContext.js",
        "packages/react-reconciler/src/ReactFiberThrow.js",
        "packages/react-reconciler/src/ReactFiberTreeReflection.js",
        "packages/react-reconciler/src/ReactFiberUnwindWork.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-server/src/ReactFizzServer.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "17f88c80ed20b4e5f21255d9e1268542a2fbc1bd",
      "short_sha": "17f88c8",
      "message": "Implement ActivityInstance in FiberConfigDOM (#32842)\n\nStacked on #32851 and #32900.\n\nThis implements the equivalent Configs for ActivityInstance as we have\nfor SuspenseInstance. These can be implemented as comments but they\ndon't have to be and can be implemented differently in the renderer.\n\nThis seems like a lot duplication but it's actually ends mostly just\ncalling the same methods underneath and the wrappers compiles out.\n\nThis doesn't leave the Activity dehydrated yet. It just hydrates into it\nimmediately.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-22T19:44:14-04:00",
      "committed_date": "2025-04-22T19:44:14-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponentTree.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/events/ReactDOMEventListener.js",
        "packages/react-dom-bindings/src/events/ReactDOMEventReplaying.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js",
        "packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetShared.js",
        "packages/react-dom/src/client/ReactDOMRoot.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoHydration.js",
        "packages/react-reconciler/src/ReactFiberHydrationContext.js",
        "packages/react-reconciler/src/ReactFiberHydrationDiffs.js",
        "packages/react-reconciler/src/ReactFiberTreeReflection.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js"
      ]
    },
    {
      "sha": "3fbd6b7b50e3a174883633695586b892249e5635",
      "short_sha": "3fbd6b7",
      "message": "Set hidden Offscreen to the shellBoundary regardless of previous state (#32844)\n\nI think this was probably just copy-paste from the Suspense path.\n\nIt shouldn't matter what the previous state of an Offscreen boundary\nwas. What matters is that it's now hidden and therefore if it suspends,\nwe can just leave it as is without the tree becoming inconsistent.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-22T19:39:09-04:00",
      "committed_date": "2025-04-22T19:39:09-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberSuspenseContext.js"
      ]
    },
    {
      "sha": "ebf7318e87cf2e10b6bd9a6bb0ad8bf6f6186f80",
      "short_sha": "ebf7318",
      "message": "Hide/unhide the content of dehydrated suspense boundaries if they resuspend (#32900)\n\nFound this bug while working on Activity. There's a weird edge case when\na dehydrated Suspense boundary is a direct child of another Suspense\nboundary which is hydrated but then it resuspends without forcing the\ninner one to hydrate/delete.\n\nIt used to just leave that in place because hiding/unhiding didn't deal\nwith dehydrated fragments.\n\nNot sure this is really worth fixing.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-22T19:29:12-04:00",
      "committed_date": "2025-04-22T19:29:12-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoHydration.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js"
      ]
    },
    {
      "sha": "620c838fb64c87c92691ff0fe83b320a7f50f617",
      "short_sha": "620c838",
      "message": "Build `react-server-dom-webpack` for codesandbox (#32990)\n\nThis allows us to test Flight changes in a codesandbox.\n\n[Example](https://codesandbox.io/p/devbox/zkjk7y)",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-04-22T22:20:21+02:00",
      "committed_date": "2025-04-22T22:20:21+02:00",
      "changed_files": [
        ".codesandbox/ci.json",
        "package.json"
      ]
    },
    {
      "sha": "721350964952457e0b9286867c42135df0c5e787",
      "short_sha": "7213509",
      "message": "[compiler] Only append hash and date for experimental releases (#32981)\n\nNo need to append these for non experimental/beta releases.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-21T15:10:51-04:00",
      "committed_date": "2025-04-21T15:10:51-04:00",
      "changed_files": [
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "4c54da77fb57787ae85c521e04c861404a37eba2",
      "short_sha": "4c54da7",
      "message": "[ci] Change to string type (#32980)\n\nto no one's surprise, the `number` type appears to be cursed in GH\nactions for workflow dispatch. switch to string",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-21T14:56:51-04:00",
      "committed_date": "2025-04-21T14:56:51-04:00",
      "changed_files": [
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_prereleases_manual.yml"
      ]
    },
    {
      "sha": "efd890422db30a426bf395866ac3ec90573bbfd0",
      "short_sha": "efd8904",
      "message": "[compiler] Fix version name in publish script (#32979)\n\nAdd ability to specify an optional tagVersion which is appended to the\nversion name + tag, eg\n\n19.1.0-rc.1\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32979).\n* __->__ #32979\n* #32978",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-21T14:43:20-04:00",
      "committed_date": "2025-04-21T14:43:20-04:00",
      "changed_files": [
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_prereleases_manual.yml",
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "b303610c33ab903f6f0d9d1c6297b704781b3678",
      "short_sha": "b303610",
      "message": "[eprh] Bump stable version (#32978)\n\nhttps://www.npmjs.com/package/eslint-plugin-react-hooks/v/6.0.0 was just\nreleased, so we can bump this now.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-21T14:36:13-04:00",
      "committed_date": "2025-04-21T14:36:13-04:00",
      "changed_files": [
        "ReactVersions.js"
      ]
    },
    {
      "sha": "fea92d846284bb7f4427ccbe8c16aaf85f0e2943",
      "short_sha": "fea92d8",
      "message": "[ci] Remove compiler weekly release (#32977)\n\nNo longer needed.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-21T13:47:50-04:00",
      "committed_date": "2025-04-21T13:47:50-04:00",
      "changed_files": [
        ".github/workflows/compiler_prereleases_weekly.yml"
      ]
    },
    {
      "sha": "bc6184dd993e6ea0efdee7553293676db774c3ca",
      "short_sha": "bc6184d",
      "message": "[devtools] Fix \"View source\" for sources with URLs that aren't normalized (#32951)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-04-17T21:56:05+02:00",
      "committed_date": "2025-04-17T21:56:05+02:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/fetchFileWithCaching.js",
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-shared/src/symbolicateSource.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "ce578f9c59be73e6e32c633e6d251e8ec6dcad84",
      "short_sha": "ce578f9",
      "message": "[compiler] Update publish tags (#32952)\n\nAdds missing tag.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-17T13:13:50-04:00",
      "committed_date": "2025-04-17T13:13:50-04:00",
      "changed_files": [
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "45d942f94a5aa40e9f809b41325c31c799a29216",
      "short_sha": "45d942f",
      "message": "[mcp] Also emit bailout messages with no loc (#32937)\n\nNot every bailout will contain a loc (could be synthetic)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-17T13:11:55-04:00",
      "committed_date": "2025-04-17T13:11:55-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/index.ts"
      ]
    },
    {
      "sha": "b8bedc267f79db375f3147db4d766e09de599b68",
      "short_sha": "b8bedc2",
      "message": "[compiler][autodeps/fire] Do not include fire functions in autodep arrays (#32532)\n\nSummary: We landed on not including fire functions in dep arrays. They\naren't needed because all values returned from the useFire hook call\nwill read from the same ref. The linter will error if you include a\nfired function in an explicit dep array.\n\nTest Plan: yarn snap --watch\n\n--",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-04-17T13:03:19-04:00",
      "committed_date": "2025-04-17T13:03:19-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Transform/TransformFire.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/fire-and-autodeps.expect.md"
      ]
    },
    {
      "sha": "4a36d3eab7d9bbbfae62699989aa95e5a0297c16",
      "short_sha": "4a36d3e",
      "message": "[ci] Only label on PR open (#32936)\n\nNo reason to label it every update, only do it once when it's first\nopened.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32936).\n* __->__ #32936\n* #32935",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-16T18:01:55-04:00",
      "committed_date": "2025-04-16T18:01:55-04:00",
      "changed_files": [
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "2ddf8caa9d3abd22f54304bf7650e512efb93f18",
      "short_sha": "2ddf8ca",
      "message": "[ci] Fix check_access again (#32935)\n\nI can see the value being output and set correctly but not sure why it's\nskipping the 2nd job.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32935).\n* #32936\n* __->__ #32935",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-16T18:00:25-04:00",
      "committed_date": "2025-04-16T18:00:25-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "95ff37f5f5ee7c756f844aea2947e961e7151ac9",
      "short_sha": "95ff37f",
      "message": "[mcp] Iterate on prompt (#32932)\n\nv2\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32932).\n* __->__ #32932\n* #32931\n* #32930\n* #32929\n* #32928",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-16T17:49:25-04:00",
      "committed_date": "2025-04-16T17:49:25-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/index.ts"
      ]
    },
    {
      "sha": "3c75bf21dd2fca130635c5b67b5361f4759a7d29",
      "short_sha": "3c75bf2",
      "message": "[mcp] Fix bailout loc (#32931)\n\nUse the correct loc line numbers and not [Object:object]\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32931).\n* #32932\n* __->__ #32931\n* #32930\n* #32929\n* #32928",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-16T17:49:15-04:00",
      "committed_date": "2025-04-16T17:49:15-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/index.ts"
      ]
    },
    {
      "sha": "3e04b2a214cdc962dd5acde412c7107321ec7a56",
      "short_sha": "3e04b2a",
      "message": "[mcp] Refine passes returned (#32930)\n\nAdds some new options to request the HIR, ReactiveFunction passes\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32930).\n* #32932\n* #32931\n* __->__ #32930\n* #32929\n* #32928",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-16T17:49:04-04:00",
      "committed_date": "2025-04-16T17:49:04-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/compiler/index.ts",
        "compiler/packages/react-mcp-server/src/index.ts",
        "compiler/packages/react-mcp-server/src/utils/assertExhaustive.ts"
      ]
    },
    {
      "sha": "fc21d5a7db4f714825111e365825804f478e093a",
      "short_sha": "fc21d5a",
      "message": "[mcp] Dedupe docs (#32929)\n\nPreviously the resource would return a bunch of dupes because the\nalgolia results would return multiple hashes (headings) for the same\nurl.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32929).\n* #32932\n* #32931\n* #32930\n* __->__ #32929\n* #32928",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-16T17:48:53-04:00",
      "committed_date": "2025-04-16T17:48:53-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/src/index.ts"
      ]
    },
    {
      "sha": "35ab8ffef7b755c899d9e19d61277a4fceb760d1",
      "short_sha": "35ab8ff",
      "message": "[mcp] Add inspect script (#32928)\n\nUses https://github.com/modelcontextprotocol/inspector to inspect and\ndebug the mcp server.\n\n`yarn workspace react-mcp-server dev` will build the server in watch\nmode and launch the inspector. Default address is http://127.0.0.1:6274.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32928).\n* #32932\n* #32931\n* #32930\n* #32929\n* __->__ #32928",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-16T17:48:38-04:00",
      "committed_date": "2025-04-16T17:48:38-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/package.json"
      ]
    },
    {
      "sha": "68013725ac5671ab06572bd361e168681782a727",
      "short_sha": "6801372",
      "message": "[ci] Fix check_access fr (#32934)\n\n💀",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-16T17:39:24-04:00",
      "committed_date": "2025-04-16T17:39:24-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "bf39780a066626ebef67d4b3faf7eb163e35782a",
      "short_sha": "bf39780",
      "message": "[ci] Fix check_access output (#32933)\n\nthe joy of yml",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-16T17:27:09-04:00",
      "committed_date": "2025-04-16T17:27:09-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "b04254fdcee30871760301f34236ee0dfadf86ab",
      "short_sha": "b04254f",
      "message": "Don't try to hydrate a hidden Offscreen tree (#32862)\n\nI found a bug even before the Activity hydration stuff.\n\nIf we're hydrating an Offscreen boundary in its \"hidden\" state it won't\nhave any content to hydrate so will trigger hydration errors (which are\nthen eaten by the Offscreen boundary itself). Leaving it not prewarmed.\n\nThis doesn't happen in the simple case because we'd be hydrating at a\nhigher priority than Offscreen at the root, and those are deferred to\nOffscreen by not having higher priority. However, we've hydrating at the\nOffscreen priority, which we do inside Suspense boundaries, then it\ntries to hydrate against an empty set.\n\nI ended up moving this to the Activity boundary in a future PR since\nit's the SSR side that decided where to not render something and it only\nhas a concept of Activity, no Offscreen.\n\n\nhttps://github.com/facebook/react/pull/32863/commits/1dc05a5e2222e18fc3a2062ee1bd957109e21344#diff-d5166797ebbc5b646a49e6a06a049330ca617985d7a6edf3ad1641b43fde1ddfR1111",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-15T17:43:42-04:00",
      "committed_date": "2025-04-15T17:43:42-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js"
      ]
    },
    {
      "sha": "539bbdbd86d9cd342aabde4cb08e398751789103",
      "short_sha": "539bbdb",
      "message": "Warn if you pass a hidden prop to Activity (#32916)\n\nSince `hidden` is a prop on arbitrary DOM elements it's a common mistake\nto think that it would also work that way on `<Activity>` but it\ndoesn't. In fact, we even had this mistakes in our own tests.\n\nMaybe there's an argument that we should actually just support it but we\nalso have more modes planned.\n\nSo this adds a warning. It should also already be covered by TypeScript.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-15T17:17:22-04:00",
      "committed_date": "2025-04-15T17:17:22-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/__tests__/Activity-test.js"
      ]
    },
    {
      "sha": "e71d4205aed6c41b88e3689c76b41da65f5c04c0",
      "short_sha": "e71d420",
      "message": "[ci] Don't run some checks for non-members/collaborators (#32918)\n\nThere's really no need to even run the workflow for non-members or\ncollaborators for the labeling and discord notification workflows. We\ncan exit early.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-15T13:02:16-04:00",
      "committed_date": "2025-04-15T13:02:16-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "2ed34eba0df3ca9604e15b250ba207a8030dc8af",
      "short_sha": "2ed34eb",
      "message": "Update @playwright/test (#32917)\n\nRoutine update.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32917).\n* #32918\n* __->__ #32917",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-15T12:52:43-04:00",
      "committed_date": "2025-04-15T12:52:43-04:00",
      "changed_files": [
        "compiler/apps/playground/package.json",
        "compiler/apps/playground/yarn.lock",
        "fixtures/flight/package.json",
        "fixtures/flight/yarn.lock",
        "packages/react-devtools-inline/package.json",
        "yarn.lock"
      ]
    },
    {
      "sha": "707b3fc6b2d7db1aaea6545e06672873e70685d5",
      "short_sha": "707b3fc",
      "message": "[DevTools] Make Toggle hover state more visible (#32914)\n\nThis change adds a background color to Toggles to make them easier to\nsee. This is especially important when DevTools are not in focus, and\nit's harder to see.\n\nTest plan:\n1. `yarn build:chrome:local`\n2. Inspect components \n3. Hover over \"Select an Element in page to inspect it\"\n4. Observe background change",
      "author": {
        "name": "Jorge (Hezi) Cohen",
        "email": "jorgecohen@meta.com"
      },
      "authored_date": "2025-04-15T11:20:29+01:00",
      "committed_date": "2025-04-15T11:20:29+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/constants.js",
        "packages/react-devtools-shared/src/devtools/views/Toggle.css"
      ]
    },
    {
      "sha": "7ff4d057b69683dd6c512c7940dbadd10788306f",
      "short_sha": "7ff4d05",
      "message": "[DevTools] feat: show changed hooks names in the Profiler tab (#31398)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\nThis PR adds support for displaying the names of changed hooks directly\nin the Profiler tab, making it easier to identify specific updates.\n\nA `HookChangeSummary` component has been introduced to show these hook\nnames, with a `displayMode` prop that toggles between `“compact”` for\ntooltips and `“detailed”` for more in-depth views. This keeps tooltip\nsummaries concise while allowing for a full breakdown where needed.\n\nThis functionality also respects the `“Always parse hook names from\nsource”` setting from the Component inspector, as it uses the same\ncaching mechanism already in place for the Components tab. Additionally,\neven without hook names parsed, the Profiler will now display hook types\n(like `State`, `Callback`, etc.) based on data from `inspectedElement`.\n\nTo enable this across the DevTools, `InspectedElementContext` has been\nmoved higher in the component tree, allowing it to be shared between the\nProfiler and Components tabs. This update allows hook name data to be\nreused across tabs without duplication.\n\nAdditionally, a `getAlreadyLoadedHookNames` helper function was added to\nefficiently access cached hook names, reducing the need for repeated\nfetching when displaying changes.\n\nThese changes improve the ability to track specific hook updates within\nthe Profiler tab, making it clearer to see what’s changed.\n\n### Before\nPreviously, the Profiler tab displayed only the IDs of changed hooks, as\nshown below:\n<img width=\"350\" alt=\"Screenshot 2024-11-01 at 12 02 21_cropped\"\nsrc=\"https://github.com/user-attachments/assets/7a5f5f67-f1c8-4261-9ba3-1c76c9a88af3\">\n\n### After (without hook names parsed)\nWhen hook names aren’t parsed, custom hooks and hook types are displayed\nbased on the inspectedElement data:\n<img width=\"350\" alt=\"Screenshot 2024-11-01 at 12 03 09_cropped\"\nsrc=\"https://github.com/user-attachments/assets/ed857a6d-e6ef-4e5b-982c-bf30c2d8a7e2\">\n\n### After (with hook names parsed)\nOnce hook names are fully parsed, the Profiler tab provides a complete\nbreakdown of specific hooks that have changed:\n<img width=\"350\" alt=\"Screenshot 2024-11-01 at 12 03 14_cropped\"\nsrc=\"https://github.com/user-attachments/assets/1ddfcc35-7474-4f4d-a084-f4e9f993a5bf\">\n\nThis should resolve #21856 🎉",
      "author": {
        "name": "Piotr Tomczewski",
        "email": "piotr.tomczewski@callstack.com"
      },
      "authored_date": "2025-04-15T12:10:00+02:00",
      "committed_date": "2025-04-15T11:10:00+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/Components.js",
        "packages/react-devtools-shared/src/devtools/views/DevTools.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/HookChangeSummary.css",
        "packages/react-devtools-shared/src/devtools/views/Profiler/HookChangeSummary.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/HoveredFiberInfo.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/WhatChanged.js",
        "packages/react-devtools-shared/src/hookNamesCache.js"
      ]
    },
    {
      "sha": "08075929f2d5eea319418ea379773bb7276ff940",
      "short_sha": "0807592",
      "message": "[compiler] Init react-mcp-server (#32859)\n\nJust trying this out as a small hack for fun. Nothing serious is\nplanned.\n\nInits an MCP server that has 1 assistant prompt and two capabilities.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-14T18:39:00-04:00",
      "committed_date": "2025-04-14T18:39:00-04:00",
      "changed_files": [
        "compiler/packages/react-mcp-server/README.md",
        "compiler/packages/react-mcp-server/package.json",
        "compiler/packages/react-mcp-server/src/compiler/index.ts",
        "compiler/packages/react-mcp-server/src/index.ts",
        "compiler/packages/react-mcp-server/src/types/algolia.ts",
        "compiler/packages/react-mcp-server/src/utils/algolia.ts",
        "compiler/packages/react-mcp-server/todo.md",
        "compiler/packages/react-mcp-server/tsconfig.json",
        "compiler/packages/react-mcp-server/tsup.config.ts",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "4eea4fcf41ab325455a6e3421a638404f5a902aa",
      "short_sha": "4eea4fc",
      "message": "[compiler] Update rimraf (#32868)\n\nJust updating the compiler workspace package.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32868).\n* #32859\n* __->__ #32868",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-14T15:15:14-04:00",
      "committed_date": "2025-04-14T15:15:14-04:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "58e9a4b74fce1b519723b349bded5b4102b41474",
      "short_sha": "58e9a4b",
      "message": "Upgrade node.js to 20 LTS (#32855)\n\nTry to upgrade our node version.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32855).\n* #32861\n* #32860\n* #32859\n* __->__ #32855",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-14T12:52:02-04:00",
      "committed_date": "2025-04-14T12:52:02-04:00",
      "changed_files": [
        ".nvmrc",
        "fixtures/flight-esm/.nvmrc",
        "fixtures/flight/.nvmrc",
        "fixtures/flight/yarn.lock"
      ]
    },
    {
      "sha": "39cad7afc43fcbca1fd2e3a0d5b7706c8b237793",
      "short_sha": "39cad7a",
      "message": "Remove redundant __DEV__ condition (#32810)\n\nIt used to be that in `__DEV__` we wrapped this `renderWithHooks`,\n`checkDidRenderIdHook` pair in calls to `setIsRendering()`. However,\nthat dev-only bookkeeping was removed in\nhttps://github.com/facebook/react/pull/29206 leaving this redundant\ncheck which runs identical code in dev and in prod.\n\n## Test Plan\n\n* Manually confirm both cases are the same\n* GitHub CI tests",
      "author": {
        "name": "Jordan Eldredge",
        "email": "jeldredge@meta.com"
      },
      "authored_date": "2025-04-11T14:39:36-07:00",
      "committed_date": "2025-04-11T14:39:36-07:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js"
      ]
    },
    {
      "sha": "1d6c8168db1d82713202e842df3167787ffa00ed",
      "short_sha": "1d6c816",
      "message": "Clear Update flag for unchanged trees in the beginning of the commit phase (#32849)\n\nWe use the Update flag to track if a View Transition had any mutations\nor relayout. Unlike the other usage of it, this is just temporary state\nduring the commit phase.\n\nNormally the flags gets used in the render phase and we reset it when we\nrerender but in the case of \"nested\" updates, those trees didn't update.\nWe're only looking for relayouts. So we need to manually reset it before\nwe start using it.\n\nWe probably shouldn't abuse the Update flag for this and instead use\nsomething like temporary state on ViewTransitionState.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-11T10:54:06-04:00",
      "committed_date": "2025-04-11T10:54:06-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js"
      ]
    },
    {
      "sha": "961b625ab5d180180e836e0c7b221789f0ee336b",
      "short_sha": "961b625",
      "message": "Try not. Do... or do not. Hydrate Suspense Boundaries. (#32851)\n\nAssertively claim a SuspenseInstance. We already know we're hydrating.\n\nIf there's no match, it throws anyway. So there's no other code path.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-11T10:52:23-04:00",
      "committed_date": "2025-04-11T10:52:23-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberHydrationContext.js"
      ]
    },
    {
      "sha": "8a3c5e1a8d1d89a68ca36c6959c1f253710f6cef",
      "short_sha": "8a3c5e1",
      "message": "Emit Preamble Contribution inline instead of the end of a boundary (#32850)\n\nThis lets us write them early in the render phase.\n\nThis should be safe because even if we write them deeply, then they\nstill can't be wrapped by a element because then they'd no longer be in\nthe document scope anymore. They end up flat in the body and so when we\nsearch the content we'll discover them.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-10T19:42:03-04:00",
      "committed_date": "2025-04-10T19:42:03-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-noop-renderer/src/ReactNoopServer.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "5e9b48778c83dd8b2c63966db3e23abefebe910c",
      "short_sha": "5e9b487",
      "message": "[RN] Map Fabric priorities to reconciler priorities correctly (#32847)\n\n## Summary\n\nThis fixes how we map priorities between Fabric and the React\nreconciler. At the moment, we're only considering default and discrete\npriorities, when there's a larger range of priorities available.\n\nIn Fabric, we'll test supporting additional priorities soon. For that\ntest to do something useful, we need the new priorities to be mapped to\nreconciler priorities correctly, which is what this change is done.\n\n> [!IMPORTANT]\n> At the moment, this is a no-op because Fabric is only reporting\ndefault and discrete event priorities.\n\n## How did you test this change?\n\nWill test e2e on React Native on top of\nhttps://github.com/facebook/react-native/pull/50627\n\nThe changes are gated in React Native, so we'll use that feature flag to\ntest this.",
      "author": {
        "name": "Rubén Norte",
        "email": "rubennorte@meta.com"
      },
      "authored_date": "2025-04-10T17:35:15+01:00",
      "committed_date": "2025-04-10T17:35:15+01:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "scripts/flow/react-native-host-hooks.js"
      ]
    },
    {
      "sha": "c44e4a250557e53b120e40db8b01fb5fd93f1e35",
      "short_sha": "c44e4a2",
      "message": "Move Built-in Props Types to React Types (#32841)\n\nStacked on #32838.\n\nWe don't always type the Props of built-ins. This adds typing for most\nof the built-ins.\n\nWhen we did type them, we used to put it in the `ReactFiber...Component`\nfiles but any public API like this can be implemented in other renderers\ntoo such as Fizz. So I moved them to `shared/ReactTypes` which is where\nwe put other public API types (that are not already built-in to Flow).\nThat way Fizz can import them and assert properly when it accesses the\nprops.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-09T22:44:44-04:00",
      "committed_date": "2025-04-09T22:44:44-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberActivityComponent.js",
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberDuplicateViewTransitions.js",
        "packages/react-reconciler/src/ReactFiberSuspenseComponent.js",
        "packages/react-reconciler/src/ReactFiberSuspenseContext.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "31ecc9804a3f263033611f069774e50059c0743a",
      "short_sha": "31ecc98",
      "message": "Clarify that there's three different kinds of OffscreenProps  (#32838)\n\nActivityProps - Public API\nLegacyHiddenProps - Public Legacy API\nOffscreenProps - Internal implementation detail",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-09T22:22:45-04:00",
      "committed_date": "2025-04-09T22:22:45-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberActivityComponent.js",
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberConcurrentUpdates.js",
        "packages/react-reconciler/src/ReactFiberOffscreenComponent.js",
        "packages/react-reconciler/src/ReactFiberSuspenseContext.js",
        "packages/react-reconciler/src/ReactFiberThrow.js",
        "packages/react-reconciler/src/ReactFiberTracingMarkerComponent.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "ff697fc58be53dd485bd2babb826bc6cd664929c",
      "short_sha": "ff697fc",
      "message": "[eprh] Temporarily disable ref access in render validation (#32839)\n\nThis rule currently has a few false positives, so let's disable it for\nnow (just in the eslint rule, it's still enabled in the compiler) while\nwe iterate on it.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-04-09T14:49:31-04:00",
      "committed_date": "2025-04-09T14:49:31-04:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/__tests__/ReactCompilerRule-test.ts",
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts",
        "packages/eslint-plugin-react-hooks/__tests__/ReactCompilerRule-test.ts",
        "packages/eslint-plugin-react-hooks/src/rules/ReactCompiler.ts"
      ]
    },
    {
      "sha": "096dd7385dfc6e9732d588189e59c8c6fe7a4975",
      "short_sha": "096dd73",
      "message": "Send notification to Discord if automated publish fails (#32840)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-04-09T19:14:28+02:00",
      "committed_date": "2025-04-09T19:14:28+02:00",
      "changed_files": [
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_prereleases_nightly.yml"
      ]
    },
    {
      "sha": "717584167b6b976dc577d75e1a8c49c0826b66ee",
      "short_sha": "7175841",
      "message": "docs(eslint-plugin-react-hooks): add 6.0 documentation (#32513)\n\nThis change adds the details for using the 6.0+ version of the flat\nrecommended config.\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-04-09T11:42:23-05:00",
      "committed_date": "2025-04-09T12:42:23-04:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/README.md"
      ]
    },
    {
      "sha": "3fbfb9baaf38528349b86372bd7eff36c6a3261a",
      "short_sha": "3fbfb9b",
      "message": "Emit Activity boundaries as comments in Fizz (#32834)\n\nUses `&` for Activity as opposed to `$` for Suspense. This will be used\nto delimitate which nodes we can skip hydrating.\n\nThis isn't used on the client yet. It's just a noop on the client\nbecause it's just an unknown comment. This just adds the SSR parts.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-09T10:59:52-04:00",
      "committed_date": "2025-04-09T10:59:52-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-noop-renderer/src/ReactNoopServer.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/forks/ReactFizzConfig.custom.js"
      ]
    },
    {
      "sha": "8571249eb87efa1e20ecb8a839cc380e63da767a",
      "short_sha": "8571249",
      "message": "Add unstable_Activity to server entrypoint (#32833)\n\nActivity is a client component, but you should still be able to import\nit and render it from a Server Component. Same as what we do with other\ntypes like Suspense and ViewTransition.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2025-04-09T01:49:27-04:00",
      "committed_date": "2025-04-09T01:49:27-04:00",
      "changed_files": [
        "packages/react/src/ReactServer.experimental.js"
      ]
    },
    {
      "sha": "8da36d0508e83dd342ddbb98cb18f0606fd4045b",
      "short_sha": "8da36d0",
      "message": "Enable Suspensey Images inside <ViewTransition> subtrees (#32820)\n\nEven if the `enableSuspenseyImages` flag is off.\n\nStarted View Transitions already wait for Suspensey Fonts and this is\nanother Suspensey feature that is even more important for View\nTransitions - even though we eventually want it all the time. So this\nuses `<ViewTransition>` as an early opt-in for that tree into Suspensey\nImages, which we can ship in a minor.\n\nIf you're doing an update inside a ViewTransition then we're eligible to\nstart a ViewTransition in any Transition that might suspend. Even if\nthat doesn't end up animating after all, we still consider it Suspensey.\nWe could try to suspend inside the startViewTransition but that's not\nhow it would work with `enableSuspenseyImages` on and we can't do that\nfor startGestureTransition.\n\nEven so we still need some opt-in to trigger the Suspense fallback even\nbefore we know whether we'll animate or not. So the simple solution is\njust that `<ViewTransition>` opts in the whole subtree into Suspensey\nImages in general.\n\nIn this PR I disable `enableSuspenseyImages` in experimental so that we\ncan instead test the path that only enables it inside `<ViewTransition>`\ntree since that's the path that would next graduate to a minor.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-08T17:55:15-04:00",
      "committed_date": "2025-04-08T17:55:15-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactTypeOfMode.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseyCommitPhase-test.js",
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "ea05b750a5374458fc8c74ea0918059c818d1167",
      "short_sha": "ea05b75",
      "message": "Allow Passing Blob/File/MediaSource/MediaStream to src of <img>, <video> and <audio> (#32828)\n\nBehind the `enableSrcObject` flag. This is revisiting a variant of what\nwas discussed in #11163.\n\nInstead of supporting the [`srcObject`\nproperty](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject)\nas a separate name, this adds an overload of `src` to allow objects to\nbe passed. The DOM needs to add separate properties for the object forms\nsince you read back but it doesn't make sense for React's write-only API\nto do that. Similar to how we'll like add an overload for\n`popoverTarget` instead of calling it `popoverTargetElement` and how\n`style` accepts an object and it's not `styleObject={{...}}`.\n\nThere are a number of reason to revisit this.\n\n- It's just way more convenient to have this built-in and it makes\nconceptual sense. We typically support declarative APIs and polyfill\nthem when necessary.\n- RSC supports Blobs and by having it built-in you don't need a Client\nComponent wrapper to render it where as doing it with effects would\nrequire more complex wrappers. By picking Blobs over base64,\nclient-navigations can use the more optimized binary encoding in the RSC\nprotocol.\n- The timing aspect of coordinating it with Suspensey images and image\ndecoding is a bit tricky to get right because if you set it in an effect\nit's too late because you've already rendered it.\n- SSR gets complicated when done in user space because you have to\nhandle both branches. Likely with `useSyncExternalStore`.\n- By having it built-in we could optimize the payloads shared between\nRSC payloads embedded in the HTML and data URLs.\n\nThis does not support objects for `<source src>` nor `<img srcset>`.\nThose don't really have equivalents in the DOM neither. They're mainly\nfor picking an option when you don't know programmatically. However, for\nthis use case you're really better off picking a variant before\ngenerating the blobs.\n\nWe may support Response objects in the future too as per\nhttps://github.com/whatwg/fetch/issues/49",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-08T12:11:41-04:00",
      "committed_date": "2025-04-08T12:11:41-04:00",
      "changed_files": [
        "fixtures/flight/package.json",
        "fixtures/flight/src/App.js",
        "fixtures/flight/src/GenerateImage.js",
        "fixtures/flight/yarn.lock",
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom-bindings/src/client/ReactDOMSrcObject.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactDOMLegacyServerStreamConfig.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMImageLoad-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMSrcObject-test.js",
        "packages/react-reconciler/src/ReactFiberHydrationDiffs.js",
        "packages/react-server/src/ReactServerStreamConfigBrowser.js",
        "packages/react-server/src/ReactServerStreamConfigBun.js",
        "packages/react-server/src/ReactServerStreamConfigEdge.js",
        "packages/react-server/src/ReactServerStreamConfigFB.js",
        "packages/react-server/src/ReactServerStreamConfigNode.js",
        "packages/react-server/src/forks/ReactServerStreamConfig.custom.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "336614679600af371b06371c0fbdd31fd9838231",
      "short_sha": "3366146",
      "message": "Fix `Failed to execute 'measure' on 'Performance'` error (#32823)\n\nWhen `startTime` still has its initial value of `-1.1` we must not call\n`logComponentMount`. This can occur when rendering a `'next/dynamic'`\ncomponent with `{ssr: false}` in a client component, for example.\nUnfortunately, I didn't manage to reproduce this scenario in a unit\ntest.",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-04-07T16:13:34+02:00",
      "committed_date": "2025-04-07T10:13:34-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "365c031fd2354e94248ed9390f13fe2975b994f6",
      "short_sha": "365c031",
      "message": "Workaround against display: inline bug in Safari (#32822)\n\nSafari has a bug where if you put a block element inside an inline\nelement and the inline element has a `view-transition-name` assigned it\nfinds it as duplicate names.\n\nhttps://bugs.webkit.org/show_bug.cgi?id=290923\n\nThis adds a warning if we detect this scenario in dev mode.\n\nFor the case where it renders into a single block, we can model this by\nmaking the parent either `block` or `inline-block` automatically to fix\nthe issue. So we do that to automatically cover simple cases like\n`<a><div>...</div></a>`. This unfortunately causes layout/styling thrash\nso we might want to delete it once the bug has been fixed in enough\nSafari versions.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-07T10:08:07-04:00",
      "committed_date": "2025-04-07T10:08:07-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-reconciler/src/ReactFiberApplyGesture.js"
      ]
    },
    {
      "sha": "a9d63f3f9798355cd814237b5f5391d6adbfa750",
      "short_sha": "a9d63f3",
      "message": "fix: incorrect type in getTypeSymbol (#32825)\n\n`getTypeSymbol` also returns string",
      "author": {
        "name": "Jason Zhang",
        "email": "xzha4350@gmail.com"
      },
      "authored_date": "2025-04-07T19:21:28+09:30",
      "committed_date": "2025-04-07T10:51:28+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "6a7650c75c1bc110517bd9b3eefdc66eadbb9cbf",
      "short_sha": "6a7650c",
      "message": "[Bugfix] Infinite uDV loop in popstate event (#32821)\n\nFound a bug that occurs during a specific combination of very subtle\nimplementation details.\n\nIt occurs sometimes (not always) when 1) a transition is scheduled\nduring a popstate event, and 2) as a result, a new value is passed to an\nalready-mounted useDeferredValue hook.\n\nThe fix is relatively straightforward, and I found it almost\nimmediately; it took a bit longer to figure out exactly how the scenario\noccurred in production and create a test case to simulate it.\n\nRather than couple the test to the implementation details, I've chosen\nto keep it as high-level as possible so that it doesn't break if the\ndetails change. In the future, it might not be trigger the exact set of\ninternal circumstances anymore, but it could be useful for catching\nsimilar bugs because it represents a realistic real world situation —\nnamely, switching tabs repeatedly in an app that uses useDeferredValue.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2025-04-05T00:49:28-04:00",
      "committed_date": "2025-04-05T00:49:28-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-reconciler/src/ReactFiberHooks.js"
      ]
    },
    {
      "sha": "efb22d8850382c3b53c1b2b8d22036d7e6cc9488",
      "short_sha": "efb22d8",
      "message": "Add Suspensey Images behind a Flag (#32819)\n\nWe've known we've wanted this for many years and most of the\nimplementation was already done for Suspensey CSS. This waits to commit\nuntil images have decoded by default or up to 500ms timeout (same as\nsuspensey fonts).\n\nIt only applies to Transitions, Retries (Suspense), Gesture Transitions\n(flag) and Idle (doesn't exist). Sync updates just commit immediately.\n\n`<img loading=\"lazy\" src=\"...\" />` opts out since you explicitly want it\nto load lazily in that case.\n\n`<img onLoad={...} src=\"...\" />` also opts out since that implies you're\nok with managing your own reveal.\n\nIn the future, we may add an opt in e.g. `<img blocking=\"render\"\nsrc=\"...\" />` that opts into longer timeouts and re-suspends even sync\nupdates. Perhaps also triggering error boundaries on errors.\n\nThe rollout for this would have to go in a major and we may have to\nrelax the default timeout to not delay too much by default. However, we\ncan also make this part of `enableViewTransition` so that if you opt-in\nby using View Transitions then those animations will suspend on images.\nThat we could ship in a minor.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-04T14:54:05-04:00",
      "committed_date": "2025-04-04T14:54:05-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "540cd65252ced9f970fb97d5f5b7f029bd7cac83",
      "short_sha": "540cd65",
      "message": "Log Mount/Unmount/Reconnect/Disconnect in the Component Track (#32816)\n\nStacked on #32815.\n\nTo be able to differentiate mounted subtrees from updated subtrees. This\nadds a yellow entry above the component subtree that mounted. This is\nadded both to the render phase, mutation effect phase, layout effect\nphase and passive effect phase.\n\n<img width=\"962\" alt=\"Screenshot 2025-04-03 at 10 41 02 PM\"\nsrc=\"https://github.com/user-attachments/assets/13777347-07e8-458c-9127-8675ef08b54f\"\n/>\n\nIdeally we could probably give an annotation to the component instead of\nadding a whole other line which is also a color that's kind of\ndistracting. However, not all components are included and keeping track\nof which one is the first one below is kind of annoying. Adding a marker\nto all components is kind of noisy. So this is a compromise. It's only\none per depth so it won't make it too deep even on larger trees.\n\nIf this is an unmount, those are added to the mutation effect phase for\nthe layout unmounts and passive unmount effect phase. Since these never\nhave a render, they're not in the render phase.\n\n<img width=\"1010\" alt=\"Screenshot 2025-04-03 at 11 05 57 PM\"\nsrc=\"https://github.com/user-attachments/assets/ab39f27e-13be-4281-94fa-9391bb293fd2\"\n/>\n\nFor showing / hiding `<Activity>` the terminology \"Reconnect\" and\n\"Disconnect\" is used instead.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-03T23:33:29-04:00",
      "committed_date": "2025-04-03T23:33:29-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js"
      ]
    },
    {
      "sha": "c0f08ae74a46686f5718e9e6c511d27419fd632c",
      "short_sha": "c0f08ae",
      "message": "Fix Bugs Measuring Performance Track for Effects (#32815)\n\nThis fixes two bugs with commit phase effect tracking.\n\nI missed, or messed up the rebase for, deletion effects when a subtree\nwas deleted and for passive disconnects when a subtree was hidden.\n\nThe other bug is that when I started using self time\n(componentEffectDuration) for color and for determining whether to\nbother logging an entry, I didn't consider that the component with\neffects can have children which end up resetting this duration before we\nlog. Which lead to most effects not having their components logged since\nthey almost always have children.\n\nWe don't necessarily have to push/pop but we have to store at least one\nthing on the stack unfortunately. That's because we have to do the\nactual log after the children to get the right end time. So might as\nwell use the push/pop strategy like the rest of them.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-03T23:33:14-04:00",
      "committed_date": "2025-04-03T23:33:14-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "b10cb4c01ec1ae41b67422239d919f261fefa7d1",
      "short_sha": "b10cb4c",
      "message": "[DevTools] Release and aquire host instances when they're cloned in persistent mode (#32812)\n\nIn persistent mode they can change when they're closned and so we need\nto release the old copy and acquire the new copy.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-03T10:06:04-04:00",
      "committed_date": "2025-04-03T10:06:04-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "f0c767e2a26ec28d808c22f8af2e09f2e20cdcc2",
      "short_sha": "f0c767e",
      "message": "feat[devtools]: display native tag for host components for Native (#32762)\n\nNative only. Displays the native tag for Native Host components inside a\nbadge, when user inspects the component.\n\nOnly displaying will be supported for now, because in order to get\nnative tags indexable, they should be part of the bridge operations,\nwhich is technically a breaking change that requires significantly more\ntime investment.\n\nThe text will only be shown when user hovers over the badge.\n![Screenshot 2025-03-26 at 19 46\n40](https://github.com/user-attachments/assets/787530cf-c5e5-4b85-8e2a-15b006a3d783)",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-04-02T22:44:38+01:00",
      "committed_date": "2025-04-02T22:44:38+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/backendAPI.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementBadges.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeTagBadge.css",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeTagBadge.js",
        "packages/react-devtools-shared/src/frontend/types.js"
      ]
    },
    {
      "sha": "b2f6365745416be4d7dad7799a2cfbfbbf425389",
      "short_sha": "b2f6365",
      "message": "Minor Tweak to Performance Track (#32808)\n\nRename \"Suspended\" commit to \"Suspended on CSS\" since that's the only\nreason for this particular branch. This will not hold true because with\nsuspended images and with view transitions those can also be the reason.\nSo in the future we need to add those.\n\nOnly log \"Blocked\" in the components track if we yield for 3ms or\nlonger. It's common to have like 1-2ms yield times for various reasons\ngoing on which is not worth the noise to consider \"blocking\".\n\nRename \"Blocked\" to \"Update\" in the Blocking/Transition tracks. This is\nwhen a setState happens and with stack traces it's where you should look\nfor the stack trace of the setState. So we want to indicate that this is\nthe \"Update\".\n\nI only added the \"Blocked\" part if we're blocked for more than 5ms\nbefore we can start rendering - indicating that some other track was\nworking at the same time and preventing us from rendering.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-02T17:01:10-04:00",
      "committed_date": "2025-04-02T17:01:10-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js"
      ]
    },
    {
      "sha": "b81c92be627c8bd03405eaa71731245301e4656f",
      "short_sha": "b81c92b",
      "message": "Delete CHANGELOG-canary.md (#32807)\n\nThis is no longer being used or updated",
      "author": {
        "name": "Matt Carroll",
        "email": "7158882+mattcarrollcode@users.noreply.github.com"
      },
      "authored_date": "2025-04-02T13:05:43-07:00",
      "committed_date": "2025-04-02T16:05:43-04:00",
      "changed_files": [
        "CHANGELOG-canary.md"
      ]
    },
    {
      "sha": "040f8286e97eab7aac23a89d5f59967be3bf8f3e",
      "short_sha": "040f828",
      "message": "Follow through all the phases when an error happens during snapshotting (#32803)\n\nThis can happen for example if you have duplicate names in the \"old\"\nstate. This errors the transition before the updateCallback is invoked\nso we haven't yet applied mutations etc.\n\nThis runs through those phases after the error to get us back to a\nconsistent state.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-02T10:49:44-04:00",
      "committed_date": "2025-04-02T10:49:44-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "450f8df8865303f14be7ddd7c951f020115aa27c",
      "short_sha": "450f8df",
      "message": "Clarify that the transitionLanes used by Transition Tracing is a LaneMap (#32800)\n\nWe have a high level concept for this used elsewhere.\n\nWe should use this for `transitionTypes` too:\n\n\nhttps://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactInternalTypes.js#L285\n\nAs mentioned in #32797 we could also just use the `transitionLanes`\nsince the `types` are also on the `Transition` objects. If we always\nstored this set.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-01T18:18:33-04:00",
      "committed_date": "2025-04-01T18:18:33-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactInternalTypes.js"
      ]
    },
    {
      "sha": "7a728dffd14550cd22e6d8b8514e82435bbeba76",
      "short_sha": "7a728df",
      "message": "Don't shadow EventListenerOptionsOrUseCapture and FocusOptions types (#32801)\n\nThese are built-in to Flow.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-01T14:22:57-04:00",
      "committed_date": "2025-04-01T14:22:57-04:00",
      "changed_files": [
        ".eslintrc.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "e5dd82a79dd41c9df8d903ca7ab7b3a977bc3371",
      "short_sha": "e5dd82a",
      "message": "Warn for using a React owned node as a Container if it also has text content (#32774)\n\nThe problem with setting both `children` or `dangerouslySetInnerHTML`\nand also using a ref on a DOM node to either manually append children or\nusing it as a Container for `createRoot` or `createPortal` is that it's\nambiguous which children should win. Ideally you use one of the four\noptions to control children. Meaning that ideally you always use a leaf\ncontainer for refs like this.\n\nUnfortunately it's very common to use a React owned thing with children\nas a Container of a Portal. For example `document.body` can have both\nregular React children and be used as a Portal container. This isn't\nreally fully supported and has some undefined behavior like relative\norder isn't guaranteed but still very common.\n\nIt is extra bad if the children are a `string`/`number` or if\n`dangerouslySetInnerHTML` is set. Because then when ever that reactively\nupdates it'll clear out any manually added DOM nodes. When this happens\nisn't guaranteed. It's always happening as far as the reactivity is\nconcerned. See https://github.com/facebook/react/issues/31600\n\nTherefore, we should warn for this specific pattern. This still allows\nnon-text children as a compromise even though that behavior is also\nsomewhat undefined.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-01T12:11:29-04:00",
      "committed_date": "2025-04-01T12:11:29-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponentTree.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "731ae3e0ade1ac2a79e5f9f52b3244f3d02d5ac8",
      "short_sha": "731ae3e",
      "message": "Solidify addTransitionType Semantics (#32797)\n\nStacked on #32793.\n\nThis is meant to model the intended semantics of `addTransitionType`\nbetter. The previous hack just consumed all transition types when any\nroot committed so it could steal them from other roots. Really each root\nshould get its own set. Really each transition lane should get its own\nset.\n\nWe can't implement the full ideal semantics yet because 1) we currently\nentangle transition lanes 2) we lack `AsyncContext` on the client so for\nasync actions we can't associate a `addTransitionType` call to a\nspecific `startTransition`.\n\nThis starts by modeling Transition Types to be stored on the Transition\ninstance. Conceptually they belong to the Transition instance of that\n`startTransition` they belong to. That instance is otherwise mostly just\nused for Transition Tracing but it makes sense that those would be able\nto be passed the Transition Types for that specific instance.\n\nNested `startTransition` need to get entangled. So that this\n`addTransitionType` can be associated with the `setState`:\n\n```js\nstartTransition(() => {\n  startTransition(() => {\n    addTransitionType(...)\n  });\n  setState(...);\n});\n```\n\nIdeally we'd probably just use the same Transition instance itself since\nthese are conceptually all part of one entangled one. But transition\ntracing uses multiple names and start times. Unclear what we want to do\nwith that. So I kept separate instances but shared `types` set.\n\nNext I collect the types added during a `startTransition` to any root\nscheduled with a Transition. This should really be collected one set per\nTransition lane in a `LaneMap`. In fact, the information would already\nbe there if Transition Tracing was always enabled because it tracks all\nTransition instances per lane. For now I just keep track of one set for\nall Transition lanes. Maybe we should only add it if a `setState` was\ndone on this root in this particular `startTransition` call rather\nhaving already scheduled any Transition earlier.\n\nWhile async transitions are entangled, we don't know if there will be a\nstartTransition+setState on a new root in the future. Therefore, we\ncollect all transition types while this is happening and if a new root\ngets startTransition+setState they get added to that root.\n\n```js\nstartTransition(async () => {\n  addTransitionType(...)\n  await ...;\n  setState(...);\n});\n```",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-01T12:11:19-04:00",
      "committed_date": "2025-04-01T12:11:19-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberAsyncAction.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactFiberTransition.js",
        "packages/react-reconciler/src/ReactFiberTransitionTypes.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react/src/ReactSharedInternalsClient.js",
        "packages/react/src/ReactStartTransition.js",
        "packages/react/src/ReactTransitionType.js"
      ]
    },
    {
      "sha": "deca96520f1e9e804b0e5b0d81563327d9c55521",
      "short_sha": "deca965",
      "message": "Warn if addTransitionType is called when there are no pending Actions (#32793)\n\nStacked on #32792.\n\nIt's tricky to associate a specific `addTransitionType` call to a\nspecific `startTransition` call because we don't have `AsyncContext` in\nbrowsers yet. However, we can keep track if there are any async\ntransitions running at all, and if not, warn. This should cover most\ncases.\n\nThis also errors when inside a React render which might be a legit way\nto associate a Transition Type to a specific render (e.g. based on props\nchanging) but we want to be a more conservative about allowing that yet.\nIf we wanted to support calling it in render, we might want to set which\nTransition object is currently rendering but it's still tricky if the\nrender has `async function` components. So it might at least be\nrestricted to sync components (like Hooks).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-01T12:10:10-04:00",
      "committed_date": "2025-04-01T12:10:10-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react/src/ReactSharedInternalsClient.js",
        "packages/react/src/ReactStartTransition.js",
        "packages/react/src/ReactTransitionType.js"
      ]
    },
    {
      "sha": "0b1a9e90c5d5b6a4633c225c9100af69f53752c8",
      "short_sha": "0b1a9e9",
      "message": "Support addTransitionType in startGestureTransition (#32792)\n\nStacked on #32788.\n\nNormally we track `addTransitionType` globally because of the async gap\nthat can happen in Actions where we lack AsyncContext to associate it\nwith a particular Transition. This unfortunately also means it's\npossible to call outside of `startTransition` which is something we want\nto warn for.\n\nWe need to be able to distinguish whether `addTransitionType` is for a\nregular Transition or a Gesture Transition though.\n\nSince `startGestureTransition` is only synchronous we can track it\nwithin that execution scope and move it to a separate set. Since we know\nfor sure which call owns it we can properly associate it with that\nspecific provider's `ScheduledGesture`.\n\nThis does not yet handle calling `addTransitionType` inside the render\nphase of a gesture. That would currently still be associated with the\nnext Transition instead.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-01T12:08:55-04:00",
      "committed_date": "2025-04-01T12:08:55-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberGestureScheduler.js",
        "packages/react-reconciler/src/ReactFiberTransition.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "packages/react/src/ReactSharedInternalsClient.js",
        "packages/react/src/ReactStartTransition.js",
        "packages/react/src/ReactTransitionType.js"
      ]
    },
    {
      "sha": "8b2046d0ce379e083b4f5678598c2af9d507f507",
      "short_sha": "8b2046d",
      "message": "Get rid of the directional gesture options (#32788)\n\nStacked on #32786.\n\n`startGestureTransition` doesn't have a concept of two directions. It's\njust a start and end range now.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-01T12:07:07-04:00",
      "committed_date": "2025-04-01T12:07:07-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/SwipeRecognizer.js",
        "packages/react-reconciler/src/ReactFiberGestureScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "d20c2802b4a2a316424d8cea995354156037a77c",
      "short_sha": "d20c280",
      "message": "Adjust range start/end based on the duration and delay of the animation (#32790)\n\nWhen different animations in a View Transition have different durations,\nwe shouldn't stretch them out to run the full range of swipe. Because\nthen they wouldn't line up the same way as when played using plain time.\n\nThis adjusts the range start/end to be what it would've been when played\nby time. Except since we are playing animations in reverse, the\nanimation-delay is actually applied from the range end and then the\nduration from there to get closer to the start.\n\nReverse the range if the original animation was reversed.\n\nInterestingly, the range it takes can be adjusted by what is in the\nviewport since if a long duration animation is excluded then everything\nelse adjusts too.\n\nI left some todos too. We really should also handle if the original\nanimation has multiple iterations. Currently we only play those once.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-01T11:44:44-04:00",
      "committed_date": "2025-04-01T11:44:44-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "0a7cf20b220a9f719e06fd8a12dfde3ab029c651",
      "short_sha": "0a7cf20",
      "message": "Remove useSwipeTransition (#32786)\n\nStacked on #32785.\n\nThis is now replaced by `startGestureTransition` added in #32785.\n\nI also renamed the flag from `enableSwipeTransition` to\n`enableGestureTransition` to correspond to the new name.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-04-01T11:43:33-04:00",
      "committed_date": "2025-04-01T11:43:33-04:00",
      "changed_files": [
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberConcurrentUpdates.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoMutation.js",
        "packages/react-reconciler/src/ReactFiberGestureScheduler.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberTransition.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/react-server/src/ReactFlightHooks.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "packages/react/index.experimental.development.js",
        "packages/react/index.experimental.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactHooks.js",
        "packages/react/src/ReactSharedInternalsClient.js",
        "packages/react/src/ReactStartTransition.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/ReactTypes.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "b286430c8a585dc2e2e3cc023e7c455ec2b34ab7",
      "short_sha": "b286430",
      "message": "Add startGestureTransition API (#32785)\n\nStacked on #32783. This will replace [the `useSwipeTransition`\nAPI](https://github.com/facebook/react/pull/32373).\n\nInstead, of a special Hook, you can make updates to `useOptimistic`\nHooks within the `startGestureTransition` scope.\n\n```\nimport {unstable_startGestureTransition as startGestureTransition} from 'react';\n\nconst cancel = startGestureTransition(timeline, () => {\n  setOptimistic(...);\n}, options);\n```\n\nThere are some downsides to this like you can't define two directions as\nonce and there's no \"standard\" direction protocol. It's instead up to\nlibraries to come up with their own conventions (although we can suggest\nsome).\n\nThe convention is still that a gesture recognizer has two props `action`\nand `gesture`. The `gesture` prop is a Gesture concept which now behaves\nmore like an Action but 1) it can't be async 2) it shouldn't have\nside-effects. For example you can't call `setState()` in it except on\n`useOptimistic` since those can be reverted if needed. The `action` is\ninvoked with whatever side-effects you want after the gesture fulfills.\n\nThis is isomorphic and not associated with a specific renderer nor root\nso it's a bit more complicated.\n\nTo implement this I unify with the `ReactSharedInternal.T` property to\ncontain a regular Transition or a Gesture Transition (the `gesture`\nfield). The benefit of this unification means that every time we\noverride this based on some scope like entering `flushSync` we also\noverride the `startGestureTransition` scope. We just have to be careful\nwhen we read it to check the `gesture` field to know which one it is.\n(E.g. I error for setState / requestFormReset.)\n\nThe other thing that's unique is the `cancel` return value to know when\nto stop the gesture. That cancellation is no longer associated with any\nparticular Hook. It's more associated with the scope of the\n`startGestureTransition`. Since the schedule of whether a particular\ngesture has rendered or committed is associated with a root, we need to\nsomehow associate any scheduled gestures with a root.\n\nWe could track which roots we update inside the scope but instead, I\nwent with a model where I check all the roots and see if there's a\nscheduled gesture matching the timeline. This means that you could\n\"retain\" a gesture across roots. Meaning this wouldn't cancel until both\nare cancelled:\n\n```\nconst cancelA = startGestureTransition(timeline, () => {\n  setOptimisticOnRootA(...);\n}, options);\n\nconst cancelB = startGestureTransition(timeline, () => {\n  setOptimisticOnRootB(...);\n}, options);\n```\n\nIt's more like it's a global transition than associated with the roots\nthat were updated.\n\nOptimistic updates mostly just work but I now associate them with a\nspecific \"ScheduledGesture\" instance since we can only render one at a\ntime and so if it's not the current one, we leave it for later.\n\nClean up of optimistic updates is now lazy rather than when we cancel.\nAllowing the cancel closure not to have to be associated with each\nparticular update.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-31T20:05:50-04:00",
      "committed_date": "2025-03-31T20:05:50-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "fixtures/view-transition/src/components/SwipeRecognizer.js",
        "packages/react-reconciler/src/ReactFiberGestureScheduler.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberTransition.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react/index.experimental.development.js",
        "packages/react/index.experimental.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactSharedInternalsClient.js",
        "packages/react/src/ReactStartTransition.js",
        "packages/react/src/ReactTransitionType.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "d3b8ff6e589bcacfd1c9b0aa48c42fd1c93001c1",
      "short_sha": "d3b8ff6",
      "message": "Unify BatchConfigTransition and Transition types  (#32783)\n\nThis is some overdue refactoring. The two types never made sense. It\nalso should be defined by isomorphic since it defines how it should be\nused by renderers rather than isomorphic depending on Fiber.\n\nClean up hidden classes to be consistent.\n\nFix missing name due to wrong types. I choose not to invoke the\ntransition tracing callbacks if there's no name since the name is\nrequired there.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-31T19:59:07-04:00",
      "committed_date": "2025-03-31T19:59:07-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberActivityComponent.js",
        "packages/react-reconciler/src/ReactFiberAsyncAction.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberTracingMarkerComponent.js",
        "packages/react-reconciler/src/ReactFiberTransition.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react/src/ReactSharedInternalsClient.js",
        "packages/react/src/ReactStartTransition.js"
      ]
    },
    {
      "sha": "a7fa8702ee0fc4c04f2d2ff9404e4f626877c113",
      "short_sha": "a7fa870",
      "message": "Remove v19 beta specific issue template (#32795)\n\nThis was a template for the 19 beta. Since 19 has been stable for a\nwhile now, we can clean this up. Any bug report for React 19 should use\nthe standard bug report template.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-03-31T15:53:17-04:00",
      "committed_date": "2025-03-31T15:53:17-04:00",
      "changed_files": [
        ".github/ISSUE_TEMPLATE/19.md"
      ]
    },
    {
      "sha": "95671b4eb3ceb51278a2ba959667da04f0b09809",
      "short_sha": "95671b4",
      "message": "Mark the root as animating if any Portal mutates or resizes (#32772)\n\nPortals and `<ViewTransition>` are tricky because they leave the React\ntree. You might think of a Portal's container conceptually as also being\npart of a React tree but that's not quite how they're modeled today.\nThey're more like their own roots. So instead, of trying to find a\nconceptual place in the React tree we treat Portals as their own root.\n\nWe have two ways of tracking whether an update to a ViewTransition\nboundary has occurred. Either a DOM mutation has happened within it, or\na resize of a child has caused it to potentially relayout its parent.\nNormally that just follows the tree structure of React, but not when\nit's a Portal.\n\nWhen it's a Portal we don't know which DOM parent it might have\naffected. For all we know it's at the root (and in fact, in most cases\nthat's where Portals go).\n\nWith this PR we mark the root as having been affected by a mutation or\nresize. This means that the whole document will animate and we can't\noptimize away from it. This ensures that a mutation to the root of a\nPortal doesn't go unanimated with other things are animating such as its\nparent.\n\nYou can regain this optimization by adding a `<ViewTransition>` boundary\ndirectly inside the Portal itself so it owns its own animation. If that\nDOM node is also absolutely positioned it doesn't leak.\n\nConversely this also means that a mutation inside a Portal doesn't\naffect its React parent so it won't trigger its parent's animation if\nthis was the only thing animating. That could be unfortunate if this\ncontainer is actually inside the same React parent. However, because\nthis would have been an update we would've marked it for \"maybe\nanimating\" and updates can't only get their animations cancelled if the\nroot is cancelled, in practice this will actually animate anyway.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-31T15:13:11-04:00",
      "committed_date": "2025-03-31T15:13:11-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.css",
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "6377903074d4b3a2de48c4da91783a5af9fc5237",
      "short_sha": "6377903",
      "message": "Update 19.1 changelog to remove confusing owner stack sentance",
      "author": {
        "name": "Matt Carroll",
        "email": "mattca@meta.com"
      },
      "authored_date": "2025-03-28T14:55:28-07:00",
      "committed_date": "2025-03-28T14:55:28-07:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "095ce8a31100e7b0021470c3e0d790da6c8dbeee",
      "short_sha": "095ce8a",
      "message": "Fix changelog Owner Stack spelling consistency",
      "author": {
        "name": "Matt Carroll",
        "email": "mattca@meta.com"
      },
      "authored_date": "2025-03-28T14:30:13-07:00",
      "committed_date": "2025-03-28T14:30:13-07:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "18a11339c3db7bdaecaa2d963ab066dc8c84f70c",
      "short_sha": "18a1133",
      "message": "Update 19.1 changelog to add owner stack context",
      "author": {
        "name": "Matt Carroll",
        "email": "mattca@meta.com"
      },
      "authored_date": "2025-03-28T14:02:11-07:00",
      "committed_date": "2025-03-28T14:02:11-07:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "d726d692ed896c34fc320f633f07699a415381fa",
      "short_sha": "d726d69",
      "message": "Add changelog for 19.1.0 (#32781)",
      "author": {
        "name": "Matt Carroll",
        "email": "7158882+mattcarrollcode@users.noreply.github.com"
      },
      "authored_date": "2025-03-28T13:21:29-07:00",
      "committed_date": "2025-03-28T13:21:29-07:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "50c5cdb65334509a29f864887ec980aefea60083",
      "short_sha": "50c5cdb",
      "message": "Bump next prerelease version numbers (#32782)\n\nUpdates the version numbers in the prerelease channels.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-28T16:20:04-04:00",
      "committed_date": "2025-03-28T16:20:04-04:00",
      "changed_files": [
        "ReactVersions.js",
        "packages/react-art/package.json",
        "packages/react-dom/package.json",
        "packages/react-native-renderer/package.json",
        "packages/react-reconciler/package.json",
        "packages/react-server-dom-fb/package.json",
        "packages/react-server-dom-parcel/package.json",
        "packages/react-server-dom-turbopack/package.json",
        "packages/react-server-dom-webpack/package.json",
        "packages/react-test-renderer/package.json",
        "packages/scheduler/package.json",
        "packages/use-subscription/package.json"
      ]
    },
    {
      "sha": "deb7859bb01831b68615c5e5416174eb4b4e0d58",
      "short_sha": "deb7859",
      "message": "[compiler][snap] Fix test filter + watch mode (#32780)\n\nAccidentally broke this when migrating our test runner to use the\nbundled build https://github.com/facebook/react/pull/32758\n\nThe fix is pretty simple. File watcher should listen for changes in\n`packages/babel-plugin-react-compiler` instead of `cwd`, which is now\n`packages/snap`.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-28T16:03:08-04:00",
      "committed_date": "2025-03-28T16:03:08-04:00",
      "changed_files": [
        "compiler/packages/snap/src/runner-watch.ts"
      ]
    },
    {
      "sha": "1825990c5608f0ab0c1475b4292218a508a171c9",
      "short_sha": "1825990",
      "message": "[release] Don't lookup build-info.json when updating version numbers (#32778)\n\nFrom what we can see, `build-info.json` is a vestigal file that we were\npreviously including in builds but are no longer since 2022 (see\nhttps://github.com/facebook/react/pull/23257, which removes\n`build-info.json` which would have broken\nscripts/release/build-release-locally-commands/add-build-info-json.js).\n\nSince this file is no longer built, instead of looking it up we default\nto the `version` that was passed in as an argument to\nscripts/release/prepare-release-from-npm.js. Since `version` is what is\npulled from npm, there should only be 1 consistent version for all the\npackages that are pulled. Therefore, only 1 version (eg canary) needs to\nbe replaced to the new stable version.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32778).\n* __->__ #32778\n* #32777",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-28T14:35:29-04:00",
      "committed_date": "2025-03-28T14:35:29-04:00",
      "changed_files": [
        "scripts/release/prepare-release-from-npm-commands/update-stable-version-numbers.js"
      ]
    },
    {
      "sha": "1de32a5e75fe96ac3c1b728a117010e11673f6ed",
      "short_sha": "1de32a5",
      "message": "[release] Also split the onlyPackages param (#32777)\n\nI missed this the last time.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32777).\n* #32778\n* __->__ #32777",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-28T14:35:18-04:00",
      "committed_date": "2025-03-28T14:35:18-04:00",
      "changed_files": [
        "scripts/release/prepare-release-from-npm-commands/parse-params.js",
        "scripts/release/publish-commands/parse-params.js"
      ]
    },
    {
      "sha": "ef4bc8b4f91023afac437be9179beef350b32db3",
      "short_sha": "ef4bc8b",
      "message": "feat(babel-plugin-react-compiler): support satisfies operator (#32742)\n\nSolve https://github.com/facebook/react/pull/29818\n\n---------\n\nCo-authored-by: Rodrigo Faria <rodrigo.faria@cartrack.com>",
      "author": {
        "name": "Rodrigo Faria",
        "email": "fariarodfar@gmail.com"
      },
      "authored_date": "2025-03-28T15:10:32+00:00",
      "committed_date": "2025-03-28T11:10:32-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-annotations/type-annotation-satisfies-array.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-annotations/type-annotation-satisfies-array.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-annotations/type-annotation-satisfies-number.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-annotations/type-annotation-satisfies-number.ts"
      ]
    },
    {
      "sha": "8039f1b2a05d00437cd29707761aeae098c80adc",
      "short_sha": "8039f1b",
      "message": "[compiler] Fix inferEffectDependencies lint false positives (#32769)\n\nCurrently, inferred effect dependencies are considered a\n\"compiler-required\" feature. This means that untransformed callsites\nshould escalate to a build error.\n\n`ValidateNoUntransformedReferences` iterates 'special effect' callsites\nand checks that the compiler was able to successfully transform them.\nPrior to this PR, this relied on checking the number of arguments passed\nto this special effect.\n\nThis obviously doesn't work with `noEmit: true`, which is used for our\neslint plugin (this avoids mutating the babel program as other linters\nrun with the same ast). This PR adds a set of `babel.SourceLocation`s to\ndo best effort matching in this mode.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-27T12:18:50-04:00",
      "committed_date": "2025-03-27T12:18:50-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Babel/BabelPlugin.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/ValidateNoUntransformedReferences.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit-lint-repro.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/no-emit-lint-repro.js",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "4280563b04898baad423dc7d0f8b0dfea3b1797a",
      "short_sha": "4280563",
      "message": "Mark shouldStartViewTransition as true when there's an enter animation (#32764)\n\nTypically we mark the name of things that might animate in the snapshot\nphase. At the same time we track that should call startViewTransition\ntoo. However, we don't do this for \"enter\" since they're only marked\nlater. Leading to having just an \"enter\" not to animate unless there's\nat least another update too.\n\nThis tracks if there's a ViewTransitionComponent in the tree that\nenters. Luckily we know that from the static flag so we don't have to\ntraverse it.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-26T18:12:59-04:00",
      "committed_date": "2025-03-26T18:12:59-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "3e88e97c116c7a1535976f2d4486bbf345476443",
      "short_sha": "3e88e97",
      "message": "s/HTML/text for text hydration mismatches (#32763)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-26T17:39:52-04:00",
      "committed_date": "2025-03-26T17:39:52-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-dom/src/__tests__/ReactRenderDocument-test.js",
        "packages/react-reconciler/src/ReactFiberHydrationContext.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "f134b3993a84d53cc99fe66b426ba13548f142ec",
      "short_sha": "f134b39",
      "message": "Add getComputedStyle helper to ViewTransition refs (#32751)\n\nThis is also sometimes useful to read the style of the pseudo-element\nitself without an animation.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-26T15:02:53-04:00",
      "committed_date": "2025-03-26T15:02:53-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "fceb0f80bc729d061bcb5031801cfc824adc07a9",
      "short_sha": "fceb0f8",
      "message": "Add \"auto\" class to mean the built-in should run (#32761)\n\nStacked on https://github.com/facebook/react/pull/32734\n\nIn React a ViewTransition class of `\"none\"` doesn't just mean that it\nhas no class but also that it has no ViewTransition name. The default\n(`null | undefined`) means that it has no specific class but should run\nwith the default built-in animation. This adds this as an explicit\nstring called `\"auto\"` as well.\n\nThat way you can do `<ViewTransition default=\"foo\" enter=\"auto\">` to\noverride the \"foo\" just for the \"enter\" trigger to be the default\nbuilt-in animation. Where as if you just specified `null` it would be\nlike not specifying enter at all which would trigger \"foo\".",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-26T15:02:43-04:00",
      "committed_date": "2025-03-26T15:02:43-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js"
      ]
    },
    {
      "sha": "e0c99c4ea1cae566ad8040180cf180ae058cb8bf",
      "short_sha": "e0c99c4",
      "message": "Rename <ViewTransition className=\"...\"> to <ViewTransition default=\"...\"> (#32734)\n\nIt was always confusing that this is not a CSS class but a\nview-transition-class.\n\nThe `className` sticks out a bit among its siblings `enter`, `exit`,\n`update` and `share`. The idea is that the most specific definition\noverride is the class name that gets applied and this prop is really\njust the fallback, catch-all or \"any\" that is applied if you didn't\nspecify a more specific one.\n\nIt has also since evolved not just to take a string but also a map of\nTransition Type to strings.\n\nThe \"class\" is really the type of the value. We could add a suffix to\nall of them like `defaultClass`, `enterClass`, `exitClass`,\n`updateClass` and `shareClass`. However, this doesn't necessarily make\nsense with the mapping of Transition Type to string. It also makes it a\nbit too DOM centric. In React Native this might still be called a\n\"class\" but it might be represented by an object definition. We might\neven allow some kind of inline style form for the DOM too. Really this\nis about picking which \"animation\" that runs which can be a string or\ninstance. \"Animation\" is too broad because there's also a concept of a\nCSS Animation and these are really sets of CSS animations (group,\nimage-pair, old, new). It could maybe be `defaultTransition`,\n`enterTransition`, etc but that seems unnecessarily repetitive and still\ndoesn't say anything about it being a class.\n\nWe also already have the name \"default\" in the map of Transition Types.\nIn fact you can now specify a default for default:\n\n```\n<ViewTransition default={{\"navigation-back\": \"slide-out\", \"default\": \"fade-in\"}}>\n```\n\nOne thing I don't like about the name `\"default\"` is that it might be\ncommon to just apply a named class that does it matching to\nenter/exit/update in the CSS selectors (such as the `:only-child` rule)\ninstead of doing that mapping to each one using React. In that can you\nend up specifying only `default={...}` a lot and then what is it the\n\"default\" for? It's more like \"all\". I think it's likely that you end up\nwith either \"default\" or the specific forms instead of both at once.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-26T15:02:05-04:00",
      "committed_date": "2025-03-26T15:02:05-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js"
      ]
    },
    {
      "sha": "a5297ece6217f5495cbe38ba58f928b2697b0f99",
      "short_sha": "a5297ec",
      "message": "Don't flush synchronous work if we're in the middle of a ViewTransition async sequence (#32760)\n\nStarting a View Transition is an async sequence. Since React can get a\nsync update in the middle of sequence we sometimes interrupt that\nsequence.\n\nCurrently, we don't actually cancel the View Transition so it can just\nrun as a partial. This ensures that we fully skip it when that happens,\nas well as warn.\n\nHowever, it's very easy to trigger this with just a setState in\nuseLayoutEffect right now. Therefore if we're inside the preparing\nsequence of a startViewTransition, this delays work that would've\nnormally flushed in a microtask. ~Maybe we want to do the same for\nDefault work already scheduled through a scheduler Task.~ Edit: This was\nalready done.\n\n`flushSync` currently will still lead to an interrupted View Transition\n(with a warning). There's a tradeoff here whether we want to try our\nbest to preserve the guarantees of `flushSync` or favor the animation.\nIt's already possible to suspend at the root with `flushSync` which\nmeans it's not always 100% guaranteed to commit anyway. We could treat\nit as suspended. But let's see how much this is a problem in practice.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-26T14:40:23-04:00",
      "committed_date": "2025-03-26T14:40:23-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoMutation.js",
        "packages/react-reconciler/src/ReactFiberGestureScheduler.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js"
      ]
    },
    {
      "sha": "254114616a24e0ed66468570b00d34bfabf9f73b",
      "short_sha": "2541146",
      "message": "[compiler][be] Playground now uses tsup bundled plugin (#32759)\n\nFollowup to https://github.com/facebook/react/pull/32758.\n\nThis moves playground to use the tsup bundled plugin instead of\nwebpack-built `babel-plugin-react-compiler`.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32759).\n* __->__ #32759\n* #32758",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-26T14:31:20-04:00",
      "committed_date": "2025-03-26T14:31:20-04:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx",
        "compiler/apps/playground/components/Editor/Input.tsx",
        "compiler/apps/playground/components/Editor/Output.tsx",
        "compiler/apps/playground/lib/reactCompilerMonacoDiagnostics.ts",
        "compiler/apps/playground/package.json",
        "compiler/packages/babel-plugin-react-compiler/package.json"
      ]
    },
    {
      "sha": "33999c43177e13580730c2fad94a77f4b0e08ef2",
      "short_sha": "33999c4",
      "message": "[compiler][be] Test runner (snap) now uses tsup bundled plugin (#32758)\n\nCurrently, `babel-plugin-react-compiler` is bundled with (almost) all\nexternal dependencies. This is because babel traversal and ast logic is\nnot forward-compatible. Since `babel-plugin-react-compiler` needs to be\ncompatible with babel pipelines across a wide semvar range, we (1) set\nthis package's babel dependency to an early version and (2) inline babel\nlibraries into our bundle.\n\nA few other packages in `react/compiler` depend on the compiler. This PR\nmoves `snap`, our test fixture compiler and evaluator, to use the\nbundled version of `babel-plugin-react-compiler`. This decouples the\nbabel version used by `snap` with the version used by\n`babel-plugin-react-compiler`, which means that `snap` now can test\nfeatures from newer babel versions (see\nhttps://github.com/facebook/react/pull/32742).\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32758).\n* #32759\n* __->__ #32758",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-26T14:27:42-04:00",
      "committed_date": "2025-03-26T14:27:42-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts",
        "compiler/packages/babel-plugin-react-compiler/tsconfig.json",
        "compiler/packages/snap/package.json",
        "compiler/packages/snap/src/constants.ts",
        "compiler/packages/snap/src/runner-watch.ts",
        "compiler/packages/snap/src/runner-worker.ts",
        "compiler/packages/snap/src/runner.ts",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "5f232d72d4cb15470c77e91c30e9cf61e090508c",
      "short_sha": "5f232d7",
      "message": "[ci] Skip yarn install on cache hit (#32757)\n\nWe currently already do this in runtime_build_and_test, we can reuse the\nsame technique in other workflows to speed them up.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-26T13:13:39-04:00",
      "committed_date": "2025-03-26T13:13:39-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "313332d111a2fba2db94c584334d8895e8d73c61",
      "short_sha": "313332d",
      "message": "[crud] Revert CRUD overload (#32741)\n\nCleans up this experiment. After some internal experimentation we are\ndeprioritizing this project for now and may revisit it at a later point.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-26T12:04:57-04:00",
      "committed_date": "2025-03-26T12:04:57-04:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js",
        "packages/react-reconciler/src/ReactFiberCallUserSpace.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react/src/ReactHooks.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "f99c9feaf786fbdad0ad8d2d81196a247302dd3c",
      "short_sha": "f99c9fe",
      "message": "Fix ownerStackLimit feature gating for tests (#32726)\n\nhttps://github.com/facebook/react/pull/32529 added a dynamic flag for\nthis, but that breaks tests since the flags are not defined everywhere.\n\nHowever, this is a static value and the flag is only for supporting\nexisting tests. So we can override it in the test config, and make it\nstatic at built time instead.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-26T12:01:05-04:00",
      "committed_date": "2025-03-26T12:01:05-04:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "scripts/jest/setupTests.www.js",
        "scripts/jest/setupTests.xplat.js"
      ]
    },
    {
      "sha": "8ac25e5201579c65d115d91c211ac719a235d982",
      "short_sha": "8ac25e5",
      "message": "Warn for duplicate ViewTransition names (#32752)\n\nThis adds early logging when two ViewTransitions with the same name are\nmounted at the same time. Whether they're part of a View Transition or\nnot.\n\nThis lets us include the owner stack of each one. I do two logs so that\nyou can get the stack trace of each one of the duplicates.\n\nIt currently only logs once for each name which also avoids the scenario\nwhen you have many hits for the same name in one commit. However, we\ncould also possibly log a stack for each of them but seems noisy.\n\nCurrently we don't log if a SwipeTransition is the first time the pair\ngets mounted which could lead to a View Transition error before we've\nwarned. That could be a separate improvement.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-25T22:03:05-04:00",
      "committed_date": "2025-03-25T22:03:05-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberDuplicateViewTransitions.js"
      ]
    },
    {
      "sha": "f9e1b16098f2ff4ed483285219b07066525796b6",
      "short_sha": "f9e1b16",
      "message": "Avoid double logging component render time (#32749)\n\nThis got moved into the functional component and class component case\nstatements here:\nhttps://github.com/facebook/react/commit/0de1233fd180969f7ffdfc98151922f2466ceb1f.\nSo that we could separate the error case for class components.\n\nHowever, due to a faulty rebase this got restored at the top as well.\nLeading to double component renders being logged.\n\nIn the other offscreen reconnect passes we don't do this in each case\nstatement but still once at the top. The reason this doesn't matter is\nbecause use the PerformedWork flag and that is only set for function and\nclass components. Although maybe it should be set for expensive DOM\ncomponents too and then we have to remember this.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-25T20:57:20-04:00",
      "committed_date": "2025-03-25T20:57:20-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "4845e16c22caf27334a1eab712ed258a9ae09752",
      "short_sha": "4845e16",
      "message": "[ci] Fix param casing (#32748)\n\nCasing was incorrect.\n\nTested by running locally with a PAT.\n\n```\n$ scripts/release/download-experimental-build.js --commit=2d40460cf768071d3a70b4cdc16075d23ca1ff25\nCommand failed: gh attestation verify artifacts_combined.zip --repo=facebook/react\n\nError: failed to fetch attestations from facebook/react: HTTP 404: Not Found (https://api.github.com/repos/facebook/react/attestations/sha256:23d05644f9e49e02cbb441e3932cc4366b261826e58ce222ea249a6b786f0b5f?per_page=30)\n`gh attestation verify artifacts_combined.zip --repo=facebook/react` (exited with error code 1)\n\n$ scripts/release/download-experimental-build.js --commit=2d40460cf768071d3a70b4cdc16075d23ca1ff25 --noVerify\n⠼ Downloading artifacts from GitHub for commit 2d40460cf768071d3a70b4cdc16075d23ca1ff25)  5%                  0.1m, estimated 1.6m\n✓ Downloading artifacts from GitHub for commit 2d40460cf768071d3a70b4cdc16075d23ca1ff25) 9.5 secs\nAn experimental build has been downloaded!\n\nYou can download this build again by running:\n  scripts/download-experimental-build.js --commit=2d40460cf768071d3a70b4cdc16075d23ca1ff25\n```",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-25T16:05:41-04:00",
      "committed_date": "2025-03-25T16:05:41-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml",
        "scripts/release/download-experimental-build.js"
      ]
    },
    {
      "sha": "553a175c90fd5c89a3c7398aec6edc226a370a95",
      "short_sha": "553a175",
      "message": "[ci] Fix incorrect condition (#32746)\n\nOops, missed this when I switched it from checking if its a fork to\nchecking if its from this repo.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-25T14:37:51-04:00",
      "committed_date": "2025-03-25T14:37:51-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "740a4f7a02aee67495d086a46f92e72e2318cc45",
      "short_sha": "740a4f7",
      "message": "[ci] Run stale cache cleanup every 6 hours (#32739)\n\nRun this a bit more frequently so we don't thrash `main` caches as\noften.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32739).\n* __->__ #32739\n* #32738",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-25T11:16:40-04:00",
      "committed_date": "2025-03-25T11:16:40-04:00",
      "changed_files": [
        ".github/workflows/shared_cleanup_stale_branch_caches.yml"
      ]
    },
    {
      "sha": "44c46935394c22bf69c1935cb0b708d178091024",
      "short_sha": "44c4693",
      "message": "[ci] Dont sign builds originating from anything other than facebook/react (#32738)\n\nWe now generate attestations in `process_artifacts_combined` so we can\nverify the provenance of the build later in other workflows. However,\nthis requires `write` permissions for `id-token` and `attestations` so\nPRs from forks cannot generate this attestation.\n\nTo get around this, I added a `--no-verify` flag to\nscripts/release/download-experimental-build.js. This flag is only passed\nin `runtime_build_and_test.yml` for the sizebot job, since 1) the\nworkflow runs in the `pull_request` trigger which has read-only\npermissions, and 2) the downloaded artifact is only used for sizebot\ncalculation, and not actually used.\n\nThe flag is explicitly not passed in `runtime_commit_artifacts.yml`\nsince there we actually use the artifact internally. This is fine as\nonce a PR lands on main, it will then run the build on that new commit\nand generate an attestation.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32738).\n* #32739\n* __->__ #32738",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-25T11:16:19-04:00",
      "committed_date": "2025-03-25T11:16:19-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml",
        "scripts/release/download-experimental-build.js",
        "scripts/release/prepare-release-from-ci.js",
        "scripts/release/shared-commands/download-build-artifacts.js"
      ]
    },
    {
      "sha": "dc9b74647e093b531dc876a2438f12dac776e480",
      "short_sha": "dc9b746",
      "message": "[DevTools] Add fb local build command (#32644)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n1. Having a development build for FB will be convenient for fb internal\nfeature development\n2. Add a new checkbox to toggle new internal features added to React\nDevtools.\n\n## How did you test this change?\n1. yarn test\n2. set extra env variables in bash profile and build an internal version\nwith the new script.\n3. toggle on/off the new checkbox, the value is stored in local storage\ncorrectly.\n\n---------\n\nCo-authored-by: Aohua Mu <muaohua@fb.com>",
      "author": {
        "name": "MU AOHUA",
        "email": "muaohua@gmail.com"
      },
      "authored_date": "2025-03-25T21:45:48+08:00",
      "committed_date": "2025-03-25T13:45:48+00:00",
      "changed_files": [
        "packages/react-devtools-extensions/package.json",
        "packages/react-devtools-shared/src/devtools/views/Settings/GeneralSettings.js"
      ]
    },
    {
      "sha": "b59f18601179bb06a2c32a76547fd4929aa1ce9c",
      "short_sha": "b59f186",
      "message": "[flow] Replace $PropertyType with indexed access type in ReactNativeTypes (#32733)",
      "author": {
        "name": "Sam Zhou",
        "email": "sam@developersam.com"
      },
      "authored_date": "2025-03-24T23:00:47-04:00",
      "committed_date": "2025-03-24T23:00:47-04:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeTypes.js"
      ]
    },
    {
      "sha": "e5f275e72ac3c469845ca48452fca672e1427953",
      "short_sha": "e5f275e",
      "message": "[ci] Pass GH_TOKEN to runtime_prereleases (#32730)\n\nSeems like this also needs to be specified.\n\nNote: #32732 needs to land first.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-24T19:08:41-04:00",
      "committed_date": "2025-03-24T19:08:41-04:00",
      "changed_files": [
        ".github/workflows/runtime_prereleases_manual.yml",
        ".github/workflows/runtime_prereleases_nightly.yml"
      ]
    },
    {
      "sha": "1cdf6b95901381e30afee8200be60f895c589267",
      "short_sha": "1cdf6b9",
      "message": "[ci] Add GH_TOKEN as secret input to prereleases (#32732)\n\nSeems like this also needs to be specified\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32732).\n* #32730\n* __->__ #32732",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-24T18:59:17-04:00",
      "committed_date": "2025-03-24T18:59:17-04:00",
      "changed_files": [
        ".github/workflows/runtime_prereleases.yml"
      ]
    },
    {
      "sha": "ee0855f427832e899767f7659c5289364218ab9e",
      "short_sha": "ee0855f",
      "message": "[ci] Fix missing permissions for prereleases (#32729)\n\nMissed these earlier.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32729).\n* __->__ #32729\n* #32728",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-24T18:24:45-04:00",
      "committed_date": "2025-03-24T18:24:45-04:00",
      "changed_files": [
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_prereleases_manual.yml",
        ".github/workflows/runtime_prereleases_nightly.yml"
      ]
    },
    {
      "sha": "7e4c258e160d3a2ca690b44a5938271873919ee1",
      "short_sha": "7e4c258",
      "message": "[scripts] Verify artifact integrity when downloading (#32728)\n\nUses https://cli.github.com/manual/gh_attestation_verify to verify that\nthe downloaded artifact matches the attestation generated during the\nbuild process in runtime_commit_artifacts.\n\nExample:\n\nOn a workflow run of runtime_build_and_test.yml with no attestations:\n```\n$ scripts/release/download-experimental-build.js --commit=ea5f065745b777cb41cc9e54a3b29ed8c727a574\n\nCommand failed: gh attestation verify artifacts_combined.zip --repo=facebook/react\n\nError: failed to fetch attestations from facebook/react: HTTP 404: Not Found (https://api.github.com/repos/facebook/react/attestations/sha256:7adba0992ba477a927aad5a07f95ee2deb7d18427c84279d33fc40a3bc28ebaa?per_page=30)\n`gh attestation verify artifacts_combined.zip --repo=facebook/react` (exited with error code 1)\n```\n\nOn one which does:\n\n```\n$ scripts/release/download-experimental-build.js --commit=12e85d74c1c233cdc2f3228a97473a4435d50c3b\n\n✓ Downloading artifacts from GitHub for commit 12e85d74c1c233cdc2f3228a97473a4435d50c3b) 10.5 secs\nAn experimental build has been downloaded!\n\nYou can download this build again by running:\n  scripts/download-experimental-build.js --commit=12e85d74c1c233cdc2f3228a97473a4435d50c3b\n```\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32728).\n* #32729\n* __->__ #32728",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-24T18:24:33-04:00",
      "committed_date": "2025-03-24T18:24:33-04:00",
      "changed_files": [
        "scripts/release/shared-commands/download-build-artifacts.js"
      ]
    },
    {
      "sha": "07276b8682059cd310cedf574c7f3ecddce68f5c",
      "short_sha": "07276b8",
      "message": "[ci] Add artifact attestation to build (#32711)\n\nAdds a signed build provenance attestations via\nhttps://github.com/actions/attest-build-provenance\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32711).\n* #32729\n* #32728\n* __->__ #32711",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-24T18:13:36-04:00",
      "committed_date": "2025-03-24T18:13:36-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "ea5f065745b777cb41cc9e54a3b29ed8c727a574",
      "short_sha": "ea5f065",
      "message": "[ci] Make maintainer check always remote (#32727)\n\nTo prevent local modification of the MAINTAINERS file we now always\nfetch from `main` instead.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-24T16:40:14-04:00",
      "committed_date": "2025-03-24T16:40:14-04:00",
      "changed_files": [
        ".github/workflows/shared_check_maintainer.yml"
      ]
    },
    {
      "sha": "2d40460cf768071d3a70b4cdc16075d23ca1ff25",
      "short_sha": "2d40460",
      "message": "[ci] fix notify/label actions for forks (#32725)\n\nNeed this to run against target for forks to get the notification.\n\nThis job does not checkout the code in the PR, so it's safe to run from\nthe target.\n\nAlso fixes failing checks on PRs:\n\n<img width=\"870\" alt=\"Screenshot 2025-03-24 at 3 28 30 PM\"\nsrc=\"https://github.com/user-attachments/assets/add78287-6449-4e48-9376-f3b360d2607c\"\n/>",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-24T15:46:59-04:00",
      "committed_date": "2025-03-24T15:46:59-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "254dc4d9f37eb512d4ee8bad6a0fae7ae491caef",
      "short_sha": "254dc4d",
      "message": "[compiler][bugfix] Fix hoisting of let declarations (#32724)\n\n(Found when compiling Meta React code)\n\nLet variable declarations and reassignments are currently rewritten to\n`StoreLocal <varName>` instructions, which each translates to a new\n`const varName` declaration in codegen.\n\n```js\n// Example input\nfunction useHook() {\n  const getX = () => x;\n  let x = CONSTANT1;\n  if (cond) {\n    x += CONSTANT2;\n  }\n  return <Stringify getX={getX} />\n}\n\n// Compiled output, prior to this PR\nimport { c as _c } from \"react/compiler-runtime\";\nfunction useHook() {\n  const $ = _c(1);\n  let t0;\n  if ($[0] === Symbol.for(\"react.memo_cache_sentinel\")) {\n    const getX = () => x;\n    let x = CONSTANT1;\n    if (cond) {\n      let x = x + CONSTANT2;\n      x;\n    }\n\n    t0 = <Stringify getX={getX} />;\n    $[0] = t0;\n  } else {\n    t0 = $[0];\n  }\n  return t0;\n}\n```\n\nThis also manifests as a babel internal error when replacing the\noriginal function declaration with the compiler output. The below\ncompilation output fails with `Duplicate declaration \"x\" (This is an\nerror on an internal node. Probably an internal error.)`.\n```js\n// example input\nlet x = CONSTANT1;\nif (cond) {\n  x += CONSTANT2;\n  x = CONSTANT3;\n}\n\n// current output\nlet x = CONSTANT1;\nif (playheadDragState) {\n  let x = x + CONSTANT2\n  x;\n  let x = CONSTANT3;\n}\n```",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-24T14:30:17-04:00",
      "committed_date": "2025-03-24T14:30:17-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneHoistedContexts.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-invalid-tdz-let.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-invalid-tdz-let.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-nested-let-declaration-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-nested-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-reassigned-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-reassigned-let-declaration.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-reassigned-twice-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-reassigned-twice-let-declaration.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-simple-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/mutate-captured-arg-separately.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/recursive-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/recursive-function-expression.js"
      ]
    },
    {
      "sha": "42a57ea8027de8af55e6f4483c3b9a8f4cba31fb",
      "short_sha": "42a57ea",
      "message": "Merge ViewTransition layout/onLayout props into update/onUpdate (#32723)\n\nWe currently have the ability to have a separate animation for a\nViewTransition that relayouts but doesn't actually have any internal\nmutations. This can be useful if you want to separate just a move from\nfor example flashing an update.\n\nHowever, we're concerned that this might be more confusion than its\nworth because subtle differences in mutations can cause it to trigger\nthe other case. The existence of the property name might also make you\nstart looking for it to solve something that it's not meant for.\n\nWe already fallback to using the \"update\" property if it exists but\nlayout doesn't. So if we ever decide to add this back it would backwards\ncompatible. We've also shown in implementation that it can work.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-24T14:04:27-04:00",
      "committed_date": "2025-03-24T14:04:27-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js"
      ]
    },
    {
      "sha": "04bf10e6a9526ea2600005a714c957c47dd8551d",
      "short_sha": "04bf10e",
      "message": "Add getRootNode to fragment instances (#32682)\n\nThis implements `getRootNode(options)` on fragment instances as the\nequivalent of calling `getRootNode` on the fragment's parent host node.\n\nThe parent host instance will also be used to proxy dispatchEvent in an\nupcoming PR.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-03-24T10:19:55-04:00",
      "committed_date": "2025-03-24T10:19:55-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFragmentRefs-test.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberTreeReflection.js"
      ]
    },
    {
      "sha": "c61e75b76d5ff6707ad75c8beb777e721d982207",
      "short_sha": "c61e75b",
      "message": "[compiler] Avoid failing builds when import specifiers conflict or shadow vars (#32663)\n\nAvoid failing builds when imported function specifiers conflict by using\nbabel's `generateUid`. Failing a build is very disruptive, as it usually\npresents to developers similar to a javascript parse error.\n```js\nimport {logRender as _logRender} from 'instrument-runtime';\n\nconst logRender = () => { /* local conflicting implementation */ }\n\nfunction Component_optimized() {\n  _logRender(); // inserted by compiler\n}\n```\n\nCurrently, we fail builds (even in `panicThreshold:none` cases) when\nimport specifiers are detected to conflict with existing local\nvariables. The reason we destructively throw (instead of bailing out) is\nbecause (1) we first generate identifier references to the conflicting\nname in compiled functions, (2) replaced original functions with\ncompiled functions, and then (3) finally check for conflicts.\n\nWhen we finally check for conflicts, it's too late to bail out.\n```js\n// import {logRender} from 'instrument-runtime';\n\nconst logRender = () => { /* local conflicting implementation */ }\n\nfunction Component_optimized() {\n  logRender(); // inserted by compiler\n}\n```",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-24T09:31:51-04:00",
      "committed_date": "2025-03-24T09:31:51-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Gating.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Imports.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OutlineJsx.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/RenameVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Transform/TransformFire.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/babel-existing-react-runtime-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/babel-existing-react-runtime-import.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-emit-imports-same-source.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-instrument-forget-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/conflict-codegen-instrument-forget.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/conflict-codegen-instrument-forget.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/emit-freeze-conflicting-imports.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.codegen-error-on-conflicting-imports.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/emit-freeze-nonconflicting-global-reference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/emit-freeze-nonconflicting-global-reference.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.codegen-error-on-conflicting-imports.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.emit-freeze-conflicting-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.emit-freeze-conflicting-global.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/arrow-function-expr-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/codegen-instrument-forget-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/component-syntax-ref-gating.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/conflicting-gating-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/conflicting-gating-fn.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-access-function-name-in-component.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-nonreferenced-identifier-collision.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-preserves-function-properties.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test-export-default-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test-export-function-and-default.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test-export-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-use-before-decl-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-use-before-decl.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-with-hoisted-type-reference.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/infer-function-expression-React-memo-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/invalid-fnexpr-reference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/multi-arrow-expr-export-default-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/multi-arrow-expr-export-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/multi-arrow-expr-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/reassigned-fnexpr-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-access-hook-guard.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-access-hook-guard.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/no-fire-todo-syntax-shouldnt-throw.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/basic.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/deep-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/fire-and-autodeps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/hook-guard.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/hook-guard.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/multiple-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/repeated-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/repro-dont-add-hook-guards-on-retry.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/rewrite-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/shared-hook-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts"
      ]
    },
    {
      "sha": "7c908bcf4e6b46135164be961972f0d756378517",
      "short_sha": "7c908bc",
      "message": "[compiler][optim] Add Effect.ConditionallyMutateIterator (#32698)\n\nAdds Effect.ConditionallyMutateIterator, which has the following\neffects:\n- capture for known array, map, and sets\n- mutate for all other values\n\nAn alternative to this approach could be to add polymorphic shape\ndefinitions",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-23T23:25:55-04:00",
      "committed_date": "2025-03-23T23:25:55-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutableLifetimes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReactivePlaces.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-arg1-captures-arg0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-captures-arg0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-maybemutates-arg0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-maybemutates-arg0.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/call-spread-argument-set.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/call-spread-argument-set.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-constructor-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-constructor-arg.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-foreach-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-foreach-mutate.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-granular-iterator-semantics.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-granular-iterator-semantics.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-inference-array-from.expect.md"
      ]
    },
    {
      "sha": "a8e503dce0ec386eef752a1219dd6ef861c48ced",
      "short_sha": "a8e503d",
      "message": "[compiler][optim] Add map and set constructors (#32697)\n\n* Adds `isConstructor: boolean` to `FunctionType`. With this PR, each\ntyped function can either be a constructor (currently only known\nglobals) or non constructor. Alternatively, we prefer to encode\npolymorphic types / effects (and match the closest subtype)\n\n* Add Map and Set globals + built-ins\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32697).\n* #32698\n* __->__ #32697",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-23T23:19:01-04:00",
      "committed_date": "2025-03-23T23:19:01-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Types.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/map-constructor.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/map-constructor.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-add-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-add-mutate.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-constructor-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-constructor-arg.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-constructor.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-constructor.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-copy-constructor-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-copy-constructor-mutate.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-for-of-iterate-values.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/set-for-of-iterate-values.ts"
      ]
    },
    {
      "sha": "45463ab3ac3ed0e65dfdbbfd5e53a50a8384e909",
      "short_sha": "45463ab",
      "message": "[compiler][be] Refactor similar CallExpression and MethodCall effect handling (#32696)\n\nSimplify InferReferenceEffect function signature matching logic for next\nPRs in stack\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32696).\n* #32698\n* #32697\n* __->__ #32696\n* #32695",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-23T23:07:49-04:00",
      "committed_date": "2025-03-23T23:07:49-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts"
      ]
    },
    {
      "sha": "febc09b480903bb803455dc38dc130007d3a2e91",
      "short_sha": "febc09b",
      "message": "[compiler][fix] mutableOnlyIfOperandsAreMutable does not apply when operands are globals (#32695)\n\nGlobals, module locals, and other locally defined functions may mutate\ntheir arguments. See test fixtures for details\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32695).\n* #32698\n* #32697\n* #32696\n* __->__ #32695",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-23T23:07:24-04:00",
      "committed_date": "2025-03-23T23:07:24-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-maybemutates-arg0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-maybemutates-arg0.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/repro-array-filter-capture-mutate-bug.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/repro-array-filter-capture-mutate-bug.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/repro-array-filter-known-nonmutate-Boolean.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/repro-array-filter-known-nonmutate-Boolean.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/repro-array-map-capture-mutate-bug.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/repro-array-map-capture-mutate-bug.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/repro-array-map-known-mutate-shape.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/global-types/repro-array-map-known-mutate-shape.tsx"
      ]
    },
    {
      "sha": "4a9df08157f001c01b078d259748512211233dcf",
      "short_sha": "4a9df08",
      "message": "Stop creating Owner Stacks if many have been created recently (#32529)\n\nCo-authored-by: Jack Pope <jackpope1@gmail.com>",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-03-23T15:47:03-07:00",
      "committed_date": "2025-03-23T15:47:03-07:00",
      "changed_files": [
        "fixtures/owner-stacks/.gitignore",
        "fixtures/owner-stacks/README.md",
        "fixtures/owner-stacks/package.json",
        "fixtures/owner-stacks/public/favicon.ico",
        "fixtures/owner-stacks/public/index.html",
        "fixtures/owner-stacks/public/logo192.png",
        "fixtures/owner-stacks/public/logo512.png",
        "fixtures/owner-stacks/public/manifest.json",
        "fixtures/owner-stacks/public/robots.txt",
        "fixtures/owner-stacks/src/App.css",
        "fixtures/owner-stacks/src/App.js",
        "fixtures/owner-stacks/src/index.css",
        "fixtures/owner-stacks/src/index.js",
        "fixtures/owner-stacks/src/logo.svg",
        "fixtures/owner-stacks/src/reportWebVitals.js",
        "fixtures/owner-stacks/yarn.lock",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactOwnerStacks-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/__tests__/ReactFlightServer-test.js",
        "packages/react/src/ReactSharedInternalsClient.js",
        "packages/react/src/ReactSharedInternalsServer.js",
        "packages/react/src/jsx/ReactJSXElement.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/ReactOwnerStackReset.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "da996a15be4f14aeb9726037f4559ff1cb3c2600",
      "short_sha": "da996a1",
      "message": "[compiler][be] Move e2e tests to BabelPlugin transformer (#32706)\n\nClean up jest-e2e setup since\nhttps://github.com/facebook/react/pull/32663 and other features need\nprogram context (e.g. changing imports)\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32706).\n* #32663\n* __->__ #32706",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-21T20:05:22-04:00",
      "committed_date": "2025-03-21T20:05:22-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/scripts/jest/e2e-forget.config.js",
        "compiler/packages/babel-plugin-react-compiler/scripts/jest/makeTransform.ts",
        "compiler/packages/babel-plugin-react-compiler/scripts/jest/setupEnvE2E.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/e2e/constant-prop.e2e.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/e2e/update-button.e2e.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/e2e/update-expressions.e2e.js"
      ]
    },
    {
      "sha": "6b1a2c1d81630a5f385c5be0f758365b63d92eae",
      "short_sha": "6b1a2c1",
      "message": "fix(react-compiler): optimize components declared with arrow function and implicit return and `compilationMode: 'infer'` (#31792)\n\nfixes https://github.com/facebook/react/issues/31601\nhttps://github.com/facebook/react/issues/31639 cc @josephsavona",
      "author": {
        "name": "Dimitri POSTOLOV",
        "email": "dmytropostolov@gmail.com"
      },
      "authored_date": "2025-03-22T00:46:02+01:00",
      "committed_date": "2025-03-21T16:46:02-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/arrow-function-with-implicit-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/arrow-function-with-implicit-return.js"
      ]
    },
    {
      "sha": "de4aad5ba693be099b215b5819b5f25d05051a84",
      "short_sha": "de4aad5",
      "message": "[ci] Add missing permissions to runtime_commit_artifacts.yml (#32710)\n\nTurns out we need permissions to write to `contents` after all.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32710).\n* #32711\n* __->__ #32710",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-21T18:01:02-04:00",
      "committed_date": "2025-03-21T18:01:02-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "156f0eca20d37f1f5aa2e0f518489f23684c89de",
      "short_sha": "156f0ec",
      "message": "[ci] Don't use pull_request_target (#32708)\n\n`pull_request_target` gives access to repository secrets and permissions\nfor use from forks, for example to add a comment.\n\n> Due to the dangers inherent to automatic processing of PRs, GitHub’s\nstandard pull_request workflow trigger by default prevents write\npermissions and secrets access to the target repository. However, in\nsome scenarios such access is needed to properly process the PR. To this\nend the pull_request_target workflow trigger was introduced.\n\n> The reason to introduce the pull_request_target trigger was to enable\nworkflows to label PRs (e.g. needs review) or to comment on the PR.\n\n(via\nhttps://securitylab.github.com/resources/github-actions-preventing-pwn-requests/)\n\nIn this case there is no reason for us to allow this, so let's just use\nthe normal `pull_request` trigger which is less permissive.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32708).\n* __->__ #32708\n* #32709",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-21T16:17:28-04:00",
      "committed_date": "2025-03-21T16:17:28-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "4f080e498c4c0b373b3e1a8b0e735fceb83c267b",
      "short_sha": "4f080e4",
      "message": "[ci] Also give permissions on pull_requests (#32709)\n\nMissed one\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32709).\n* #32708\n* __->__ #32709",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-21T16:17:15-04:00",
      "committed_date": "2025-03-21T16:17:15-04:00",
      "changed_files": [
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "fe8c10695cc65502b3e9f9db4b6dbf20f521bb7e",
      "short_sha": "fe8c106",
      "message": "[ci] Add missing permissions (#32707)\n\nMissed these ones earlier.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32707).\n* #32708\n* __->__ #32707",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-21T16:07:09-04:00",
      "committed_date": "2025-03-21T16:07:09-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_close_direct_sync_branch_prs.yml",
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "daee08562ccf5abf7108b63f274f5ca669ee7dd5",
      "short_sha": "daee085",
      "message": "[activity] remove ref for now (#32645)\n\nFollowup from https://github.com/facebook/react/pull/32499\n\nManual mode is unused and has some bugs such as revealing hidden\nboundaries when manually toggling. We also want to change how manual\nmode works, and do some refactors to Activity to make it easier to\nsupport. For now we'll remove it, then add it back after the other\nchanges we have planned.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-21T14:44:02-04:00",
      "committed_date": "2025-03-21T14:44:02-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberActivityComponent.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/__tests__/Activity-test.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "ab693a926f13cc2c4c4a3ab19d5405471f87236b",
      "short_sha": "ab693a9",
      "message": "[ci] Scope permissions for all workflows (#32704)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-21T14:40:55-04:00",
      "committed_date": "2025-03-21T14:40:55-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_prereleases_manual.yml",
        ".github/workflows/compiler_prereleases_nightly.yml",
        ".github/workflows/compiler_prereleases_weekly.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        ".github/workflows/runtime_fuzz_tests.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_prereleases_manual.yml",
        ".github/workflows/runtime_prereleases_nightly.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml",
        ".github/workflows/shared_check_maintainer.yml",
        ".github/workflows/shared_cleanup_merged_branch_caches.yml",
        ".github/workflows/shared_cleanup_stale_branch_caches.yml",
        ".github/workflows/shared_close_direct_sync_branch_prs.yml",
        ".github/workflows/shared_label_core_team_prs.yml",
        ".github/workflows/shared_lint.yml",
        ".github/workflows/shared_stale.yml"
      ]
    },
    {
      "sha": "607615f4f6b399c314a567fdbf3ab53fa572991d",
      "short_sha": "607615f",
      "message": "[ci] Scope permissions for runtime_commit_artifacts.yml (#32701)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-21T14:40:34-04:00",
      "committed_date": "2025-03-21T14:40:34-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "e1e740717ba85597f03fd837a36c7bab5803a0d2",
      "short_sha": "e1e7407",
      "message": "Force layout before startViewTransition (#32699)\n\nThis works around this Safari bug.\nhttps://bugs.webkit.org/show_bug.cgi?id=290146\n\nThis unfortunate because it may cause additional layouts if there's more\nupdates to the tree coming by manual mutation before it gets painted\nnaturally. However, we might end up wanting to read layout early anyway.\n\nThis affects the fixture because we clone the `<link>` from the `<head>`\nwhich is itself another bug. However, it should be possible to have\n`<link>` tags inserted into the new tree so this is still relevant.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-21T10:05:31-04:00",
      "committed_date": "2025-03-21T10:05:31-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "ac799e569d5899c67d72a3e9af5c18b0672eb998",
      "short_sha": "ac799e5",
      "message": "[ci] Bump number of shards for test_build to 10 (#32693)\n\nI noticed `test_build` can take a while so let's bump the number of\nshards",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-20T17:49:36-04:00",
      "committed_date": "2025-03-20T17:49:36-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "0962f684a066df4fd2a7db7489cb1984799ad674",
      "short_sha": "0962f68",
      "message": "[compiler][bugfix] Don't insert hook guards in retry pipeline (#32665)\n\nFixing bug from https://github.com/facebook/react/pull/32164 -- prior to\nthis PR, we inserted hook guards even for functions that bailed out of\ncompilation.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-20T17:25:08-04:00",
      "committed_date": "2025-03-20T17:25:08-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-dont-add-hook-guards-on-retry.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-dont-add-hook-guards-on-retry.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/repro-dont-add-hook-guards-on-retry.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/repro-dont-add-hook-guards-on-retry.js"
      ]
    },
    {
      "sha": "b88898605427d1e6bb665d7c9261a9be180e5abd",
      "short_sha": "b888986",
      "message": "[ci] Rename other stale branch workflow (#32692)\n\nMakes it easier to tell what is what\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32692).\n* __->__ #32692\n* #32691",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-20T17:19:47-04:00",
      "committed_date": "2025-03-20T17:19:47-04:00",
      "changed_files": [
        ".github/workflows/shared_cleanup_branch_caches.yml"
      ]
    },
    {
      "sha": "addce2f9f222befc6151251a247247a8463052fa",
      "short_sha": "addce2f",
      "message": "[ci] Add daily stale branch cache cleanup (#32691)\n\nCleans up stale non-main caches daily\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32691).\n* #32692\n* __->__ #32691",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-20T17:17:44-04:00",
      "committed_date": "2025-03-20T17:17:44-04:00",
      "changed_files": [
        ".github/workflows/shared_cleanup_stale_branch_caches.yml"
      ]
    },
    {
      "sha": "74bcf3d0d2c34595e33838149d1d5a2ea7d783c6",
      "short_sha": "74bcf3d",
      "message": "[ci] Don't fail on cache miss (#32690)\n\nPartially reverts #32686.\n\nPR caches inherit from caches generated in `main`. If it cannot find\nthat cache, it will create one scoped to just that PR (and PRs that\ninherit from it).\n\nThere is an edge case where cache eviction can happen in the middle of a\ntest run. If cache eviction removes a `main` cache, child jobs that\ndepend on it will start failing because of the `fail-on-cache-miss`\nsetting.\n\nThis PR reverts the default behavior. If this happens, the workflow will\nstill continue in slow mode where it will `yarn install` child jobs\ninstead of reusing from cache. This is slower but will at least allow\nworkflows to continue.\n\nAdditionally I added restore keys so that we can fallback to other\ncaches if present so `yarn install` doesn't need to start over from\nscratch.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-20T17:02:39-04:00",
      "committed_date": "2025-03-20T17:02:39-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "b630219b1377f3117036b1c6118676c16fdb21b7",
      "short_sha": "b630219",
      "message": "[refactor] move isValidElementType to react-is (#32518)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-20T16:51:33-04:00",
      "committed_date": "2025-03-20T16:51:33-04:00",
      "changed_files": [
        "packages/react-is/src/ReactIs.js",
        "packages/react/src/ReactMemo.js",
        "packages/shared/isValidElementType.js"
      ]
    },
    {
      "sha": "7943da1e81bb8730db78db99af5f967bdf213a75",
      "short_sha": "7943da1",
      "message": "Set accurate value for alwaysThrottleRetries on www (#32684)\n\nThis flag value was updated in\nhttps://github.com/facebook/react/pull/28965 (seemingly unrelated, maybe\nas part of unit testing). But its still controlled by a dynamic flag in\nwww. Let's update this to VARIANT to accurately represent the state of\nthe rollout.\n\nBefore:\n<img width=\"1340\" alt=\"Screenshot 2025-03-20 at 10 45 30 AM\"\nsrc=\"https://github.com/user-attachments/assets/d0405a36-eb71-4108-9e23-8d462cc68fb4\"\n/>\n\nAfter:\n<img width=\"1351\" alt=\"Screenshot 2025-03-20 at 10 45 11 AM\"\nsrc=\"https://github.com/user-attachments/assets/459d260d-7a25-430b-95a6-d6a91d958417\"\n/>",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-03-20T14:28:55-04:00",
      "committed_date": "2025-03-20T14:28:55-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js"
      ]
    },
    {
      "sha": "e3c06424ae1162319d786a76371d649dee412c29",
      "short_sha": "e3c0642",
      "message": "[compiler] Refactor validations to return Result and log where appropriate\n\nUpdates ~all of our validations to return a Result, and then updates callers to either unwrap() if they should bailout or else just log.\n\nghstack-source-id: 418b5f5aa2b7dd49ca76b3f98a48a35150691d7e\nPull Request resolved: https://github.com/facebook/react/pull/32688",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2025-03-20T11:02:02-07:00",
      "committed_date": "2025-03-20T11:02:02-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/CompilerError.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateHooksUsage.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateMemoizedEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoCapitalizedCalls.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValiateNoImpureFunctionsInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoJSXInTryStatement.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoSetStateInPassiveEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoSetStateInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateStaticComponents.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateUseMemo.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-in-catch-in-outer-try-with-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-in-try-with-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useEffect-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-jsx-in-catch-in-outer-try-with-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-in-catch-in-outer-try-with-catch.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-jsx-in-try-with-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-in-try-with-catch.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useEffect-transitive.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-setState-in-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useEffect.js"
      ]
    },
    {
      "sha": "5f4c5c920fb454f6b8375bdcd4045eaa82e70928",
      "short_sha": "5f4c5c9",
      "message": "[compiler] Validate static components\n\nReact uses function identity to determine whether a given JSX expression represents the same type of component and should reconcile (keep state, update props) or replace (teardown state, create a new instance). This PR adds off-by-default validation to check that developers are not dynamically creating components during render.\n\nThe check is local and intentionally conservative. We specifically look for the results of call expressions, new expressions, or function expressions that are then used directly (or aliased) as a JSX tag. This allows common sketchy but fine-in-practice cases like passing a reference to a component from a parent as props, but catches very obvious mistakes such as:\n\n```js\nfunction Example() {\n  const Component = createComponent();\n  return <Component />;\n}\n```\n\nWe could expand this to catch more cases, but this seems like a reasonable starting point. Note that I tried enabling the validation by default and the only fixtures that error are the new ones added here. I'll also test this internally. What i'm imagining is that we enable this in the linter but not the compiler.\n\nghstack-source-id: e7408c0a55478b40d65489703d209e8fa7205e45\nPull Request resolved: https://github.com/facebook/react/pull/32683",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2025-03-20T11:02:02-07:00",
      "committed_date": "2025-03-20T11:02:02-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateStaticComponents.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-conditionally-assigned-dynamically-constructed-component-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-conditionally-assigned-dynamically-constructed-component-in-render.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-construct-component-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-construct-component-in-render.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-method-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-new.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/static-components/invalid-dynamically-constructed-component-new.js"
      ]
    },
    {
      "sha": "112224d8d24b127efa1e680403cca2289c1a261b",
      "short_sha": "112224d",
      "message": "[ci] Also cache playground playwright browsers (#32687)\n\nFollowing #32678, do the same for the playground e2e test since this\nstep can sometimes take many minutes to complete.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-20T13:53:31-04:00",
      "committed_date": "2025-03-20T13:53:31-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "87d7e4c55be7fea5efd1e567d52e943ad5d3133d",
      "short_sha": "87d7e4c",
      "message": "[ci] Fail on cache miss (#32686)\n\nSince we use a centralized cache we should fail subsequent steps if the\nchild jobs are unable to restore the cache from the first 2 jobs.\n\nAlso fix some incorrect hashes used for the fixture tests.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32686).\n* __->__ #32686\n* #32685",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-20T12:22:06-04:00",
      "committed_date": "2025-03-20T12:22:06-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "3bcf8c23debf0c0c746ed11801fa1fe64dfb0159",
      "short_sha": "3bcf8c2",
      "message": "[ci] Warm cache (#32685)\n\nTry restoring from old caches as a base to speed up the case where\nnode_modules needs updating.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32685).\n* #32686\n* __->__ #32685",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-20T12:21:50-04:00",
      "committed_date": "2025-03-20T12:21:50-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "a4f9bd586b6108562e5fba2be235d8f6b450cb36",
      "short_sha": "a4f9bd5",
      "message": "Enable Fragment refs in Experimental (#32670)\n\nThat we can test it out in Next.js router conditionally when\nexperimental is on for other reasons.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-19T20:38:27-04:00",
      "committed_date": "2025-03-19T20:38:27-04:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "ff8f6f21f756c81fba284557357eb6e6ce765149",
      "short_sha": "ff8f6f2",
      "message": "[ci] Fix Will commit these changes www step (#32681)\n\nUnlike the fbsource version of the step, www doesn't add any changes so\nthe `force` input doesn't actually work",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T18:13:06-04:00",
      "committed_date": "2025-03-19T18:13:06-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "19176e3c08dd67879fa134c9de172fcd53df841a",
      "short_sha": "19176e3",
      "message": "[ci] Use correct revision for Meta builds (#32680)\n\nThere was a bug previously in our commit artifacts step where the\nemitted REVISION hash would reference the commit on the builds branch\nrather than from `main`.\n\nGiven that our internal manual sync script also does this, let's align\nthem both to always reference the commit from `main` instead.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32680).\n* __->__ #32680\n* #32679\n* #32678",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T17:24:43-04:00",
      "committed_date": "2025-03-19T17:24:43-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "d16c26da40c96704e24b43832d2f7057f586c415",
      "short_sha": "d16c26d",
      "message": "[ci] Specify if-no-files-found on actions/upload-artifact@v4 (#32679)\n\nDefaults to warn, but since some steps require these artifacts to be\nuploaded we specify an error if its not found. Some other steps like\nplaywright test-results are only uploaded on failure so it's okay to\nignore.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32679).\n* #32680\n* __->__ #32679\n* #32678",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T17:22:40-04:00",
      "committed_date": "2025-03-19T17:22:40-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "a8c155cab91d4a33d06a904bfc23aadacfba8383",
      "short_sha": "a8c155c",
      "message": "[ci] Cache playwright browsers (#32678)\n\nNo reason to download them from scratch every time.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32678).\n* #32680\n* #32679\n* __->__ #32678",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T17:22:17-04:00",
      "committed_date": "2025-03-19T17:22:17-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "995410463a0d74e43d91816bcda5f10cff82a14a",
      "short_sha": "9954104",
      "message": "[ci] Parameterize branch cleanup (#32677)\n\nAllow a PR number to be passed as input",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T16:39:01-04:00",
      "committed_date": "2025-03-19T16:39:01-04:00",
      "changed_files": [
        ".github/workflows/shared_cleanup_branch_caches.yml"
      ]
    },
    {
      "sha": "208905257f5da4b05f3153388563cabf14eb85bb",
      "short_sha": "2089052",
      "message": "[ci] Add cache cleanup workflow (#32675)\n\n> Caches have branch scope restriction in place. This means that if\ncaches for a specific branch are using a lot of storage quota, it may\nresult into more frequently used caches from default branch getting\nthrashed. For example, if there are many pull requests happening on a\nrepo and are creating caches, these cannot be used in default branch\nscope but will still occupy a lot of space till they get cleaned up by\neviction policy. But sometime we want to clean them up on a faster\ncadence so as to ensure default branch is not thrashing.\n\n\nhttps://github.com/actions/cache/blob/main/tips-and-workarounds.md#force-deletion-of-caches-overriding-default-cache-eviction-policy\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32675).\n* __->__ #32675\n* #32674",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T15:42:04-04:00",
      "committed_date": "2025-03-19T15:42:04-04:00",
      "changed_files": [
        ".github/workflows/shared_cleanup_branch_caches.yml"
      ]
    },
    {
      "sha": "891a6332e3dc9e6dae087170996afaea42898484",
      "short_sha": "891a633",
      "message": "[ci] Bump build_and_lint to 25 workers (#32674)\n\nIncreases number of workers for `build_and_lint`.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32674).\n* #32675\n* __->__ #32674",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T15:41:48-04:00",
      "committed_date": "2025-03-19T15:41:48-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "a4842c92ea241593557a3b0dadfbc5460320d375",
      "short_sha": "a4842c9",
      "message": "[ci] Centralize cache (#32672)\n\nTo avoid race conditions where multiple jobs try to write to the same\ncache, we now centralize saving the cache and then reusing it in every\nsubsequent job.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32672).\n* #32675\n* #32674\n* __->__ #32672",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T15:25:07-04:00",
      "committed_date": "2025-03-19T15:25:07-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "ada8bbbd6aa76bc472863589128833e30cacaef3",
      "short_sha": "ada8bbb",
      "message": "[eslint-plugin-react-compiler] Fix type error with recommended config (#32666)\n\n## Summary\n\nIn the recommended configuration for `eslint-plugin-react-compiler`,\ni.e. `reactCompiler.configs.recommended`, the rule is typed as `string`\nrather than `eslint.Linter.RuleEntry` or anything assignable thereto,\nwhich results in the following type error if you type check your eslint\nconfiguration:\n```\nProperty ''react-compiler/react-compiler'' is incompatible with index signature.\n  Type 'string' is not assignable to type 'RuleEntry | undefined'.\n```\nSimply adding a const assertion fixes the error.\n\n## How did you test this change?\n\nI emitted declarations for the module and confirmed that the rule is now\ntyped as the string literal `'error'`",
      "author": {
        "name": "Niklas Holm",
        "email": "572511+niklasholm@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T19:58:08+01:00",
      "committed_date": "2025-03-19T14:58:08-04:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/src/index.ts"
      ]
    },
    {
      "sha": "e9c3b27b4b86c5030df96d8a1e4228b5341164b0",
      "short_sha": "e9c3b27",
      "message": "[ci] Bump all node_modules cache keys (#32671)\n\nI'm seeing a lot of instances of\n\n> Failed to save: Unable to reserve cache with key\nruntime-and-compiler-node_modules-v5-X64-Linux-e454609794aae66da9909c77dd6efa073eceff7f44d6527611f8465e102578b4,\nanother job may be creating this cache.\n\nwhich is adding ~20 seconds to every step. Let's try to bust the cache\nfollowing this\n[comment](https://github.com/actions/cache/issues/485#issuecomment-744145040)\nand see if that helps.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32671).\n* #32672\n* __->__ #32671",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T14:42:45-04:00",
      "committed_date": "2025-03-19T14:42:45-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_commit_artifacts.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "b0446ff06a484127412638c2be9a0382c6f3a84b",
      "short_sha": "b0446ff",
      "message": "[ci] Properly format commit message take 2 (#32673)\n\nWe need to use the commit message from `main`, not the builds branch",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T14:01:49-04:00",
      "committed_date": "2025-03-19T14:01:49-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "db7dfe05508392ba3bdf7bc24717fe71f9b84a29",
      "short_sha": "db7dfe0",
      "message": "[eprh] Don't transpile to es5 (#32669)\n\nNow that we've moved the sync location of the plugin, we no longer need\nthis since those restrictions no longer apply.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32669).\n* __->__ #32669\n* #32668",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T11:49:42-04:00",
      "committed_date": "2025-03-19T11:49:42-04:00",
      "changed_files": [
        "scripts/rollup/build.js"
      ]
    },
    {
      "sha": "646835fb59f9ad8557b9f3641515697c153e3faa",
      "short_sha": "646835f",
      "message": "[ci] Properly format commit message (#32668)\n\nUsing the github variable for the commit message replaces the variable\ninline. If the commit message contains quotes or other characters that\nneed to be escaped, this breaks the workflow.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32668).\n* #32669\n* __->__ #32668",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-19T11:49:18-04:00",
      "committed_date": "2025-03-19T11:49:18-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "c2a196174763e0b4f16ed1c512ed4442b062395e",
      "short_sha": "c2a1961",
      "message": "Minor Fixes to View Transition Fixture (#32664)\n\nFollow up to #32656.\n\nRemove touchAction from SwipeRecognizer. I was under the wrong\nimpression that this was only the touch-action applied to this\nparticular element, but that parents would still win but in fact this\nblocks the parent from scrolling in the other direction. By specifying a\nfixed direction it also blocked rage-swiping in the other direction\nearly on.\n\nDisable pointer-events on view-transition so that the scroll can be hit.\nThis means that touches hit below the items animating above. This allows\nswiping to happen again before momentum scroll has finished. Previously\nthey were ignored. This only works as long as the SwipeRecognizer is\nitself not animating. This means you can now rage-swipe in both\ndirections quickly.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-18T19:20:34-04:00",
      "committed_date": "2025-03-18T19:20:34-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Chrome.css",
        "fixtures/view-transition/src/components/SwipeRecognizer.js"
      ]
    },
    {
      "sha": "6584a6eec488a7a155fe2231874aecf178b07a9a",
      "short_sha": "6584a6e",
      "message": "[compiler] Hoist dependencies from functions more conservatively (#32616)\n\nAlternative to facebook/react#31584 which sets\nenableTreatFunctionDepsAsConditional:true` by default.\n\nThis PR changes dependency hoisting to be more conservative while trying\nto preserve an optimal \"happy path\". We assume that a function \"is\nlikely called\" if we observe the following in the react function body.\n\n- a direct callsite\n- passed directly as a jsx attribute or child\n- passed directly to a hook\n- a direct return\n\nA function is also \"likely called\" if it is directly called, passed to\njsx / hooks, or returned from another function that \"is likely called\".\n\nNote that this approach marks the function definition site with its\nhoistable properties (not its use site). I tried implementing use-site\nhoisting semantics, but it felt both unpredictable (i.e. as a developer,\nI can't trust that callbacks are well memoized) and not helpful (type +\nnull checks of a value are usually colocated with their use site)\n\nIn this fixture (copied here for easy reference), it should be safe to\nuse `a.value` and `b.value` as dependencies, even though these functions\nare conditionally called.\n```js\n// inner-function/nullable-objects/assume-invoked/conditional-call-chain.tsx\nfunction Component({a, b}) {\n  const logA = () => {\n    console.log(a.value);\n  };\n  const logB = () => {\n    console.log(b.value);\n  };\n  const hasLogged = useRef(false);\n  const log = () => {\n    if (!hasLogged.current) {\n      logA();\n      logB();\n      hasLogged.current = true;\n    }\n  };\n  return <Stringify log={log} shouldInvokeFns={true} />;\n}\n```\n\nOn the other hand, this means that we produce invalid output for code\nlike manually implementing `Array.map`\n```js\n// inner-function/nullable-objects/bug-invalid-array-map-manual.js\nfunction useFoo({arr1, arr2}) {\n  const cb = e => arr2[0].value + e.value;\n  const y = [];\n  for (let i = 0; i < arr1.length; i++) {\n    y.push(cb(arr1[i]));\n  }\n  return y;\n}\n```",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-18T18:00:08-04:00",
      "committed_date": "2025-03-18T18:00:08-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/function-expression-prototype-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-named-callback-cross-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-named-callback-cross-context.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-named-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-named-callback.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-named-chained-callbacks.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-named-chained-callbacks.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-simple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/array-map-simple.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/conditional-call-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/conditional-call-chain.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/conditional-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/conditional-call.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/conditionally-return-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/conditionally-return-fn.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/direct-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/direct-call.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/function-with-conditional-callsite-in-another-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/function-with-conditional-callsite-in-another-function.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/hook-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/hook-call.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/jsx-and-passed.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/jsx-and-passed.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/jsx-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/jsx-function.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/return-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/return-function.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/use-memo-returned.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/assume-invoked/use-memo-returned.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/bug-invalid-array-map-manual.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/bug-invalid-array-map-manual.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/return-object-of-functions.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-function/nullable-objects/return-object-of-functions.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-nested-function-uncond-access-local-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-object-method-uncond-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-control-dependency-on-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/context-var-granular-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rename-source-variables-nested-object-method.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useEffect-nested-lambdas.expect.md",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "86d5ac0882305c5bbff0fd7b40385e7d50d0d2b4",
      "short_sha": "86d5ac0",
      "message": "Revert \"Fix:- Improve HOC support and state preservation in React Refresh\" (#32214)\n\nReverts facebook/react#30660\n\nI don’t feel confident in the approach. This part of code is supposed to\nrely on the module bundler behaving as expected. _Maybe_ this is correct\nbut I need to review it closer — it was intentionally _not_ implemented\nthis way originally.\n\nI’ll try to take a closer look some time this week. We don’t have to\nmerge this revert right now but just flagging that I don’t understand\nthe thinking behind the new approach and don’t have confidence in it.",
      "author": {
        "name": "dan",
        "email": "dan.abramov@me.com"
      },
      "authored_date": "2025-03-18T19:05:56+00:00",
      "committed_date": "2025-03-18T19:05:56+00:00",
      "changed_files": [
        "packages/react-refresh/src/ReactFreshRuntime.js",
        "packages/react-refresh/src/__tests__/ReactFresh-test.js"
      ]
    },
    {
      "sha": "476f53879e80d4ee976ed036a0e8986126fa3117",
      "short_sha": "476f538",
      "message": "Add getClientRects to fragment instances (#32660)\n\nAdds `getClientRects()` to fragment instances with a fixture test case.\n`Element.getClientRect` returns a collection of `DOMRect`s (see example\nof multiline span returning two `DOMRect` boxes).\n`fragmentInstance.getClientRects` here flattens those collections into\nan array of rects.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-03-18T13:54:26-04:00",
      "committed_date": "2025-03-18T13:54:26-04:00",
      "changed_files": [
        "fixtures/dom/src/components/Fixture.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/EventListenerCase.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/FocusCase.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/GetClientRectsCase.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/IntersectionObserverCase.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/index.js",
        "fixtures/dom/src/style.css",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFragmentRefs-test.js",
        "packages/react-dom/src/__tests__/utils/IntersectionMocks.js"
      ]
    },
    {
      "sha": "c69a5fc53a5135136668ca878f99b634d2374837",
      "short_sha": "c69a5fc",
      "message": "Add blur() and focusLast() to fragment instances (#32654)\n\n`focus()` was added in https://github.com/facebook/react/pull/32465.\nHere we add `focusLast()` and `blur()`. I also extended `focus` to take\noptions.\n\n`focus` will focus the first focusable element. `focusLast` will focus\nthe last focusable element. We could consider a `focusFirst` naming or\neven the `focusWithin` used by test selector APIs as well.\n\n`blur` will only have an effect if the current `document.activeElement`\nis one of the fragment children.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-03-18T11:58:12-04:00",
      "committed_date": "2025-03-18T11:58:12-04:00",
      "changed_files": [
        "fixtures/dom/src/components/fixtures/fragment-refs/FocusCase.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/index.js",
        "fixtures/dom/src/style.css",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFragmentRefs-test.js",
        "packages/react-reconciler/src/ReactFiberTreeReflection.js"
      ]
    },
    {
      "sha": "a35aaf704cca9a5db16f5b197e3ac17eb960b72f",
      "short_sha": "a35aaf7",
      "message": "Update ViewTransition fixture to include bigger buttons/swipe (#32656)\n\nI made the button a bit bigger and moved the swipe recognizer around the\nwhole screen. Typically these are used around the whole content without\nany affordances and not as a standalone scrubber. Ideally the swipe\nwould be able to be inside the animating content but it can't yet due to\n[this Safari bug](https://bugs.webkit.org/show_bug.cgi?id=288795).\n\nAdded back some paragraphs so that scrolling can be tested properly. It\nappears it's possible to get the swipe to be a bit misaligned if you\nscroll enough on iOS.\n\n<img width=\"437\" alt=\"Screenshot 2025-03-17 at 10 27 42 PM\"\nsrc=\"https://github.com/user-attachments/assets/589dc828-717e-420c-83dc-94ae6ad59791\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-18T09:24:31-04:00",
      "committed_date": "2025-03-18T09:24:31-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.css",
        "fixtures/view-transition/src/components/Page.js"
      ]
    },
    {
      "sha": "3c3696d5548c8a67f2332fd78332b9366abaf2f9",
      "short_sha": "3c3696d",
      "message": "Measure Updated ViewTransition Boundaries (#32653)\n\nThis does the same thing for `measureUpdateViewTransition` that we did\nfor `measureNestedViewTransitions` in\nhttps://github.com/facebook/react/pull/32612/commits/e3cbaffef05c7b476c07f7495e06788a9503e636.\nIf a boundary hasn't mutated and didn't change in size, we mark it for\ncancellation. Otherwise we add names to it. The different from the\nCommitViewTransition path is that the \"old\" names are added to the\nclones so this is the first time the \"new\" names.\n\nNow we also cancel any boundaries that were unchanged. So now the root\nno longer animates. We still have to clone them. There are other\noptimizations that can avoid cloning but once we've done all the layouts\nwe can still cancel the running animation and let them just be the\nregular content if they didn't change. Just like the regular\nfire-and-forget path.\n\nThis also fixes the measurement so that we measure clones by adjusting\ntheir position back into the viewport.\n\nThis actually surfaces a bug in Safari that was already in #32612. It\nturns out that the old names aren't picked up for some reason and so in\nSafari they looked more like a cross-fade than what #32612 was supposed\nto fix. However, now that bug is even more apparent because they\nactually just disappear in Safari. I'm not sure what that bug is but\nit's unrelated to this PR so will fix that separately.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-17T21:38:13-04:00",
      "committed_date": "2025-03-17T21:38:13-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoMutation.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js"
      ]
    },
    {
      "sha": "90b511ec7a9f2f3fd2b7f0039d8fc52c23f573a1",
      "short_sha": "90b511e",
      "message": "fix(react-compiler): implement NumericLiteral as ObjectPropertyKey (#31791)",
      "author": {
        "name": "Dimitri POSTOLOV",
        "email": "dmytropostolov@gmail.com"
      },
      "authored_date": "2025-03-18T00:30:58+01:00",
      "committed_date": "2025-03-17T19:30:58-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/numeric-literal-as-object-property-key.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/numeric-literal-as-object-property-key.js"
      ]
    },
    {
      "sha": "02372952e4f24fa02dcb9b32af26cb2472617cef",
      "short_sha": "0237295",
      "message": "Don't auto-start browser in SSR fixtures (#32652)\n\nI end up restarting these a lot and it's annoying to have it open\nanother tab each time.\n\nThe flight fixture already doesn't auto-start.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-17T17:26:00-04:00",
      "committed_date": "2025-03-17T17:26:00-04:00",
      "changed_files": [
        "fixtures/ssr/package.json",
        "fixtures/view-transition/package.json"
      ]
    },
    {
      "sha": "9fde224a53693101a4d15e038d6db37e7a3596ff",
      "short_sha": "9fde224",
      "message": "Materialize the tree ID when ViewTransition name=auto consumes one (#32651)\n\nViewTransition uses the `useId` algorithm to auto-assign names. This\nensures that we could animate between SSR content and client content by\nensuring that the names line up.\n\nHowever, I missed that we need to bump the id (materialize it) when we\ndo that. This is what function components do if they use one or more\n`useId()`. This caused duplicate names when two ViewTransitions were\nnested without any siblings since they would share name.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-17T16:17:01-04:00",
      "committed_date": "2025-03-17T16:17:01-04:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "ca02c4bb40325c3efbc60969e9199a0c379d2d6b",
      "short_sha": "ca02c4b",
      "message": "[ci][ez] use yarn --cwd (#32650)\n\nRun yarn install via `--cwd` instead of `working-directory` to make the\nlabels clearer\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32650).\n* __->__ #32650\n* #32649\n* #32648",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-17T14:13:27-04:00",
      "committed_date": "2025-03-17T14:13:27-04:00",
      "changed_files": [
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_commit_artifacts.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml"
      ]
    },
    {
      "sha": "c37d89827e64d7ed34d9a2a3edce9cd00baafb3e",
      "short_sha": "c37d898",
      "message": "[ci] Pin Discord webhook action to specific commit sha (#32649)\n\nPins the discord webhook action to\n`86dc739f3f165f16dadc5666051c367efa1692f4`, which is what the v6 tag\npoints to.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32649).\n* #32650\n* __->__ #32649\n* #32648",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-17T14:13:17-04:00",
      "committed_date": "2025-03-17T14:13:17-04:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml"
      ]
    },
    {
      "sha": "6c6699f3d2d15428575005a037b73bcb0b5bd0e4",
      "short_sha": "6c6699f",
      "message": "[ci] Don't use third party action to push commits (#32648)\n\nIn light of recent third party actions being compromised, let's just\npush the commit ourselves rather than use a third party action. We\nalready detect if changes are needed, so the step will only run if so.\n\nI also added a `dry_run` option to the manual runs of this workflow for\ntesting.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32648).\n* #32650\n* #32649\n* __->__ #32648",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-17T14:13:02-04:00",
      "committed_date": "2025-03-17T14:13:02-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "9320a0139df876509c8ebb6f6fd950a6690bd5d9",
      "short_sha": "9320a01",
      "message": "Fix COMMIT_SHA when generating PR artifacts (#32647)\n\nFollow-up to #31850. We want to build using the original commit SHA, not\nthe merge commit that GitHub Actions creates behind the scenes. We were\nalready checking out the correct commit object, but the COMMIT_SHA\nartifact was still pointing to the merge commit.\n\nThis should fix the sizebot links to point to working URLs, too.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2025-03-17T12:46:27-04:00",
      "committed_date": "2025-03-17T12:46:27-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "fbcda19a23da819889afdd7164b29c556fbcfc7a",
      "short_sha": "fbcda19",
      "message": "[devtools] add filters for internal builds (#32646)\n\nWe don't have an experimental-only build of devtools, but we can at\nleast add these filters to the internal build.\n\nA better way would be to use feature detection, but I'm not sure how and\nthis isn't a very heavily used feautre.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-17T12:14:19-04:00",
      "committed_date": "2025-03-17T12:14:19-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Settings/ComponentsSettings.js"
      ]
    },
    {
      "sha": "cd28a946d57695a025581c0ff851bde08ea6ca27",
      "short_sha": "cd28a94",
      "message": "Add observer methods to fragment instances (#32619)\n\nThis implements `observeUsing(observer)` and `unobserverUsing(observer)`\non fragment instances. IntersectionObservers and ResizeObservers can be\npassed to observe each host child of the fragment. This is the\nequivalent to calling `observer.observe(child)` or\n`observer.unobserve(child)` for each child target.\n\nJust like the addEventListener, the observer is held on the fragment\ninstance and applied to any newly mounted child. So you can do things\nlike wrap a paginated list in a fragment and have each child\nautomatically observed as they commit in.\n\nUnlike, the event listeners though, we don't `unobserve` when a child is\nremoved. If a removed child is currently intersecting, the observer\ncallback will be called when it is removed with an empty rect. This lets\nyou track all the currently intersecting elements by setting state from\nthe observer callback and either adding or removing them from your list\ndepending on the intersecting state. If you want to track the removal of\nitems offscreen, you'd have to maintain that state separately and append\nintersecting data to it in the observer callback. This is what the\nfixture example does.\n\nThere could be more convenient ways of managing the state of multiple\nchild intersections, but basic examples are able to be modeled with the\nsimple implementation. Let's see how the usage goes as we integrate this\nwith more advanced loggers and other features.\n\nFor now you can only attach one observer to an instance. This could\nchange based on usage but the fragments are composable and could be\nstacked as one way to apply multiple observers to the same elements.\n\nIn practice, one pattern we expect to enable is more composable logging\nsuch as\n\n```javascript\nfunction Feed({ items }) {\n  return (\n    <ImpressionLogger>\n      {items.map((item) => (\n        <FeedItem />\n      ))}\n    </ImpressionLogger>\n  );\n}\n```\n\nwhere `ImpressionLogger` would set up the IntersectionObserver using a\nfragment ref with the required business logic and various components\ncould layer it wherever the logging is needed. Currently most callsites\nuse a hook form, which can require wiring up refs through the tree and\nmerging refs for multiple loggers.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-03-17T11:40:05-04:00",
      "committed_date": "2025-03-17T11:40:05-04:00",
      "changed_files": [
        "fixtures/dom/src/components/fixtures/fragment-refs/EventListenerCase.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/IntersectionObserverCase.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/ResizeObserverCase.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/index.js",
        "fixtures/dom/src/style.css",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFragmentRefs-test.js",
        "packages/react-dom/src/__tests__/ReactDOMTestSelectors-test.js",
        "packages/react-dom/src/__tests__/utils/IntersectionMocks.js"
      ]
    },
    {
      "sha": "8243f3f0631698e819c690710a7f18f767068981",
      "short_sha": "8243f3f",
      "message": "[bug] Fix component name for Portal and add tests (#32640)\n\nBased off: https://github.com/facebook/react/pull/32499\n\nWhile looking into `React.lazy` issues for built-ins, I noticed we\nalready error for `lazy` with build-ins, but we don't have any tests for\n`getComponentNameFromType` using all the built-ins. This may be\nsomething we should handle, but for now we should at least have tests.\n\nHere's why: while writing tests, I noticed we check `type` instead of\n`$$typeof` for portals:\n\n\nhttps://github.com/facebook/react/blob/9cdf8a99edcfd94d7420835ea663edca04237527/packages/react-reconciler/src/ReactPortal.js#L25-L32\n\nThis PR adds tests for all the built-ins and fixes the portal bug.\n\n[Commit to\nreview](https://github.com/facebook/react/pull/32640/commits/e068c167d48d4df01e79db8f13276bb46d7ab439)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-17T11:23:28-04:00",
      "committed_date": "2025-03-17T11:23:28-04:00",
      "changed_files": [
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/shared/getComponentNameFromType.js"
      ]
    },
    {
      "sha": "df319522758b7fdfed3ddfa517cc1cc298ef1602",
      "short_sha": "df31952",
      "message": "Remove offscreen type (#32639)\n\nBased off https://github.com/facebook/react/pull/32499\n\nThis is no longer used.\n\n[Review\ncommit](https://github.com/facebook/react/commit/88c297d12f8b2562be3982fba867f03a137551cb)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-17T09:37:07-04:00",
      "committed_date": "2025-03-17T09:37:07-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/shared/ReactSymbols.js",
        "packages/shared/isValidElementType.js"
      ]
    },
    {
      "sha": "1a191701fe5000098d23328b2ea9d70457fea1f8",
      "short_sha": "1a19170",
      "message": "[refactor] Add element type for Activity (#32499)\n\nThis PR separates Activity to it's own element type separate from\nOffscreen. The goal is to allow us to add Activity element boundary\nsemantics during hydration similar to Suspense semantics, without\nimpacting the Offscreen behavior in suspended children.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-17T09:17:00-04:00",
      "committed_date": "2025-03-17T09:17:00-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/storeComponentFilters-test.js",
        "packages/react-devtools-shared/src/backend/fiber/DevToolsFiberComponentStack.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/ComponentsSettings.js",
        "packages/react-devtools-shared/src/frontend/types.js",
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberComponentStack.js",
        "packages/react-reconciler/src/ReactWorkTags.js",
        "packages/react-reconciler/src/__tests__/ReactErrorStacks-test.js",
        "packages/react-reconciler/src/getComponentNameFromFiber.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react/src/ReactClient.js",
        "packages/shared/ReactSymbols.js",
        "packages/shared/getComponentNameFromType.js",
        "packages/shared/isValidElementType.js"
      ]
    },
    {
      "sha": "99563e91736e9de473c4865d5cb6fd9eb1a26bcb",
      "short_sha": "99563e9",
      "message": "Partially revert #32588 (#32621)\n\nhttps://github.com/facebook/react/pull/32588 changed the babel config\nimpacting local tests, and I'm not able to run test:\n\n<img width=\"1354\" alt=\"Screenshot 2025-03-15 at 2 37 00 PM\"\nsrc=\"https://github.com/user-attachments/assets/2d4afe39-6ab6-4c83-87a9-ceb0ee5f8df5\"\n/>\n\n\nThis PR reverts those changes until we can re-land with a fix.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-15T15:21:57-04:00",
      "committed_date": "2025-03-15T15:21:57-04:00",
      "changed_files": [
        "babel.config.js",
        "package.json"
      ]
    },
    {
      "sha": "17d274dc127400b31379a1b26c5be53599c36aa5",
      "short_sha": "17d274d",
      "message": "Remove Mutation Check Around commit/measureUpdateViewTransition (#32617)\n\nThere's two ways to find updated View Transitions.\n\nOne is the \"commit/measureNestedViewTransitions\" pass which is used to\nfind things in unchanged subtrees. This can only lead to the relayout\ncase since there's can't possibly be any mutations in the subtree. This\nis only triggered when none of the direct siblings have any mutations at\nall.\n\nThe other case is \"commit/measureUpdateViewTransition\" which is for a\nViewTransition that itself has mutations scheduled inside of it which\nleads to the \"update\" case.\n\nHowever, there's a case between these two cases. When a direct sibling\nhas a mutation but there's also a ViewTransition exactly at the same\nlevel. In that case we can't bail out on the whole set of children so we\nwon't trigger the \"nested\" case. Previously we also didn't trigger the\n\"commit/measureUpdateViewTransition\" case because we first checked if\nthat had any mutations inside of it at all. This leads to neither case\npicking up this boundary.\n\nWe could check if the ViewTransition itself has any mutations inside and\nif not trigger the nested path.\n\nThere's a simpler way though. Because\n`commit/measureUpdateViewTransition` is actually just optimistic. The\nflags are pessimistic and we don't know for sure if there will actually\nbe a mutation until we've traversed the tree. It can sometimes lead to\nthe \"relayout\" case. So we can just use that same path, knowing that\nit'll just lead to the layout pass. Therefore it's safe to just remove\nthis check.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-14T17:38:53-04:00",
      "committed_date": "2025-03-14T17:38:53-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberFlags.js"
      ]
    },
    {
      "sha": "6b5d9fd3166eb58b469fb23f7b96972b184c0218",
      "short_sha": "6b5d9fd",
      "message": "Move traverseFragmentInstanceChildren to internal ReactFiberTreeReflection (#32613)\n\nThis is a nit but a Config should not have to know anything about the\ninternals of Fibers. Ideally it shouldn't even access them but we have\nsome cases where we need pointers back in like for this fragment.\n\nThe way we've typically abstracted this is using the\n`ReactFiberTreeReflection` helper that's in the `react-reconciler`. Such\nas in the event system.\nhttps://github.com/facebook/react/blob/f3c956006a90dc68210bd3e19497d10fb9b028d3/packages/react-dom-bindings/src/events/ReactDOMEventListener.js#L22-L26\n\nWe sometimes cheat but we really should clean this up such that a\n`Fiber` is actually an opaque type to the Configs and it can never dot\ninto it without using a helper.\n\nSo this just moves `traverseFragmentInstanceChildren` to\nReactFiberTreeReflection so that the ConfigDOM doesn't ever dot into its\nfields itself. It just passes the Fiber through back into the\nreact-reconciler. I had to add a wrapper to read the `.child` to avoid\nthat being assumed too. I also noticed that FragmentInstanceType is not\nactually passed through so that argument is unnecessary.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-14T17:38:35-04:00",
      "committed_date": "2025-03-14T17:38:35-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-reconciler/src/ReactFiberTreeReflection.js"
      ]
    },
    {
      "sha": "2c560374d6276c51cfeeff7af39628058c155a13",
      "short_sha": "2c56037",
      "message": "Measure and apply names for the \"new\" phase (#32612)\n\nStacked on #32599 and #32611.\n\nThis is able to reuse the code from CommitViewTransitions for \"enter\",\n\"shared\" and \"layout\". The difference is that for \"enter\"/\"shared\" in\nthe \"new\" phase we pass in the deletions.\n\nFor \"layout\" of nested boundaries we just need to measure the clones at\nthe same time we measure the original nodes since we haven't measured\nthem in a previous phase in the current approach.\n\nWith these updates, things move around more like expected in the fixture\nbecause we're now applying the appropriate pairs to trigger individual\nanimations instead of just the full document cross-fade.\n\nThe \"update\" phase is a little more complicated and is coming soon.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-14T14:26:55-04:00",
      "committed_date": "2025-03-14T14:26:55-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "2e385738a4dfd1554c146f6313b1530a09b5ce78",
      "short_sha": "2e38573",
      "message": "Find Pairs and Apply View Transition Names to the Clones in the \"old\" Phase (#32599)\n\nStacked on #32578.\n\nWe need to apply view-transition-names to the clones that we create in\nthe \"old\" phase for the ViewTransition boundaries that should activate.\n\nFinding pairs is a little trickier than in\nReactFiberCommitViewTransitions. Normally we collect all name\n\"insertions\" in the `accumulateSuspenseyCommit` phase before we even\ncommit. Then in the snapshot do we visit all \"deletions\" and since we\nalready collected all the insertions we know immediately if the deletion\nhad a pair and should therefore get a \"name\" assigned to activate the\nboundary. For ReactFiberApplyGesture we need to assign names to\n\"insertions\" since it's in reverse but we don't already have a map of\ndeletions. Therefore we need to first visit all deletions.\n\nInstead of doing that in a completely separate pass, we instead visit\ndeletions in the same pass to find pairs. Since this is in the same pass\nwe might visit insertions before deletions or vice versa depending on\ndocument order. However, we can deal with this by applying the name to\nthe insertion when we find the deletion if we've already made the clones\nat that point.\n\nApplying names to pure exits, updates or nested (relayout) is a bit more\nstraight-forward.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-14T14:15:39-04:00",
      "committed_date": "2025-03-14T14:15:39-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js"
      ]
    },
    {
      "sha": "c4a3b92e098cf1896939758e7419cbdb0e2f0cf4",
      "short_sha": "c4a3b92",
      "message": "Add more phases to the ReactFiberApplyGesture (#32578)\n\nStacked on #32585 and #32605.\n\nThis adds more loops for the phases of \"Apply Gesture\". It doesn't\nimplement the interesting bit yet like adding view-transition-names and\nmeasurements. I'll do that in a separate PR to keep reviewing easier.\n\nThe three phases of this approach is roughly:\n\n- Clone and apply names to the \"old\" state.\n- Inside startViewTransition: Apply names to the \"new\" state. Measure\nboth the \"old\" and \"new\" state to know whether to cancel some of them.\nDelete the clones which will include all the \"old\" names.\n- After startViewTransition: Restore \"new\" names back to no\nview-transition-name.\n\nSince we don't have any other Effects in these phases we have a bit more\nflexibility and we can avoid extra phases that traverse the tree. I've\ntried to avoid any additional passes.\n\nAn interesting consequence of this approach is that we could measure\nboth the \"old\" and \"new\" state before `startViewTransition`. This would\nbe more efficient because we wouldn't need to take View Transition\nsnapshots of parts of the tree that won't actually animate. However,\nthat would require an extra pass and force layout earlier. It would also\nhave different semantics from the fire-and-forget View Transitions\nbecause we could optimize better which can be visible. It would also not\naccount for any late mutations. So I decided to instead let the layout\nbe computed by painting as usual and then measure both \"old\" and \"new\"\ninside the startViewTransition instead. Then canceling anything that\ndoesn't animate to keep it consistent.\n\nUnfortunately, though there's not a lot of code sharing possible in\nthese phases because the strategy is so different with the cloning and\nbecause the animation is performed in reverse. The \"finishedWork\" Fiber\nrepresents the \"old\" state and the \"current\" Fiber represents the \"new\"\nstate.\n\nThe most complicated phase is the cloning. I actually ended up having to\nmake a very different pattern from the other phases and CommitWork in\ngeneral. Because we have to clone as we go and also do other things like\napply names and finding pairs, it has more phases. I ended up with an\napproach that uses three different loops. The outer one for updated\ntrees, one for inserted trees that don't need cloning (doesn't include\nreappearing offscreen) and one for not updated trees that still need\ncloning. Inside each loop it can also be in different phases which I\ntrack with the `visitPhase` enum - this pattern is kind of new.\n\nAdditionally, we need to measure the cloned nodes after we've applied\nmutations to them and we have to wait until the whole tree is inserted.\nWe don't have a reference to these DOM elements in the Fiber tree since\nthat still refers to the original ones. We need to store the cloned\nelements somewhere. So I added a temporary field on the\nViewTransitionState to keep track of any clones owned by that\nViewTransition.\n\nWhen we deep clone an unchanged subtree we don't have DOM element\ninstances. It wouldn't be quite safe to try to find them from the tree\nstructure. So we need to avoid the deep clones if we might need DOM\nelements. Therefore we keep traversing in the case where we need to find\nnested ViewTransition boundaries that are either potentially affected by\nlayout or a \"pair\".\n\nFor the other two phases the pattern there's a lot of code duplication\nsince it's slightly different from the commit ones but they at least\nfollow the same pattern. For the restore phase I was actually able to\nreuse most of the code.\n\nI don't love how much code this is.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-14T13:20:17-04:00",
      "committed_date": "2025-03-14T13:20:17-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js"
      ]
    },
    {
      "sha": "6daef4e7c8eea99c1b7eb7e451e028c6d7358321",
      "short_sha": "6daef4e",
      "message": "Make xViewTransitionToHostInstances helpers reusable (#32611)\n\nThis prepares from being able to reuse some this in ApplyGesture.\n\nThese all start with resetting a counter but it's tricky to have to\nremember to do this and tricky to do from the outside of this module. So\nwe make an exported helper that does the resetting. Ideally it gets\ninlined.\n\nWe also stop passing \"current\" to measureViewTransitionHostInstances.\nSame thing for cancelViewTransitionHostInstances. This doesn't make\nsense for \"nested\" which has not updated and so might not have an\nalternate. Instead we pass in the old and new name if they might be\ndifferent.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-14T13:16:42-04:00",
      "committed_date": "2025-03-14T13:16:42-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "3e956805e899bff7aea7b19c56e6adaf362cdc2b",
      "short_sha": "3e95680",
      "message": "Gate flushGestureMutations and flushGestureAnimations (#32605)\n\nNormally these are gated by the whole commitGestureOnRoot path but in\nthe case of an early commit these phases may need to be invoked.\nEarlier. Those paths weren't gated which I noticed when I started adding\ncode to them.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-14T13:16:30-04:00",
      "committed_date": "2025-03-14T13:16:30-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "1b6e3dd985c0cfaa4f15fae6fda26f7b57bd25da",
      "short_sha": "1b6e3dd",
      "message": "Merge restoreEnterViewTransitions and restoreExitViewTransitions (#32585)\n\nThis is the exact same code in both cases. It's just general clean up.\n\nBy unifying them it becomes less confusing to reuse these helpers in the\nApply Gesture path where the naming is reversed.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-14T13:16:20-04:00",
      "committed_date": "2025-03-14T13:16:20-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "5398b7115847e87c0053aa719728d8dd1a635ccd",
      "short_sha": "5398b71",
      "message": "[compiler] detect and throw on untransformed required features (#32512)\n\nTraverse program after running compiler transform to find untransformed\nreferences to compiler features (e.g. `inferEffectDeps`, `fire`).\n\nHard error to fail the babel pipeline when the compiler fails to\ntransform these features to give predictable runtime semantics.\nUntransformed calls to functions like `fire` will throw at runtime\nanyways, so let's fail the build to catch these earlier.\n\nNote that with this fails the build *regardless of panicThreshold*",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-14T11:44:49-04:00",
      "committed_date": "2025-03-14T11:44:49-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Babel/BabelPlugin.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/ValidateNoUntransformedReferences.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn-default-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn-default-import.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.callsite-in-non-react-fn.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.non-inlined-effect-fn.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.non-inlined-effect-fn.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-import-default-property-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/todo.import-default-property-useEffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.todo-syntax.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.use-no-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/bailout-retry/error.use-no-memo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/infer-effect-dependencies.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/infer-effect-dependencies.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/todo.import-default-property-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-infer-deps-on-retry.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-infer-deps-on-retry.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-syntax.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.untransformed-fire-reference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.untransformed-fire-reference.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.use-no-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/todo-use-no-memo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/no-fire-todo-syntax-shouldnt-throw.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/no-fire-todo-syntax-shouldnt-throw.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/todo-use-no-memo.expect.md",
        "compiler/packages/eslint-plugin-react-compiler/__tests__/ReactCompilerRule-test.ts"
      ]
    },
    {
      "sha": "f3c956006a90dc68210bd3e19497d10fb9b028d3",
      "short_sha": "f3c9560",
      "message": "[ci] Update node_modules cache path (#32609)\n\nAlternative of #32604.\n\nBust all old caches since I reverted some other changes to the keys.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T22:29:48-04:00",
      "committed_date": "2025-03-13T22:29:48-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_commit_artifacts.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "4eba294c69422ade02f2bb4d6a0255755b406b32",
      "short_sha": "4eba294",
      "message": "[ci] Cache runtime and compiler only for test runs (#32608)\n\nWe only need the compiler built for `yarn test` in the root directory.\nRather than always cache both for every step, let's just do it where\nit's needed explicitly.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32608).\n* #32609\n* __->__ #32608",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T22:21:35-04:00",
      "committed_date": "2025-03-13T22:21:35-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        "package.json",
        "scripts/react-compiler/build-compiler.sh"
      ]
    },
    {
      "sha": "5200721e5c93a59f8af0403d61abe513cb7d32fe",
      "short_sha": "5200721",
      "message": "Revert \"[ci] Update yarn and node_modules cache key (#32603)\" (#32607)\n\nThis reverts commit 67338703aa52d662998733e58671dc9fe1edae47.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32607).\n* #32609\n* #32608\n* __->__ #32607",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T22:14:00-04:00",
      "committed_date": "2025-03-13T22:14:00-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml",
        ".github/workflows/shared_lint.yml",
        "package.json",
        "scripts/react-compiler/build-compiler.sh"
      ]
    },
    {
      "sha": "e9d80d939ee0f6b1d6146eb11917c433a7791d17",
      "short_sha": "e9d80d9",
      "message": "Revert \"[ci] Fix node_modules cache glob (#32604)\" (#32606)\n\nThis reverts commit ef1103d3e92168803000e12d9a27cb7440e5e1c8.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32606).\n* #32609\n* #32608\n* #32607\n* __->__ #32606",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T21:52:46-04:00",
      "committed_date": "2025-03-13T21:52:46-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_commit_artifacts.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "ef1103d3e92168803000e12d9a27cb7440e5e1c8",
      "short_sha": "ef1103d",
      "message": "[ci] Fix node_modules cache glob (#32604)\n\nSeems like the stringified cache path can cause some directories not to\nbe cached, trying an alternative format",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T20:59:27-04:00",
      "committed_date": "2025-03-13T20:59:27-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_commit_artifacts.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "67338703aa52d662998733e58671dc9fe1edae47",
      "short_sha": "6733870",
      "message": "[ci] Update yarn and node_modules cache key (#32603)\n\nNow that the compiler lint rule is merged into\neslint-plugin-react-hooks, we also need to update our caches so compiler\ndependencies are also cached. This should fix the CI walltime regression\nwe are now seeing.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32603).\n* #32604\n* __->__ #32603",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T20:31:04-04:00",
      "committed_date": "2025-03-13T20:31:04-04:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/runtime_releases_from_npm_manual.yml",
        ".github/workflows/shared_lint.yml",
        "package.json",
        "scripts/react-compiler/build-compiler.sh"
      ]
    },
    {
      "sha": "7939d92fcc95ad5ee719c38272eaef14a3750fc0",
      "short_sha": "7939d92",
      "message": "[compiler] clean up retry pipeline: `fireRetry` flag -> compileMode (#32511)\n\nRemoves `EnvironmentConfig.enableMinimalTransformsForRetry` in favor of\n`run` parameters. This is a minimal difference but lets us explicitly\nopt out certain compiler passes based on mode parameters, instead of\nenvironment configurations\n\nRetry flags don't really make sense to have in `EnvironmentConfig`\nanyways as the config is user-facing API, while retrying is a compiler\nimplementation detail.\n\n(per @josephsavona's feedback\nhttps://github.com/facebook/react/pull/32164#issuecomment-2608616479)\n> Re the \"hacky\" framing of this in the PR title: I think this is fine.\nI can see having something like a compilation or output mode that we use\nwhen running the pipeline. Rather than changing environment settings\nwhen we re-run, various passes could take effect based on the\ncombination of the mode + env flags. The modes might be:\n>\n> * Full: transform, validate, memoize. This is the default today.\n> * Transform: Along the lines of the backup mode in this PR. Only\napplies transforms that do not require following the rules of React,\nlike `fire()`.\n> * Validate: This could be used for ESLint.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32511).\n* #32512\n* __->__ #32511",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T19:54:54-04:00",
      "committed_date": "2025-03-13T19:54:54-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/scripts/jest/makeTransform.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferFunctionEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-capitalized-fn-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-capitalized-fn-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-eslint-suppressions.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-eslint-suppressions.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-preserve-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-preserve-memo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-prop-write.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-prop-write.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-ref-current-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-ref-current-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-validate-conditional-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-validate-conditional-hook.js"
      ]
    },
    {
      "sha": "d92e5713be2dc78f467c31fce4a1e5c84a74e4e6",
      "short_sha": "d92e571",
      "message": "[compiler] Avoid bailouts when inserting gating (#32598)\n\nThis change fixes a coverage hole in rolling out with `gating`. Prior to\nthis PR, configuring `gating` causes React Compiler to bail out of\noptimizing some functions.\n\nThis means that it's not entirely safe to cutover from `gating` enabled\nfor all users (i.e. rolled out 100%) to removing the `gating` config\naltogether, as new functions may be opted into compilation when they\nstop bailing out due to gating-specific logic.\n\nThis is technically slightly slower due to the additional function\nindirection. An alternative approach is to recommend running a codemod\nto insert `use no memo`s on currently-bailing out functions before\nremoving the`gating` config.\n\n---\nTested [internally](\nhttps://fburl.com/diff/q982ovua) by enabling on a page that previously\nhad a few hundred bailouts due to gating + hoisted function declarations\nand (1) clicking around locally and (2) running a bunch of e2e tests",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T19:31:49-04:00",
      "committed_date": "2025-03-13T19:31:49-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Gating.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/component-syntax-ref-gating.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/component-syntax-ref-gating.flow.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.component-syntax-ref-gating.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.component-syntax-ref-gating.flow.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.gating-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.gating-hoisting.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.gating-use-before-decl.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/error.gating-use-before-decl.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-use-before-decl-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-use-before-decl-ref.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-use-before-decl.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-use-before-decl.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/invalid-fnexpr-reference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/invalid-fnexpr-reference.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/reassigned-fnexpr-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/reassigned-fnexpr-variable.js"
      ]
    },
    {
      "sha": "93b61fc4ecb34abec2b55c206f34ed22dd340b71",
      "short_sha": "93b61fc",
      "message": "[compiler][ez] Stop bailing out early for hoisted gated functions (#32597)\n\nSome code movement for the next PR\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32597).\n* #32598\n* __->__ #32597",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T19:08:38-04:00",
      "committed_date": "2025-03-13T19:08:38-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Gating.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts"
      ]
    },
    {
      "sha": "77987e5ee370dd40c53a6f026c8026065cc3178c",
      "short_sha": "77987e5",
      "message": "[ci] mkdir before mv (#32602)\n\nMissed this earlier.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T17:46:46-04:00",
      "committed_date": "2025-03-13T17:46:46-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "0df46f01a90f16e771a80cf13dadce3aca091b95",
      "short_sha": "0df46f0",
      "message": "[ci] Update eslint-plugin-react-hooks output location for Meta builds (#32601)\n\nUpdates where this file is output so we can sync it independently to\nanother directory.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T16:54:39-04:00",
      "committed_date": "2025-03-13T16:54:39-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "f457d0b4c6dd70c10acb9c93c7d01c80d8e23b92",
      "short_sha": "f457d0b",
      "message": "[compiler][ez] Only fail gating hoisting check for referenced identifiers (#32596)\n\nReduce false positive bailouts by using the same\n`isReferencedIdentifier` logic that the compiler also uses for\ndetermining context variables and a function's own hoisted declarations.\n\nDetails:\nPreviously, we counted every babel identifier as a reference. This is\nproblematic because babel counts most string symbols as an identifier.\n\n```js\nprint(x);  // x is an identifier as expected\nobj.x      // x is.. also an identifier here\n{x: 2}     // x is also an identifier here\n```\n\nThis PR adds a check for `isReferencedIdentifier`. Note that only\nnon-lval\nreferences pass this check. This should be fine as we don't need to\nhoist function declarations before writes to the same lvalue (which\nshould error in strict mode anyways)\n```js\nprint(x);  // isReferencedIdentifier(x) -> true\nobj.x      // isReferencedIdentifier(x) -> false\n{x: 2}     // isReferencedIdentifier(x) -> false\nx = 2      // isReferencedIdentifier(x) -> false\n```\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32596).\n* __->__ #32596\n* #32595\n* #32594\n* #32593\n* #32522\n* #32521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T12:10:22-04:00",
      "committed_date": "2025-03-13T12:10:22-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-nonreferenced-identifier-collision.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-nonreferenced-identifier-collision.js"
      ]
    },
    {
      "sha": "1c79cb82ab8d3bd1f099115704f28df1097beb46",
      "short_sha": "1c79cb8",
      "message": "[compiler][ez] Move compiler gating tests (#32595)\n\nMove all gating tests to `gating/`\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32595).\n* #32596\n* __->__ #32595\n* #32594\n* #32593\n* #32522\n* #32521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T12:06:48-04:00",
      "committed_date": "2025-03-13T12:06:48-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/arrow-function-expr-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/arrow-function-expr-gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-emit-imports-same-source.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-instrument-forget-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-test-export-function-and-default.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/arrow-function-expr-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/arrow-function-expr-gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-instrument-forget-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-instrument-forget-gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.component-syntax-ref-gating.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.component-syntax-ref-gating.flow.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.gating-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.gating-hoisting.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.gating-use-before-decl.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.gating-use-before-decl.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-access-function-name-in-component.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-access-function-name-in-component.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-preserves-function-properties.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-preserves-function-properties.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-test-export-default-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-test-export-default-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-test-export-function-and-default.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/gating-test-export-function-and-default.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-test-export-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-test-export-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-with-hoisted-type-reference.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating-with-hoisted-type-reference.flow.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-function-expression-React-memo-gating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-function-expression-React-memo-gating.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multi-arrow-expr-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/multi-arrow-expr-export-default-gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multi-arrow-expr-export-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/multi-arrow-expr-export-gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multi-arrow-expr-export-default-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/gating/multi-arrow-expr-gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-no-gating-import-without-compiled-functions.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-no-gating-import-without-compiled-functions.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multi-arrow-expr-export-default-gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multi-arrow-expr-export-gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multi-arrow-expr-gating-test.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "89a46a57df3a3cc309fff937794341ab215e01e9",
      "short_sha": "89a46a5",
      "message": "[compiler][optim] more shapes for mixedreadonly (#32594)\n\n- Add `at`, `indexOf`, and `includes`\n- Optimize MixedReadOnly which is currently only used by hook return\nvalues. Hook return values are typed as Frozen, this change propagates\nthat to return values of aliasing function calls (such as `at`). One\npotential issue is that developers may pass\n`enableAssumeHooksFollowRulesOfReact:false` and set\n`transitiveMixedData`, expecting their transitive mixed data to be\nmutable. This is a bit of an edge case and already doesn't have clear\nsemantics.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32594).\n* #32596\n* #32595\n* __->__ #32594\n* #32593\n* #32522\n* #32521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T11:59:50-04:00",
      "committed_date": "2025-03-13T11:59:50-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts"
      ]
    },
    {
      "sha": "eb53139ee50fe53c85e8ad51b21ad0968c1f782d",
      "short_sha": "eb53139",
      "message": "[compiler][optim] infer mixedReadOnly for numeric and computed properties (#32593)\n\nExpand type inference to infer mixedReadOnly types for numeric and\ncomputed property accesses.\n```js\nfunction Component({idx})\n  const data = useFragment(...)\n  // we want to type `posts` correctly as Array\n  const posts = data.viewers[idx].posts.slice(0, 5);\n  // ...\n}\n```\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32593).\n* #32596\n* #32595\n* #32594\n* __->__ #32593\n* #32522\n* #32521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T11:58:40-04:00",
      "committed_date": "2025-03-13T11:58:40-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Types.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/relay-transitive-mixeddata.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/relay-transitive-mixeddata.js"
      ]
    },
    {
      "sha": "38a76009202e161cb023a92c33052b9dac7daf14",
      "short_sha": "38a7600",
      "message": "[compiler][optim] Add shape for Array.from (#32522)\n\n(see title)\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32522).\n* #32596\n* #32595\n* #32594\n* #32593\n* __->__ #32522\n* #32521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T11:58:17-04:00",
      "committed_date": "2025-03-13T11:58:17-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-arg1-captures-arg0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-arg1-captures-arg0.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-captures-arg0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-captures-arg0.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-maybemutates-arg0.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-from-maybemutates-arg0.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-granular-iterator-semantics.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-type-inference-array-from.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-type-inference-array-from.js"
      ]
    },
    {
      "sha": "ed1264f07701e092ac1a8466611372613d1a0102",
      "short_sha": "ed1264f",
      "message": "[compiler] Patch array and argument spread mutability (#32521)\n\nArray and argument spreads may mutate stateful iterables. Spread sites\nshould have `ConditionallyMutate` effects (e.g. mutate if the ValueKind\nis mutable, otherwise read).\n\nSee\n- [ecma spec (13.2.4.1 Runtime Semantics: ArrayAccumulation.\nSpreadElement : ...\nAssignmentExpression)](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-runtime-semantics-arrayaccumulation).\n- [ecma spec 13.3.8.1 Runtime Semantics:\nArgumentListEvaluation](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-runtime-semantics-argumentlistevaluation)\n\nNote that\n- Object and JSX Attribute spreads do not evaluate iterables (srcs\n[mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#description),\n[ecma](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-runtime-semantics-propertydefinitionevaluation))\n- An ideal mutability inference system could model known collections\n(i.e. Arrays or Sets) as a \"mutated collection of non-mutable objects\"\n(see `todo-granular-iterator-semantics`), but this is not what we do\ntoday. As such, an array / argument spread will always extend the range\nof built-in arrays, sets, etc\n- Due to HIR limitations, call expressions with argument spreads may\ncause unnecessary bailouts and/or scope merging when we know the call\nitself has `freeze`, `capture`, or `read` semantics (e.g.\n`useHook(...mutableValue)`)\nWe can deal with this by rewriting these call instructions to (1) create\nan intermediate array to consume the iterator and (2) capture and spread\nthe array at the callsite\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32521).\n* #32596\n* #32595\n* #32594\n* #32593\n* #32522\n* __->__ #32521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-13T11:58:02-04:00",
      "committed_date": "2025-03-13T11:58:02-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-spread-later-mutated.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-spread-later-mutated.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-array-spread-mutable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-array-spread-mutable-iterator.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/call-spread-argument-mutable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/call-spread-argument-mutable-iterator.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hook-call-spreads-mutable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hook-call-spreads-mutable-iterator.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-nested-method-calls-lower-property-load-into-temporary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-nested-method-calls-lower-property-load-into-temporary.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "ef06b54f8d1d9818806e221974c8b64efbbfda0d",
      "short_sha": "ef06b54",
      "message": "fix: clarify which mobx libs are not compatible with compiler (#32570)\n\n## Summary\n\nRight now, `react-compiler-healthcheck` flags `mobx` as a \"known\nincompatible library\". But it's not precisely *MobX* that's\nincompatible. It's the observer HOC that comes from `mobx-react` and\n`mobx-react-lite`.\n\nI've been working on\n[mst-use-observable](https://github.com/coolsoftwaretyler/mst-use-observable),\nwhich makes MobX-State-Tree compatible with the compiler. However,\nprojects that use `mobx-state-tree` and `mst-use-observable` will still\ndepend on `mobx` as a dependency.\n\nAnd there [have been efforts in the past to write a hook for\nobservability](https://github.com/mobxjs/mobx/discussions/2566). So it's\npossible that MobX could become compatible, so long as authors access it\nwith a hook, rather than the HOC.\n\nI would like to propose updating the health check to be a little more\nprecise and flag the HOC dependencies, rather than MobX itself.\n\nThanks in advance for your consideration!\n\n## How did you test this change?\n\n`npx react-compiler-healthcheck` shouldn't flag on `mobx` in\ndependencies, but will for `mobx-react-lite` and `mobx-react`.\n\nTest suites, formatting, linting, all passed.\n\n---------\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>",
      "author": {
        "name": "Tyler Scott Williams",
        "email": "tyler@coolsoftware.dev"
      },
      "authored_date": "2025-03-13T11:46:26-04:00",
      "committed_date": "2025-03-13T11:46:26-04:00",
      "changed_files": [
        "compiler/packages/react-compiler-healthcheck/src/config.ts"
      ]
    },
    {
      "sha": "1b77c3d7b98f21ec707d3accb441c678dac2803f",
      "short_sha": "1b77c3d",
      "message": "Update DEVELOPMENT_GUIDE.md (#32281)\n\nfix: update CONTRIBUTING.md link path\n\nUpdated the relative path to CONTRIBUTING.md from `../CONTRIBUTING.md`\nto `./../../CONTRIBUTING.md` to ensure the correct file is referenced.\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\n<!--\nExplain the **motivation** for making this change. What existing problem\ndoes the pull request solve?\n-->\n\n## How did you test this change?\n\n<!--\nDemonstrate the code is solid. Example: The exact commands you ran and\ntheir output, screenshots / videos if the pull request changes the user\ninterface.\nHow exactly did you verify that your PR solves the issue you wanted to\nsolve?\n  If you leave this empty, your PR will very likely be closed.\n-->",
      "author": {
        "name": "Mohhamad Hussain",
        "email": "smhnaqvi111@gmail.com"
      },
      "authored_date": "2025-03-13T19:15:26+03:30",
      "committed_date": "2025-03-13T11:45:26-04:00",
      "changed_files": [
        "compiler/docs/DEVELOPMENT_GUIDE.md"
      ]
    },
    {
      "sha": "5ccfcd17ffa0adf9e7f5ba7fbf48e6bf6a4eb67e",
      "short_sha": "5ccfcd1",
      "message": "feat(eslint-plugin-react-hooks): merge rule from eslint-plugin-react-compiler into `react-hooks` plugin (#32416)\n\nThis change merges the `react-compiler` rule from\n`eslint-plugin-react-compiler` into the `eslint-plugin-react-hooks`\nplugin. In order to do the move in a way that keeps commit history with\nthe moved files, but also no remove them from their origin until a\nfuture cleanup change can be done, I did the `git mv` first, and then\nrecreated the files that were moved in their original places, as a\nseparate commit. Unfortunately GH shows the moved files as new instead\nof the ones that are truly new. But in the IDE and `git blame`, commit\nhistory is intact with the moved files.\n\nSince this change adds new dependencies, and one of those dependencies\nhas a higher `engines` declaration for `node` than what the plugin\ncurrently has, this is technically a breaking change and will have to go\nout as part of a major release.\n\n### Related Changes\n- https://github.com/facebook/react/pull/32458\n\n---------\n\nCo-authored-by: Lauren Tan <poteto@users.noreply.github.com>",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T20:43:06-05:00",
      "committed_date": "2025-03-12T21:43:06-04:00",
      "changed_files": [
        "babel.config-react-compiler.js",
        "compiler/apps/playground/yarn.lock",
        "compiler/packages/babel-plugin-react-compiler/tsconfig.json",
        "compiler/packages/babel-plugin-react-compiler/tsup.config.ts",
        "compiler/yarn.lock",
        "fixtures/eslint-v6/yarn.lock",
        "fixtures/eslint-v7/yarn.lock",
        "fixtures/eslint-v8/yarn.lock",
        "fixtures/eslint-v9/yarn.lock",
        "package.json",
        "packages/eslint-plugin-react-hooks/__tests__/ReactCompilerRule-test.ts",
        "packages/eslint-plugin-react-hooks/__tests__/ReactCompilerRuleTypescript-test.ts",
        "packages/eslint-plugin-react-hooks/package.json",
        "packages/eslint-plugin-react-hooks/src/index.ts",
        "packages/eslint-plugin-react-hooks/src/rules/ReactCompiler.ts",
        "packages/eslint-plugin-react-hooks/src/types/hermes-eslint.d.ts",
        "packages/eslint-plugin-react-hooks/src/types/hermes-parser.d.ts",
        "packages/eslint-plugin-react-hooks/tsconfig.json",
        "packages/react-refresh/src/__tests__/__snapshots__/ReactFreshBabelPlugin-test.js.snap",
        "scripts/error-codes/__tests__/__snapshots__/transform-error-messages.js.snap",
        "scripts/jest/config.base.js",
        "scripts/react-compiler/build-compiler.sh",
        "scripts/react-compiler/link-compiler.sh",
        "scripts/rollup/build.js",
        "scripts/rollup/bundles.js",
        "yarn.lock"
      ]
    },
    {
      "sha": "a8ab2bcb627ed7c57d2e116b2e13ad5451259c2b",
      "short_sha": "a8ab2bc",
      "message": "[rollup] Add support for running prebuild commands (#32592)\n\nExtracting portions of #32416 for easier review.\n\nAdds a new `prebuild` option to allow for a prebuild command to be run\nprior to building the bundle.\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32592).\n* __->__ #32592\n* #32591\n* #32590\n* #32589\n* #32588\n\n---------\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T19:12:45-04:00",
      "committed_date": "2025-03-12T19:12:45-04:00",
      "changed_files": [
        "scripts/rollup/build.js"
      ]
    },
    {
      "sha": "8646349aebb514eeef7e01614fb4aeb2f2c7a6c8",
      "short_sha": "8646349",
      "message": "[rollup] Fix codeFrame is not a function (#32591)\n\nExtracting portions of #32416 for easier review.\n\nFixes a small issue where `codeFrame` is not a function when a rollup\nerror was encountered.\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32591).\n* #32592\n* __->__ #32591\n* #32590\n* #32589\n* #32588\n\n---------\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T19:12:33-04:00",
      "committed_date": "2025-03-12T19:12:33-04:00",
      "changed_files": [
        "scripts/rollup/build.js"
      ]
    },
    {
      "sha": "f31779a112f3b5c9e56d651ad59c2db0bc236981",
      "short_sha": "f31779a",
      "message": "[ez] Run Prettier on eslint-plugin-react-compiler/src/types (#32590)\n\nExtracting portions of #32416 for easier review.\n\nThis PR contains small formatting fixes.\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32590).\n* #32592\n* #32591\n* __->__ #32590\n* #32589\n* #32588\n\n---------\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T19:12:22-04:00",
      "committed_date": "2025-03-12T19:12:22-04:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/src/types/hermes-eslint.d.ts",
        "compiler/packages/eslint-plugin-react-compiler/src/types/hermes-parser.d.ts"
      ]
    },
    {
      "sha": "0e2402eb20de53e08fd0a767554f93e5e53af873",
      "short_sha": "0e2402e",
      "message": "Update eslint fixtures (#32589)\n\nExtracting portions of #32416 for easier review.\n\nThis PR lightly updates the build scripts for the eslint fixtures.\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32589).\n* #32592\n* #32591\n* #32590\n* __->__ #32589\n* #32588\n\n---------\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T19:07:51-04:00",
      "committed_date": "2025-03-12T19:07:51-04:00",
      "changed_files": [
        "fixtures/eslint-v6/build.mjs",
        "fixtures/eslint-v7/build.mjs",
        "fixtures/eslint-v8/build.mjs",
        "fixtures/eslint-v9/build.mjs"
      ]
    },
    {
      "sha": "f695f95290aa3560a00e8a3b617205ac9e087e0e",
      "short_sha": "f695f95",
      "message": "Update babel configs used in jest (#32588)\n\nExtracting portions of #32416 for easier review.\n\nThis PR updates our babel configs (only used in jest) to support\nclasses.\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32588).\n* #32592\n* #32591\n* #32590\n* #32589\n* __->__ #32588\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T19:07:39-04:00",
      "committed_date": "2025-03-12T19:07:39-04:00",
      "changed_files": [
        "babel.config-ts.js",
        "babel.config.js",
        "package.json",
        "yarn.lock"
      ]
    },
    {
      "sha": "5de83dcc0f34dc196664cb200088c6253cb2cd34",
      "short_sha": "5de83dc",
      "message": "[playground] Use onMount to check if the editor is available (#32586)\n\nPlayground test flakiness seems to be fixed but adding this as an extra\nprecaution",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T18:27:15-04:00",
      "committed_date": "2025-03-12T18:27:15-04:00",
      "changed_files": [
        "compiler/apps/playground/__tests__/e2e/page.spec.ts",
        "compiler/apps/playground/components/Editor/Input.tsx",
        "compiler/apps/playground/package.json"
      ]
    },
    {
      "sha": "5135f98795d13aeea6f009b537a660c7afbe17ed",
      "short_sha": "5135f98",
      "message": "Add DOM fixture page for Fragment Ref (#32527)\n\nThis adds a page to the DOM fixture to test Fragment Refs. The first\ntest case is for `addEventListener`/`removeEventListener`.\n\nSetting `enableFragmentRefs` to `__EXPERIMENTAL__` and building is\nrequired to run the fixture.\n\n<img width=\"872\" alt=\"Screenshot 2025-03-05 at 12 58 57 PM\"\nsrc=\"https://github.com/user-attachments/assets/fee498b7-fd96-4178-9e82-c46d4cb55c9b\"\n/>",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-03-12T17:49:44-04:00",
      "committed_date": "2025-03-12T17:49:44-04:00",
      "changed_files": [
        "fixtures/dom/src/components/Header.js",
        "fixtures/dom/src/components/fixtures/fragment-refs/index.js",
        "fixtures/dom/src/style.css"
      ]
    },
    {
      "sha": "26bca0005c7ef82a733c23f08baa1e2b8d702ec9",
      "short_sha": "26bca00",
      "message": "[playground] Wait for Monaco to fully load (#32584)\n\nI'm not sure what exactly is causing the flakiness in the playground e2e\ntests but I suspect it's some kind of timing issue.\n\nLet's try waiting for Monaco to be fully initialized before running\ntests.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32584).\n* __->__ #32584\n* #32583",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T17:47:24-04:00",
      "committed_date": "2025-03-12T17:47:24-04:00",
      "changed_files": [
        "compiler/apps/playground/__tests__/e2e/page.spec.ts"
      ]
    },
    {
      "sha": "e0e98d956074f95975a5851a8668fb48f13cb325",
      "short_sha": "e0e98d9",
      "message": "[playground] Update various deps (#32583)\n\nUpdates various deps to align with the rest of the codebase.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32583).\n* #32584\n* __->__ #32583",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T17:47:12-04:00",
      "committed_date": "2025-03-12T17:47:12-04:00",
      "changed_files": [
        "compiler/apps/playground/next-env.d.ts",
        "compiler/apps/playground/package.json",
        "compiler/apps/playground/yarn.lock"
      ]
    },
    {
      "sha": "4ab827b869dfb89f34df1e38beae0d521b960f23",
      "short_sha": "4ab827b",
      "message": "[compiler] Dedupe @babel/types (#32581)\n\nExtracting portions of #32416 for easier review. This PR dedupes\n@babel/types to resolve to 7.26.3, for compatibility in the root\nworkspace where eslint-plugin-react-hooks resides.\n\nI also needed to update @babel/preset-typescript in snap.\n\nThe compiler changes in HIR and ReactiveScopes were needed due to types\nchanging. Notably, Babel [added support for optional chaining\nassignment](https://github.com/babel/babel/pull/15751) (currently [Stage\n1](https://github.com/tc39/proposal-optional-chaining-assignment)), so\nin the latest versions of @babel/types, AssignmentExpression.left can\nnow also be of t.OptionalMemberExpression.\n\nGiven that this is in Stage 1, the compiler probably shouldn't support\nthis syntax, so this PR updates HIR to bailout with a TODO if there is a\nnon LVal on the lhs of an Assignment Expression.\n\nThere was also a small superficial SourceLocation change needed in\n`InferReactiveScopeVariables` as Babel 8 changes were [accidentally\nreleased in\n7](https://github.com/babel/babel/issues/10746#issuecomment-2699146670).\nIt doesn't affect our analysis so it seems fine to just update with the\nnew properties.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32581).\n* #32582\n* __->__ #32581\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T17:02:10-04:00",
      "committed_date": "2025-03-12T17:02:10-04:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/FindContextIdentifiers.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/InferReactiveScopeVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts",
        "compiler/packages/eslint-plugin-react-compiler/package.json",
        "compiler/packages/snap/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "3456b6634abb4a8a2ef500397b94606ce4b6dda7",
      "short_sha": "3456b66",
      "message": "[compiler] Repro for object spread and Array.from with mutable iterators (#32520)\n\nSee newly added test fixtures. Repros fixed in later prs of this stack\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32520).\n* #32522\n* #32521\n* __->__ #32520",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-03-12T15:08:55-04:00",
      "committed_date": "2025-03-12T15:08:55-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-array-spread-mutable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-array-spread-mutable-iterator.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-granular-iterator-semantics.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-granular-iterator-semantics.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-type-inference-array-from.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-type-inference-array-from.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "75c979847f1c6dd954860f17b4dc181ad7c2891e",
      "short_sha": "75c9798",
      "message": "Ignore AbortError for gestures (#32579)\n\nFollow up to #32540.\n\nWe do allow gestures to be cancelled early (we call skipTransition) if\nthe gesture stops before it has even started.\n\nThis happens in the fixture when we auto-scroll.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-12T14:20:35-04:00",
      "committed_date": "2025-03-12T14:20:35-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "6aa8254bb7353fe3096289edc669cf168e9fd190",
      "short_sha": "6aa8254",
      "message": "Add ref to Fragment (#32465)\n\n*This API is experimental and subject to change or removal.*\n\nThis PR is an alternative to\nhttps://github.com/facebook/react/pull/32421 based on feedback:\nhttps://github.com/facebook/react/pull/32421#pullrequestreview-2625382015\n. The difference here is that we traverse from the Fragment's fiber at\noperation time instead of keeping a set of children on the\n`FragmentInstance`. We still need to handle newly added or removed child\nnodes to apply event listeners and observers, so we treat those updates\nas effects.\n\n**Fragment Refs**\n\nThis PR extends React's Fragment component to accept a `ref` prop. The\nFragment's ref will attach to a custom host instance, which will provide\nan Element-like API for working with the Fragment's host parent and host\nchildren.\n\nHere I've implemented `addEventListener`, `removeEventListener`, and\n`focus` to get started but we'll be iterating on this by adding\nadditional APIs in future PRs. This sets up the mechanism to attach refs\nand perform operations on children. The FragmentInstance is implemented\nin `react-dom` here but is planned for Fabric as well.\n\nThe API works by targeting the first level of host children and proxying\nElement-like APIs to allow developers to manage groups of elements or\nelements that cannot be easily accessed such as from a third-party\nlibrary or deep in a tree of Functional Component wrappers.\n\n```javascript\nimport {Fragment, useRef} from 'react';\n\nconst fragmentRef = useRef(null);\n\n<Fragment ref={fragmentRef}>\n  <div id=\"A\" />\n  <Wrapper>\n    <div id=\"B\">\n      <div id=\"C\" />\n    </div>\n  </Wrapper>\n  <div id=\"D\" />\n</Fragment>\n```\n\nIn this case, calling `fragmentRef.current.addEventListener()` would\napply an event listener to `A`, `B`, and `D`. `C` is skipped because it\nis nested under the first level of Host Component. If another Host\nComponent was appended as a sibling to `A`, `B`, or `D`, the event\nlistener would be applied to that element as well and any other APIs\nwould also affect the newly added child.\n\nThis is an implementation of the basic feature as a starting point for\nfeedback and further iteration.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-03-12T10:32:11-04:00",
      "committed_date": "2025-03-12T10:32:11-04:00",
      "changed_files": [
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFragmentRefs-test.js",
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactChildFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "packages/react/src/__tests__/ReactElementValidator-test.internal.js",
        "packages/react/src/__tests__/ReactJSXElementValidator-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "ca8f91f6f6b1b31023eee06c1e2a827ee178b68b",
      "short_sha": "ca8f91f",
      "message": "Log errors from startViewTransition to onRecoverableError (#32540)\n\nWe customize the messages only in DEV to keep it small in prod.\n\nWe skip some messages that are not really errors but more like\ninformation.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-11T23:02:45-04:00",
      "committed_date": "2025-03-11T23:02:45-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js"
      ]
    },
    {
      "sha": "2398554c6034e6d0992fcaa1c2e95f1757cab53e",
      "short_sha": "2398554",
      "message": "[Flight]: Client-side `registerServerReference` must not break `.bind()` (#32565)",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-03-11T22:15:38+01:00",
      "committed_date": "2025-03-11T22:15:38+01:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js"
      ]
    },
    {
      "sha": "0ca3deebcf20d2514771a568e1be08801da5cf85",
      "short_sha": "0ca3dee",
      "message": "[rcr] Fix incorrect output platform (#32569)\n\nAccidentally copypasted the wrong esbuild config.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-11T10:41:48-04:00",
      "committed_date": "2025-03-11T10:41:48-04:00",
      "changed_files": [
        "compiler/packages/react-compiler-runtime/scripts/build.js",
        "compiler/packages/react-compiler-runtime/tsup.config.ts"
      ]
    },
    {
      "sha": "99e1024051f2e6b2d2849b966e2f4354aef2a1d0",
      "short_sha": "99e1024",
      "message": "Check if a child is a new child before calling moveBefore (#32567)\n\nThis fixes a critical issue with moveBefore. I was told that the\ndisconnected -> connected case was going to be relaxed and not be an\nerror but apparently that is not the case.\n\nThis means that we can't use this for initial insertions. Only moves.\n\nUnfortunately React's internals doesn't distinguish these cases. This\nadds a hack that checks each nodes but this is pretty bad for\nperformance. We should only call this in one or the other case.\n\nGiven that we still need feature detection. Both of which means that\nthese calls are no longer inlined and this extra code. I wonder if it's\neven worth it given that you can't even rely on it working anyway since\nnot all browsers have it. Kind of don't want to ship this until all\nbrowsers have it.\n\nEven then we'd ideally refactor React to use separate code paths for\ninitial insertion vs moves. Which leads to some unfortunate code\nduplication.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-10T18:12:43-04:00",
      "committed_date": "2025-03-10T18:12:43-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "696950aa69e3f2ef0d720c82705e02b532904d70",
      "short_sha": "696950a",
      "message": "Enable moveBefore in experimental releases (#32549)\n\nEnabling feature detection of early DOM features in a framework is\nreckless. I'm not judging other frameworks (but also a little bit).\nBecause if you do something like `if (moveBefore) moveBefore(a, b) else\ninsertBefore(a, b)` like we do and then the implementation has to change\nthere are still too many websites out there that it becomes impossible\nto change it. It would break the web. It would instead have to change to\na different name. That's what happened with `contains` -> `includes`.\nCounter to popular belief it didn't have anything to do with patching\nprototypes. Therefore, ideally frameworks shouldn't start rely on it\nuntil there's two implementations so that there's time for feedback.\n\nThat's why we didn't immediately enable this even in experimental.\nHowever, at this point there's probably enough feature detection and it\nhas shipped long enough in Chrome that it's unlikely to be able to\nchange at this point.\n\nWe can enable it now. For now just in `@experimental` to see if we can\nflush out issues with it before bringing it to stable.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-10T15:27:46-04:00",
      "committed_date": "2025-03-10T15:27:46-04:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "a8c2bbdabf561a53b7908c2b341815e64840e8ca",
      "short_sha": "a8c2bbd",
      "message": "Cancel finished view transitions Animations manually in fire-and-forget too (#32545)\n\nOtherwise these can survive into the next View Transition and cause\nhavoc to that transition.\n\nThis was appearing as a flash in Safari in the fixture when going from\nA->B. This triggers a View Transition and at the same time the scroll\nposition updates in an effect. That fires a scroll event which starts a\ngesture. This shouldn't really happen and the SwipeRecognizer should\nideally ignore those but it's good to surface edge cases. That gesture\nis blocked on the View Transition finishing and then immediately after\nit starts a gesture View Transition. That gesture then picked up the\nformer Animation from the previous transition which caused issues. This\nPR fixes that flash.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-10T15:27:37-04:00",
      "committed_date": "2025-03-10T15:27:37-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "50ab2dde940bf0027773a944da005277b3d5598a",
      "short_sha": "50ab2dd",
      "message": "Make renameElementSymbol dynamic for native fb (#32566)\n\nUse variant to begin rolling this out internally.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-03-10T15:24:09-04:00",
      "committed_date": "2025-03-10T15:24:09-04:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js"
      ]
    },
    {
      "sha": "d331ba041142a801f8e2101408221732b0ee7f88",
      "short_sha": "d331ba0",
      "message": "[ci] Fix incorrect condition (#32551)\n\nFixes an incorrect condition for running tests in the compiler\nworkspace.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32551).\n* __->__ #32551\n* #32550",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-07T16:43:38-05:00",
      "committed_date": "2025-03-07T16:43:38-05:00",
      "changed_files": [
        ".github/workflows/compiler_typescript.yml"
      ]
    },
    {
      "sha": "00aa0043c7e32e1c822402edadde6f05535d2075",
      "short_sha": "00aa004",
      "message": "[compiler] Migrate compiler packages to tsup (#32550)\n\nCurrently in the `compiler` workspace, we invoke esbuild directly to\nbuild most packages (with the exception of `snap`). This has been mostly\nfine, but does not allow us to do things like generate type declaration\nfiles.\n\nI would like #32416 to be able to consume the merged\neslint-plugin-react-compiler from source rather than via npm, and one of\nthe things that has come up from my exploration in that stack using the\ncompiler from source is that babel-plugin-react-compiler is missing type\ndeclarations. This is primarily because React's build process uses\nrollup + rollup-plugin-typescript, which runs tsc. So the merged plugin\nneeds to typecheck properly in order to build. An alternative might be\nto migrate to something like babel with rollup instead to simply strip\ntypes rather than typecheck before building. The minor downside of that\napproach is that we would need to manually maintain a d.ts file for\neslint-plugin-react-hooks. For now I would like to see if this PR helps\nus make progress rather than go for the slightly worse alternative.\n\n[`tsup`](https://github.com/egoist/tsup) is esbuild based so build\nperformance is comparable. It is slower when generating d.ts files, but\nit's still much faster than rollup which we used prior to esbuild. For\nnow, I have turned off `dts` by default, and it is only passed when\npublishing on npm.\n\nIf you want to also generate d.ts files you can run `yarn build --dts`.\n\n```\n# BEFORE: build all compiler packages (esbuild)\n$ time yarn build\n\n✨  Done in 15.61s.\nyarn build  13.82s user 1.54s system 96% cpu 15.842 total\n\n# ---\n\n# AFTER: build all compiler packages (tsup)\n$ time yarn build\n\n✨  Done in 12.39s.\nyarn build  12.58s user 1.68s system 106% cpu 13.350 total\n\n# ---\n\n# AFTER: build all compiler packages and type declarations (tsup)\n$ time yarn build --dts\n\n✨  Done in 30.69s.\nyarn build  43.57s user 3.20s system 150% cpu 31.061 total\n```\n\nI still need to test if this unblocks #32416 but this stack can be\nlanded independently though as we could probably just release type\ndeclarations on npm. No one should be using the compiler directly, but\nif they really wanted to, lack of type declarations would not stop them\n(cf React secret internals).\n\nNote that I still kept esbuild as we still use it directly for forgive.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32550).\n* #32551\n* __->__ #32550",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-07T16:41:55-05:00",
      "committed_date": "2025-03-07T16:41:55-05:00",
      "changed_files": [
        "compiler/apps/playground/next-env.d.ts",
        "compiler/apps/playground/playwright.config.js",
        "compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/scripts/build.js",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Reanimated.ts",
        "compiler/packages/babel-plugin-react-compiler/tsconfig.json",
        "compiler/packages/babel-plugin-react-compiler/tsup.config.ts",
        "compiler/packages/eslint-plugin-react-compiler/package.json",
        "compiler/packages/eslint-plugin-react-compiler/scripts/build.js",
        "compiler/packages/eslint-plugin-react-compiler/src/index.ts",
        "compiler/packages/eslint-plugin-react-compiler/tsconfig.json",
        "compiler/packages/eslint-plugin-react-compiler/tsup.config.ts",
        "compiler/packages/make-read-only-util/package.json",
        "compiler/packages/make-read-only-util/scripts/build.js",
        "compiler/packages/make-read-only-util/tsup.config.ts",
        "compiler/packages/react-compiler-healthcheck/package.json",
        "compiler/packages/react-compiler-healthcheck/scripts/build.js",
        "compiler/packages/react-compiler-healthcheck/tsup.config.ts",
        "compiler/packages/react-compiler-runtime/package.json",
        "compiler/packages/react-compiler-runtime/tsup.config.ts",
        "compiler/scripts/release/shared/build-packages.js",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "cc680065c33739cc4c8cd2e8a67312b0c16a6ccc",
      "short_sha": "cc68006",
      "message": "Fix asserts caused by OffscreenComponent rendering in React Native with passChildrenWhenCloningPersistedNodes (#32528)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\n<!--\nExplain the **motivation** for making this change. What existing problem\ndoes the pull request solve?\n-->\n\nThis PR fixes asserts when `passChildrenWhenCloningPersistedNodes` is\nenabled for React Native and OffscreenComponent child rendering unhides\nhost components.\n\nDiscussions around possible fixes for the asserts seen in React Native\nsuggested changing the way we handle hiding/unhiding host components by\nupdating the fiber state with the hidden host component instead of\nsubmitting a hidden clone Fabric and keeping the original as the current\nfiber.\n\nImplementing this fix would require holding onto the original styling of\nthe hidden host component. The reconciler updates the styling by adding\n`display: none` to hide the contents. If the original host component was\nalready hidden, the renderer would lose that information and remove the\nstyling when showing the contents again.\n\nTo reduce the changes required to make\n`passChildrenWhenCloningPersistedNodes` work, this PR falls back to the\noriginal cloning method when OffscreenComponents are part of the\nchildren needed to be added back. This effectively resolve the asserts\ntriggered by the feature in RN and improves overall performance.\n\n## How did you test this change?\n\n<!--\nDemonstrate the code is solid. Example: The exact commands you ran and\ntheir output, screenshots / videos if the pull request changes the user\ninterface.\nHow exactly did you verify that your PR solves the issue you wanted to\nsolve?\n  If you leave this empty, your PR will very likely be closed.\n-->\n\nThis fix was tested by enabling `passChildrenWhenCloningPersistedNodes`\nin an app built with React Native that had a repro for triggering the\nasserts. The asserts do not occur anymore when using the changes in this\nPR.\n\n---------\n\nCo-authored-by: Nick <lefever@meta.com>",
      "author": {
        "name": "Nick Lefever",
        "email": "lenaic.lefever@gmail.com"
      },
      "authored_date": "2025-03-07T18:03:59+01:00",
      "committed_date": "2025-03-07T17:03:59+00:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCompleteWork.js"
      ]
    },
    {
      "sha": "f9d78089c6ec8dce3a11cdf135d6d27b7a8dc1c5",
      "short_sha": "f9d7808",
      "message": "[flags] make enableComponentPerformanceTrack dynamic (#32359)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-06T14:00:12-05:00",
      "committed_date": "2025-03-06T14:00:12-05:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "562f17efab5c39b461ec100898c9a26b54c931e4",
      "short_sha": "562f17e",
      "message": "docs(eslint-plugin-react-hooks): add changelog for 5.1.0 & 5.2.0 (#32536)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\n<!--\nExplain the **motivation** for making this change. What existing problem\ndoes the pull request solve?\n-->\n\nAdds changelog entries for the last two minor releases of\n`eslint-plugin-react-hooks`. Fixes #31717.\n\nI chose to not include #31208 (838258144652ab2ef0cbe54d03e9bdd454348d48)\nand #32115 (fd2d2799840d9066a752bb32bbbb07c93f64a891) in the changelog\nas they only changed internals that do not affect consumers of the\nplugin, and it doesn't seem like the changelog previously included such\nchanges.\n\nChanges are sorted by importance (rather than by commit date), with the\nmost important changes first.\n\n## How did you test this change?\n\n<!--\nDemonstrate the code is solid. Example: The exact commands you ran and\ntheir output, screenshots / videos if the pull request changes the user\ninterface.\nHow exactly did you verify that your PR solves the issue you wanted to\nsolve?\n  If you leave this empty, your PR will very likely be closed.\n-->\n\nDocs only, nothing to test.",
      "author": {
        "name": "Mathias Stang",
        "email": "mathias.stang@gmail.com"
      },
      "authored_date": "2025-03-06T19:58:39+01:00",
      "committed_date": "2025-03-06T13:58:39-05:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/CHANGELOG.md"
      ]
    },
    {
      "sha": "9e9b54d7f6c67b452c969abb98f4f7637ed72f56",
      "short_sha": "9e9b54d",
      "message": "[compiler] Make CompilerError compatible with reflection (#32539)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-06T13:06:36-05:00",
      "committed_date": "2025-03-06T13:06:36-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/CompilerError.ts"
      ]
    },
    {
      "sha": "029e8bd618af23fbdd9efdac565ad81f7d4640d8",
      "short_sha": "029e8bd",
      "message": "Add Owner Stack to attribute hydration mismatches (#32538)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-03-06T17:12:50+01:00",
      "committed_date": "2025-03-06T17:12:50+01:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js",
        "packages/react-dom/src/__tests__/ReactDOMRoot-test.js",
        "packages/react-dom/src/__tests__/ReactDOMSingletonComponents-test.js",
        "packages/react-dom/src/__tests__/ReactRenderDocument-test.js",
        "packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js",
        "packages/react-reconciler/src/ReactFiberHydrationContext.js"
      ]
    },
    {
      "sha": "e81fcfe3f201a8f626e892fb52ccbd0edba627cb",
      "short_sha": "e81fcfe",
      "message": "[Flight] Expose registerServerReference from the client builds (#32534)\n\nThis is used to register Server References that exist in the current\nenvironment but also exists in the server it might call into. Such as a\nremote server.\n\nIf the value comes from the remote server in the first place then this\nis called automatically to ensure that you can pass a reference back to\nwhere it came from - even if the `serverModuleMap` option is used. This\nwas already the case when `serverModuleMap` wasn't passed. This is how\nyou can pass server references back to the server. However, when we\nadded `serverModuleMap` that pass was skipped because we were getting\nreal functions instead of proxies.\n\nFor functions that wasn't yet passed from the remote server to the\ncurrent server, we can register them eagerly just like we do for\n`import('/server').registerServerReference()`. You can now also do this\nwith `import('/client').registerServerReference()`. We could make them\nshared so you only have to do this once but it might not be possible to\npass to the remote server and the remote server might not even be the\nsame RSC renderer. Therefore I split them. It's up to the compiler\nwhether it should do that or not. It has to know that any function you\nmight call might be able to receive it. This is currently global to a\nspecific RSC renderer.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-05T22:16:56-05:00",
      "committed_date": "2025-03-05T22:16:56-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-server-dom-esm/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-esm/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMReplyEdge-test.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server/src/ReactFlightReplyServer.js"
      ]
    },
    {
      "sha": "aac177c48439ab294f72e8b5a85059daa3f8a5ee",
      "short_sha": "aac177c",
      "message": "Support beforetoggle/toggle events for dialog (#32479)",
      "author": {
        "name": "Keith Cirkel",
        "email": "keithamus@users.noreply.github.com"
      },
      "authored_date": "2025-03-05T18:45:16+00:00",
      "committed_date": "2025-03-05T19:45:16+01:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom/src/__tests__/ReactDOMEventPropagation-test.js"
      ]
    },
    {
      "sha": "6b1ae49571b97b15177bda7c1e39a87b42331da9",
      "short_sha": "6b1ae49",
      "message": "[ez] Remove unused netlify.toml (#32530)\n\nI don't think this is in use anymore",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-03-05T12:24:45-05:00",
      "committed_date": "2025-03-05T12:24:45-05:00",
      "changed_files": [
        "netlify.toml"
      ]
    },
    {
      "sha": "e03ac20f942124bb3989b3bb58bb7b9bf91a7860",
      "short_sha": "e03ac20",
      "message": "Set direction in animate call directly (#32523)\n\nSetting the animation's currentTime causes a quirk where the transition\ncan end up off by a bit and the end state can be slightly off the end\ntime.\n\nHowever, I realized that we don't have to because if we just set the\ndirection in the `animate()` call directly the Safari bug goes away.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-05T09:33:06-05:00",
      "committed_date": "2025-03-05T09:33:06-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "e9252bcdccf7f8f691081e4d48ca47657bc723f9",
      "short_sha": "e9252bc",
      "message": "During a Swipe Gesture Render a Clone Offscreen and Animate it Onscreen (#32500)\n\nThis is really the essence mechanism of the `useSwipeTransition`\nfeature.\n\nWe don't want to immediately switch to the destination state when\nstarting a gesture. The effects remain mounted on the current state. We\nwant the current state to be \"live\". This is important to for example\nallow a video to keeping playing while starting a swipe (think\nTikTok/Reels) and not stop until you've committed the action. The only\nthing that can be live is the \"new\" state. Therefore we treat the\ndestination as the \"old\" state and perform a reverse animation from\nthere.\n\nIdeally we could apply the old state to the DOM tree, take a snapshot\nand then revert it back in the mutation of `startViewTransition`.\nUnfortunately, the way `startViewTransition` was designed it always\npaints one frame of the \"old\" state which would lead this to cause a\nflicker.\n\nTo work around this, we need to create a clone of any View Transition\nboundary that might be mutated and then render that offscreen. That way\nwe can render the \"current\" state on screen and the \"destination\" state\noffscreen for the screenshots. Being mutated can be either due to React\ndoing a DOM mutation or if a child boundary resizes that causes the\nparent to relayout. We don't have to do this for insertions or deletions\nsince they only appear on one side.\n\nThe worst case scenario is that we have to clone the whole root. That's\nwhat this first PR implements. We clone the container and if it's not\nabsolutely positioned, we position it on top of the current one. If the\ncontainer is `document` or `<html>` we instead clone the `<body>` tag\nsince it's the only one we can insert a duplicate of. If the container\nis deep in the tree we clone just that even though technically we should\nprobably clone the whole document in that case. We just keep the impact\nsmaller. Ideally though we'd never hit this case. In fact, if we clone\nthe document we issue a warning (always for now) since you probably\nshould optimize this. In the future I intend to add optimizations when\naffected View Transition boundaries are absolutely positioned since they\ncannot possibly relayout the parent. This would be the ideal way to use\nthis feature most efficiently but it still works without it.\n\nSince we render the \"old\" state outside the viewport, we need to then\nadjust the animation to put it back into the viewport. This is the\ntrickiest part to get right while still preserving any customization of\nthe View Transitions done using CSS. This current approach reapplies all\nthe animations with adjusted keyframes.\n\nIn the case of an \"exit\" the pseudo-element itself is positioned outside\nthe viewport but since we can't programmatically update the style of the\npseudo-element itself we instead adjust all the keyframes to put it back\ninto the viewport. If there is no animation on the group we add one.\n\nIn the case of an \"update\" the pseudo-element is positioned on the new\nstate which is already inside the viewport. However, the auto-generated\nanimation of the group has a starting keyframe that starts outside the\nviewport. In this case we need to adjust that keyframe.\n\nIn the future I might explore a technique that inserts stylesheets\ninstead of mutating the animations. It might be simpler. But whatever\nhacks work to maximize the compatibility is best.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-04T20:10:08-05:00",
      "committed_date": "2025-03-04T20:10:08-05:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoMutation.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "e0fe3479671555e01531dbc3d2fd85d5bd4c5a56",
      "short_sha": "e0fe347",
      "message": "[flags] remove enableOwnerStacks (#32426)\n\nBassed off: https://github.com/facebook/react/pull/32425\n\nWait to land internally.\n\n[Commit to\nreview.](https://github.com/facebook/react/pull/32426/commits/66aa6a4dbb78106b4f3d3eb367f5c27eb8f30c66)\n\nThis has landed everywhere",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-04T12:34:34-05:00",
      "committed_date": "2025-03-04T12:34:34-05:00",
      "changed_files": [
        "packages/internal-test-utils/__tests__/ReactInternalTestUtils-test.js",
        "packages/internal-test-utils/consoleMock.js",
        "packages/react-cache/src/__tests__/ReactCacheOld-test.internal.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js",
        "packages/react-devtools-shared/src/backend/profilingHooks.js",
        "packages/react-dom-bindings/src/client/validateDOMNesting.js",
        "packages/react-dom-bindings/src/events/DOMPluginEventSystem.js",
        "packages/react-dom/src/__tests__/ReactChildReconciler-test.js",
        "packages/react-dom/src/__tests__/ReactComponent-test.js",
        "packages/react-dom/src/__tests__/ReactCompositeComponent-test.js",
        "packages/react-dom/src/__tests__/ReactDOM-test.js",
        "packages/react-dom/src/__tests__/ReactDOMComponent-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFiber-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-dom/src/__tests__/ReactDOMForm-test.js",
        "packages/react-dom/src/__tests__/ReactDOMOption-test.js",
        "packages/react-dom/src/__tests__/ReactDOMSelect-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationElements-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerLifecycles-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMSingletonComponents-test.js",
        "packages/react-dom/src/__tests__/ReactDeprecationWarnings-test.js",
        "packages/react-dom/src/__tests__/ReactErrorBoundaries-test.internal.js",
        "packages/react-dom/src/__tests__/ReactFunctionComponent-test.js",
        "packages/react-dom/src/__tests__/ReactLegacyCompositeComponent-test.js",
        "packages/react-dom/src/__tests__/ReactLegacyContextDisabled-test.internal.js",
        "packages/react-dom/src/__tests__/ReactLegacyErrorBoundaries-test.internal.js",
        "packages/react-dom/src/__tests__/ReactMultiChild-test.js",
        "packages/react-dom/src/__tests__/ReactServerRendering-test.js",
        "packages/react-dom/src/__tests__/ReactUpdates-test.js",
        "packages/react-dom/src/__tests__/validateDOMNesting-test.js",
        "packages/react-markup/src/__tests__/ReactMarkupClient-test.js",
        "packages/react-markup/src/__tests__/ReactMarkupServer-test.js",
        "packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js",
        "packages/react-native-renderer/src/legacy-events/EventPluginUtils.js",
        "packages/react-reconciler/src/ReactChildFiber.js",
        "packages/react-reconciler/src/ReactCurrentFiber.js",
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberComponentStack.js",
        "packages/react-reconciler/src/ReactFiberErrorLogger.js",
        "packages/react-reconciler/src/__tests__/ErrorBoundaryReconciliation-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactErrorStacks-test.js",
        "packages/react-reconciler/src/__tests__/ReactFragment-test.js",
        "packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactIncremental-test.js",
        "packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactIncrementalErrorLogging-test.js",
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactMemo-test.js",
        "packages/react-reconciler/src/__tests__/ReactOwnerStacks-test.js",
        "packages/react-reconciler/src/__tests__/ReactUse-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server/src/ReactFizzComponentStack.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react/index.fb.js",
        "packages/react/src/ReactOwnerStack.js",
        "packages/react/src/ReactServer.fb.js",
        "packages/react/src/__tests__/ReactChildren-test.js",
        "packages/react/src/__tests__/ReactCoffeeScriptClass-test.coffee",
        "packages/react/src/__tests__/ReactContextValidator-test.js",
        "packages/react/src/__tests__/ReactCreateElement-test.js",
        "packages/react/src/__tests__/ReactCreateRef-test.js",
        "packages/react/src/__tests__/ReactES6Class-test.js",
        "packages/react/src/__tests__/ReactElementValidator-test.internal.js",
        "packages/react/src/__tests__/ReactJSXElementValidator-test.js",
        "packages/react/src/__tests__/ReactJSXRuntime-test.js",
        "packages/react/src/__tests__/ReactStrictMode-test.js",
        "packages/react/src/__tests__/ReactTypeScriptClass-test.ts",
        "packages/react/src/__tests__/createReactClassIntegration-test.js",
        "packages/react/src/__tests__/forwardRef-test.js",
        "packages/react/src/jsx/ReactJSXElement.js",
        "packages/shared/ReactComponentInfoStack.js",
        "packages/shared/ReactComponentStackFrame.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "packages/shared/isValidElementType.js",
        "scripts/jest/setupTests.www.js",
        "scripts/jest/setupTests.xplat.js"
      ]
    },
    {
      "sha": "d48c69246c9acd3b39c1eec4f3c12103e95cdd66",
      "short_sha": "d48c692",
      "message": "[flags] make enableScrollEndPolyfill dynamic (#32517)\n\nWill roll this out in www",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-03-04T11:55:34-05:00",
      "committed_date": "2025-03-04T11:55:34-05:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "443b7ff2a8437f7736491ae7136c21d75d5a2019",
      "short_sha": "443b7ff",
      "message": "docs(eslint-plugin-react-hooks): clarify config details for prior versions (#32498)\n\nThis change adds more details about prior versions of the plugin's\nconfig, to help people as they migrate from legacy to flat configs\nacross multiple versions of this plugin. At some point in the 6.0 or 7.0\ncycle, it would probably make sense to re-consolidate this into a single\nversion.\n\nCloses #32494",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-03-03T19:57:05-06:00",
      "committed_date": "2025-03-03T20:57:05-05:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/README.md"
      ]
    },
    {
      "sha": "d4e24b349e6530a8e6c95d79ad40b32f93b47070",
      "short_sha": "d4e24b3",
      "message": "[autodeps] Do not include nonreactive refs or setStates in inferred deps (#32236)",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-03-03T15:26:57-05:00",
      "committed_date": "2025-03-03T15:26:57-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/helper-nonreactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/helper-nonreactive.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/infer-effect-dependencies.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-setState.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/nonreactive-setState.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-ref.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-setState.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/reactive-setState.js"
      ]
    },
    {
      "sha": "bdce84a53960c267f92a08241dc7b1924f30be55",
      "short_sha": "bdce84a",
      "message": "[autodeps] Support namespaces (#32162)\n\nSummary: Correctly supports React.useEffect when React is\nimported as `import * as React from 'react'`\n(as well as other namespaces as specified in the config).",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-03-03T15:20:41-05:00",
      "committed_date": "2025-03-03T15:20:41-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/import-namespace-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/import-namespace-useEffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/todo-import-namespace-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies/todo-import-namespace-useEffect.js"
      ]
    },
    {
      "sha": "a1f157e9a9b7f90fce9d696add6cee04a6fb5260",
      "short_sha": "a1f157e",
      "message": "[compiler][ez] Add validation for auto-deps config (#31813)\n\nnumRequiredArgs has to be more than 0 and the pass depends on that\n\n--",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-03-03T14:39:03-05:00",
      "committed_date": "2025-03-03T14:39:03-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/envConfig-test.ts"
      ]
    },
    {
      "sha": "605a880c8c5191e9f8c52468458709cd17a486c1",
      "short_sha": "605a880",
      "message": "Polyfill onScrollEnd Event in Safari (#32427)\n\nWe added support for `onScrollEnd` in #26789 but it only works in Chrome\nand Firefox. Safari still doesn't support `scrollend` and there's no\nindication that they will anytime soon so this polyfills it.\n\nWhile I don't particularly love our synthetic event system this tries to\nstay within the realm of how our other polyfills work. This implements\nall `onScrollEnd` events as a plugin.\n\nThe basic principle is to first feature detect the `onscrollend` DOM\nproperty to see if there's native support and otherwise just use the\nnative event.\n\nThen we listen to `scroll` events and set a timeout. If we don't get any\nmore scroll events before the timeout we fire `onScrollEnd`. Basically\ndebouncing it. If we're currently pressing down on touch or a mouse then\nwe wait until it is lifted such as if you're scrolling with a finger or\nusing the scrollbars on desktop but isn't currently moving.\n\nIf we do get any native events even though we're in polyfilling mode, we\nuse that as an indication to fire the `onScrollEnd` early.\n\nPart of the motivation is that this becomes extra useful pair for\nhttps://github.com/facebook/react/pull/32422. We also probably need\nthese events to coincide with other gesture related internals so you're\nbetter off using our polyfill so they're synced.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-03T14:24:37-05:00",
      "committed_date": "2025-03-03T14:24:37-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom-bindings/src/client/ReactDOMComponentTree.js",
        "packages/react-dom-bindings/src/events/DOMEventProperties.js",
        "packages/react-dom-bindings/src/events/DOMPluginEventSystem.js",
        "packages/react-dom-bindings/src/events/plugins/ScrollEndEventPlugin.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "2980f27779cf37a9656b25418a3c5cfca989e244",
      "short_sha": "2980f27",
      "message": "Add a shorthand for building the view-transition fixture (#32496)\n\nI end up rebuilding for testing the view-transition fixture a lot. It\ndoesn't need everything that flight needs so this just adds a short hand\nthat's a little faster to rebuild.\n\n---------\n\nCo-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-03-01T18:26:48-05:00",
      "committed_date": "2025-03-01T18:26:48-05:00",
      "changed_files": [
        "package.json"
      ]
    },
    {
      "sha": "eda36a1c75ff8ac09fb127f6e04d4af16e49f50f",
      "short_sha": "eda36a1",
      "message": "[ci] Don't erroneously mark failures as successes (#32493)\n\nRandomly noticed this when I looked at a recent [DevTools regression\ntest run](https://github.com/facebook/react/actions/runs/13578385011).\n\nI don't recall why we added `continue-on-error` previously, but I\nbelieve it was to keep all jobs in the matrix running even if one were\nto fail, in order to fully identify any failures from code changes like\nbuild or test failures.\n\nThere is now a `fail-fast` option which does this.\n[`continue-on-error`](https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idcontinue-on-error)\nnow means:\n\n> Prevents a workflow run from failing when a job fails. Set to true to\nallow a workflow run to pass when this job fails.\n\nso it's not correct to use it.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-28T13:06:40-05:00",
      "committed_date": "2025-02-28T13:06:40-05:00",
      "changed_files": [
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_eslint_plugin_e2e.yml"
      ]
    },
    {
      "sha": "ca12911d1fbe755b9b2b7d1bf548589317311a82",
      "short_sha": "ca12911",
      "message": "feat(eslint-plugin-react-hooks): make flat config the `recommended` config (#32457)\n\nThis change swaps which config `recommended` is aliasing. In 5.2.0, the\nnew flat config was introduced as `recommended-latest`, while\n`recommended` still pointed at the legacy rc-based config, with a note\nthat in the next major version `recommended` would be updated to point\nat `recommend-latest`. This change makes that swap, and make the default\n`recommended` experience the flat config. To continue using the legacy\nrc recommended config, please make the following change in your config\n\n```diff\n- extends: ['plugin:react-hooks/recommended']\n+ extends: ['plugin:react-hooks/recommended-legacy']\n```\n\nThis change also deprecates `recommended-latest` in favor of\n`recommended`. `recommended-latest` will be removed in a future major\nversion.\n\nThe README has been updated to reflect the new usage, and to put the\nflat config sections before the legacy config sections.\n\nI also took the opportunity to change the v9 fixture to use a typescript\nconfig, serving as a demonstration for usage as well as a way to\nvalidate the types are correct.\n\nBREAKING CHANGE\n\n---------\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-02-28T10:22:08-06:00",
      "committed_date": "2025-02-28T11:22:08-05:00",
      "changed_files": [
        "fixtures/eslint-v9/eslint.config.mjs",
        "fixtures/eslint-v9/package.json",
        "fixtures/eslint-v9/tsconfig.json",
        "fixtures/eslint-v9/yarn.lock",
        "packages/eslint-plugin-react-hooks/README.md",
        "packages/eslint-plugin-react-hooks/src/index.ts"
      ]
    },
    {
      "sha": "d55cc79bcf5cd3bd4cb406381b067d72842f368e",
      "short_sha": "d55cc79",
      "message": "refactor(eslint-plugin-react-hooks): move rules to `rules` folder (#32411)\n\nSince the compiler plugin is going to be merged into the hooks plugin,\nand ultimately decomposed into several more rules, it would be good to\nstart creating a more traditional folder structure for the plugin. This\nchange just moves the rules into a `rules` folder.\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-02-28T10:12:10-06:00",
      "committed_date": "2025-02-28T11:12:10-05:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/README.md",
        "packages/eslint-plugin-react-hooks/src/index.ts",
        "packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.ts",
        "packages/eslint-plugin-react-hooks/src/RulesOfHooks.ts"
      ]
    },
    {
      "sha": "11ca4f6b6934292168f49cc78d3b2360a602febe",
      "short_sha": "11ca4f6",
      "message": "feat(eslint-plugin-react-hooks): update `engines` declaration (#32458)\n\nIn preparation for the merging of the compiler plugin into this one\n(#32416), this change proactively updates the plugin's `engines`\ndeclaration to require Node versions greater than or equal to 18\n\nBREAKING CHANGE\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-02-28T10:07:13-06:00",
      "committed_date": "2025-02-28T11:07:13-05:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/package.json"
      ]
    },
    {
      "sha": "56c7d1070aabe42b955ea0006477ea1ca02dd0c5",
      "short_sha": "56c7d10",
      "message": "[ci] Upload release for easier debugging (#32492)\n\nUploads the releases that were published in case to help with debugging\nor verifying a dry run.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32492).\n* __->__ #32492\n* #32491",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-28T10:58:39-05:00",
      "committed_date": "2025-02-28T10:58:39-05:00",
      "changed_files": [
        ".github/workflows/runtime_releases_from_npm_manual.yml"
      ]
    },
    {
      "sha": "7e2ea902f839264fd327b0df5fae4f6ad8359952",
      "short_sha": "7e2ea90",
      "message": "[ci] Fix discord notification title (#32491)\n\nfun times\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32491).\n* #32492\n* __->__ #32491",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-28T10:58:28-05:00",
      "committed_date": "2025-02-28T10:58:28-05:00",
      "changed_files": [
        ".github/workflows/runtime_releases_from_npm_manual.yml"
      ]
    },
    {
      "sha": "3607f4838a8f4a87160da36aa26bb1432d7a5f11",
      "short_sha": "3607f48",
      "message": "Add Commit Scaffolding for Gestures (#32451)\n\nThis adds a `ReactFiberApplyGesture` which is basically intended to be a\nfork of the phases in `ReactFiberCommitWork` except for the fake commit\nthat `useSwipeTransition` does. So far none of the phases are actually\nimplemented yet. This is just the scaffolding around them so I can fill\nthem in later.\n\nThe important bit is that we call `startViewTransition` (via the\n`startGestureTransition` Config) when a gesture starts. We add a paused\nanimation to prevent the transition from committing (even if the\nScrollTimeline goes to 100%). This also locks the documents so that we\ncan't commit any other Transitions until it completes.\n\nWhen the gesture completes (scroll end) then we stop the gesture View\nTransition. If there's no new work scheduled we do that immediately but\nif there was any new work already scheduled, then we assume that this\nwill potentially commit the new state. So we wait for that to finish.\nThis lets us lock the animation in its state instead of snapping back\nand then applying the real update.\n\nUsing this technique we can't actually run a View Transition from the\ncurrent state to the actual committed state because it would snap back\nto the beginning and then run the View Transition from there. Therefore\nany new commit needs to skip View Transitions even if it should've\ntechnically animated to that state. We assume that the new state is the\nsame as the optimistic state you already swiped to. An alternative to\nthis technique could be to commit the optimistic state when we cancel\nand then apply any new updates o top of that. I might explore that in\nthe future.\n\nRegardless it's important that the `action` associated with the swipe\nschedules some work before we cancel. Otherwise it risks reverting\nfirst. So I had to update this in the fixture.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-02-27T16:45:18-05:00",
      "committed_date": "2025-02-27T16:45:18-05:00",
      "changed_files": [
        "fixtures/view-transition/src/components/SwipeRecognizer.js",
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberApplyGesture.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoMutation.js",
        "packages/react-reconciler/src/ReactFiberGestureScheduler.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js"
      ]
    },
    {
      "sha": "5eb20b3007a8fafaf032c2e028c335ab09217d9f",
      "short_sha": "5eb20b3",
      "message": "[ci] Fix --dry not being passed correctly (#32489)\n\nBoolean params for dry runs are true if the param exists at all, so only\nadd it if we're in dry run mode.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-27T16:01:31-05:00",
      "committed_date": "2025-02-27T16:01:31-05:00",
      "changed_files": [
        ".github/workflows/runtime_releases_from_npm_manual.yml"
      ]
    },
    {
      "sha": "4c9392b43e9f39e17c18ef1c2cd0f0a14e85669c",
      "short_sha": "4c9392b",
      "message": "[ci] Prepare publish workflow (#32488)\n\nFixes up a few things in the script and workflow to make it possible to\nrun in CI without interactive prompts.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-27T15:24:57-05:00",
      "committed_date": "2025-02-27T15:24:57-05:00",
      "changed_files": [
        ".github/workflows/runtime_releases_from_npm_manual.yml",
        "scripts/release/prepare-release-from-npm-commands/confirm-stable-version-numbers.js",
        "scripts/release/prepare-release-from-npm-commands/guess-stable-version-numbers.js",
        "scripts/release/prepare-release-from-npm-commands/parse-params.js",
        "scripts/release/prepare-release-from-npm-commands/update-stable-version-numbers.js",
        "scripts/release/prepare-release-from-npm.js",
        "scripts/release/publish-commands/confirm-version-and-tags.js",
        "scripts/release/publish-commands/publish-to-npm.js",
        "scripts/release/publish.js"
      ]
    },
    {
      "sha": "227e8414cc5af227b5de339cace2447d4a81c995",
      "short_sha": "227e841",
      "message": "[ci] Add workflow to publish releases (#32487)\n\nAdds a new workflow to publish runtime releases from NPM. Note that I\ncommented out the actual publish command so I can test it out first.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-27T13:07:52-05:00",
      "committed_date": "2025-02-27T13:07:52-05:00",
      "changed_files": [
        ".github/workflows/runtime_releases_from_npm_manual.yml"
      ]
    },
    {
      "sha": "2df96224779237f532ca64c8c7e8a8605c06f067",
      "short_sha": "2df9622",
      "message": "[release] Update publishing scripts to make publishing allowlisted packages easier (#32486)\n\nIt's getting unwieldy to list every single package to skip in these\ncommands when you only want to publish one, ie\neslint-plugin-react-hooks.\n\nThis adds a new `onlyPackages` and `publishVersion` option to the\npublish commands to make that easier.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-27T11:24:30-05:00",
      "committed_date": "2025-02-27T11:24:30-05:00",
      "changed_files": [
        "scripts/release/prepare-release-from-npm-commands/parse-params.js",
        "scripts/release/prepare-release-from-npm.js",
        "scripts/release/publish-commands/parse-params.js",
        "scripts/release/publish.js"
      ]
    },
    {
      "sha": "ebc22ef7e15bf38dc91b7033782cedc2f43f7d6e",
      "short_sha": "ebc22ef",
      "message": "[forgive][ez] Ignore test file (#32477)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-25T19:09:21-05:00",
      "committed_date": "2025-02-25T19:09:21-05:00",
      "changed_files": [
        "compiler/packages/react-forgive/.vscodeignore"
      ]
    },
    {
      "sha": "92e65ca68f6bfc6be515ccacaa918e33b63911df",
      "short_sha": "92e65ca",
      "message": "[forgive] Add basic codelens provider (#32476)\n\nAdds a first codelens provider for successfully compiled functions. A\nlater PR will add an actual command that will fire when the codelens is\nclicked\n\n![Screenshot 2025-02-25 at 6 40\n20 PM](https://github.com/user-attachments/assets/924586e0-f70a-45d1-b0e6-a89af9371c8d)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-25T18:55:49-05:00",
      "committed_date": "2025-02-25T18:55:49-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/react-forgive/server/src/compiler/compat.ts",
        "compiler/packages/react-forgive/server/src/compiler/index.ts",
        "compiler/packages/react-forgive/server/src/index.ts"
      ]
    },
    {
      "sha": "403d4fb852384b820a8fe405413891d8c74bbf5d",
      "short_sha": "403d4fb",
      "message": "Move ViewTransitions helpers to ReactFiberCommitViewTransitions (#32462)\n\nThis doesn't change anything. It just moves some functions.\n\nThis moves the view transitions helper functions into its own file. This\nis similar to how I already moved ReactFiberCommitEffects and\nReactFiberCommitHostEffects out of ReactFiberCommitWork.\n\nThis makes it a bit easier to navigate and get an overview of\nReactFiberCommitWork but another motivation is also so that I can refer\nto these helpers from\n[ReactFiberApplyGesture](https://github.com/facebook/react/pull/32451/files#diff-42297cf327dee8e01d83c85314b8965953b9674e7c4615ce6c430464dcc8550b).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-02-25T12:45:44-05:00",
      "committed_date": "2025-02-25T12:45:44-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitViewTransitions.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "2e4db3344f030fe622152ecc231a7c99a81a9c9d",
      "short_sha": "2e4db33",
      "message": "Use valid CSS selectors in useId format (#32001)\n\nFor the `useId` algorithm we used colon `:` before and after.\nhttps://github.com/facebook/react/pull/23360\n\nThis avoids collisions in general by using an unusual characters. It\nalso avoids collisions when concatenated with some other ID.\nUnfortunately, `:` is not a valid character in `view-transition-name`.\n\nThis PR swaps the format from:\n\n```\n:r123:\n```\n\nTo the unicode:\n\n```\n«r123»\n```\n\nWhich is valid CSS selectors. This also allows them being used for\n`querySelector()` which we didn't really find a legit use for but seems\nok-ish.\n\nThat way you can get a view-transition-name that you can manually\nreference. E.g. to generate styles:\n\n```js\nconst id = useId();\nreturn <>\n  <style>{`\n    ::view-transition-group(${id}) { ... }\n    ::view-transition-old(${id}) { ... }\n    ::view-transition-new(${id}) { ... }\n  `}</style>\n  <ViewTransition name={id}>...</ViewTransition>\n</>;\n```",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-02-25T12:45:18-05:00",
      "committed_date": "2025-02-25T12:45:18-05:00",
      "changed_files": [
        "packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMUseId-test.js",
        "packages/react-reconciler/src/ReactFiberHooks.js"
      ]
    },
    {
      "sha": "d42a90cf4f8a9eb9f41939c7d095a6a93b8816dc",
      "short_sha": "d42a90c",
      "message": "[forgive] Init (#31918)\n\nInit basic LSP. At the moment the extension doesn't do anything\ninteresting, but it does compile successfully.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-25T12:19:11-05:00",
      "committed_date": "2025-02-25T12:19:11-05:00",
      "changed_files": [
        ".gitignore",
        "compiler/.gitignore",
        "compiler/packages/react-forgive/.vscode-test.mjs",
        "compiler/packages/react-forgive/.yarnrc",
        "compiler/packages/react-forgive/LICENSE",
        "compiler/packages/react-forgive/client/package.json",
        "compiler/packages/react-forgive/client/src/extension.ts",
        "compiler/packages/react-forgive/package.json",
        "compiler/packages/react-forgive/scripts/server.mjs",
        "compiler/packages/react-forgive/server/package.json",
        "compiler/packages/react-forgive/server/src/compiler/index.ts",
        "compiler/packages/react-forgive/server/src/compiler/options.ts",
        "compiler/packages/react-forgive/server/src/index.ts",
        "compiler/packages/react-forgive/server/tsconfig.json",
        "compiler/packages/react-forgive/server/yarn.lock",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "58def9f2e6ddd2ae3dfa9606711f1aea63a220c1",
      "short_sha": "58def9f",
      "message": "[forgive] Add build scripts (#31927)\n\nAdds basic build scripts.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31927).\n* #31918\n* __->__ #31927",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-25T12:16:10-05:00",
      "committed_date": "2025-02-25T12:16:10-05:00",
      "changed_files": [
        "compiler/packages/react-forgive/.vscodeignore",
        "compiler/packages/react-forgive/package.json",
        "compiler/packages/react-forgive/scripts/build.mjs",
        "compiler/packages/react-forgive/scripts/client.mjs",
        "compiler/packages/react-forgive/scripts/server.mjs"
      ]
    },
    {
      "sha": "dd9974bbb86f14898c3f352672dd7232492802a2",
      "short_sha": "dd9974b",
      "message": "[forgive] Scaffold workspaces (#31917)\n\nBasic workspace setup for Forgive.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31917).\n* #31918\n* #31927\n* __->__ #31917",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-25T12:08:46-05:00",
      "committed_date": "2025-02-25T12:08:46-05:00",
      "changed_files": [
        ".github/workflows/compiler_typescript.yml",
        "compiler/packages/react-forgive/client/package.json",
        "compiler/packages/react-forgive/client/yarn.lock",
        "compiler/packages/react-forgive/package.json",
        "compiler/packages/react-forgive/server/package.json",
        "compiler/packages/react-forgive/server/src/index.ts",
        "compiler/packages/react-forgive/server/tsconfig.json",
        "compiler/packages/react-forgive/server/yarn.lock",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "22e39ea72e9d10f6634ea580aaba49c2e759ef0e",
      "short_sha": "22e39ea",
      "message": "Include component name in \"async/await is not supported\" error message if available (#32435)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-02-25T10:48:44+01:00",
      "committed_date": "2025-02-25T10:48:44+01:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberThenable.js",
        "packages/react-reconciler/src/__tests__/ReactUse-test.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "25677265038b89c1ee3000e0669339ed160d9d75",
      "short_sha": "2567726",
      "message": "[flags] remove enableRemoveConsolePatches (#32425)\n\nwait to merge until we sync\nhttps://github.com/facebook/react/pull/32376, since that enables it in\nsome testing builds that might break",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-02-24T10:00:22-05:00",
      "committed_date": "2025-02-24T10:00:22-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberDevToolsHook.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/consoleWithStackDev.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "packages/shared/forks/consoleWithStackDev.rn.js",
        "packages/shared/forks/consoleWithStackDev.www.js",
        "scripts/babel/transform-replace-console-calls.js",
        "scripts/rollup/build.js",
        "scripts/rollup/forks.js"
      ]
    },
    {
      "sha": "9dd378ff1222335ff133bab2d61001fcc84a1c56",
      "short_sha": "9dd378f",
      "message": "[RN] Move definition of public instances to ReactNativePrivateInterface (#32446)\n\n## Summary\n\n> [!NOTE]\n> This only modifies types, so shouldn't have an impact at runtime.\n\nSome time ago we moved some type definitions from React to React Native\nin #26437.\n\nThis continues making progress on that so values that are created by\nReact Native and passed to the React renderer (in this case public\ninstances) are actually defined in React Native and not in React.\n\nThis will allow us to modify the definition of some of these types\nwithout having to make changes in the React repository (in the short\nterm, we want to refactor PublicInstance from an object to an interface,\nand then modify that interface to add all the new DOM methods).\n\n## How did you test this change?\n\nManually synced `ReactNativeTypes` on top of\nhttps://github.com/facebook/react-native/pull/49602 and verified Flow\npasses.",
      "author": {
        "name": "Rubén Norte",
        "email": "rubennorte@meta.com"
      },
      "authored_date": "2025-02-24T13:46:06+00:00",
      "committed_date": "2025-02-24T13:46:06+00:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeFiberHostComponent.js",
        "packages/react-native-renderer/src/ReactNativeFiberInspector.js",
        "packages/react-native-renderer/src/ReactNativePublicCompat.js",
        "packages/react-native-renderer/src/ReactNativeTypes.js",
        "packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/ReactNativePrivateInterface.js",
        "scripts/flow/react-native-host-hooks.js"
      ]
    },
    {
      "sha": "ad03c48a71cb7d5f7927b527cb9a8da1a3286875",
      "short_sha": "ad03c48",
      "message": "use-sync-external-store: Add `exports` field to `package.json` (#25231)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-02-24T13:01:59+01:00",
      "committed_date": "2025-02-24T13:01:59+01:00",
      "changed_files": [
        "packages/use-sync-external-store/package.json",
        "packages/use-sync-external-store/shim/with-selector/index.js"
      ]
    },
    {
      "sha": "9b042f9d593f965d8c7a42f8f5fce322f403381b",
      "short_sha": "9b042f9",
      "message": "[Fizz] Responsive images should not be preloaded with link headers (#32445)\n\nLink headers are optionally supported for cases where you prefer to send\nresource loading hints before you're ready to send the body of a\nrequest. While many resources can be correctly preloaded from a link\nheader responsive images are currently not supported and end up\npreloading the default src rather than the correctly sized image. Until\nresponsive images are supported React will not allow these images to\npreload as headers and will retain them to preload as HTML.\n\ncloses: #32437",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-02-21T09:48:32-08:00",
      "committed_date": "2025-02-21T09:48:32-08:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js"
      ]
    },
    {
      "sha": "27ba5e8b1fcb5724e653caf154dcf4f9519f08f1",
      "short_sha": "27ba5e8",
      "message": "Add Example of a SwipeRecognizer (#32422)\n\nStacked on #32412.\n\nTo effectively `useSwipeTransition` you need something to start and stop\nthe gesture as well as triggering an Action.\n\nThis adds an example Gesture Recognizer to the fixture. Instead of\nhaving this built-in to React itself, instead the idea is to leave this\nto various user space Component libraries. It can be done in different\nways for different use cases. It could use JS driven or native\nScrollTimeline or both.\n\nThis example uses a native scroll with scroll snapping to two edges. If\nyou swipe far enough to snap to the other edge, it triggers an Action at\nthe end.\n\nThis particular example uses a `position: sticky` to wrap the content of\nthe Gesture Recognizer. This means that it's inert by itself. It doesn't\nscroll its content just like a plain JS recognizer using pointer events\nwould. This is useful because it means that scrolling doesn't affect\ncontent before we start (the \"scroll\" event fires after scrolling has\nalready started) so we don't have to both trying to start it earlier. It\nalso means that scrolling doesn't affect the live content which can lead\nto unexpected effects on the View Transition.\n\nI find the inert recognizer the most useful pairing with\n`useSwipeTransition` but it's not the only way to do it. E.g. you can\nalso have a scrollable surface that uses plain scrolling with snapping\nand then just progressively enhances swiping between steps.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-02-21T11:27:05-05:00",
      "committed_date": "2025-02-21T11:27:05-05:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Chrome.css",
        "fixtures/view-transition/src/components/Page.css",
        "fixtures/view-transition/src/components/Page.js",
        "fixtures/view-transition/src/components/SwipeRecognizer.js"
      ]
    },
    {
      "sha": "662957cc735a7f630b497ada45af8ff39684d2b9",
      "short_sha": "662957c",
      "message": "Allow passing range option to useSwipeTransition (#32412)\n\nStacked on #32379\n\nTrack the range offsets along the timeline where previous/current/next\nis. This can also be specified as an option. This lets you model more\nthan three states along a timeline by clamping them and then updating\nthe \"current\" as you go.\n\nIt also allows specifying the \"current\" offset as something different\nthan what it was when the gesture started such as if it has to start\nafter scroll has already happened (such as what happens if you listen to\nthe \"scroll\" event).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-02-21T11:03:04-05:00",
      "committed_date": "2025-02-21T11:03:04-05:00",
      "changed_files": [
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoMutation.js",
        "packages/react-reconciler/src/ReactFiberGestureScheduler.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "88479c6fc31ba2902587694338350ae95733d6b2",
      "short_sha": "88479c6",
      "message": "Rerender useSwipeTransition when direction changes (#32379)\n\nWe can only render one direction at a time with View Transitions. When\nthe direction changes we need to do another render in the new direction\n(returning previous or next).\n\nTo determine direction we store the position we started at and anything\nmoving to a lower value (left/up) is \"previous\" direction (`false`) and\nanything else is \"next\" (`true`) direction.\n\nFor the very first render we won't know which direction you're going\nsince you're still on the initial position. It's useful to start the\nrender to allow the view transition to take control before anything\nshifts around so we start from the original position. This is not\nguaranteed though if the render suspends.\n\nFor now we start the first render by guessing the direction such as if\nwe know that prev/next are the same as current. With the upcoming auto\nstart mode we can guess more accurately there before we start. We can\nalso add explicit APIs to `startGesture` but ideally it wouldn't matter.\nIdeally we could just start after the first change in direction from the\nstarting point.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-02-20T18:13:09-05:00",
      "committed_date": "2025-02-20T18:13:09-05:00",
      "changed_files": [
        ".eslintrc.js",
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoMutation.js",
        "packages/react-reconciler/src/ReactFiberGestureScheduler.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "packages/shared/ReactTypes.js",
        "scripts/error-codes/codes.json",
        "scripts/flow/environment.js",
        "scripts/rollup/validate/eslintrc.cjs.js",
        "scripts/rollup/validate/eslintrc.cjs2015.js",
        "scripts/rollup/validate/eslintrc.esm.js",
        "scripts/rollup/validate/eslintrc.fb.js",
        "scripts/rollup/validate/eslintrc.rn.js"
      ]
    },
    {
      "sha": "70f1d766e8ae7ca3701193abb8c8a9f2fdbdaa9d",
      "short_sha": "70f1d76",
      "message": "[flow] Eliminate usage of global React types in ReactNativeTypes.js (#32330)",
      "author": {
        "name": "Sam Zhou",
        "email": "sam@developersam.com"
      },
      "authored_date": "2025-02-20T12:42:33-05:00",
      "committed_date": "2025-02-20T12:42:33-05:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeTypes.js",
        "packages/react/index.js"
      ]
    },
    {
      "sha": "885532c124f32436723cd51627d06de6e8c13fdd",
      "short_sha": "885532c",
      "message": "Revert \"Ship enableFabricCompleteRootInCommitPhase (#32318)\" (#32434)\n\nThis reverts commit 8759c5c8d6aef34df576827215ff7ebaeafc79ea /\nhttps://github.com/facebook/react/pull/32318\n\nWe discovered that the experiment setup for this was faulty and we need\nto re-run as a back test.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-02-20T12:29:01-05:00",
      "committed_date": "2025-02-20T12:29:01-05:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "5f31228d7d17f5959a99456d89a52d467ee2f329",
      "short_sha": "5f31228",
      "message": "[compiler][playground] Upgrade to Next 15.2.0-canary.64 (#32428)\n\nUpgrade compiler playground to use the newest nextjs release, which\nincludes react compiler transform pipeline optimizations\nhttps://github.com/vercel/next.js/pull/75676/.\n\nAlso made a drive-by fix to avoid the error `Cannot update a component\n('Router') while rendering a different component ('StoreProvider'). To\nlocate the bad setState() call inside 'StoreProvider', follow the stack\ntrace as described in https://react.dev/link/setstate-in-render`. The\nbad setState came from `history.replaceState({}, '', \\`#${hash}\\`);`.\n\nPrior to this, playground ran side effects in a reducer (i.e. during\nrender). These have now been moved an effect.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-02-20T12:28:34-05:00",
      "committed_date": "2025-02-20T12:28:34-05:00",
      "changed_files": [
        "compiler/apps/playground/components/StoreContext.tsx",
        "compiler/apps/playground/next-env.d.ts",
        "compiler/apps/playground/package.json",
        "compiler/apps/playground/yarn.lock"
      ]
    },
    {
      "sha": "fcb4e0f137db6efa6e180ad12dcfaabd0c590219",
      "short_sha": "fcb4e0f",
      "message": "[compiler] remove invariant to account for backedges (#32417)\n\nFixes https://github.com/facebook/react/issues/32269, see comments for\ndetails.\n\nAdded test fixture for repro",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-02-19T14:22:53-07:00",
      "committed_date": "2025-02-19T16:22:53-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-backedge-reference-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-backedge-reference-effect.js"
      ]
    },
    {
      "sha": "a84862dbdc8dada08a9d1df1c72144cd767704b6",
      "short_sha": "a84862d",
      "message": "[eslint] Target ES5 (#32420)\n\nUpdate eslint-plugin-react-hooks to be built targetting ES5 instead. For\nvarious reasons our internal infra relies on these files being built\nalready downleveled.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-18T16:56:02-05:00",
      "committed_date": "2025-02-18T16:56:02-05:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/tsconfig.json"
      ]
    },
    {
      "sha": "86b191347474fa98f002217ed88926efc8164c1e",
      "short_sha": "86b1913",
      "message": "[compiler][be] Clean up bug test fixtures; evaluate more fixtures (#31812)\n\nTest fixtures testing different compiler features (e.g. non-auto\r\nmemoization) should live in separate directories.\r\n\r\nRemove bug-prefixed fixtures that have since been fixed\r\n\r\nAdd test evaluator export to more fixtures",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-02-18T12:25:33-07:00",
      "committed_date": "2025-02-18T12:25:33-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/call-spread.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/call-spread.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-fun-alias-captured-mutate-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-fun-alias-captured-mutate-2.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-fun-alias-captured-mutate-arr-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-fun-alias-captured-mutate-arr-2.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-captured-mutate-arr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-captured-mutate-arr.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-computed-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-computed-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-receiver-computed-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-receiver-computed-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-receiver-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-receiver-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-simple-alias.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-simple-alias.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-capture-ref-before-rename.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-capture-ref-before-rename.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-conditional-capture-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-conditional-capture-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-renamed-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-renamed-ref.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-runs-inference.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-runs-inference.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-shadow-captured.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-shadow-captured.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-reference-changes-type.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-reference-changes-type.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/computed-store-alias.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/computed-store-alias.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/constant-propagation-into-function-expressions.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/constant-propagation-into-function-expressions.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-hoisting-functionexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-hoisting-functionexpr.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-merge-uncond-optional-chain-and-cond.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-merge-uncond-optional-chain-and-cond.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-infer-function-cond-access-not-hoisted.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-infer-function-cond-access-not-hoisted.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-try-catch-maybe-null-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-try-catch-maybe-null-dependency.ts",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "a9575dcf62e5cb6f8b1d8f738aa75ece216d9054",
      "short_sha": "a9575dc",
      "message": "[compiler] Represent array accesses with PropertyLoad (#32287)\n\nPrior to this PR, our HIR represented property access with numeric\r\nliterals (e.g. `myVar[0]`) as ComputedLoads. This means that they were\r\nsubject to some deopts (most notably, not being easily dedupable /\r\nhoistable as dependencies).\r\n\r\nNow, `PropertyLoad`, `PropertyStore`, etc reference numeric and string\r\nliterals (although not yet string literals that aren't valid babel\r\nidentifiers). The difference between PropertyLoad and ComputedLoad is\r\nfuzzy now (maybe we should rename these).\r\n- PropertyLoad: property keys are string and numeric literals, only when\r\nthe string literals are valid babel identifiers\r\n- ComputedLoad: non-valid babel identifier string literals (rare) and\r\nother non-literal expressions\r\n\r\nThe biggest feature from this PR is that it trivially enables\r\narray-indicing expressions as dependencies. The compiler can also\r\nspecify global and imported types for arrays (e.g. return value of\r\n`useState`)\r\n\r\n\r\nI'm happy to close this if it complicates more than it helps --\r\nalternative options are to entirely rely on instruction reordering-based\r\napproaches like ReactiveGraphIR or make dependency-specific parsing +\r\nhoisting logic more robust.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-02-18T11:54:20-07:00",
      "committed_date": "2025-02-18T11:54:20-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectOptionalChainDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/DeriveMinimalDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Types.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/DropManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/ConstantPropagation.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/InlineJsxTransform.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PropagateEarlyReturns.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneInitializationDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateHooksUsage.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoCapitalizedCalls.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/mixedreadonly-mutating-map.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-dep-not-recognized.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-dep-array-literal-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-dep-not-recognized.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactivity-via-aliased-mutation-array.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactivity-via-aliased-mutation-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-store-capture-namespace-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-store-capture.expect.md"
      ]
    },
    {
      "sha": "19cc5af41ead904100a55fd2a1cfb40b1380f4be",
      "short_sha": "19cc5af",
      "message": "[compiler] Clean up deadcode: DeriveMinimalDeps (non-hir fork) (#32104)\n\n(title)\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32104).\r\n* #32287\r\n* __->__ #32104\r\n* #32098\r\n* #32097",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-02-18T09:38:02-07:00",
      "committed_date": "2025-02-18T09:38:02-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/DeriveMinimalDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/DeriveMinimalDependencies.ts"
      ]
    },
    {
      "sha": "498514c04d824f88a9b77595c18c1323f4d1006f",
      "short_sha": "498514c",
      "message": "[compiler] Clean up deadcode: ReactiveFunctionValue (#32098)\n\n(title)\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32098).\r\n* #32287\r\n* #32104\r\n* __->__ #32098\r\n* #32097",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-02-18T09:37:34-07:00",
      "committed_date": "2025-02-18T09:37:34-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneNonEscapingScopes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/visitors.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts"
      ]
    },
    {
      "sha": "a92acdb188990b2b64130d74ccd6437dc9db1901",
      "short_sha": "a92acdb",
      "message": "[compiler] Remove redundant InferMutableContextVariables (#32097)\n\nThis removes special casing for `PropertyStore` mutability inference\r\nwithin FunctionExpressions.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32097).\r\n* #32287\r\n* #32104\r\n* #32098\r\n* __->__ #32097",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-02-18T09:37:21-07:00",
      "committed_date": "2025-02-18T09:37:21-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutableContextVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-mutate-global-in-effect-fixpoint.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-mutate-global-in-effect-fixpoint.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reanimated-shared-value-writes.expect.md"
      ]
    },
    {
      "sha": "d99f8bba2e07e3bb953f0821d4da5e341136fe5c",
      "short_sha": "d99f8bb",
      "message": "[compiler] Delete LoweredFunction.dependencies and hoisted instructions (#32096)\n\nLoweredFunction dependencies were exclusively used for dependency\r\nextraction (in `propagateScopeDeps`). Now that we have a\r\n`propagateScopeDepsHIR` that recursively traverses into nested\r\nfunctions, we can delete `dependencies` and their associated synthetic\r\n`LoadLocal`/`PropertyLoad` instructions.\r\n\r\n[Internal snapshot\r\ndiff](https://www.internalfb.com/phabricator/paste/view/P1716950202) for\r\nthis change shows ~.2% of files changed. I [read through ~60 of the\r\nchanged\r\nfiles](https://www.internalfb.com/phabricator/paste/view/P1733074307)\r\n- most changes are due to better outlining (due to better DCE)\r\n- a few changes in memo inference are due to changed ordering\r\n```\r\n// source\r\narr.map(() => contextVar.inner);\r\n\r\n// previous instructions\r\n$0 = LoadLocal arr\r\n$1 = $0.map\r\n// Below instructions are synthetic\r\n$2 = LoadLocal contextVar\r\n$3 = $2.inner\r\n$4 = Function deps=$3 context=contextVar {\r\n  ...\r\n}\r\n```\r\n- a few changes are effectively bugfixes (see\r\n`aliased-nested-scope-fn-expr`)\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32096).\r\n* #32099\r\n* #32286\r\n* #32104\r\n* #32098\r\n* #32097\r\n* __->__ #32096",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-02-18T09:32:49-07:00",
      "committed_date": "2025-02-18T09:32:49-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/MergeOverlappingReactiveScopesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/visitors.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutableContextVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OutlineFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/InferReactiveScopeVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/SSA/EliminateRedundantPhi.ts",
        "compiler/packages/babel-plugin-react-compiler/src/SSA/EnterSSA.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Transform/TransformFire.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/aliased-nested-scope-fn-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/aliased-nested-scope-fn-expr.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/aliased-nested-scope-truncated-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/aliased-nested-scope-truncated-dep.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-unused-callback-nested.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-mutate-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-no-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-simple-alias-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-alias-computed-load-2-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-alias-computed-load-3-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-alias-computed-load-4-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-alias-computed-load-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-reference-changes-type.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife-reassign.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/const-propagation-into-function-expression-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/const-propagation-into-function-expression-primitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/constant-propagation-into-function-expressions.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/context-variable-as-jsx-element-tag.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoisting-simple-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-identifier.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-identifier.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-call-freezes-captured-memberexpr.jsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-setstate-captured-indirectly-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-setstate-captured-indirectly-jsx.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-setstate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-setstate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-call-freezes-captured-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-call-freezes-captured-memberexpr.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-local-tag-in-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-memberexpr-tag-in-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lambda-mutated-non-reactive-to-reactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lambda-mutated-ref-non-reactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nested-function-shadowed-identifiers.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rewrite-phis-in-lambda-capture-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-operator-conditional.expect.md"
      ]
    },
    {
      "sha": "8a7b487e3b171c91f2fe18e9142af53f4dd83454",
      "short_sha": "8a7b487",
      "message": "[flags] enable owner stacks everywhere (#32376)\n\nthis is now canary and on everywhere",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-02-18T10:29:40-05:00",
      "committed_date": "2025-02-18T10:29:40-05:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "scripts/jest/setupTests.www.js",
        "scripts/jest/setupTests.xplat.js"
      ]
    },
    {
      "sha": "4632e36a4ef16a1af24987c56e42b664f6403e64",
      "short_sha": "4632e36",
      "message": "refactor(eslint-plugin-react-hooks): change array type and improve conditionals (#32400)\n\n- [build(eslint-plugin-react-hooks): add\nts-linting](https://github.com/facebook/react/commit/4c0fbe73d9abc2681445f62b9450737f3df12ee2)\nThis change adds configuration to the eslint config governing\n`eslint-plugin-react-hooks` to use the typescript-eslint plugin and\nparser. It adds the typescript-recommended config, and configures the\nteam's preferred `array-type` convention.\n\n- [refactor(eslint-plugin-react-hooks): improve\nconditionals](https://github.com/facebook/react/commit/540d0d95bc5172ef95ccc2ad70b4b202b6eeedd2)\nThis change addresses several feedback items from\nhttps://github.com/facebook/react/pull/32240\n\n- [ci (eslint-e2e): exclude nested node_modules from\ncache](https://github.com/facebook/react/pull/32400/commits/a3279f46a85cfb4ddea5a863a6f7c71344280d36)\nThis change removes the nested fixture `node_modules` from being cached,\nso that the symbolic link can be made after the build happens.",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-02-16T19:28:12-06:00",
      "committed_date": "2025-02-16T20:28:12-05:00",
      "changed_files": [
        ".eslintrc.js",
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        "package.json",
        "packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.ts",
        "packages/eslint-plugin-react-hooks/src/RulesOfHooks.ts",
        "yarn.lock"
      ]
    },
    {
      "sha": "eb1f77dedfc8f7491ecd39b160e4743fa39dfc99",
      "short_sha": "eb1f77d",
      "message": "ci: add workflow for running the eslint plugin e2e tests (#32397)\n\nThis change adds a workflow for PR builds, that runs the e2e tests for\n`eslint-plugin-react-hooks` created in #32396\n\n![screenshot of ci tests\nrunning](https://github.com/user-attachments/assets/307a878c-92b5-44cf-84f2-3b21979b262a)",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-02-16T16:00:43-06:00",
      "committed_date": "2025-02-16T17:00:43-05:00",
      "changed_files": [
        ".github/workflows/runtime_eslint_plugin_e2e.yml",
        "fixtures/eslint-v6/build.mjs",
        "fixtures/eslint-v6/package.json",
        "fixtures/eslint-v6/yarn.lock",
        "fixtures/eslint-v7/build.mjs",
        "fixtures/eslint-v7/package.json",
        "fixtures/eslint-v7/yarn.lock",
        "fixtures/eslint-v8/build.mjs",
        "fixtures/eslint-v8/package.json",
        "fixtures/eslint-v8/yarn.lock",
        "fixtures/eslint-v9/build.mjs",
        "fixtures/eslint-v9/package.json",
        "fixtures/eslint-v9/yarn.lock"
      ]
    },
    {
      "sha": "be91130f184f04c6e7bb9ff18222aba2ef2f96f6",
      "short_sha": "be91130",
      "message": "chore: remove `devEngines` declaration in root package (#32398)\n\nThis change removes the `devEngines` declaration in the root package. It\ndidn't match the package.json spec and in npm 10.9.0 (released in\nOctober), a breaking change was introduced that checks the `devEngines`\nproperty. This causes `npm pack` calls to fail, due to the malformed\n`devEngines`. Since there's already an `.nvmrc` defined in the repo, and\nno strong need to enforce a specific node version for local development,\nthis removes the declaration altogether.",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-02-16T15:14:43-06:00",
      "committed_date": "2025-02-16T16:14:43-05:00",
      "changed_files": [
        "package.json"
      ]
    },
    {
      "sha": "5adf40208f4a2f56bda5c059d18ce578c5091dab",
      "short_sha": "5adf402",
      "message": "feat(eslint-plugin-react-hooks): convert to typescript and package type declarations (#32240)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\nThis change converts the eslint hooks plugin to typescript, which also\nallows us to include type declarations in the package, for those using\n[typescript eslint\nconfigs](https://eslint.org/blog/2025/01/eslint-v9.18.0-released/#stable-typescript-configuration-file-support).\n\n### Constituent changes that should land before this one\n\n- [x] ~https://github.com/facebook/react/pull/32276~\n- [x] https://github.com/facebook/react/pull/32279\n- [x] https://github.com/facebook/react/pull/32283\n- [x] https://github.com/facebook/react/pull/32393\n- [x] https://github.com/facebook/react/pull/32396\n\nCloses #30119\n\n---------\n\nCo-authored-by: Lauren Tan <poteto@users.noreply.github.com>",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-02-16T13:10:54-06:00",
      "committed_date": "2025-02-16T14:10:54-05:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/babel.config.js",
        "packages/eslint-plugin-react-hooks/index.js",
        "packages/eslint-plugin-react-hooks/jest.config.js",
        "packages/eslint-plugin-react-hooks/npm/index.d.ts",
        "packages/eslint-plugin-react-hooks/package.json",
        "packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js",
        "packages/eslint-plugin-react-hooks/src/RulesOfHooks.js",
        "packages/eslint-plugin-react-hooks/src/index.js",
        "packages/eslint-plugin-react-hooks/src/index.ts",
        "packages/eslint-plugin-react-hooks/src/types/estree.d.ts",
        "packages/eslint-plugin-react-hooks/tsconfig.json",
        "packages/eslint-plugin-react-hooks/tsup.config.ts",
        "scripts/rollup/bundles.js",
        "yarn.lock"
      ]
    },
    {
      "sha": "037b25cfdcd18deea0e1c6c2e8d2548dbf32f7f3",
      "short_sha": "037b25c",
      "message": "test(eslint): create eslint test fixtures (#32396)",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-02-16T12:23:44-06:00",
      "committed_date": "2025-02-16T13:23:44-05:00",
      "changed_files": [
        "fixtures/eslint/.eslintrc.json",
        "fixtures/eslint-v6/README.md",
        "fixtures/eslint-v6/build.mjs",
        "fixtures/eslint-v6/index.js",
        "fixtures/eslint-v6/package.json",
        "fixtures/eslint-v6/yarn.lock",
        "fixtures/eslint-v7/.eslintrc.json",
        "fixtures/eslint-v7/README.md",
        "fixtures/eslint-v7/build.mjs",
        "fixtures/eslint-v7/index.js",
        "fixtures/eslint-v7/package.json",
        "fixtures/eslint-v7/yarn.lock",
        "fixtures/eslint-v8/.eslintrc.json",
        "fixtures/eslint-v8/README.md",
        "fixtures/eslint-v8/build.mjs",
        "fixtures/eslint-v8/index.js",
        "fixtures/eslint-v8/package.json",
        "fixtures/eslint-v8/yarn.lock",
        "fixtures/eslint-v9/README.md",
        "fixtures/eslint-v9/build.mjs",
        "fixtures/eslint-v9/eslint.config.mjs",
        "fixtures/eslint-v9/index.js",
        "fixtures/eslint-v9/package.json",
        "fixtures/eslint-v9/yarn.lock",
        "fixtures/eslint/README.md",
        "fixtures/eslint/index.js",
        "fixtures/eslint/package.json",
        "fixtures/eslint/proxy/index.js",
        "fixtures/eslint/proxy/package.json",
        "fixtures/eslint/watch.sh",
        "fixtures/eslint/yarn.lock"
      ]
    },
    {
      "sha": "0d9834caeb3b334eaa1be45f136499f51303e7d3",
      "short_sha": "0d9834c",
      "message": "build: add support to the rollup build for building typescript packages (#32393)",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-02-16T09:38:13-06:00",
      "committed_date": "2025-02-16T10:38:13-05:00",
      "changed_files": [
        "babel.config-ts.js",
        "package.json",
        "packages/react/src/__tests__/ReactTypeScriptClass-test.ts",
        "scripts/jest/config.base.js",
        "scripts/rollup/build.js",
        "scripts/rollup/bundles.js",
        "scripts/rollup/packaging.js",
        "scripts/rollup/wrappers.js",
        "yarn.lock"
      ]
    },
    {
      "sha": "e670e72fa076449e40172e20d17cc67c1c15419c",
      "short_sha": "e670e72",
      "message": "Change TouchedViewDataAtPoint type in ReactNativeTypes to use supported by Flow tooling syntax (#32382)\n\n## Summary\r\n\r\nThe `flow-api-translator` from the `hermes` repo does not support flow\r\ntype spreads. It is currently not able to digest the ReactNativeTypes\r\nfile as it contains unsupported syntax. The simplest solution is to\r\nchange the type of the `TouchedViewDataAtPoint` to equivalent, yet\r\nsupported by the Flow tooling. In this case the intersection can be used\r\nas\r\nthe `TouchedViewDataAtPoint` and `InspectorData` have no common\r\nproperty.\r\n\r\n## How did you test this change?\r\n\r\nRun yarn flow native",
      "author": {
        "name": "Dawid Małecki",
        "email": "dawid.malecki21@gmail.com"
      },
      "authored_date": "2025-02-14T15:10:37+01:00",
      "committed_date": "2025-02-14T14:10:37+00:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeTypes.js"
      ]
    },
    {
      "sha": "a53da6abe1593483098df2baf927fe07d80153a5",
      "short_sha": "a53da6a",
      "message": "Add useSwipeTransition Hook Behind Experimental Flag (#32373)\n\nThis Hook will be used to drive a View Transition based on a gesture.\n\n```js\nconst [value, startGesture] = useSwipeTransition(prev, current, next);\n```\n\nThe `enableSwipeTransition` flag will depend on `enableViewTransition`\nflag but we may decide to ship them independently. This PR doesn't do\nanything interesting yet. There will be a lot more PRs to build out the\nactual functionality. This is just wiring up the plumbing for the new\nHook.\n\nThis first PR is mainly concerned with how the whole starts (and stops).\nThe core API is the `startGesture` function (although there will be\nother conveniences added in the future). You can call this to start a\ngesture with a source provider. You can call this multiple times in one\nevent to batch multiple Hooks listening to the same provider. However,\neach render can only handle one source provider at a time and so it does\none render per scheduled gesture provider.\n\nThis uses a separate `GestureLane` to drive gesture renders by marking\nthe Hook as having an update on that lane. Then schedule a render. These\nrenders should be blocking and in the same microtask as the\n`startGesture` to ensure it can block the paint. So it's similar to\nsync.\n\nIt may not be possible to finish it synchronously e.g. if something\nsuspends. If so, it just tries again later when it can like any other\nrender. This can also happen because it also may not be possible to\ndrive more than one gesture at a time like if we're limited to one View\nTransition per document. So right now you can only run one gesture at a\ntime in practice.\n\nThese renders never commit. This means that we can't clear the\n`GestureLane` the normal way. Instead, we have to clear only the root's\n`pendingLanes` if we don't have any new renders scheduled. Then wait\nuntil something else updates the Fiber after all gestures on it have\nstopped before it really clears.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-02-13T16:06:01-05:00",
      "committed_date": "2025-02-13T16:06:01-05:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.css",
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-reconciler/src/ReactFiberConcurrentUpdates.js",
        "packages/react-reconciler/src/ReactFiberGestureScheduler.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/react-server/src/ReactFlightHooks.js",
        "packages/react/index.experimental.development.js",
        "packages/react/index.experimental.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactHooks.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/ReactTypes.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "32b0cad8f74da3d6e8b07f4ffbad26dfe8d8a71a",
      "short_sha": "32b0cad",
      "message": "Enable owner stacks in Canary builds (#32053)\n\nPending internal decision to ship in Canary.\nStill off for FB builds.\n\nDocs: https://github.com/reactjs/react.dev/pull/7427",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-02-13T20:38:57+01:00",
      "committed_date": "2025-02-13T14:38:57-05:00",
      "changed_files": [
        "packages/react/index.stable.development.js",
        "packages/react/src/ReactServer.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js"
      ]
    },
    {
      "sha": "ed8b68dd178af17a2dd36c8678f81f8b454559a9",
      "short_sha": "ed8b68d",
      "message": "Stop exporting dev-only methods in OSS production builds (#32200)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-02-13T18:26:36+01:00",
      "committed_date": "2025-02-13T18:26:36+01:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactTestUtilsAct-test.js",
        "packages/react-reconciler/src/__tests__/ReactIsomorphicAct-test.js",
        "packages/react-reconciler/src/__tests__/ReactOwnerStacks-test.js",
        "packages/react/index.js",
        "packages/react/index.stable.development.js",
        "packages/react/index.stable.js",
        "scripts/jest/TestFlags.js",
        "scripts/jest/setupHostConfigs.js",
        "scripts/rollup/build.js"
      ]
    },
    {
      "sha": "c6a7e18636e610efd3aa7a437bbcaf321bf73abd",
      "short_sha": "c6a7e18",
      "message": "Ensure `captureOwnerStack` returns `null` when no stack is available (#32353)\n\nCo-authored-by: Younes Henni <youneshenniwrites@gmail.com>",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-02-13T18:09:49+01:00",
      "committed_date": "2025-02-13T18:09:49+01:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactCurrentFiber.js",
        "packages/react-reconciler/src/__tests__/ReactOwnerStacks-test.js"
      ]
    },
    {
      "sha": "cbbe8666a8d6e6f1b81dffb11bd5d767e4acd6ac",
      "short_sha": "cbbe866",
      "message": "fix value formatting of proxies of class instances (#30880)\n\nFor Hookstate Proxies of class instances, `data.constructor.name`\r\nreturns `Proxy({})`, so use\r\n`Object.getPrototypeOf(data).constructor.name` instead, which works\r\ncorrectly from my testing.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nReact DevTools immediately bricks itself if you inspect any component\r\nthat has a prop that is a Hookstate that wraps a class instance ...\r\nbecause these are proxies where `data.constructor.name` returns some\r\nun-cloneable object, but `Object.getPrototypeOf(data)` doesn't return\r\n`Object` (it returns the prototype of the class inside).\r\n\r\n## How did you test this change?\r\n\r\nThis part of the code has no associated tests at all.\r\n\r\nTechnically,\r\n`packages/react-devtools-shared/src/__tests__/legacy/inspectElement-test.js`\r\nexists, but I tried `yarn test` and these tests aren't even executed\r\nanymore. I can't figure it out, so whatever.\r\n\r\nIf you run this code:\r\n\r\n```js\r\n    class Class {}\r\n    const instance = new Class();\r\n\r\n    const instanceProxy = new Proxy(instance, {\r\n      get(target, key, receiver) {\r\n        if (key === 'constructor') {\r\n          return { name: new Proxy({}, {}) };\r\n        }\r\n\r\n        return Reflect.get(target, key, receiver);\r\n      },\r\n    });\r\n```\r\n\r\nthen `instanceProxy.constructor.name` returns some proxy that cannot be\r\ncloned, but `Object.getPrototypeOf(instanceProxy).constructor.name`\r\nreturns the correct value.\r\n\r\nThis PR fixes the devtools to use\r\n`Object.getPrototypeOf(instanceProxy).constructor.name`.\r\n\r\nI modified my local copy of devtools to use this method and it fixed the\r\nbricking that I experienced.\r\n\r\nRelated #29954",
      "author": {
        "name": "LoganDark",
        "email": "4723091+LoganDark@users.noreply.github.com"
      },
      "authored_date": "2025-02-13T04:04:53-08:00",
      "committed_date": "2025-02-13T12:04:53+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "e0131f1edae0fc411bf8abb2fed211ca07af60fe",
      "short_sha": "e0131f1",
      "message": "fix(devtools): Handle nullish values passed to `formatConsoleArguments` (#32372)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\nWhen using React Devtools, calling `console.log('%s', null)` in userland\r\ncan cause it to throw an error:\r\n\r\n```\r\nTypeError: Cannot read properties of null (reading 'toString')\r\n```\r\n\r\n## How did you test this change?\r\n\r\nAdded a unit test.\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nSee https://github.com/47ng/nuqs/issues/808.",
      "author": {
        "name": "François Best",
        "email": "github@francoisbest.com"
      },
      "authored_date": "2025-02-13T13:02:55+01:00",
      "committed_date": "2025-02-13T12:02:55+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/utils-test.js",
        "packages/react-devtools-shared/src/backend/utils/formatConsoleArguments.js"
      ]
    },
    {
      "sha": "5a78dd7cfec4217c1feb89ee6312c13f40b01aed",
      "short_sha": "5a78dd7",
      "message": "[ci] Also notify compiler ready for review PRs (#32371)\n\nSimilar to #32344",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-12T15:13:47-05:00",
      "committed_date": "2025-02-12T15:13:47-05:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml"
      ]
    },
    {
      "sha": "d814852baf03c61b1e32b59a45c3f72e00577ac8",
      "short_sha": "d814852",
      "message": "[compiler] Upgrade esbuild (#32368)\n\nJust a simple upgrade",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-12T11:59:56-05:00",
      "committed_date": "2025-02-12T11:59:56-05:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "f83903bfcc5a61811bd1b69b14f0ebbac4754462",
      "short_sha": "f83903b",
      "message": "[RN] Set up test to create public instances lazily in Fabric (#32363)\n\n## Summary\r\n\r\nIn React Native, public instances and internal host nodes are not\r\nrepresented by the same object (ReactNativeElement & shadow nodes vs.\r\njust DOM elements), and the only one that's required for rendering is\r\nthe shadow node. Public instances are generally only necessary when\r\naccessed via refs or events, and that usually happens for a small amount\r\nof components in the tree.\r\n\r\nThis implements an optimization to create the public instance on demand,\r\ninstead of eagerly creating it when creating the host node. We expect\r\nthis to improve performance by reducing the logic we do per node and the\r\nnumber of object allocations.\r\n\r\n## How did you test this change?\r\n\r\nManually synced the changes to React Native and run Fantom tests and\r\nbenchmarks, with the flag enabled and disabled. All tests pass in both\r\ncases, and benchmarks show a slight but consistent performance\r\nimprovement.",
      "author": {
        "name": "Rubén Norte",
        "email": "rubennorte@meta.com"
      },
      "authored_date": "2025-02-12T13:52:57+00:00",
      "committed_date": "2025-02-12T13:52:57+00:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "192555bb0ed88db30f91c58651c421f178f90384",
      "short_sha": "192555b",
      "message": "Added dev-only warning for null/undefined create in use*Effect (#32355)\n\n## Summary\n\nFixes #32354.\n\nRe-creation of #15197: adds a dev-only warning if `create == null` to\nthe three `use*Effect` functions:\n\n* `useEffect`\n* `useInsertionEffect`\n* `useLayoutEffect`\n\nUpdates the warning to match the same text given in the\n`react/exhaustive-deps` lint rule.\n\n## How did you test this change?\n\nI applied the changes manually within `node_modules/` on a local clone\nof\nhttps://github.com/JoshuaKGoldberg/repros/tree/react-use-effect-no-arguments.\n\nPlease pardon me for opening a PR addressing a not-accepted issue. I was\nexcited to get back to #15194 -> #15197 now that I have time. 🙂\n\n---------\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>",
      "author": {
        "name": "Josh Goldberg ✨",
        "email": "git@joshuakgoldberg.com"
      },
      "authored_date": "2025-02-11T17:01:04-05:00",
      "committed_date": "2025-02-11T17:01:04-05:00",
      "changed_files": [
        "packages/react/src/ReactHooks.js"
      ]
    },
    {
      "sha": "a69b80d07e5d1bf363ed15d6209a55b35e0765c2",
      "short_sha": "a69b80d",
      "message": "[crud] Remove useResourceEffect (#32206)\n\nRemoves useResourceEffect.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32206).\n* __->__ #32206\n* #32205",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-11T14:19:34-05:00",
      "committed_date": "2025-02-11T14:19:34-05:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/react/index.development.js",
        "packages/react/index.experimental.development.js",
        "packages/react/index.fb.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactHooks.js"
      ]
    },
    {
      "sha": "2c5fd26c07c0fb94ff21a6c10c5a757ef3c5d6a4",
      "short_sha": "2c5fd26",
      "message": "[crud] Merge useResourceEffect into useEffect (#32205)\n\nMerges the useResourceEffect API into useEffect while keeping the\nunderlying implementation the same. useResourceEffect will be removed in\nthe next diff.\n\nTo fork between behavior we rely on a `typeof` check for the updater or\ndestroy function in addition to the CRUD feature flag. This does now\nhave to be checked every time (instead of inlined statically like before\ndue to them being different hooks) which will incur some non-zero amount\n(possibly negligble) of overhead for every effect.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32205).\n* #32206\n* __->__ #32205",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-11T14:18:50-05:00",
      "committed_date": "2025-02-11T14:18:50-05:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js",
        "packages/react-reconciler/src/ReactFiberCallUserSpace.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react/src/ReactHooks.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "0461c0d8a49730d1c8ebca2071d9bb7adfc8ac92",
      "short_sha": "0461c0d",
      "message": "[crud] Rename useResourceEffect flag (#32204)\n\nRename the flag in preparation for the overload.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32204).\n* #32206\n* #32205\n* __->__ #32204",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-11T14:05:50-05:00",
      "committed_date": "2025-02-11T14:05:50-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js",
        "packages/react-reconciler/src/ReactFiberCallUserSpace.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactHooks.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "899e3d1297ec15a5aa8d73e2f1bd478918090a12",
      "short_sha": "899e3d1",
      "message": "[crud] Narrow resource type (#32203)\n\nSmall refactor to the `resource` type to narrow it to an arbitrary\nobject or void/null instead of the top type. This makes the overload on\nuseEffect simpler since the return type of create is no longer widened\nto the top type when we merge their definitions.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32203).\n* #32206\n* #32205\n* #32204\n* __->__ #32203",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-11T13:52:25-05:00",
      "committed_date": "2025-02-11T13:52:25-05:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-reconciler/src/ReactFiberCallUserSpace.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react/src/ReactHooks.js"
      ]
    },
    {
      "sha": "0a7dc1b1c714e74a1594c712d2317969e6421685",
      "short_sha": "0a7dc1b",
      "message": "[devtools] Introduce REACT_DEVTOOLS_PORT for the standalone react-devtools (#30767)\n\n## Summary\r\n\r\nThis PR attempts to make running the React DevTools a little friendlier\r\nin projects that are not completely React.\r\n\r\nAt the moment, running the DevTools with `npx react-devtools` will\r\ndefault to the port to use the `PORT` env variable otherwise it'll fall\r\nback to `8097`. `PORT` is a common env variable, so we can get into this\r\nstrange situation where the a Rails server (eg Puma) is using `PORT`,\r\nand then the React DevTools attempts to boot using the same `PORT`.\r\n\r\nThis PR introduces a dedicated env variable, `REACT_DEVTOOLS_PORT` to\r\nassist in this scenario.\r\n\r\n## How did you test this change?\r\n\r\nI'm using fish shell, so I did the following, please let me know if\r\nthere's a better way:\r\n\r\n```sh\r\ncd packages/react-devtools\r\nset -x PORT 1000\r\nset -x REACT_DEVTOOLS_PORT 2000\r\nnode bin.js\r\n```\r\n\r\nWe can see in the UI that it's listening on `2000`. Without this PR,\r\nit'd listen on `1000`:\r\n\r\n![Screenshot 2024-08-21 at 10 45\r\n42 AM](https://github.com/user-attachments/assets/a5c7590c-1b54-4ac8-9a8b-8eb66ff67cfb)",
      "author": {
        "name": "Brendan Abbott",
        "email": "brendan@bloodbone.ws"
      },
      "authored_date": "2025-02-12T04:14:43+10:00",
      "committed_date": "2025-02-11T18:14:43+00:00",
      "changed_files": [
        "packages/react-devtools/README.md",
        "packages/react-devtools/preload.js"
      ]
    },
    {
      "sha": "cd90a4d8c0d5dbaa8ab61e839b112b1518d5058f",
      "short_sha": "cd90a4d",
      "message": "[react-native] Suppress Flow nonstrict-import check in ReactNativeTypes (#32349)\n\nSummary: Unblock internal sync.\n\nTest Plan:\n\nReviewers:\n\nSubscribers:\n\nTasks:\n\nTags:",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-10T15:46:47-05:00",
      "committed_date": "2025-02-10T15:46:47-05:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeTypes.js"
      ]
    },
    {
      "sha": "3dd2c627707fea4f45fd8e5cc583036a72e3f77b",
      "short_sha": "3dd2c62",
      "message": "[react-native] fix divergence in synced code (#32348)\n\nAlternative to #32334",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-10T14:08:44-05:00",
      "committed_date": "2025-02-10T14:08:44-05:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeTypes.js"
      ]
    },
    {
      "sha": "93b58361d9c9632acdda76eb8a1a582d1ff9701a",
      "short_sha": "93b5836",
      "message": "Trigger Discord notification when draft PR is set to \"ready for review\" (#32344)\n\nFollow-up for #32332. The Discord webhook seems to ignore draft PRs,\nwhich is a good thing. But when a draft PR is then later set to \"ready\nfor review\" we do want to send another notification that should not be\nfiltered out.",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-02-09T23:55:50+01:00",
      "committed_date": "2025-02-09T17:55:50-05:00",
      "changed_files": [
        ".github/workflows/runtime_discord_notify.yml"
      ]
    },
    {
      "sha": "594ea533d39f71fa16503c0e5d5e146e9278647e",
      "short_sha": "594ea53",
      "message": "Remove useActionState Hook export from experimental react-server condition (#32342)\n\nThis Hook is not available in RSC environments. This is already the case\nin stable but not in experimental for some reason. Probably an\noversight.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-02-09T15:01:28-05:00",
      "committed_date": "2025-02-09T15:01:28-05:00",
      "changed_files": [
        "packages/react/src/ReactServer.experimental.development.js",
        "packages/react/src/ReactServer.experimental.js"
      ]
    },
    {
      "sha": "062fb31155e42b6997a35b97180055814471620c",
      "short_sha": "062fb31",
      "message": "[ci] Fix typo (#32337)\n\nOops.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-07T18:01:53-05:00",
      "committed_date": "2025-02-07T18:01:53-05:00",
      "changed_files": [
        ".github/workflows/shared_close_direct_sync_branch_prs.yml"
      ]
    },
    {
      "sha": "7588b6b291b17fb2130244115b07e9945a864626",
      "short_sha": "7588b6b",
      "message": "[ci] Disallow PRs against builds branch (#32335)\n\nOur internal build infra relies on a 1:1 mapping between `main` and the\n2 build branches. Directly committing changes to those branches breaks\nthat infra.\n\nAdds a simple workflow to leave a comment and decline the PR.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-07T17:49:09-05:00",
      "committed_date": "2025-02-07T17:49:09-05:00",
      "changed_files": [
        ".github/workflows/shared_close_direct_sync_branch_prs.yml"
      ]
    },
    {
      "sha": "569c3b28ee968df58ff3c55be9a8efa2ee72fc82",
      "short_sha": "569c3b2",
      "message": "[ci] Combine sizebot jobs (#32333)\n\nThere's no real reason to have 2 jobs for sizebot. It's more of a\nhistorical artifact from before the GH migration. Merging them should\nrequire one less worker needing to be provisioned and some of the extra\noverhead\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32333).\n* __->__ #32333\n* #32332",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-07T16:39:37-05:00",
      "committed_date": "2025-02-07T16:39:37-05:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "bc78de3a521f65f756579fee0996ec5c81f3af73",
      "short_sha": "bc78de3",
      "message": "[ci] Use 'opened' event for discord notifications (#32332)\n\nWe don't need to wait for it to be labeled now that we have the shared\nmaintainer check workflow.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32332).\n* #32333\n* __->__ #32332",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-07T16:34:26-05:00",
      "committed_date": "2025-02-07T16:34:26-05:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml"
      ]
    },
    {
      "sha": "989b0cccc215e5c4692552b0cc01d23938dcf99b",
      "short_sha": "989b0cc",
      "message": "[compiler] Add simple walltime measurement (#32331)\n\nAdds a new Timing logger event to the compiler which currently only\nrecords the walltime of running the compiler from the time the babel\nplugin's Program visitor enters to the time it exits.\n\nTo enable, run the compiler with `ENABLE_REACT_COMPILER_TIMINGS=1 ...`\nor `export ENABLE_REACT_COMPILER_TIMINGS=1` to set it by default.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-07T16:04:46-05:00",
      "committed_date": "2025-02-07T16:04:46-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Babel/BabelPlugin.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts"
      ]
    },
    {
      "sha": "76e44c29110f12caff8302da624076b68547b8ef",
      "short_sha": "76e44c2",
      "message": "[compiler] Improve error messages for unhandled terminal and instruction kinds (#32324)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\n<!--\nExplain the **motivation** for making this change. What existing problem\ndoes the pull request solve?\n-->\nImprove the error message, as the value is currently an object instead\nof a string, which results in it being converted to '[object Object]'.\n\n## How did you test this change?\nAlready tested locally.\n<!--\nDemonstrate the code is solid. Example: The exact commands you ran and\ntheir output, screenshots / videos if the pull request changes the user\ninterface.\nHow exactly did you verify that your PR solves the issue you wanted to\nsolve?\n  If you leave this empty, your PR will very likely be closed.\n-->",
      "author": {
        "name": "inottn",
        "email": "inottn@outlook.com"
      },
      "authored_date": "2025-02-08T04:48:03+08:00",
      "committed_date": "2025-02-07T15:48:03-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PrintReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts"
      ]
    },
    {
      "sha": "8759c5c8d6aef34df576827215ff7ebaeafc79ea",
      "short_sha": "8759c5c",
      "message": "Ship enableFabricCompleteRootInCommitPhase (#32318)",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-02-07T11:12:29-05:00",
      "committed_date": "2025-02-07T11:12:29-05:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "44c3d3d665761bba86eb5c143a6eafc0ebf73263",
      "short_sha": "44c3d3d",
      "message": "fix[react-devtools-standalone]: define missing globals (#32327)\n\nSame as what we did for `react-devtools-fusebox` in\r\nhttps://github.com/facebook/react/pull/32297.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-02-07T11:07:46+00:00",
      "committed_date": "2025-02-07T11:07:46+00:00",
      "changed_files": [
        "packages/react-devtools-core/webpack.standalone.js"
      ]
    },
    {
      "sha": "ae3190c5e929ec3b899734e2a6aface7cd4e42d0",
      "short_sha": "ae3190c",
      "message": "React DevTools 6.1.0 -> 6.1.1 (#32326)\n\nFull list of changes:\r\n* DevTools: refactor NativeStyleEditor, don't use custom cache\r\nimplementation ([hoxyq](https://github.com/hoxyq) in\r\n[#32298](https://github.com/facebook/react/pull/32298))\r\n* fix[react-devtools-fusebox]: add extension globals to build\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32297](https://github.com/facebook/react/pull/32297))\r\n* DevTools: fix host component filter option title\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32296](https://github.com/facebook/react/pull/32296))\r\n* chore[DevTools]: make clipboardWrite optional for chromium\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32262](https://github.com/facebook/react/pull/32262))\r\n* DevTools: support useEffectEvent and forward-fix experimental prefix\r\nsupport ([hoxyq](https://github.com/hoxyq) in\r\n[#32106](https://github.com/facebook/react/pull/32106))",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-02-07T10:54:44+00:00",
      "committed_date": "2025-02-07T10:54:44+00:00",
      "changed_files": [
        "packages/react-devtools-core/package.json",
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-inline/package.json",
        "packages/react-devtools-timeline/package.json",
        "packages/react-devtools/CHANGELOG.md",
        "packages/react-devtools/package.json"
      ]
    },
    {
      "sha": "a0fdb6306043b9f049106e58dcec107d8dbed2b1",
      "short_sha": "a0fdb63",
      "message": "[Fiber][Dev] Relax dom nesting validation when the root is a Document, html tag, or body tag (#32252)\n\nfollowup to\r\n* https://github.com/facebook/react/pull/32069\r\n* https://github.com/facebook/react/pull/32163\r\n* https://github.com/facebook/react/pull/32224\r\n\r\nin react-dom in Dev we validate that the tag nesting is valid. This is\r\nmotivated primarily because while browsers are tolerant to poor HTML\r\nthere are many cases that if server rendered will be hydrated in a way\r\nthat will break hydration.\r\n\r\nWith the changes to singleton scoping where the document body is now the\r\nimplicit render/hydration context for arbitrary tags at the root we need\r\nto adjust the validation logic to allow for valid programs such as\r\nrendering divs as a child of a Document (since this div will actually\r\ninsert into the body).",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-02-06T15:05:51-08:00",
      "committed_date": "2025-02-06T15:05:51-08:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/client/validateDOMNesting.js",
        "packages/react-dom/src/__tests__/ReactDOM-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-dom/src/__tests__/validateDOMNesting-test.js"
      ]
    },
    {
      "sha": "b48e739998432fc9672a42d0d04515980b8cae82",
      "short_sha": "b48e739",
      "message": "[Fiber] `getHoistableRoot()` should account for Document containers (#32321)\n\nWhile modern DOM implementations all support getRootNode if you are\r\nrunning React in a runtime which does not the fallback logic which uses\r\n`.ownerDocument` works everywhere except when the container is a\r\nDocument itself. This change corrects this by returning the container\r\nintsance if it is a Document type.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-02-06T14:30:41-08:00",
      "committed_date": "2025-02-06T14:30:41-08:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "ff6283340a10bb72ad0fb16ca027606a9ea1e67c",
      "short_sha": "ff62833",
      "message": "Export addTransitionType for www (#32311)\n\nneed dis based api",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-02-05T17:31:32-06:00",
      "committed_date": "2025-02-05T18:31:32-05:00",
      "changed_files": [
        "packages/react/index.fb.js"
      ]
    },
    {
      "sha": "d85cf3e5ab6e049626a8bedddffbaec05c516195",
      "short_sha": "d85cf3e",
      "message": "DevTools: refactor NativeStyleEditor, don't use custom cache implementation (#32298)\n\nWe have this really old (5+ years) feature for inspecting native styles\r\nof React Native Host components.\r\n\r\nWe also have a custom Cache implementation in React DevTools, which was\r\nforked from React at some point. We know that this should be removed,\r\nbut it spans through critical parts of the application, like fetching\r\nand caching inspected element.\r\n\r\nBefore this PR, this was also used for caching native style and layouts\r\nof RN Host components. This approach is out of date, and was based on\r\nthe presence of Suspense boundary around inspected element View, which\r\nwe have removed to speed up element inspection -\r\nhttps://github.com/facebook/react/pull/30555.\r\n \r\nLooks like I've introduced a regression in\r\nhttps://github.com/facebook/react/pull/31956:\r\n- Custom Cache implementation will throw thenables and suspend.\r\n- Because of this, some descendant Suspense boundaries will not resolve\r\nfor a long time, and React will throw an error\r\nhttps://react.dev/errors/482.\r\n\r\nI've switched from a usage of this custom Cache implementation to a\r\nnaive fetching in effect and keeping the layout and style in a local\r\nstate of a Context, which will be propagated downwards. The race should\r\nbe impossible, this is guaranteed by the mechanism for queueing messages\r\nthrough microtasks queue.\r\n\r\nThe only downside is the UI. If you quickly switch between 2 elements,\r\nand one of them has native style, while the other doesn't, UI will feel\r\njumpy. We can address this later with a Suspense boundary, if needed.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-02-05T12:52:48+00:00",
      "committed_date": "2025-02-05T12:52:48+00:00",
      "changed_files": [
        "packages/react-devtools-inline/__tests__/__e2e__/components.test.js",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeStyleEditor/LayoutViewer.css",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeStyleEditor/StyleEditor.css",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeStyleEditor/StyleEditor.js",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeStyleEditor/context.js",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeStyleEditor/index.css",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeStyleEditor/index.js",
        "packages/react-devtools-shared/src/devtools/views/Components/TreeContext.js"
      ]
    },
    {
      "sha": "32b411496b92455cede3b286eb37c8b183989051",
      "short_sha": "32b4114",
      "message": "Set enableViewTransition to dynamic for www (#32306)\n\nUnblocks internal experimentation",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-02-04T15:53:03-05:00",
      "committed_date": "2025-02-04T15:53:03-05:00",
      "changed_files": [
        "packages/react/index.fb.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "0605cd9f38f8b9d0ca6f8bd9dd3409db8d6c5c81",
      "short_sha": "0605cd9",
      "message": "[Fiber] Disable comments as containers in OSS (#32250)\n\n3 years ago we partially disabled comment nodes as valid containers.\r\nSome unflagged support was left in due to legacy APIs like\r\n`unmountComponentAtNode` and `unstable_renderSubtreeIntoContainer` but\r\nthese were since removed in React 19. This update flags the remaining\r\nuses of comments as containers.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-02-04T12:39:52-08:00",
      "committed_date": "2025-02-04T12:39:52-08:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMContainer.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/events/DOMPluginEventSystem.js",
        "packages/react-dom/src/client/ReactDOMRoot.js",
        "packages/react-dom/src/client/ReactDOMRootFB.js"
      ]
    },
    {
      "sha": "8bda71558c8b6f9f19af33271f1bfd0251a1c071",
      "short_sha": "8bda715",
      "message": "[Fiber] support hydration when rendering Suspense anywhere (#32224)\n\nfollow up to https://github.com/facebook/react/pull/32163\r\n\r\nThis continues the work of making Suspense workable anywhere in a\r\nreact-dom tree. See the prior PRs for how we handle server rendering and\r\nclient rendering. In this change we update the hydration implementation\r\nto be able to locate expected nodes. In particular this means hydration\r\nunderstands now that the default hydration context is the document body\r\nwhen the container is above the body.\r\n\r\nOne case that is unique to hydration is clearing Suspense boundaries.\r\nWhen hydration fails or when the server instructs the client to recover\r\nan errored boundary it's possible that the html, head, and body tags in\r\nthe initial document were written from a fallback or a different primary\r\ncontent on the server and need to be replaced by the client render.\r\nHowever these tags (and in the case of head, their content) won't be\r\ninside the comment nodes that identify the bounds of the Suspense\r\nboundary. And when client rendering you may not even render the same\r\nsingletons that were server rendered. So when server rendering a\r\nboudnary which contributes to the preamble (the html, head, and body tag\r\nopenings plus the head contents) we emit a special marker comment just\r\nbefore closing the boundary out. This marker encodes which parts of the\r\npreamble this boundary owned. If we need to clear the suspense boundary\r\non the client we read this marker and use it to reset the appropriate\r\nsingleton state.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-02-04T12:30:30-08:00",
      "committed_date": "2025-02-04T12:30:30-08:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationUntrustedURL-test.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoHydration.js",
        "packages/react-reconciler/src/ReactFiberHydrationContext.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "f82c662b8d28461ffdb9f82f3fc26b7b54b9bef5",
      "short_sha": "f82c662",
      "message": "[Flight Parcel] Implement findSourceMapURL (#32294)\n\nThis implements `findSourceMapURL` in react-server-dom-parcel, enabling\nsource maps for replayed server errors on the client. It utilizes a new\nendpoint in the Parcel dev server that returns the source map for a\ngiven bundle/file. The error overlay UI has also been updated to handle\nthese stacks. See https://github.com/parcel-bundler/parcel/pull/10082\n\nAlso updated the fixture to the latest Parcel canary. A few APIs have\nchanged. We do have a higher level library wrapper now (`@parcel/rsc`\nadded in https://github.com/parcel-bundler/parcel/pull/10074) but I left\nthe fixture using the lower level APIs directly here since it is easier\nto see how react-server-dom-parcel is used.",
      "author": {
        "name": "Devon Govett",
        "email": "devongovett@gmail.com"
      },
      "authored_date": "2025-02-04T14:17:13-05:00",
      "committed_date": "2025-02-04T14:17:13-05:00",
      "changed_files": [
        "fixtures/flight-parcel/.parcelrc",
        "fixtures/flight-parcel/package.json",
        "fixtures/flight-parcel/src/Todos.tsx",
        "fixtures/flight-parcel/src/server.tsx",
        "fixtures/flight-parcel/yarn.lock",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientNode.js",
        "scripts/flow/environment.js"
      ]
    },
    {
      "sha": "0a82580bfc80538c5ce914514dc86b17c8889954",
      "short_sha": "0a82580",
      "message": "[ci] Only notify discord on core team label (#32303)\n\nRather than notify on every label event on a PR by a core team member,\nonly do so for the specific core team label event.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-02-03T12:57:51-05:00",
      "committed_date": "2025-02-03T12:57:51-05:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml"
      ]
    },
    {
      "sha": "442150e0e2783ce9ab407a113acd2656752323d2",
      "short_sha": "442150e",
      "message": "build(eslint-plugin-react-hooks): tsconfig and global types (#32283)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\nContributing to https://github.com/facebook/react/pull/32240, this\nchange adds the tsconfig, tsup config, and estree type declarations that\nwill be needed for that plugin's typescript migration.",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-02-03T11:07:30-06:00",
      "committed_date": "2025-02-03T12:07:30-05:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/src/types/estree.d.ts",
        "packages/eslint-plugin-react-hooks/src/types/global.d.ts",
        "packages/eslint-plugin-react-hooks/tsconfig.json",
        "packages/eslint-plugin-react-hooks/tsup.config.ts"
      ]
    },
    {
      "sha": "10a4c88f58233074f293ab387b73e96b67192538",
      "short_sha": "10a4c88",
      "message": "[compiler] Handle TSInstantiationExpression in lowerExpression (#32302)\n\nFix #31745",
      "author": {
        "name": "inottn",
        "email": "inottn@outlook.com"
      },
      "authored_date": "2025-02-04T00:41:04+08:00",
      "committed_date": "2025-02-03T08:41:04-08:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ts-instantiation-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ts-instantiation-expression.tsx"
      ]
    },
    {
      "sha": "a4b2d0d51854b10ca0346ab8977da4975d2a7498",
      "short_sha": "a4b2d0d",
      "message": "fix[react-devtools-fusebox]: add extension globals to build (#32297)\n\nWe started using these globals in `react-devtools-shared/src/frontend`\r\ncode, forward-fixing https://github.com/facebook/react/pull/32262.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-02-03T09:59:58+00:00",
      "committed_date": "2025-02-03T09:59:58+00:00",
      "changed_files": [
        "packages/react-devtools-fusebox/webpack.config.frontend.js"
      ]
    },
    {
      "sha": "1f0b03ced0d459129069d565cf5f8e5567881441",
      "short_sha": "1f0b03c",
      "message": "DevTools: fix host component filter option title (#32296)\n\nOverlook that in https://github.com/facebook/react/pull/32086, because\r\nof ternany, it is already string literals, so html entities names no\r\nlonger needed.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-02-03T09:59:47+00:00",
      "committed_date": "2025-02-03T09:59:47+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Settings/ComponentsSettings.js"
      ]
    },
    {
      "sha": "152bfe3769f87e29c8d68cb87fdb608d2483b7f1",
      "short_sha": "152bfe3",
      "message": "[compiler][rfc] Hacky retry pipeline for fire (#32164)\n\nHacky retry pipeline for when transforming `fire(...)` calls encounters\r\nvalidation, todo, or memoization invariant bailouts. Would love feedback\r\non how we implement this to be extensible to other compiler\r\nnon-memoization features (e.g. inlineJSX)\r\n\r\nSome observations:\r\n- Compiler \"front-end\" passes (e.g. lower, type, effect, and mutability\r\ninferences) should be shared for all compiler features -- memo and\r\notherwise\r\n- Many passes (anything dealing with reactive scope ranges, scope blocks\r\n/ dependencies, and optimizations such as ReactiveIR #31974) can be left\r\nout of the retry pipeline. This PR hackily skips memoization features by\r\nremoving reactive scope creation, but we probably should restructure the\r\npipeline to skip these entirely on a retry\r\n- We should maintain a canonical set of \"validation flags\"\r\n\r\nNote the newly added fixtures are prefixed with `bailout-...` when the\r\nretry fire pipeline is used. These fixture outputs contain correctly\r\ninserted `useFire` calls and no memoization.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-01-31T15:57:26-08:00",
      "committed_date": "2025-01-31T15:57:26-08:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-capitalized-fn-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-capitalized-fn-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-eslint-suppressions.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-eslint-suppressions.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-preserve-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-preserve-memo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-prop-write.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-prop-write.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-ref-current-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/bailout-validate-ref-current-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-syntax.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/error.todo-syntax.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/todo-use-no-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-retry/todo-use-no-memo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/bailout-validate-conditional-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-conditional-use-effect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-conditional-use-effect.expect.md"
      ]
    },
    {
      "sha": "19ca800caa01eec2f5e65e547c67b11592bec8b0",
      "short_sha": "19ca800",
      "message": "Reconciler: Combine identical cases in findParent (#32210)\n\n## Summary\r\n\r\nWhen lookup `Parent`, `HostRoot` and `HostPortal` should be merged,\r\nbecause when creating a `Portal`, it will also include\r\n`containerInfo`(So we can directly use this `containerInfo` to delete\r\nthe real DOM nodes.), so there is no need to handle them separately.\r\n\r\n## How did you test this change?\r\n\r\nNo behavior changes, all existing tests pass.",
      "author": {
        "name": "Wick",
        "email": "wick.linxunjie@gmail.com"
      },
      "authored_date": "2025-02-01T06:35:48+08:00",
      "committed_date": "2025-01-31T14:35:48-08:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "a657bc5dee29da313d2a03e7864b0665859bc7a8",
      "short_sha": "a657bc5",
      "message": "build(eslint-plugin-react-hooks): add dev dependencies for typescript migration (#32279)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\nContributing to https://github.com/facebook/react/pull/32240, this\nchange adds the dev dependencies needed to support the migration of the\nplugin to typescript.",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-01-31T13:32:23-06:00",
      "committed_date": "2025-01-31T14:32:23-05:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/package.json",
        "packages/eslint-plugin-react-hooks/package.json",
        "yarn.lock"
      ]
    },
    {
      "sha": "9ff42a8798863c995523e284142b47e3cdfaee80",
      "short_sha": "9ff42a8",
      "message": "Permit non-`DEV` Elements in `React.Children` w/ `DEV` (#32117)",
      "author": {
        "name": "Timothy Yung",
        "email": "yungsters@meta.com"
      },
      "authored_date": "2025-01-30T22:59:45-08:00",
      "committed_date": "2025-01-30T22:59:45-08:00",
      "changed_files": [
        "packages/react/src/__tests__/ReactChildren-test.js",
        "packages/react/src/jsx/ReactJSXElement.js"
      ]
    },
    {
      "sha": "87c03a0a134b19ffbda6bbef4b12202f4f5a4347",
      "short_sha": "87c03a0",
      "message": "Fix typo in dangerfile.js which results in an unreachable code path… (#32277)\n\n## Summary\n\nFix typo in dangerfile.js which results in an unreachable code path\nwhich ought to be hit when there is no matching base artifact during\nDangerCI automated code review.\n\nSee:\nhttps://github.com/facebook/react/blob/221f3002caa2314cba0a62950da6fb92b453d1d0/dangerfile.js#L73\nCompare:\nhttps://github.com/facebook/react/blob/221f3002caa2314cba0a62950da6fb92b453d1d0/dangerfile.js#L171\nAnd the case which should hit this code path:\nhttps://github.com/facebook/react/blob/221f3002caa2314cba0a62950da6fb92b453d1d0/dangerfile.js#L160\n\nGiven the above context, the condition `Number === Infinity` is clearly\nmeant to be `decimal === Infinity`, which it will be if the `catch`\nstatement triggers when there is no matching base artifact. Without this\nfix, the primitive value `Infinity` is passed to\n`percentFormatter.format(decimal)`, resulting in the string `'+∞%'`.\nWith this fix, the resulting string will be the intended `'New file'`.\n\n## [Resolves issue\n32278](https://github.com/facebook/react/issues/32278)",
      "author": {
        "name": "David Michael Gregg",
        "email": "davegregg@gmail.com"
      },
      "authored_date": "2025-01-31T01:44:02-05:00",
      "committed_date": "2025-01-31T01:44:02-05:00",
      "changed_files": [
        "dangerfile.js"
      ]
    },
    {
      "sha": "221f3002caa2314cba0a62950da6fb92b453d1d0",
      "short_sha": "221f300",
      "message": "chore[DevTools]: make clipboardWrite optional for chromium (#32262)\n\nAddresses https://github.com/facebook/react/issues/32244.\r\n\r\n### Chromium\r\nWe will use\r\n[chrome.permissions](https://developer.chrome.com/docs/extensions/reference/api/permissions)\r\nfor checking / requesting `clipboardWrite` permission before copying\r\nsomething to the clipboard.\r\n\r\n### Firefox\r\nWe will keep `clipboardWrite` as a required permission, because there is\r\nno reliable and working API for requesting optional permissions for\r\nextensions that are extending browser DevTools:\r\n- `chrome.permissions` is unavailable for devtools pages -\r\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1796933\r\n- You can't call `chrome.permissions.request` from background, because\r\nthis instruction has to be executed inside user-event callback,\r\nbasically only initiated by user.\r\n\r\nI don't really want to come up with solutions like opening a new tab\r\nwith a button that user has to click.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-30T20:08:17+00:00",
      "committed_date": "2025-01-30T20:08:17+00:00",
      "changed_files": [
        ".eslintrc.js",
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-shared/src/devtools/ContextMenu/types.js",
        "packages/react-devtools-shared/src/devtools/store.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementContextTree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementPropsTree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSourcePanel.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementStateTree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeStyleEditor/StyleEditor.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/SidebarEventInfo.js",
        "packages/react-devtools-shared/src/devtools/views/UnsupportedBridgeProtocolDialog.js",
        "packages/react-devtools-shared/src/errors/PermissionNotGrantedError.js",
        "packages/react-devtools-shared/src/frontend/utils/withPermissionsCheck.js",
        "packages/react-devtools-timeline/src/CanvasPageContextMenu.js",
        "scripts/flow/react-devtools.js"
      ]
    },
    {
      "sha": "55b54b0d638a6ae5c7a5ab6dd4fee732cfbc47ad",
      "short_sha": "55b54b0",
      "message": "[ci] Only install chromium for flight fixtures (#32275)\n\nI noticed we only use chromium in fixtures/flight, so let's specifically\nonly install that browser in ci.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-30T14:13:45-05:00",
      "committed_date": "2025-01-30T14:13:45-05:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "4b3728f05efbab9624e981339d8a0992a58f9a41",
      "short_sha": "4b3728f",
      "message": "[Fiber] Track Appearing Named ViewTransition in the accumulateSuspenseyCommit Phase (#32254)\n\nWhen a named ViewTransition component unmounts in one place and mounts\nin a different place we need to match these up so we know a pair has\nbeen created. Since the unmounts are tracked in the snapshot phase we\nneed some way to track the mounts before that.\n\nOriginally the way I did that is by reusing the render phase since there\nwas no other phase in the commit before that. However, that's not quite\ncorrect. Just because something is visited in render doesn't mean it'll\ncommit. E.g. if that tree ends up suspending or erroring. Which would\nlead to a false positive on match. The unmount shouldn't animate in that\ncase.\n\n(Un)fortunately we have already added a traversal before the snapshot\nphase for tracking suspensey CSS. The `accumulateSuspenseyCommit` phase.\nThis needs to find new mounts of Suspensey CSS or if there was a\nreappearing Offscreen boundary it needs to find any Suspensey CSS\nalready inside that tree. This is exactly the same traversal we need to\nfind newly appearing View Transition components. So we can just reuse\nthat.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-30T12:13:36-05:00",
      "committed_date": "2025-01-30T12:13:36-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberFlags.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "f02ba2fcc5de5c280d5c79f52302b04daaaf1e23",
      "short_sha": "f02ba2f",
      "message": "[ci] Remove build_devtools_and_process_artifacts as a dependency to run_devtools_e2e_tests (#32267)\n\nI just noticed that we don't actually need to let the devtools build\nfinish first because the e2e tests don't use those built files. We can\ndecouple them to allow them to run in paralllel.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-30T11:55:28-05:00",
      "committed_date": "2025-01-30T11:55:28-05:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "14f7c072719564ee4269c5fdadb6b8a737546422",
      "short_sha": "14f7c07",
      "message": "[ci] Try to parallelize devtools builds (#32266)\n\nBuilding DevTools is currently the long pole for the runtime CI job.\nLet's see if we can get the overall runtime for runtime build and test\ndown by speeding this one step up.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32266).\n* #32267\n* __->__ #32266",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-30T11:49:04-05:00",
      "committed_date": "2025-01-30T11:49:04-05:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml",
        "scripts/ci/pack_and_store_devtools_artifacts.sh"
      ]
    },
    {
      "sha": "2fe5b572bc79c51785bcd17dd16e85427c1d2548",
      "short_sha": "2fe5b57",
      "message": "[Fiber] Read the class name from props.layout (#32273)\n\nCopypasta typo.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-30T11:46:43-05:00",
      "committed_date": "2025-01-30T11:46:43-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "bb9a24d9fc5faa57a85750cd3bb94546baa405ac",
      "short_sha": "bb9a24d",
      "message": "Use fastAddProperties in diffing (#32243)\n\n## Summary\r\n\r\n`fastAddProperties` has shown some perf benefits when used for creating\r\nprops payload for new components. In this PR we'll try to use it for\r\ndiffing props for existing components.\r\n\r\nIt would be good enough if it simply doesn't regress perf. We'll be able\r\nto delete the old `addProperties`, and make `fastAddProperties` the\r\ndefault behaviour.\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn lint\r\nyarn flow native\r\nyarn test packages/react-native-renderer -r=xplat --variant=false\r\nyarn test packages/react-native-renderer -r=xplat --variant=true\r\n```",
      "author": {
        "name": "Dmytro Rykun",
        "email": "dmitryrykun@meta.com"
      },
      "authored_date": "2025-01-30T11:16:42+00:00",
      "committed_date": "2025-01-30T11:16:42+00:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeAttributePayloadFabric.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "b2357ecd8203341a3668a96d32d68dd519e5430d",
      "short_sha": "b2357ec",
      "message": "[RN] Add support for document instance in React Native (#32260)\n\n## Summary\r\n\r\nWe're adding support for `Document` instances in React Native (as\r\n`ReactNativeDocument` instances) in\r\nhttps://github.com/facebook/react-native/pull/49012 , which requires the\r\nReact Fabric renderer to handle its lifecycle.\r\n\r\nThis modifies the renderer to create those document instances and\r\nassociate them with the React root, and provides a new method for React\r\nNative to access them given its containerTag / rootTag.\r\n\r\n## How did you test this change?\r\n\r\nTested e2e in https://github.com/facebook/react-native/pull/49012\r\nmanually syncing these changes.",
      "author": {
        "name": "Rubén Norte",
        "email": "rubennorte@meta.com"
      },
      "authored_date": "2025-01-29T17:07:00+00:00",
      "committed_date": "2025-01-29T17:07:00+00:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-native-renderer/src/ReactNativeRenderer.js",
        "packages/react-native-renderer/src/ReactNativeTypes.js",
        "packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/ReactNativePrivateInterface.js",
        "packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/createPublicInstance.js",
        "packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/createPublicRootInstance.js",
        "scripts/flow/react-native-host-hooks.js"
      ]
    },
    {
      "sha": "c492f97541486458ce21653d2669d53d380f0538",
      "short_sha": "c492f97",
      "message": "[Fiber] Support Suspense boundaries anywhere (excluding hydration) (#32163)\n\nThis is a follow up to https://github.com/facebook/react/pull/32069\r\n\r\nIn the prior change I updated Fizz to allow you to render Suspense\r\nboundaries at any level within a react-dom application by treating the\r\ndocument body as the default render scope. This change updates Fiber to\r\nprovide similar semantics. Note that this update still does not deliver\r\nhydration so unifying the Fizz and Fiber implementations in a single App\r\nis not possible yet.\r\n\r\nThe implementation required a rework of the getHostSibling and\r\ngetHostParent algorithms. Now most HostSingletons are invisible from a\r\nhost positioning perspective. Head is special in that it is a valid host\r\nscope so when you have Placements inside of it, it will act as the\r\nparent. But body, and html, will not directly participate in host\r\npositioning.\r\n\r\nAdditionally to support flipping to a fallback html, head, and body tag\r\nin a Suspense fallback I updated the offscreen hiding/unhide logic to\r\npierce through singletons when lookin for matching hidable nod\r\nboundaries anywhere (excluding hydration)",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-01-28T22:42:50-08:00",
      "committed_date": "2025-01-28T22:42:50-08:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOM-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoSingletons.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js"
      ]
    },
    {
      "sha": "37906d4dfbe80d71f312f7347bb9ddb930484d28",
      "short_sha": "37906d4",
      "message": "[Flight Parcel] Pass import maps through client references (#32132)\n\nCorresponding Parcel PR:\nhttps://github.com/parcel-bundler/parcel/pull/10073\n\nParcel avoids [cascading cache\ninvalidation](https://philipwalton.com/articles/cascading-cache-invalidation/)\nby injecting a bundle manifest containing a mapping of stable bundle ids\nto hashed URLs. When using an HTML entry point, this is done (as of the\nabove PR) via a native import map. This means that if a bundle's hash\nchanges, only that bundle will be invalidated (plus the HTML itself\nwhich typically has a short caching policy), not any other bundles that\nreference it.\n\nFor RSCs, we cannot currently use native import maps because of client\nside navigations, where a new HTML file is not requested. Eventually,\nmultiple `<script type=\"importmap\">` elements will be supported\n(https://github.com/whatwg/html/pull/10528) ([coming Chrome\n133](https://chromestatus.com/feature/5121916248260608)), at which point\nReact could potentially inject them. In the meantime, I've added some\nAPIs to Parcel to polyfill this. With this change, an import map can be\nsent along with a client reference, containing a mapping for any dynamic\nimports and URL dependencies (e.g. images) that are referenced by the JS\nbundles. On the client, the import map is extended with these new\nmappings prior to executing the referenced bundles. This preserves the\ncaching advantages described above while supporting client navigations.",
      "author": {
        "name": "Devon Govett",
        "email": "devongovett@gmail.com"
      },
      "authored_date": "2025-01-27T12:39:56-08:00",
      "committed_date": "2025-01-27T15:39:56-05:00",
      "changed_files": [
        "packages/react-server-dom-parcel/src/ReactFlightParcelReferences.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightClientConfigBundlerParcel.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightServerConfigParcelBundler.js",
        "packages/react-server-dom-parcel/src/shared/ReactFlightImportMetadata.js",
        "scripts/flow/environment.js"
      ]
    },
    {
      "sha": "d676c047b1463169efafc946fba3182c1809651a",
      "short_sha": "d676c04",
      "message": "Update MAINTAINERS (#32238)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-27T13:40:45-06:00",
      "committed_date": "2025-01-27T13:40:45-06:00",
      "changed_files": [
        "MAINTAINERS"
      ]
    },
    {
      "sha": "ddc26c9db16a7be2f05eacc6f0228f42eeff3803",
      "short_sha": "ddc26c9",
      "message": "Swap to Eli's new GitHub username in Maintainers file (#32237)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->",
      "author": {
        "name": "Eli White",
        "email": "github@eli-white.com"
      },
      "authored_date": "2025-01-27T10:10:40-08:00",
      "committed_date": "2025-01-27T10:10:40-08:00",
      "changed_files": [
        "MAINTAINERS"
      ]
    },
    {
      "sha": "dc44bca85b19481267ae5f7c0c271f8a5a126654",
      "short_sha": "dc44bca",
      "message": "fix(react-compiler-healthcheck): Add shebang to banner (#32225)\n\n## Summary\n\nPR https://github.com/facebook/react/pull/31963 migrated the bundler\nfrom Rollup to esbuild, but the `react-compiler-healthcheck` script\nlacks a shebang, leading to issues with `npx` not being able to execute\nit.\n\n\nhttps://github.com/facebook/react/blob/dc7578290f1bc55c358bee3a7eeb5e5f4551adfd/compiler/packages/react-compiler-healthcheck/rollup.config.js#L60-L78\n\n\nhttps://github.com/facebook/react/blob/9eabb37338e6bea18441dec58a4284fe00ee09ae/compiler/packages/react-compiler-healthcheck/scripts/build.js#L38-L53\n\n## How did you test this change?\n\n**Before**\n\n(fail)\n\n```shell\n(main)> npx --version\n10.5.0\n(main)> npx react-compiler-healthcheck\n/home/jeremy/.npm/_npx/67b118a83a29962c/node_modules/.bin/react-compiler-healthcheck: line 1: /bin: Is a directory\n/home/jeremy/.npm/_npx/67b118a83a29962c/node_modules/.bin/react-compiler-healthcheck: line 2: syntax error near unexpected token `('\n/home/jeremy/.npm/_npx/67b118a83a29962c/node_modules/.bin/react-compiler-healthcheck: line 2: ` * Copyright (c) Meta Platforms, Inc. and affiliates.'\n```\n\n**After**\n\n```shell\n(main)> npx react-compiler-healthcheck\nSuccessfully compiled 108 out of 146 components.\nStrictMode usage not found.\nFound no usage of incompatible libraries.\n```",
      "author": {
        "name": "Jeremy JIANG",
        "email": "JeremyJiang430@outlook.com"
      },
      "authored_date": "2025-01-28T00:59:25+08:00",
      "committed_date": "2025-01-27T11:59:25-05:00",
      "changed_files": [
        "compiler/packages/react-compiler-healthcheck/scripts/build.js"
      ]
    },
    {
      "sha": "9eabb37338e6bea18441dec58a4284fe00ee09ae",
      "short_sha": "9eabb37",
      "message": "[compiler][be] Remove unused experimental Rust port\n\nI wrote this a couple summers back as an experiment to see how easily we could translate the compiler to Rust. We make extensive use of in-place mutation of the IR, and the experiment proved that this we can get reasonable ergonomics for this in Rust which was cool. We've since ended up using some of the code here for Relay, allowing Relay Compiler to parse JS files to do more fine-grained extraction of data. For React Compiler though, we plan to continue using JavaScript and explore lightweight native wrappers for things like OXC and SWC plugins. We're also working with the Hermes team to eventually compile the compiler with Static Hermes.\n\nAs Tomo always says: always bet on JavaScript.\n\nghstack-source-id: c5770a2efce16a7153dd98702f47bc84d380c8b2\nPull Request resolved: https://github.com/facebook/react/pull/32219",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2025-01-24T12:19:10-08:00",
      "committed_date": "2025-01-24T12:23:31-08:00",
      "changed_files": [
        ".github/workflows/compiler_rust.yml",
        "compiler/Cargo.lock",
        "compiler/Cargo.toml",
        "compiler/crates/react_build_hir/Cargo.toml",
        "compiler/crates/react_build_hir/README.md",
        "compiler/crates/react_build_hir/src/build.rs",
        "compiler/crates/react_build_hir/src/builder.rs",
        "compiler/crates/react_build_hir/src/context.rs",
        "compiler/crates/react_build_hir/src/error.rs",
        "compiler/crates/react_build_hir/src/lib.rs",
        "compiler/crates/react_diagnostics/Cargo.toml",
        "compiler/crates/react_diagnostics/README.md",
        "compiler/crates/react_diagnostics/src/diagnostic.rs",
        "compiler/crates/react_diagnostics/src/lib.rs",
        "compiler/crates/react_estree/Cargo.toml",
        "compiler/crates/react_estree/README.md",
        "compiler/crates/react_estree/build.rs",
        "compiler/crates/react_estree/src/binding.rs",
        "compiler/crates/react_estree/src/fixtures/for-statement.json",
        "compiler/crates/react_estree/src/fixtures/import.json",
        "compiler/crates/react_estree/src/fixtures/simple.json",
        "compiler/crates/react_estree/src/fixtures/test.json",
        "compiler/crates/react_estree/src/generated.rs",
        "compiler/crates/react_estree/src/generated_extensions.rs",
        "compiler/crates/react_estree/src/js_value.rs",
        "compiler/crates/react_estree/src/lib.rs",
        "compiler/crates/react_estree/src/range.rs",
        "compiler/crates/react_estree/src/snapshots/forget_estree__tests__fixtures@for-statement.json.snap",
        "compiler/crates/react_estree/src/snapshots/forget_estree__tests__fixtures@import.json.snap",
        "compiler/crates/react_estree/src/snapshots/forget_estree__tests__fixtures@simple.json.snap",
        "compiler/crates/react_estree/src/snapshots/forget_estree__tests__fixtures@test.json.snap",
        "compiler/crates/react_estree/src/snapshots/react_estree__tests__fixtures@for-statement.json.snap",
        "compiler/crates/react_estree/src/snapshots/react_estree__tests__fixtures@import.json.snap",
        "compiler/crates/react_estree/src/snapshots/react_estree__tests__fixtures@simple.json.snap",
        "compiler/crates/react_estree/src/snapshots/react_estree__tests__fixtures@test.json.snap",
        "compiler/crates/react_estree/src/visit.rs",
        "compiler/crates/react_estree_codegen/Cargo.toml",
        "compiler/crates/react_estree_codegen/README.md",
        "compiler/crates/react_estree_codegen/src/codegen.rs",
        "compiler/crates/react_estree_codegen/src/ecmascript.json",
        "compiler/crates/react_estree_codegen/src/lib.rs",
        "compiler/crates/react_fixtures/Cargo.toml",
        "compiler/crates/react_fixtures/README.md",
        "compiler/crates/react_fixtures/src/lib.rs",
        "compiler/crates/react_fixtures/tests/fixtures/constant-propagation-constant-if-condition.js",
        "compiler/crates/react_fixtures/tests/fixtures/constant-propagation.js",
        "compiler/crates/react_fixtures/tests/fixtures/destructure-array.js",
        "compiler/crates/react_fixtures/tests/fixtures/destructure-object.js",
        "compiler/crates/react_fixtures/tests/fixtures/error.assign-to-global.js",
        "compiler/crates/react_fixtures/tests/fixtures/for-statement.js",
        "compiler/crates/react_fixtures/tests/fixtures/function-expressions.js",
        "compiler/crates/react_fixtures/tests/fixtures/identifiers.js",
        "compiler/crates/react_fixtures/tests/fixtures/if-statement.js",
        "compiler/crates/react_fixtures/tests/fixtures/simple-function.js",
        "compiler/crates/react_fixtures/tests/fixtures/simple-ssa.js",
        "compiler/crates/react_fixtures/tests/fixtures/simple.js",
        "compiler/crates/react_fixtures/tests/fixtures/ssa-reassign-if.js",
        "compiler/crates/react_fixtures/tests/fixtures/use-memo.js",
        "compiler/crates/react_fixtures/tests/fixtures_test.rs",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@constant-propagation-constant-if-condition.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@constant-propagation.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@destructure-array.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@destructure-object.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@error.assign-to-global.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@for-statement.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@function-expressions.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@identifiers.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@if-statement.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@simple-function.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@simple-ssa.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@simple.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@ssa-reassign-if.js.snap",
        "compiler/crates/react_fixtures/tests/snapshots/fixtures_test__fixtures@use-memo.js.snap",
        "compiler/crates/react_hermes_parser/Cargo.toml",
        "compiler/crates/react_hermes_parser/README.md",
        "compiler/crates/react_hermes_parser/build.rs",
        "compiler/crates/react_hermes_parser/src/generated.rs",
        "compiler/crates/react_hermes_parser/src/generated_extension.rs",
        "compiler/crates/react_hermes_parser/src/lib.rs",
        "compiler/crates/react_hermes_parser/tests/fixtures/alias-capture-in-method-receiver-and-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/alias-capture-in-method-receiver.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/alias-computed-load.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/alias-nested-member-path-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/alias-nested-member-path.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/alias-while.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/allocating-primitive-as-dep-nested-scope.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/allocating-primitive-as-dep.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/allow-passing-refs-as-props.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-access-assignment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-at-closure.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-at-effect.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-at-mutate-after-capture.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-expression-spread.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-join.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-map-frozen-array.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-map-mutable-array-mutating-lambda.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-pattern-params.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-properties.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-property-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/array-push-effect.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/arrow-function-expr-gating-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/assignment-expression-computed.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/assignment-expression-nested-path.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/assignment-in-nested-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/assignment-variations-complex-lvalue-array.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/assignment-variations-complex-lvalue.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/assignment-variations.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/await-side-effecting-promise.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/await.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/babel-existing-react-import.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/babel-existing-react-kitchensink-import.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/bug.useMemo-deps-array-not-cleared.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/bug_object-pattern.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/builtin-jsx-tag-lowered-between-mutations.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/call-args-assignment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/call-args-destructuring-assignment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/call-spread.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/call-with-independently-memoizable-arg.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capture-indirect-mutate-alias.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capture-param-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capture_mutate-across-fns.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-arrow-function-1.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-fun-alias-captured-mutate-2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-fun-alias-captured-mutate-arr-2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-alias-captured-mutate-arr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-alias-captured-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-alias-computed-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-alias-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-alias-receiver-computed-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-alias-receiver-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-mutate-2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-mutate-3.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-mutate-nested.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-func-simple-alias.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-1.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-alias-computed-load-2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-alias-computed-load-3.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-alias-computed-load-4.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-alias-computed-load.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-capture-ref-before-rename.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-conditional-capture-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-decl.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-member-expr-arguments.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-member-expr-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-renamed-ref.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-runs-inference.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-shadow-captured.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-skip-computed-path.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-function-within-block.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-member-expr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-nested-member-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-nested-member-expr-in-nested-func.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-nested-member-expr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-reference-changes-type.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-variable-in-nested-block.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/capturing-variable-in-nested-function.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/chained-assignment-context-variable.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/chained-assignment-expressions.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/codegen-emit-imports-same-source.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/codegen-emit-make-read-only.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/codegen-instrument-forget-gating-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/codegen-instrument-forget-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/complex-while.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/component.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/computed-call-evaluation-order.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/computed-call-spread.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/computed-load-primitive-as-dependency.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/computed-store-alias.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/concise-arrow-expr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/cond-deps-conditional-member-expr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/conditional-break-labeled.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/conditional-break.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/conditional-on-mutable.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/conditional-set-state-in-render.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/console-readonly.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/const-propagation-into-function-expression-global.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/const-propagation-into-function-expression-primitive.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/constant-computed.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/constant-propagation-for.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/constant-propagation-into-function-expressions.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/constant-propagation-phi.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/constant-propagation-while.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/constant-propagation.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/constructor.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/context-variable-reassigned-outside-of-lambda.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/controlled-input.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/dce-loop.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/debugger-memoized.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/debugger.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/declare-reassign-variable-in-closure.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/declare-reassign-variable-in-function-declaration.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/delete-computed-property.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/delete-property.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/dependencies-outputs.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/dependencies.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructure-capture-global.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructure-direct-reassignment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructuring-array-default.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructuring-array-param-default.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructuring-assignment-array-default.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructuring-assignment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructuring-mixed-scope-and-local-variables-with-default.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructuring-mixed-scope-declarations-and-locals.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructuring-object-default.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructuring-object-param-default.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructuring-property-inference.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/destructuring.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/disable-jsx-memoization.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/do-while-break.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/do-while-compound-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/do-while-conditional-break.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/do-while-continue.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/do-while-early-unconditional-break.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/do-while-simple.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/dominator.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/early-return.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error._todo.computed-lval-in-destructure.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error._todo.multi-arrow-expr-export-default-gating-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.babel-existing-react-namespace-import.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.bug-validate-no-set-state-not-all-mutable-range-extensions-are-bad.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.call-args-destructuring-asignment-complex.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.codegen-error-on-conflicting-imports.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.hoisted-function-declaration.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.hooks-with-React-namespace.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-access-ref-during-render.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-array-push-frozen.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-assign-hook-to-local.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-capture-func-passed-to-jsx.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-computed-store-to-frozen-value.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-delete-computed-property-of-frozen-value.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-delete-property-of-frozen-value.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-destructure-assignment-to-global.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-destructure-to-local-global-variables.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-freeze-conditionally-mutable-lambda.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-freeze-mutable-lambda-mutate-local.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-freeze-mutable-lambda-reassign-local.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-function-expression-mutates-immutable-value.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-mutate-after-aliased-freeze.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-mutate-after-freeze.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-pass-hook-as-call-arg.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-pass-hook-as-prop.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-pass-ref-to-function.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-property-store-to-frozen-value.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-ref-in-callback-invoked-during-render.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-ref-value-as-props.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-set-and-read-ref-during-render.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-sketchy-code-use-forget.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-ternary-with-hook-values.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-unconditional-set-state-in-render.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-use-ref-added-to-dep-without-type-info.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-useMemo-async-callback.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.invalid-useMemo-callback-args.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.mutate-captured-arg-separately.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.mutate-global-increment-op-invalid-react.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.reassignment-to-global.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.todo-kitchensink.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.todo-unconditional-set-state-lambda.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.todo.destructure-assignment-to-context-var.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.useMemo-callback-generator.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/error.while-with-assignment-in-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/escape-analysis-destructured-rest-element.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/escape-analysis-jsx-child.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/escape-analysis-logical.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/escape-analysis-non-escaping-interleaved-allocating-dependency.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/escape-analysis-non-escaping-interleaved-allocating-nested-dependency.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/escape-analysis-non-escaping-interleaved-primitive-dependency.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/escape-analysis-not-conditional-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/escape-analysis-not-if-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/escape-analysis-not-switch-case.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/escape-analysis-not-switch-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/expression-with-assignment-dynamic.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/expression-with-assignment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/extend-scopes-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/fbt-call-complex-param-value.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/fbt-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/fbt-params-complex-param-value.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/fbt-params.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/fbt-template-string-same-scope.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-empty-update-with-continue.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-empty-update.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-logical.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-of-break.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-of-conditional-break.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-of-continue.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-of-destructure.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-of-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-of-mutate.tsx",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-of-simple.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/for-return.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/frozen-after-alias.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/function-declaration-reassign.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/function-declaration-redeclare.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/function-declaration-simple.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/function-expression-captures-value-later-frozen-jsx.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/function-expression-maybe-mutates-hook-return-value.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/function-expression-with-store-to-parameter.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/function-param-assignment-pattern.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/gating-test-export-default-function.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/gating-test-export-function-and-default.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/gating-test-export-function.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/gating-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/global-jsx-tag-lowered-between-mutations.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/globals-Boolean.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/globals-Number.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/globals-String.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/holey-array-expr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/holey-array-pattern-dce-2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/holey-array-pattern-dce.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/holey-array.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/hook-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/hook-inside-logical-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/hooks-freeze-arguments.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/hooks-freeze-possibly-mutable-arguments.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/immutable-hooks.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/inadvertent-mutability-readonly-class.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/inadvertent-mutability-readonly-lambda.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/independent-across-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/independent.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/independently-memoize-object-property.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/infer-computed-delete.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/infer-global-object.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/infer-phi-primitive.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/infer-property-delete.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/infer-types-through-type-cast.flow.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/inner-memo-value-not-promoted-to-outer-scope-dynamic.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/inner-memo-value-not-promoted-to-outer-scope-static.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/interdependent-across-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/interdependent.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/inverted-if-else.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/inverted-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/issue852.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/issue933-disjoint-set-infinite-loop.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/jsx-empty-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/jsx-fragment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/jsx-member-expression-tag-grouping.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/jsx-member-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/jsx-namespaced-name.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/jsx-spread.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/jsx-tag-evaluation-order-non-global.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/jsx-tag-evaluation-order.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/lambda-capture-returned-alias.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/lambda-mutate-shadowed-object.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/lambda-mutated-non-reactive-to-reactive.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/lambda-mutated-ref-non-reactive.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/lambda-reassign-primitive.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/lambda-reassign-shadowed-primitive.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/lambda-with-fbt.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/logical-expression-object.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/logical-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/method-call-computed.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/method-call-fn-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/method-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/multi-arrow-expr-export-gating-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/multi-arrow-expr-gating-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/mutable-lifetime-loops.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/mutable-lifetime-with-aliasing.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/mutable-liverange-loop.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/nested-function-shadowed-identifiers.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/nested-optional-member-expr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/nested-scopes-hook-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/new-spread.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/nonoptional-load-from-optional-memberexpr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/obj-literal-cached-in-if-else.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/obj-literal-mutated-after-if-else.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/obj-mutated-after-if-else-with-alias.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/obj-mutated-after-if-else.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/obj-mutated-after-nested-if-else-with-alias.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/object-computed-access-assignment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/object-expression-string-literal-key.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/object-literal-spread-element.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/object-pattern-params.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/object-properties.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-call-chained.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-call-logical.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-call-simple.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-call-with-independently-memoizable-arg.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-call-with-optional-property-load.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-computed-load-static.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-computed-member-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-member-expression-call-as-property.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-member-expression-chain.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-member-expression-with-optional-member-expr-as-property.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-member-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-method-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-receiver-method-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/optional-receiver-optional-method.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/overlapping-scopes-interleaved-by-terminal.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/overlapping-scopes-interleaved.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/overlapping-scopes-shadowed.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/overlapping-scopes-shadowing-within-block.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/overlapping-scopes-while.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/overlapping-scopes-within-block.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/primitive-alias-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/primitive-as-dep-nested-scope.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/primitive-as-dep.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/prop-capturing-function-1.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/property-assignment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/property-call-evaluation-order.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/property-call-spread.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reactive-dependencies-non-optional-properties-inside-optional-chain.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reactive-scope-grouping.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reactive-scopes-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reactive-scopes.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reactivity-analysis-interleaved-reactivity.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reactivity-analysis-reactive-via-mutation-of-computed-load.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reactivity-analysis-reactive-via-mutation-of-property-load.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reassign-object-in-context.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reassign-primitive-in-context.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reassigned-phi-in-returned-function-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reassignment-conditional.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reassignment-separate-scopes.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reassignment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/recursive-function-expr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-cfg-condexpr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-cfg-ifelse.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-cfg-nested-ifelse-missing.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-cfg-nested-ifelse.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-cfg-switch-missing-case.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-cfg-switch-missing-default.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-cfg-switch.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-no-uncond.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-promote-uncond.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-subpath-order1.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-subpath-order2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-superpath-order1.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-deps-superpath-order2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-cond-memberexpr-join.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-dependencies-optional-member-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-deps-cond-scope.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-deps-join-uncond-scopes-cond-deps.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-uncond-deps-nonoverlap-descendant.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-uncond-deps-nonoverlap-direct.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-uncond-deps-overlap-descendant.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-uncond-deps-overlap-direct.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-uncond-deps-subpath-order1.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-uncond-deps-subpath-order2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reduce-reactive-uncond-deps-subpath-order3.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ref-current-aliased-no-added-to-dep.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ref-current-aliased-not-added-to-dep-2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ref-current-field-not-added-to-dep.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ref-current-not-added-to-dep-2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ref-current-not-added-to-dep.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ref-current-optional-field-no-added-to-dep.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ref-current-write-not-added-to-dep.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ref-in-effect.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/regexp-literal.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/remove-memoization-kitchen-sink.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/repro-reassign-to-variable-without-mutable-range.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/repro-scope-missing-mutable-range.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/repro.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/return-conditional.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/return-undefined.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/reverse-postorder.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/same-variable-as-dep-and-redeclare-maybe-frozen.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/same-variable-as-dep-and-redeclare.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/sequence-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/sequentially-constant-progagatable-if-test-conditions.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/simple-alias.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/simple-function-1.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/simple-scope.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/simple.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/sketchy-code-exhaustive-deps.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/sketchy-code-rules-of-hooks.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-arrayexpression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-call-jsx-2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-call-jsx.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-cascading-eliminated-phis.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-complex-multiple-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-complex-single-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-for-of.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-for-trivial-update.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-for.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-if-else.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-leave-case.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-multiple-phis.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-nested-loops-no-reassign.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-nested-partial-phi.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-nested-partial-reassignment.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-newexpression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-non-empty-initializer.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-objectexpression-phi.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-objectexpression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-property-alias-alias-mutate-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-property-alias-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-property-alias-mutate-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-property-alias-mutate-inside-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-property-alias-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-property-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-property-mutate-2.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-property-mutate-alias.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-property-mutate.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-property.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-reassign-in-rval.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-reassign.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming-ternary-destruction-with-mutation.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming-ternary-destruction.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming-ternary-with-mutation.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming-ternary.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming-unconditional-ternary-with-mutation.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming-unconditional-ternary.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming-unconditional-with-mutation.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming-via-destructuring-with-mutation.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming-via-destructuring.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming-with-mutation.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-renaming.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-return.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-shadowing.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-sibling-phis.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-simple-phi.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-simple.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-single-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-switch.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-throw.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-while-no-reassign.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ssa-while.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/store-via-call.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/store-via-new.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/switch-global-propertyload-case-test.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/switch-non-final-default.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/switch-with-fallthrough.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/switch.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/tagged-template-in-hook.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/tagged-template-literal.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/template-literal.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/temporary-accessed-outside-scope.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/temporary-at-start-of-value-block.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/temporary-property-load-accessed-outside-scope.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ternary-assignment-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/ternary-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/timers.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/todo-function-expression-captures-value-later-frozen.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/todo.unnecessary-lambda-memoization.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/transitive-alias-fields.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/trivial.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/type-args-test-binary-operator.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/type-binary-operator.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/type-cast-expression.flow.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/type-field-load.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/type-test-field-load-binary-op.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/type-test-field-store.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/type-test-polymorphic.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/type-test-primitive.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/type-test-return-type-inference.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unary-expr.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unconditional-break-label.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/uninitialized-declaration-in-reactive-scope.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unknown-hooks-do-not-assert.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unused-array-middle-element.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unused-array-rest-element.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unused-conditional.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unused-logical-assigned-to-variable.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unused-logical.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unused-object-element-with-rest.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unused-object-element.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unused-optional-method-assigned-to-variable.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/unused-ternary-assigned-to-variable.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/update-expression.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/use-callback-simple.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useEffect-arg-memoized.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useEffect-nested-lambdas.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-if-else-multiple-return.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-independently-memoizeable.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-inlining-block-return.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-inverted-if.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-labeled-statement-unconditional-return.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-logical.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-multiple-if-else.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-named-function.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-nested-ifs.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-return-empty.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-simple.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-switch-no-fallthrough.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/useMemo-switch-return.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/while-break.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/while-conditional-continue.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/while-logical.js",
        "compiler/crates/react_hermes_parser/tests/fixtures/while-property.js",
        "compiler/crates/react_hermes_parser/tests/parser_test.rs",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@alias-capture-in-method-receiver-and-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@alias-capture-in-method-receiver.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@alias-computed-load.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@alias-nested-member-path-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@alias-nested-member-path.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@alias-while.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@allocating-primitive-as-dep-nested-scope.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@allocating-primitive-as-dep.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@allow-passing-refs-as-props.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-access-assignment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-at-closure.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-at-effect.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-at-mutate-after-capture.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-expression-spread.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-join.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-map-frozen-array.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-map-mutable-array-mutating-lambda.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-pattern-params.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-properties.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-property-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@array-push-effect.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@arrow-function-expr-gating-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@assignment-expression-computed.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@assignment-expression-nested-path.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@assignment-in-nested-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@assignment-variations-complex-lvalue-array.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@assignment-variations-complex-lvalue.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@assignment-variations.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@await-side-effecting-promise.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@await.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@babel-existing-react-import.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@babel-existing-react-kitchensink-import.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@bug.useMemo-deps-array-not-cleared.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@bug_object-pattern.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@builtin-jsx-tag-lowered-between-mutations.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@call-args-assignment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@call-args-destructuring-assignment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@call-spread.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@call-with-independently-memoizable-arg.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capture-indirect-mutate-alias.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capture-param-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capture_mutate-across-fns.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-arrow-function-1.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-fun-alias-captured-mutate-2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-fun-alias-captured-mutate-arr-2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-alias-captured-mutate-arr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-alias-captured-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-alias-computed-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-alias-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-alias-receiver-computed-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-alias-receiver-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-mutate-2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-mutate-3.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-mutate-nested.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-func-simple-alias.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-1.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-alias-computed-load-2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-alias-computed-load-3.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-alias-computed-load-4.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-alias-computed-load.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-capture-ref-before-rename.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-conditional-capture-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-decl.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-member-expr-arguments.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-member-expr-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-renamed-ref.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-runs-inference.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-shadow-captured.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-skip-computed-path.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-function-within-block.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-member-expr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-nested-member-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-nested-member-expr-in-nested-func.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-nested-member-expr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-reference-changes-type.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-variable-in-nested-block.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@capturing-variable-in-nested-function.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@chained-assignment-context-variable.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@chained-assignment-expressions.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@codegen-emit-imports-same-source.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@codegen-emit-make-read-only.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@codegen-instrument-forget-gating-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@codegen-instrument-forget-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@complex-while.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@component.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@computed-call-evaluation-order.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@computed-call-spread.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@computed-load-primitive-as-dependency.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@computed-store-alias.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@concise-arrow-expr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@cond-deps-conditional-member-expr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@conditional-break-labeled.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@conditional-break.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@conditional-on-mutable.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@conditional-set-state-in-render.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@console-readonly.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@const-propagation-into-function-expression-global.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@const-propagation-into-function-expression-primitive.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@constant-computed.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@constant-propagation-for.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@constant-propagation-into-function-expressions.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@constant-propagation-phi.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@constant-propagation-while.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@constant-propagation.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@constructor.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@context-variable-reassigned-outside-of-lambda.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@controlled-input.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@dce-loop.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@debugger-memoized.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@debugger.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@declare-reassign-variable-in-closure.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@declare-reassign-variable-in-function-declaration.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@delete-computed-property.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@delete-property.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@dependencies-outputs.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@dependencies.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructure-capture-global.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructure-direct-reassignment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructuring-array-default.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructuring-array-param-default.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructuring-assignment-array-default.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructuring-assignment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructuring-mixed-scope-and-local-variables-with-default.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructuring-mixed-scope-declarations-and-locals.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructuring-object-default.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructuring-object-param-default.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructuring-property-inference.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@destructuring.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@disable-jsx-memoization.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@do-while-break.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@do-while-compound-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@do-while-conditional-break.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@do-while-continue.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@do-while-early-unconditional-break.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@do-while-simple.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@dominator.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@early-return.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error._todo.computed-lval-in-destructure.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error._todo.multi-arrow-expr-export-default-gating-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.babel-existing-react-namespace-import.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.bug-validate-no-set-state-not-all-mutable-range-extensions-are-bad.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.call-args-destructuring-asignment-complex.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.codegen-error-on-conflicting-imports.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.hoisted-function-declaration.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.hooks-with-React-namespace.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-access-ref-during-render.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-array-push-frozen.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-assign-hook-to-local.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-capture-func-passed-to-jsx.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-computed-store-to-frozen-value.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-delete-computed-property-of-frozen-value.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-delete-property-of-frozen-value.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-destructure-assignment-to-global.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-destructure-to-local-global-variables.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-freeze-conditionally-mutable-lambda.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-freeze-mutable-lambda-mutate-local.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-freeze-mutable-lambda-reassign-local.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-function-expression-mutates-immutable-value.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-mutate-after-aliased-freeze.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-mutate-after-freeze.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-pass-hook-as-call-arg.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-pass-hook-as-prop.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-pass-ref-to-function.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-property-store-to-frozen-value.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-ref-in-callback-invoked-during-render.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-ref-value-as-props.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-set-and-read-ref-during-render.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-sketchy-code-use-forget.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-ternary-with-hook-values.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-unconditional-set-state-in-render.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-use-ref-added-to-dep-without-type-info.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-useMemo-async-callback.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.invalid-useMemo-callback-args.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.mutate-captured-arg-separately.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.mutate-global-increment-op-invalid-react.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.reassignment-to-global.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.todo-kitchensink.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.todo-unconditional-set-state-lambda.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.todo.destructure-assignment-to-context-var.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.useMemo-callback-generator.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@error.while-with-assignment-in-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@escape-analysis-destructured-rest-element.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@escape-analysis-jsx-child.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@escape-analysis-logical.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@escape-analysis-non-escaping-interleaved-allocating-dependency.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@escape-analysis-non-escaping-interleaved-allocating-nested-dependency.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@escape-analysis-non-escaping-interleaved-primitive-dependency.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@escape-analysis-not-conditional-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@escape-analysis-not-if-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@escape-analysis-not-switch-case.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@escape-analysis-not-switch-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@expression-with-assignment-dynamic.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@expression-with-assignment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@extend-scopes-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@fbt-call-complex-param-value.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@fbt-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@fbt-params-complex-param-value.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@fbt-params.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@fbt-template-string-same-scope.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@for-empty-update-with-continue.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@for-empty-update.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@for-logical.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@for-of-break.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@for-of-conditional-break.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@for-of-continue.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@for-of-destructure.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@for-of-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@for-of-simple.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@for-return.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@frozen-after-alias.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@function-declaration-reassign.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@function-declaration-redeclare.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@function-declaration-simple.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@function-expression-captures-value-later-frozen-jsx.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@function-expression-maybe-mutates-hook-return-value.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@function-expression-with-store-to-parameter.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@function-param-assignment-pattern.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@gating-test-export-default-function.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@gating-test-export-function-and-default.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@gating-test-export-function.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@gating-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@global-jsx-tag-lowered-between-mutations.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@globals-Boolean.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@globals-Number.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@globals-String.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@holey-array-expr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@holey-array-pattern-dce-2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@holey-array-pattern-dce.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@holey-array.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@hook-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@hook-inside-logical-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@hooks-freeze-arguments.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@hooks-freeze-possibly-mutable-arguments.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@immutable-hooks.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@inadvertent-mutability-readonly-class.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@inadvertent-mutability-readonly-lambda.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@independent-across-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@independent.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@independently-memoize-object-property.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@infer-computed-delete.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@infer-global-object.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@infer-phi-primitive.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@infer-property-delete.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@infer-types-through-type-cast.flow.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@inner-memo-value-not-promoted-to-outer-scope-dynamic.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@inner-memo-value-not-promoted-to-outer-scope-static.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@interdependent-across-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@interdependent.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@inverted-if-else.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@inverted-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@issue852.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@issue933-disjoint-set-infinite-loop.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@jsx-empty-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@jsx-fragment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@jsx-member-expression-tag-grouping.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@jsx-member-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@jsx-namespaced-name.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@jsx-spread.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@jsx-tag-evaluation-order-non-global.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@jsx-tag-evaluation-order.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@lambda-capture-returned-alias.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@lambda-mutate-shadowed-object.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@lambda-mutated-non-reactive-to-reactive.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@lambda-mutated-ref-non-reactive.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@lambda-reassign-primitive.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@lambda-reassign-shadowed-primitive.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@lambda-with-fbt.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@logical-expression-object.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@logical-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@method-call-computed.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@method-call-fn-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@method-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@multi-arrow-expr-export-gating-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@multi-arrow-expr-gating-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@mutable-lifetime-loops.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@mutable-lifetime-with-aliasing.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@mutable-liverange-loop.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@nested-function-shadowed-identifiers.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@nested-optional-member-expr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@nested-scopes-hook-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@new-spread.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@nonoptional-load-from-optional-memberexpr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@obj-literal-cached-in-if-else.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@obj-literal-mutated-after-if-else.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@obj-mutated-after-if-else-with-alias.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@obj-mutated-after-if-else.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@obj-mutated-after-nested-if-else-with-alias.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@object-computed-access-assignment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@object-expression-string-literal-key.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@object-literal-spread-element.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@object-pattern-params.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@object-properties.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-call-chained.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-call-logical.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-call-simple.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-call-with-independently-memoizable-arg.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-call-with-optional-property-load.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-computed-load-static.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-computed-member-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-member-expression-call-as-property.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-member-expression-chain.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-member-expression-with-optional-member-expr-as-property.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-member-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-method-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-receiver-method-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@optional-receiver-optional-method.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@overlapping-scopes-interleaved-by-terminal.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@overlapping-scopes-interleaved.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@overlapping-scopes-shadowed.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@overlapping-scopes-shadowing-within-block.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@overlapping-scopes-while.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@overlapping-scopes-within-block.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@primitive-alias-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@primitive-as-dep-nested-scope.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@primitive-as-dep.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@prop-capturing-function-1.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@property-assignment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@property-call-evaluation-order.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@property-call-spread.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reactive-dependencies-non-optional-properties-inside-optional-chain.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reactive-scope-grouping.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reactive-scopes-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reactive-scopes.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reactivity-analysis-interleaved-reactivity.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reactivity-analysis-reactive-via-mutation-of-computed-load.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reactivity-analysis-reactive-via-mutation-of-property-load.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reassign-object-in-context.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reassign-primitive-in-context.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reassigned-phi-in-returned-function-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reassignment-conditional.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reassignment-separate-scopes.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reassignment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@recursive-function-expr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-cfg-condexpr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-cfg-ifelse.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-cfg-nested-ifelse-missing.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-cfg-nested-ifelse.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-cfg-switch-missing-case.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-cfg-switch-missing-default.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-cfg-switch.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-no-uncond.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-promote-uncond.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-subpath-order1.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-subpath-order2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-superpath-order1.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-deps-superpath-order2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-cond-memberexpr-join.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-dependencies-optional-member-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-deps-cond-scope.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-deps-join-uncond-scopes-cond-deps.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-uncond-deps-nonoverlap-descendant.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-uncond-deps-nonoverlap-direct.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-uncond-deps-overlap-descendant.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-uncond-deps-overlap-direct.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-uncond-deps-subpath-order1.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-uncond-deps-subpath-order2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reduce-reactive-uncond-deps-subpath-order3.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ref-current-aliased-no-added-to-dep.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ref-current-aliased-not-added-to-dep-2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ref-current-field-not-added-to-dep.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ref-current-not-added-to-dep-2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ref-current-not-added-to-dep.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ref-current-optional-field-no-added-to-dep.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ref-current-write-not-added-to-dep.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ref-in-effect.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@regexp-literal.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@remove-memoization-kitchen-sink.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@repro-reassign-to-variable-without-mutable-range.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@repro-scope-missing-mutable-range.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@repro.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@return-conditional.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@return-undefined.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@reverse-postorder.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@same-variable-as-dep-and-redeclare-maybe-frozen.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@same-variable-as-dep-and-redeclare.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@sequence-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@sequentially-constant-progagatable-if-test-conditions.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@simple-alias.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@simple-function-1.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@simple-scope.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@simple.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@sketchy-code-exhaustive-deps.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@sketchy-code-rules-of-hooks.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-arrayexpression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-call-jsx-2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-call-jsx.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-cascading-eliminated-phis.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-complex-multiple-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-complex-single-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-for-of.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-for-trivial-update.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-for.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-if-else.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-leave-case.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-multiple-phis.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-nested-loops-no-reassign.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-nested-partial-phi.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-nested-partial-reassignment.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-newexpression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-non-empty-initializer.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-objectexpression-phi.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-objectexpression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-property-alias-alias-mutate-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-property-alias-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-property-alias-mutate-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-property-alias-mutate-inside-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-property-alias-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-property-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-property-mutate-2.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-property-mutate-alias.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-property-mutate.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-property.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-reassign-in-rval.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-reassign.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming-ternary-destruction-with-mutation.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming-ternary-destruction.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming-ternary-with-mutation.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming-ternary.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming-unconditional-ternary-with-mutation.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming-unconditional-ternary.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming-unconditional-with-mutation.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming-via-destructuring-with-mutation.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming-via-destructuring.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming-with-mutation.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-renaming.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-return.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-shadowing.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-sibling-phis.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-simple-phi.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-simple.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-single-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-switch.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-throw.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-while-no-reassign.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ssa-while.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@store-via-call.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@store-via-new.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@switch-global-propertyload-case-test.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@switch-non-final-default.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@switch-with-fallthrough.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@switch.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@tagged-template-in-hook.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@tagged-template-literal.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@template-literal.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@temporary-accessed-outside-scope.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@temporary-at-start-of-value-block.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@temporary-property-load-accessed-outside-scope.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ternary-assignment-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@ternary-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@timers.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@todo-function-expression-captures-value-later-frozen.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@todo.unnecessary-lambda-memoization.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@transitive-alias-fields.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@trivial.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@type-args-test-binary-operator.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@type-binary-operator.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@type-cast-expression.flow.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@type-field-load.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@type-test-field-load-binary-op.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@type-test-field-store.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@type-test-polymorphic.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@type-test-primitive.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@type-test-return-type-inference.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unary-expr.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unconditional-break-label.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@uninitialized-declaration-in-reactive-scope.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unknown-hooks-do-not-assert.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unused-array-middle-element.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unused-array-rest-element.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unused-conditional.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unused-logical-assigned-to-variable.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unused-logical.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unused-object-element-with-rest.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unused-object-element.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unused-optional-method-assigned-to-variable.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@unused-ternary-assigned-to-variable.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@update-expression.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@use-callback-simple.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useEffect-arg-memoized.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useEffect-nested-lambdas.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-if-else-multiple-return.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-independently-memoizeable.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-inlining-block-return.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-inverted-if.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-labeled-statement-unconditional-return.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-logical.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-multiple-if-else.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-named-function.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-nested-ifs.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-return-empty.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-simple.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-switch-no-fallthrough.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@useMemo-switch-return.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@while-break.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@while-conditional-continue.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@while-logical.js.snap",
        "compiler/crates/react_hermes_parser/tests/snapshots/parser_test__fixtures@while-property.js.snap",
        "compiler/crates/react_hir/Cargo.toml",
        "compiler/crates/react_hir/README.md",
        "compiler/crates/react_hir/src/basic_block.rs",
        "compiler/crates/react_hir/src/environment.rs",
        "compiler/crates/react_hir/src/features.rs",
        "compiler/crates/react_hir/src/function.rs",
        "compiler/crates/react_hir/src/id_types.rs",
        "compiler/crates/react_hir/src/initialize.rs",
        "compiler/crates/react_hir/src/inline_use_memo.rs",
        "compiler/crates/react_hir/src/instruction.rs",
        "compiler/crates/react_hir/src/lib.rs",
        "compiler/crates/react_hir/src/merge_consecutive_blocks.rs",
        "compiler/crates/react_hir/src/print.rs",
        "compiler/crates/react_hir/src/registry.rs",
        "compiler/crates/react_hir/src/terminal.rs",
        "compiler/crates/react_hir/src/types.rs",
        "compiler/crates/react_napi/Cargo.toml",
        "compiler/crates/react_napi/README.md",
        "compiler/crates/react_napi/build.rs",
        "compiler/crates/react_napi/package.json",
        "compiler/crates/react_napi/src/lib.rs",
        "compiler/crates/react_napi/yarn.lock",
        "compiler/crates/react_optimization/Cargo.toml",
        "compiler/crates/react_optimization/README.md",
        "compiler/crates/react_optimization/src/constant_propagation.rs",
        "compiler/crates/react_optimization/src/lib.rs",
        "compiler/crates/react_semantic_analysis/Cargo.toml",
        "compiler/crates/react_semantic_analysis/README.md",
        "compiler/crates/react_semantic_analysis/src/analyzer.rs",
        "compiler/crates/react_semantic_analysis/src/lib.rs",
        "compiler/crates/react_semantic_analysis/src/scope_manager.rs",
        "compiler/crates/react_semantic_analysis/src/scope_view.rs",
        "compiler/crates/react_semantic_analysis/tests/analysis_test.rs",
        "compiler/crates/react_semantic_analysis/tests/fixtures/block-item-duplication.js",
        "compiler/crates/react_semantic_analysis/tests/fixtures/function-hoisting.js",
        "compiler/crates/react_semantic_analysis/tests/fixtures/globals-and-imports.js",
        "compiler/crates/react_semantic_analysis/tests/fixtures/labels.js",
        "compiler/crates/react_semantic_analysis/tests/fixtures/let-const-hoisting.js",
        "compiler/crates/react_semantic_analysis/tests/fixtures/simple-function.js",
        "compiler/crates/react_semantic_analysis/tests/fixtures/tdz.js",
        "compiler/crates/react_semantic_analysis/tests/fixtures/var-duplication.js",
        "compiler/crates/react_semantic_analysis/tests/fixtures/var-hoisting.js",
        "compiler/crates/react_semantic_analysis/tests/snapshots/analysis_test__fixtures@block-item-duplication.js.snap",
        "compiler/crates/react_semantic_analysis/tests/snapshots/analysis_test__fixtures@function-hoisting.js.snap",
        "compiler/crates/react_semantic_analysis/tests/snapshots/analysis_test__fixtures@globals-and-imports.js.snap",
        "compiler/crates/react_semantic_analysis/tests/snapshots/analysis_test__fixtures@labels.js.snap",
        "compiler/crates/react_semantic_analysis/tests/snapshots/analysis_test__fixtures@let-const-hoisting.js.snap",
        "compiler/crates/react_semantic_analysis/tests/snapshots/analysis_test__fixtures@simple-function.js.snap",
        "compiler/crates/react_semantic_analysis/tests/snapshots/analysis_test__fixtures@tdz.js.snap",
        "compiler/crates/react_semantic_analysis/tests/snapshots/analysis_test__fixtures@var-duplication.js.snap",
        "compiler/crates/react_semantic_analysis/tests/snapshots/analysis_test__fixtures@var-hoisting.js.snap",
        "compiler/crates/react_ssa/Cargo.toml",
        "compiler/crates/react_ssa/README.md",
        "compiler/crates/react_ssa/src/eliminate_redundant_phis.rs",
        "compiler/crates/react_ssa/src/enter.rs",
        "compiler/crates/react_ssa/src/leave.rs",
        "compiler/crates/react_ssa/src/lib.rs",
        "compiler/crates/react_utils/Cargo.toml",
        "compiler/crates/react_utils/README.md",
        "compiler/crates/react_utils/src/ensure_sufficient_stack.rs",
        "compiler/crates/react_utils/src/lib.rs",
        "compiler/crates/react_utils/src/pointer_address.rs",
        "compiler/docs/DEVELOPMENT_GUIDE.md",
        "compiler/rust-toolchain.toml",
        "compiler/rustfmt.toml"
      ]
    },
    {
      "sha": "a6ce56d9a9162c295ef0086762b76506534de201",
      "short_sha": "a6ce56d",
      "message": "[ci] Fix typo (#32217)\n\nyml was a mistake",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-24T15:06:15-05:00",
      "committed_date": "2025-01-24T15:06:15-05:00",
      "changed_files": [
        ".github/workflows/shared_check_maintainer.yml"
      ]
    },
    {
      "sha": "5269823927e1ba0ea14a64478b28c02ba5f0de3e",
      "short_sha": "5269823",
      "message": "[ci] Parse inputs for maintainer check workflow (#32216)\n\nI forgot that workflow calls stringify their inputs",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-24T14:56:37-05:00",
      "committed_date": "2025-01-24T14:56:37-05:00",
      "changed_files": [
        ".github/workflows/shared_check_maintainer.yml"
      ]
    },
    {
      "sha": "0f8a1e02ff036974f29347fa870b1f0e8e78666d",
      "short_sha": "0f8a1e0",
      "message": "[ci] Make maintainer check workflow usable from other repositories (#32215)\n\nFor use in reactjs/react.dev",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-24T14:41:25-05:00",
      "committed_date": "2025-01-24T14:41:25-05:00",
      "changed_files": [
        ".github/workflows/shared_check_maintainer.yml"
      ]
    },
    {
      "sha": "b65afdd0c1f644f3630c4e8cfd9ac264c5ac329f",
      "short_sha": "b65afdd",
      "message": "Clarify useActionState async non-transition warning (#32207)\n\nhttps://github.com/facebook/react/pull/28491#issuecomment-2094861155",
      "author": {
        "name": "Sophie Alpert",
        "email": "git@sophiebits.com"
      },
      "authored_date": "2025-01-24T09:25:30-08:00",
      "committed_date": "2025-01-24T09:25:30-08:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMForm-test.js",
        "packages/react-reconciler/src/ReactFiberHooks.js"
      ]
    },
    {
      "sha": "de1eaa2655ee29933425695ae0af756bf6713147",
      "short_sha": "de1eaa2",
      "message": "Fix:- Improve HOC support and state preservation in React Refresh (#30660)\n\n## Summary\r\n\r\nThis fixes #30659 , the issue was how the state was preserved and needed\r\nspecial cases for the forward and memo, have also added tests related to\r\nthe same.\r\n## How did you test this change?\r\n\r\n`yarn test packages/react-refresh/src/__tests__/ReactFresh-test.js`\r\n\r\n![Screenshot 2024-08-12 at 4 27\r\n39 PM](https://github.com/user-attachments/assets/2b597a62-c45f-443b-acfc-3232962ba0a3)",
      "author": {
        "name": "BIKI DAS",
        "email": "bikid475@gmail.com"
      },
      "authored_date": "2025-01-24T17:18:20+05:30",
      "committed_date": "2025-01-24T11:48:20+00:00",
      "changed_files": [
        "packages/react-refresh/src/ReactFreshRuntime.js",
        "packages/react-refresh/src/__tests__/ReactFresh-test.js"
      ]
    },
    {
      "sha": "ae9017ceabb2a36a04c249ad5342e0b1af3e1a54",
      "short_sha": "ae9017c",
      "message": "Move effect dep inference tests to infer-effect-dependencies directory (#32161)\n\nSummary: Grouping them to make it easy to see that they are all related\r\n\r\nTest Plan:",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-01-22T17:09:41-05:00",
      "committed_date": "2025-01-22T17:09:41-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-deps-custom-config.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-deps-custom-config.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-ref-helper.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-ref-helper.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-ref.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/outlined-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/outlined-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/pruned-nonreactive-obj.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/pruned-nonreactive-obj.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-memberexpr-merge.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-memberexpr-merge.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-memberexpr.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-optional-chain.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-variable.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-import-namespace-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-import-namespace-useEffect.js"
      ]
    },
    {
      "sha": "a0b91fbd650f9398cca12fcda0c426c434eeb6d8",
      "short_sha": "a0b91fb",
      "message": "[compiler][ez] Fix main (bad rebase / amend for #32095) (#32160)\n\nSee title: this fixes test cases broken by\r\nhttps://github.com/facebook/react/pull/32095 adding instead of moving\r\nnew test fixtures",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-01-22T16:21:53-05:00",
      "committed_date": "2025-01-22T16:21:53-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-mixedreadonly-map-shape.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-mixedreadonly-map-shape.js"
      ]
    },
    {
      "sha": "b83090fca2d96283a5c6153abb65eaa5cc81c9ba",
      "short_sha": "b83090f",
      "message": "[compiler] Fix invalid Array.map type (#32095)\n\nSee test fixture\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32095).\r\n* #32099\r\n* #32104\r\n* #32098\r\n* #32097\r\n* #32096\r\n* __->__ #32095\r\n* #32094\r\n* #32093",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-01-22T15:02:51-05:00",
      "committed_date": "2025-01-22T15:02:51-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/mixedreadonly-mutating-map.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/mixedreadonly-mutating-map.js"
      ]
    },
    {
      "sha": "deba48a72795d1332fe1df1159fc6b73566667fe",
      "short_sha": "deba48a",
      "message": "[compiler] Repro for invalid Array.map type (#32094)\n\nSee test fixture\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32094).\r\n* #32099\r\n* #32104\r\n* #32098\r\n* #32097\r\n* #32096\r\n* #32095\r\n* __->__ #32094\r\n* #32093",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-01-22T14:58:52-05:00",
      "committed_date": "2025-01-22T14:58:52-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-mixedreadonly-map-shape.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-mixedreadonly-map-shape.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "b6b33bfb92c095160df7370fb488acb89c55b5ca",
      "short_sha": "b6b33bf",
      "message": "[compiler][ez] rewrite invariant in InferReferenceEffects (#32093)\n\nSmall patch to pass aliased context values into\r\n`Object|ArrayExpression`s\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32093).\r\n* #32099\r\n* #32104\r\n* #32098\r\n* #32097\r\n* #32096\r\n* #32095\r\n* #32094\r\n* __->__ #32093",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-01-22T14:34:08-05:00",
      "committed_date": "2025-01-22T14:34:08-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferFunctionEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts"
      ]
    },
    {
      "sha": "7c864c98342e6e92a992ac32c1846f13eb1a314c",
      "short_sha": "7c864c9",
      "message": "[compiler][ez] Patch for JSX escape sequences in @babel/generator (#32131)\n\nFall back to using JSXExpressionContainer for strings potentially\r\ncontaining escape sequences (a single backslash) to fix\r\nhttps://github.com/facebook/react/issues/32123. This is an extension of\r\nhttps://github.com/facebook/react/pull/29079",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-01-22T14:22:35-05:00",
      "committed_date": "2025-01-22T14:22:35-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-preserve-escape-character.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-propagate-type-of-ternary-nested.expect.md"
      ]
    },
    {
      "sha": "19557443c8c2f54571dbb1519403cf310ad6e68b",
      "short_sha": "1955744",
      "message": "[compiler][repro] JSX escape sequences not printed correctly by @babel/generator (#32130)\n\nRepro for https://github.com/facebook/react/issues/32123\r\n\r\nNote that this is only a bug when calling `@babel/generator:generate()`\r\nbefore transforming JSX.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32130).\r\n* #32131\r\n* __->__ #32130",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-01-22T13:52:05-05:00",
      "committed_date": "2025-01-22T13:52:05-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-preserve-escape-character.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-preserve-escape-character.js"
      ]
    },
    {
      "sha": "e5a2062c80abe2118b8bd32972a5100a2b1ffa01",
      "short_sha": "e5a2062",
      "message": "fix(react-compiler): `JSXText` emits incorrect with bracket (#32138)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nOur [LlamaIndex](https://www.llamaindex.ai/) Product is blocked by this\r\nbug\r\n\r\nFixes: https://github.com/facebook/react/issues/32137\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->",
      "author": {
        "name": "Alex Yang",
        "email": "himself65@outlook.com"
      },
      "authored_date": "2025-01-22T09:04:59-08:00",
      "committed_date": "2025-01-22T12:04:59-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-bracket-in-text.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-bracket-in-text.jsx"
      ]
    },
    {
      "sha": "9b62ee71f483502db4f44220552b97757b346094",
      "short_sha": "9b62ee7",
      "message": "docs(eslint-plugin-react-compiler): fix typo (#32149)",
      "author": {
        "name": "藍+85CD",
        "email": "50108258+kwaa@users.noreply.github.com"
      },
      "authored_date": "2025-01-22T23:59:50+08:00",
      "committed_date": "2025-01-22T16:59:50+01:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/README.md"
      ]
    },
    {
      "sha": "5f05181a8b527260fc0a338edcde0e9d3b35ab20",
      "short_sha": "5f05181",
      "message": "Include error name in error chunks (#32157)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-01-22T16:39:00+01:00",
      "committed_date": "2025-01-22T16:39:00+01:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "b000019578a417ec0a1aeec8bda689db240cb28e",
      "short_sha": "b000019",
      "message": "DevTools: support useEffectEvent and forward-fix experimental prefix support (#32106)\n\n- Adds support for `experimental_useEffectEvent`, now DevTools will be\r\nable to display this hook for inspected element\r\n- Added a use case to DevTools shell, couldn't add case, because we are\r\nusing ReactTestRenderer, which has the corresponding flag disabled.\r\n- Forward-fix logic for handling `experimental` prefix that was added in\r\nhttps://github.com/facebook/react/pull/32088.\r\n\r\n![Screenshot 2025-01-16 at 21 24\r\n12](https://github.com/user-attachments/assets/6fb8ff2a-be47-47b5-bbfc-73d3a586657c)",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-22T14:15:48+00:00",
      "committed_date": "2025-01-22T14:15:48+00:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-devtools-shell/src/app/InspectableElements/InspectableElements.js",
        "packages/react-devtools-shell/src/app/InspectableElements/UseEffectEvent.js"
      ]
    },
    {
      "sha": "028c8e6cf5ce2a87147a7e03e503ce94c7a7a0cf",
      "short_sha": "028c8e6",
      "message": "Add Transition Types (#32105)\n\nThis adds an isomorphic API to add Transition Types, which represent the\ncause, to the current Transition. This is currently mainly for View\nTransitions but as a concept it's broader and we might expand it to more\nfeatures and object types in the future.\n\n```js\nimport { unstable_addTransitionType as addTransitionType } from 'react';\n\nstartTransition(() => {\n  addTransitionType('my-transition-type');\n  setState(...);\n});\n```\n\nIf multiple transitions get entangled this is additive and all\nTransition Types are collected. You can also add more than one type to a\nTransition (hence the `add` prefix).\n\nTransition Types are reset after each commit. Meaning that `<Suspense>`\nrevealing after a `startTransition` does not get any View Transition\ntypes associated with it.\n\nNote that the scoping rules for this is a little \"wrong\" in this\nimplementation. Ideally it would be scoped to the nearest outer\n`startTransition` and grouped with any `setState` inside of it.\nIncluding Actions. However, since we currently don't have AsyncContext\non the client, it would be too easy to drop a Transition Type if there\nwere no other `setState` in the same `await` task. Multiple Transitions\nare entangled together anyway right now as a result. So this just tracks\na global of all pending Transition Types for the next Transition. An\ninherent tricky bit with this API is that you could update multiple\nroots. In that case it should ideally be associated with each root.\nTransition Tracing solves this by associating a Transition with any\nupdates that are later collected but this suffers from the problem\nmentioned above. Therefore, I just associate Transition Types with one\nroot - the first one to commit. Since the View Transitions across roots\nare sequential anyway it kind of makes sense that only one really is the\ncause and the other one is subsequent.\n\nTransition Types can be used to apply different animations based on what\ncaused the Transition. You have three different ways to choose from for\nhow to use them:\n\n## CSS\n\nIt integrates with [View Transition\nTypes](https://www.w3.org/TR/css-view-transitions-2/#active-view-transition-pseudo-examples)\nso you can match different animations based on CSS scopes:\n\n```css\n:root:active-view-transition-type(my-transition-type) {\n  &::view-transition-...(...) {\n    ...\n  }\n}\n```\n\nThis is kind of a PITA to write though and if you have a CSS library\nthat provide View Transition Classes it's difficult to import those into\nthese scopes.\n\n## Class per Type\n\nThis PR also adds an object-as-map form that can be passed to all\n`className` properties:\n\n```js\n<ViewTransition className={{\n  'my-navigation-type': 'hello',\n  'default': 'world',\n}}>\n```\n\nIf multiple types match, then they're joined together. If no types match\nthen the special `\"default\"` entry is used instead. If any type has the\nvalue `\"none\"` then that wins and the ViewTransition is disabled (not\nassigned a name).\n\nThese can be combined with `enter`/`exit`/`update`/`layout`/`share`\nprops to match based on kind of trigger and Transition Type.\n\n```js\n<ViewTransition enter={{\n  'navigation-back': 'enter-right',\n  'navigation-forward': 'enter-left',\n}}\nexit={{\n  'navigation-back': 'exit-right',\n  'navigation-forward': 'exit-left',\n}}>\n```\n\n## Events\n\nIn addition, you can also observe the types in the View Transition Event\ncallbacks as the second argument. That way you can pick different\nimperative Animations based on the cause.\n\n```js\n<ViewTransition onUpdate={(inst, types) => {\n  if (types.includes('navigation-back')) {\n    ...\n  } else if (types.includes('navigation-forward')) {\n    ...\n  } else {\n    ...\n  }\n}}>\n```\n\n## Future\n\nIn the future we might expose types to `useEffect` for more general\npurpose usage. This would also allow non-View Transition based\nAnimations such as existing libraries to use this same feature to\ncoordinate the same concept.\n\nWe might also allow richer objects to be passed along here. Only the\nstrings would apply to View Transitions but the imperative code and\neffects could do something else with them.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-21T15:00:02-05:00",
      "committed_date": "2025-01-21T15:00:02-05:00",
      "changed_files": [
        "fixtures/view-transition/src/components/App.js",
        "fixtures/view-transition/src/components/Page.js",
        "fixtures/view-transition/src/components/Transitions.module.css",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "packages/react/index.experimental.development.js",
        "packages/react/index.experimental.js",
        "packages/react/index.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactSharedInternalsClient.js",
        "packages/react/src/ReactTransitionType.js"
      ]
    },
    {
      "sha": "18eaf51bd51fed8dfed661d64c306759101d0bfd",
      "short_sha": "18eaf51",
      "message": "Support eslint 8+ flat plugin syntax out of the box for eslint-plugin-react-compiler (#32120)\n\n## Summary\n\nThe current docs for the react compiler eslint plugin is based on\nintegrating with the old-style eslint config format. This is generally\nfine, but most plugins (and the [official\ndocs](https://eslint.org/docs/latest/use/configure/configuration-files#configuration-file))\nare now describing themselves in the new format.\n\nThis PR has two changes:\n\n- Update the exports to include a \"flat configuration\"\n- Adds a README change describing how to handle both configs\n\nThe solution is semi-based on @guillaumebrunerie's answer in\nhttps://github.com/reactwg/react-compiler/discussions/25 mixed with\nreading the source code for\n[eslint-plugin-react-refresh](https://github.com/ArnaudBarre/eslint-plugin-react-refresh/blob/main/src/index.ts)\n\n## How did you test this change?\n\nI faked this API in the most recent deploy:\n\n![Screenshot 2025-01-18 at 19 58\n44](https://github.com/user-attachments/assets/ae0e4bea-fb96-4073-a5f7-c886d087b6af)\n\nThen used that in my app:\n\n![Screenshot 2025-01-18 at 20 04\n33](https://github.com/user-attachments/assets/21f77158-7535-453a-b988-49cf59d22d71)\n\nand get myself some compiler messages:\n\n```\n/Users/orta/dev/app/apps/puzzmo.com/src/palette/HoverPopover.tsx\n  31:37  error  Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)  react-compiler/react-compiler\n\n/Users/orta/dev/app/apps/puzzmo.com/src/components/gameplay/PlayGamePauseOverlay.tsx\n   33:7   error  Ref values (the `current` property) may not be accessed during render. (https://react.dev/reference/react/useRef)  react-compiler/react-compiler\n   35:5   error  Ref values (the `current` property) may not be accessed during render. (https://react.dev/reference/react/useRef)  react-compiler/react-compiler\n```",
      "author": {
        "name": "Orta Therox",
        "email": "git@orta.io"
      },
      "authored_date": "2025-01-18T22:41:34+00:00",
      "committed_date": "2025-01-18T17:41:34-05:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/README.md",
        "compiler/packages/eslint-plugin-react-compiler/src/index.ts"
      ]
    },
    {
      "sha": "829401dc173d79994a3401fce24084670f55fb5c",
      "short_sha": "829401d",
      "message": "[Flight] Transport custom error names in dev mode (#32116)\n\nTyped errors is not a feature that Flight currently supports. However,\nfor presentation purposes, serializing a custom error name is something\nwe could support today.\n\nWith this PR, we're now transporting custom error names through the\nserver-client boundary, so that they are available in the client e.g.\nfor console replaying. One example where this can be useful is when you\nwant to print debug information while leveraging the fact that\n`console.warn` displays the error stack, including handling of hiding\nand source mapping stack frames. In this case you may want to show\n`Warning: ...` or `Debug: ...` instead of `Error: ...`.\n\nIn prod mode, we still transport an obfuscated error that uses the\ndefault `Error` name, to not leak any sensitive information from the\nserver to the client. This also means that you must not rely on the\nerror name to discriminate errors, e.g. when handling them in an error\nboundary.",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2025-01-17T23:48:57+01:00",
      "committed_date": "2025-01-17T23:48:57+01:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "fd2d2799840d9066a752bb32bbbb07c93f64a891",
      "short_sha": "fd2d279",
      "message": "[eslint-plugin-react-hooks] Inline meta fields (#32115)\n\nrollup doesn't inline cjs requires (although it can with an external\nplugin), so requiring package.json was causing issues internally at Meta\nsince that file doesn't exist there.\n\nWe could teach our build scripts to do so but given that the eslint meta\nfield is optional anyways I opted to just hardcode the name and omit the\nversion.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-17T15:16:36-05:00",
      "committed_date": "2025-01-17T15:16:36-05:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/src/index.js"
      ]
    },
    {
      "sha": "b25bcd460f98a0b89e5a7199a6c88112163d961f",
      "short_sha": "b25bcd4",
      "message": "[Fizz] Support Suspense boundaries anywhere (#32069)\n\nSuspense is meant to be composable but there has been a lonstanding\r\nlimitation with using Suspense above the `<body>` tag of an HTML\r\ndocument due to peculiarities of how HTML is parsed. For instance if you\r\nused Suspense to render an entire HTML document and had a fallback that\r\nmight flush an alternate Document the comment nodes which describe this\r\nboundary scope won't be where they need to be in the DOM for client\r\nReact to properly hydrate them. This is somewhat a problem of our own\r\nmaking in that we have a concept of a Preamble and we leave the closing\r\nbody and html tags behind until streaming has completed which produces a\r\nvalid HTML document that also matches the DOM structure that would be\r\nparsed from it. However Preambles as a concept are too important to\r\nfeatures like Float to imagine moving away from this model and so we can\r\neither choose to just accept that you cannot use Suspense anywhere\r\nexcept inside the `<body>` or we can build special support for Suspense\r\ninto react-dom that has a coherent semantic with how HTML documents are\r\nwritten and parsed.\r\n\r\nThis change implements Suspense support for react-dom/server by\r\ncorrectly serializing boundaries during rendering, prerendering, and\r\nresumgin on the server. It does not yet support Suspense everywhere on\r\nthe client but this will arrive in a subsequent change. In practice\r\nSuspense cannot be used above the `<body>` tag today so this is not a\r\nbreaking change since no programs in the wild could be using this\r\nfeature anyway.\r\n\r\nReact's streaming rendering of HTML doesn't lend itself to replacing the\r\ncontents of the documentElement, head, or body of a Document. These are\r\nalready special cased in fiber as HostSingletons and similarly for Fizz\r\nthe values we render for these tags must never be updated by the Fizz\r\nruntime once written. To accomplish these we redefine the Preamble as\r\nthe tags that represent these three singletons plus the contents of the\r\ndocument.head. If you use Suspense above any part of the Preamble then\r\nnothing will be written to the destination until the boundary is no\r\nlonger pending. If the boundary completes then the preamble from within\r\nthat boudnary will be output. If the boundary postpones or errors then\r\nthe preamble from the fallback will be used instead.\r\n\r\nAdditionally, by default anything that is not part of the preamble is\r\nimplicitly in body scope. This leads to the somewhat counterintuitive\r\nconsequence that the comment nodes we use to mark the borders of a\r\nSuspense boundary in Fizz can appear INSIDE the preamble that was\r\nrendered within it.\r\n\r\n```typescript\r\nrender((\r\n  <Suspense>\r\n    <html lang=\"en\">\r\n      <body>\r\n        <div>hello world</div>\r\n      </body>\r\n    </html>\r\n  </Suspense>\r\n))\r\n```\r\nwill produce an HTML document like this\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head></head>\r\n  <body>\r\n    <!--$--> <-- this is the comment Node representing the outermost Suspense\r\n    <div>hello world</div>\r\n    <$--/$-->\r\n  </body>\r\n</html>\r\n```\r\n\r\nLater when I update Fiber to support Suspense anywhere hydration will\r\nsimilarly start implicitly in the document body when the root is part of\r\nthe preamble (the document or one of it's singletons).",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2025-01-17T10:54:11-08:00",
      "committed_date": "2025-01-17T10:54:11-08:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzDeferredValue-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-noop-renderer/src/ReactNoopServer.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/forks/ReactFizzConfig.custom.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "77656c557a05951643ffecdf4efdf43b8bc73d84",
      "short_sha": "77656c5",
      "message": "[ci] Use correct actor when checking if maintainer (#32112)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-17T12:42:07-05:00",
      "committed_date": "2025-01-17T12:42:07-05:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_check_maintainer.yml",
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "7f3826e8e44caa6984232ab8d752d8b9441e4c99",
      "short_sha": "7f3826e",
      "message": "[compiler] validation against calling impure functions (#31960)\n\nFor now we just reject all calls of impure functions, and the validation\r\nis off by default. Going forward we can make this more precise and only\r\nreject impure functions called during render.\r\n\r\nNote that I was intentionally imprecise in the return type of these\r\nfunctions in order to avoid changing output of existing code. We lie to\r\nthe compiler and say that Date.now, performance.now, and Math.random\r\nreturn unknown mutable objects rather than primitives. Once the\r\nvalidation is complete and vetted we can switch this to be more precise.",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2025-01-17T09:04:02-08:00",
      "committed_date": "2025-01-17T09:04:02-08:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/TypeSchema.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValiateNoImpureFunctionsInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-impure-functions-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-impure-functions-in-render.js"
      ]
    },
    {
      "sha": "313c8c55de39cd5f009ebb033eec1666b3daa59e",
      "short_sha": "313c8c5",
      "message": "Fix moveBefore feature detection (#32087)\n\n`moveBefore` was moved to the `ParentNode` mixin as per\nhttps://github.com/whatwg/dom/pull/1307#discussion_r1881981120 _(and was\ncommitted in\nhttps://github.com/whatwg/dom/commit/3f3e94c5beda922962dacaeb606087f57bd7f7be)_\n\nAs a result, its existence can no longer be checked on `Node.prototype`\nbut must be checked in `Element.prototype`",
      "author": {
        "name": "Bramus",
        "email": "bramus@bram.us"
      },
      "authored_date": "2025-01-17T17:42:30+01:00",
      "committed_date": "2025-01-17T11:42:30-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "d46b04a27dc9fb4c7baaa379f5a6aec1449883a1",
      "short_sha": "d46b04a",
      "message": "[ci] Fix maintainer output condition check (#32111)\n\nIt appears GH actions treats outputs from workflow_calls to [always be\nstrings](https://github.com/orgs/community/discussions/9343) so we need\nto do an explicit comparison.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-17T10:35:25-05:00",
      "committed_date": "2025-01-17T10:35:25-05:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml"
      ]
    },
    {
      "sha": "5f38ef671958a2fb054cb999d68faa8ffdc79e54",
      "short_sha": "5f38ef6",
      "message": "Fix maintainer check condition (#32110)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\nI've noticed that the value stored under `is_core_team` gets\nstringified, so some PRs may be mislabelled as coming from the core\nteam.\n\nI've checked this on my fork and saw stringified `null` returned by the\n`is_core_team`, and this PR explicitly checks for the correct value.\nFeel free to close this PR if you want to go with another approach.\n\n## How did you test this change?\n\nChecked this change on my fork with and without listing myself in the\nmaintainers file.",
      "author": {
        "name": "Damian Stasik",
        "email": "920747+damianstasik@users.noreply.github.com"
      },
      "authored_date": "2025-01-17T16:22:34+01:00",
      "committed_date": "2025-01-17T10:22:34-05:00",
      "changed_files": [
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "61e713c1d31976175316c8256f4be14ba8bbdb29",
      "short_sha": "61e713c",
      "message": "feat(eslint-plugin-react-hooks): support flat config (#30774)",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-01-16T17:39:11-06:00",
      "committed_date": "2025-01-16T18:39:11-05:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/README.md",
        "packages/eslint-plugin-react-hooks/src/index.js"
      ]
    },
    {
      "sha": "1185f88d35e83870aa220a30ddcec22ed7e8e362",
      "short_sha": "1185f88",
      "message": "[ci] Only notify after labeling (#32103)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32103).\n* __->__ #32103\n* #32102",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-16T15:12:11-05:00",
      "committed_date": "2025-01-16T15:12:11-05:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_core_label.yml"
      ]
    },
    {
      "sha": "91add7bbdc1a06f9c6b71f3b41590266481b56cc",
      "short_sha": "91add7b",
      "message": "Fix outdated maintainers list (#32102)\n\nI made a few mistakes while adding the initial list\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32102).\n* #32103\n* __->__ #32102",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-16T15:05:40-05:00",
      "committed_date": "2025-01-16T15:05:40-05:00",
      "changed_files": [
        "MAINTAINERS"
      ]
    },
    {
      "sha": "5a274a37e05ba627e3e9c8a1000bee881aeaef1c",
      "short_sha": "5a274a3",
      "message": "Add Jordan B to maintainers\n\nI am React",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2025-01-16T14:53:11-05:00",
      "committed_date": "2025-01-16T14:53:11-05:00",
      "changed_files": [
        "MAINTAINERS"
      ]
    },
    {
      "sha": "60c797e744636a6d39afe03edd18fb3af9e04157",
      "short_sha": "60c797e",
      "message": "[ci] Use shared maintainer check for discord notifications (#32101)\n\nUses the shared maintainer check workflow across the various workflows\nthat need it\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32101).\n* __->__ #32101\n* #32100",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-16T14:21:55-05:00",
      "committed_date": "2025-01-16T14:21:55-05:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_check_maintainer.yml",
        ".github/workflows/shared_label_core_team_prs.yml"
      ]
    },
    {
      "sha": "af4987e19f0530cfd9f06b95680db7d02acacbd7",
      "short_sha": "af4987e",
      "message": "[ci] Automatically label PRs from core team (#32100)\n\nAdds a new `MAINTAINERS` file which contains github usernames of core\nteam members. This file serves as documentation for core team membership\nand is also used to automatically label PRs from core.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32100).\n* #32101\n* __->__ #32100",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-16T14:16:21-05:00",
      "committed_date": "2025-01-16T14:16:21-05:00",
      "changed_files": [
        ".github/workflows/shared_core_label.yml",
        "MAINTAINERS"
      ]
    },
    {
      "sha": "35dcf02b04b3b5c539f666b86dd1910ddcee9c89",
      "short_sha": "35dcf02",
      "message": "[rcr] Always target node (#32091)\n\nAlternative to #32071. As a follow up to #31993, the `platform` target\nwas incorrectly being set to `browser` since it was the default argument\nfor the build script. This corrects it to `node` and `cjs` which I think\nshould resolve node 20 issues.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-16T13:37:13-05:00",
      "committed_date": "2025-01-16T13:37:13-05:00",
      "changed_files": [
        "compiler/packages/react-compiler-runtime/scripts/build.js",
        "compiler/packages/snap/package.json"
      ]
    },
    {
      "sha": "e5fdd994bf5262a6fbed5d08e93999bf0a7d234e",
      "short_sha": "e5fdd99",
      "message": "[ci] Better filtering for discord notifications (#32092)\n\nWe don't always consistently use \"tags\" in commit messages, so let's use\nthe filepaths modified in the PR instead to determine which channel to\nsend notifications to.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-16T12:09:58-05:00",
      "committed_date": "2025-01-16T12:09:58-05:00",
      "changed_files": [
        ".github/workflows/compiler_discord_notify.yml",
        ".github/workflows/runtime_discord_notify.yml",
        ".github/workflows/shared_discord_notify.yml"
      ]
    },
    {
      "sha": "4749dcb7c586bc82133136d0847449123b0df600",
      "short_sha": "4749dcb",
      "message": "React DevTools 6.0.1 -> 6.1.0 (#32090)\n\nList of changes in this release:\r\n\r\n* fix[DevTools]: fix HostComponent naming in filters for Native\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32086](https://github.com/facebook/react/pull/32086))\r\n* Fix copy functionality in Firefox ([V3RON](https://github.com/V3RON)\r\nin [#32077](https://github.com/facebook/react/pull/32077))\r\n* chore[DevTools]: don't use batchedUpdate\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32074](https://github.com/facebook/react/pull/32074))\r\n* Prevent crash when starting consecutive profiling sessions\r\n([V3RON](https://github.com/V3RON) in\r\n[#32066](https://github.com/facebook/react/pull/32066))\r\n* fix[DevTools/Tree]: only scroll to item when panel is visible\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32018](https://github.com/facebook/react/pull/32018))\r\n* feat[Tree]: set initial scroll offset when inspected element index is\r\nset ([hoxyq](https://github.com/hoxyq) in\r\n[#31968](https://github.com/facebook/react/pull/31968))\r\n* DevTools: merge element fields in TreeStateContext\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31956](https://github.com/facebook/react/pull/31956))\r\n* DevTools: fix initial host instance selection\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31892](https://github.com/facebook/react/pull/31892))\r\n* chore[DevTools/Tree]: don't pre-select root element and remove unused\r\ncode ([hoxyq](https://github.com/hoxyq) in\r\n[#32015](https://github.com/facebook/react/pull/32015))\r\n* chore[DevTools/TraceUpdates]: display names by default\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32019](https://github.com/facebook/react/pull/32019))\r\n* Add ViewTransitionComponent to Stacks and DevTools\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#32034](https://github.com/facebook/react/pull/32034))\r\n* Add <ViewTransition> Component\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#31975](https://github.com/facebook/react/pull/31975))\r\n* chore[react-devtools-shell]: disable warnings in dev server overlay\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32005](https://github.com/facebook/react/pull/32005))\r\n* DevTools: fork FastRefresh test for <18 versions of React\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31893](https://github.com/facebook/react/pull/31893))\r\n* Show component names while highlighting renders\r\n([piotrski](https://github.com/piotrski) in\r\n[#31577](https://github.com/facebook/react/pull/31577))\r\n* allow non-coercible objects in formatConsoleArgumentsToSingleString\r\n([henryqdineen](https://github.com/henryqdineen) in\r\n[#31444](https://github.com/facebook/react/pull/31444))\r\n* Remove enableRefAsProp feature flag\r\n([kassens](https://github.com/kassens) in\r\n[#30346](https://github.com/facebook/react/pull/30346))\r\n* [flow] Eliminate usage of more than 1-arg `React.AbstractComponent` in\r\nReact codebase ([SamChou19815](https://github.com/SamChou19815) in\r\n[#31314](https://github.com/facebook/react/pull/31314))\r\n* Audit try/finally around console patching\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#31286](https://github.com/facebook/react/pull/31286))\r\n* tests[react-devtools]: added tests for Compiler integration\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31241](https://github.com/facebook/react/pull/31241))\r\n* Add Bridge types for Fusebox\r\n([EdmondChuiHW](https://github.com/EdmondChuiHW) in\r\n[#31274](https://github.com/facebook/react/pull/31274))",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-16T17:07:03+00:00",
      "committed_date": "2025-01-16T17:07:03+00:00",
      "changed_files": [
        "packages/react-devtools-core/package.json",
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-inline/package.json",
        "packages/react-devtools-timeline/package.json",
        "packages/react-devtools/CHANGELOG.md",
        "packages/react-devtools/package.json"
      ]
    },
    {
      "sha": "5b51a2b9e249f264b1345cc35b275464ae3ef6eb",
      "short_sha": "5b51a2b",
      "message": "fix[DevTools]: support useResourceEffect (#32088)\n\nSince we've started experimenting with it, I've started seeing a spike\r\nin errors:\r\n```\r\nUnsupported hook in the react-debug-tools package: Missing method in Dispatcher: useResourceEffect\r\n```\r\n\r\nAdding missing hook to the `Dispatcher` that is proxied by React\r\nDevTools.\r\n\r\nI can't really add an example that will use it to our RDT testing shell,\r\nbecause it uses experimental builds of `react`, which don't have this\r\nhook. I've tested it manually by rebuilding artifacts with\r\n`enableUseResourceEffectHook` flag enabled.\r\n\r\n![Screenshot 2025-01-16 at 15 20\r\n00](https://github.com/user-attachments/assets/a0d63fd6-1f17-4710-a2b2-82d484b8987f)",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-16T15:42:53+00:00",
      "committed_date": "2025-01-16T15:42:53+00:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js"
      ]
    },
    {
      "sha": "6093f1862a1995d8c7447d5c4d803ea0bdfb9292",
      "short_sha": "6093f18",
      "message": "Fix local react usage in DOM fixture (#32080)\n\nThe DOM fixture hasn't worked on local builds since the UMD support was\nremoved in https://github.com/facebook/react/pull/28735\n\nHere we update the fixture to set the local experimental builds to\nwindow. Some of the pages are still broken, such as hydration. But these\nbugs exist on other versions as well and can be cleaned up separately.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2025-01-16T10:33:24-05:00",
      "committed_date": "2025-01-16T10:33:24-05:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml",
        "fixtures/dom/package.json",
        "fixtures/dom/src/index.js",
        "fixtures/dom/src/react-loader.js",
        "fixtures/dom/yarn.lock"
      ]
    },
    {
      "sha": "89dbd487fc2a47262a5e0d95b0dbb2779bbe4f97",
      "short_sha": "89dbd48",
      "message": "fix[DevTools]: fix HostComponent naming in filters for Native (#32086)\n\nRight now we mention DOM elements as Host elements for React Native,\r\nwhich doesn't make sense.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-16T14:17:06+00:00",
      "committed_date": "2025-01-16T14:17:06+00:00",
      "changed_files": [
        ".eslintrc.js",
        "packages/react-devtools-core/webpack.standalone.js",
        "packages/react-devtools-fusebox/webpack.config.frontend.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/ComponentsSettings.js"
      ]
    },
    {
      "sha": "87276ef1efb340467563c107f24248653d7f7f00",
      "short_sha": "87276ef",
      "message": "[actions] split out compiler notify (#32079)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-15T16:41:31-06:00",
      "committed_date": "2025-01-15T17:41:31-05:00",
      "changed_files": [
        ".github/workflows/shared_discord_notify.yml"
      ]
    },
    {
      "sha": "f13abbbb4466572afdb3932760ae64e12354a3c3",
      "short_sha": "f13abbb",
      "message": "Fix copy functionality in Firefox (#32077)\n\n## Summary\r\n\r\nThis pull request addresses an issue where the copy functionality was\r\nnot working in Firefox. The root cause was the absence of the\r\n'clipboardWrite' permission in the manifest. To ensure consistency\r\nacross all supported browsers, the 'clipboardWrite' permission has been\r\nadded to the manifests for Chrome, Edge, and Firefox extensions.\r\n\r\nCloses #31422 \r\n\r\n## How did you test this change?\r\n\r\nI ran the modified extension in all browsers (MacOS) and verified that\r\nthe copy functionality works in each.\r\n\r\nhttps://github.com/user-attachments/assets/a41ff14b-3d65-409c-ac7f-1ccd72fa944a",
      "author": {
        "name": "Szymon Chmal",
        "email": "szymonchmal@gmail.com"
      },
      "authored_date": "2025-01-15T19:41:22+01:00",
      "committed_date": "2025-01-15T18:41:22+00:00",
      "changed_files": [
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json"
      ]
    },
    {
      "sha": "43d18bc2d3d31f43706f513a996ef9b4a7495237",
      "short_sha": "43d18bc",
      "message": "[internal] fix console patch, add RN (#32075)\n\nThe forking for `shared/ReactFeatureFlags` doesn't work in the console\npatches. Since they're already forked, we can import the internal\nReactFeatureFlags files directly.\n\nWould have caught this in testing a PR sync, but the PR syncs are broken\nright now.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-15T10:20:44-06:00",
      "committed_date": "2025-01-15T11:20:44-05:00",
      "changed_files": [
        "packages/shared/forks/consoleWithStackDev.rn.js",
        "packages/shared/forks/consoleWithStackDev.www.js",
        "scripts/rollup/bundles.js"
      ]
    },
    {
      "sha": "b158439a5bfac90289e63cd51e8064c455bea27c",
      "short_sha": "b158439",
      "message": "chore[DevTools]: don't use batchedUpdate (#32074)\n\nIt is no-op for concurrent mode now and React DevTools is using\r\nexperimental version of React:\r\n\r\nhttps://github.com/facebook/react/blob/886c5ad936428f168e50e077bd37fe9472ff8d3e/packages/react-dom/src/shared/ReactDOM.js#L51-L54\r\n\r\n\r\nhttps://github.com/facebook/react/blob/540efebcc34357c98412a96805bfd9244d6aa678/packages/react-reconciler/src/ReactFiberWorkLoop.js#L1646-L1651",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-15T14:32:33+00:00",
      "committed_date": "2025-01-15T14:32:33+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/NativeStyleEditor/StyleEditor.js",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeStyleEditor/context.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/ProfilerContext.js",
        "packages/react-devtools-shared/src/devtools/views/UnsupportedVersionDialog.js"
      ]
    },
    {
      "sha": "059760548feb9615fc651469d6380613a667b2c8",
      "short_sha": "0597605",
      "message": "Flag to remove www console forks (#32058)\n\nLet's remove these",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-15T08:19:21-06:00",
      "committed_date": "2025-01-15T09:19:21-05:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "packages/shared/forks/consoleWithStackDev.www.js"
      ]
    },
    {
      "sha": "886c5ad936428f168e50e077bd37fe9472ff8d3e",
      "short_sha": "886c5ad",
      "message": "Reduce risk of leaving shipped Hooks as nullable on Dispatcher (#32068)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-01-15T00:40:54+01:00",
      "committed_date": "2025-01-15T00:40:54+01:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-server/src/ReactFizzHooks.js"
      ]
    },
    {
      "sha": "f0edf41e3ee00fbc97873b72b66d62d0f26185b1",
      "short_sha": "f0edf41",
      "message": "Fix Flight fixture CI (#32070)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-01-15T00:29:37+01:00",
      "committed_date": "2025-01-15T00:29:37+01:00",
      "changed_files": [
        "fixtures/flight/package.json",
        "fixtures/flight/yarn.lock"
      ]
    },
    {
      "sha": "f9f17f6c8d1e747a3e242b36aa35feae31c55f75",
      "short_sha": "f9f17f6",
      "message": "[Fizz] Restore `useMemoCache` in renderers with support for Client APIs (#32067)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-01-14T22:59:52+01:00",
      "committed_date": "2025-01-14T22:59:52+01:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-server/src/ReactFizzHooks.js"
      ]
    },
    {
      "sha": "453f5052569dafb52e82e875a8976cf348ed16d4",
      "short_sha": "453f505",
      "message": "[DevTools] Prevent crash when starting consecutive profiling sessions (#32066)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThis pull request resolves an issue where consecutive profiling sessions\r\nwould cause Dev Tools to freeze due to an infinite loop of state\r\nupdates. The problem occurs when the startProfiling function triggers a\r\ncall to [`selectCommitIndex(0)` in\r\nSnapshotSelector](https://github.com/facebook/react/blob/b3a95caf61bc716fb618997e6e9f3a0c8c9c8374/packages/react-devtools-shared/src/devtools/views/Profiler/SnapshotSelector.js#L77-L85)\r\nas previous profiling data is available, which causes a re-render. Then,\r\n[ProfilerContextProvider calls\r\n`selectCommitIndex(null)`](https://github.com/facebook/react/blob/b3a95caf61bc716fb618997e6e9f3a0c8c9c8374/packages/react-devtools-shared/src/devtools/views/Profiler/ProfilerContext.js#L231-L241)\r\nto clear the view while profiling is in progress, leading to another\r\nre-render and creating an infinite loop. This behavior was prevented by\r\nclearing the existing profiling data before starting a new session.\r\n\r\nCloses #31977\r\nCloses #31679\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI ran the Dev Tools locally following [the contributing\r\nguideline](https://github.com/facebook/react/blob/b3a95caf61bc716fb618997e6e9f3a0c8c9c8374/packages/react-devtools/CONTRIBUTING.md).\r\nI observed the freeze at the start of the second profiling session.\r\nThen, I modified the code to clear the store when starting a new session\r\nand ran the Dev Tools again. This time, no freeze was observed.\r\n\r\nBefore:\r\n\r\nhttps://github.com/user-attachments/assets/9d790f84-f6d0-4951-8202-e599cf8d225b\r\n\r\nAfter:\r\n\r\nhttps://github.com/user-attachments/assets/af097019-0b8f-49dd-8afc-0f6cd72af787",
      "author": {
        "name": "Szymon Chmal",
        "email": "szymonchmal@gmail.com"
      },
      "authored_date": "2025-01-14T21:23:42+01:00",
      "committed_date": "2025-01-14T20:23:42+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/ProfilerStore.js"
      ]
    },
    {
      "sha": "b3a95caf61bc716fb618997e6e9f3a0c8c9c8374",
      "short_sha": "b3a95ca",
      "message": "fix(eslint-plugin-react-compiler): support v9 context api (#32045)\n\n## Summary\n\nThis change fixes a gap in the plugin's support of eslint v9. In one\nplace that it's using the `SourceCode` api, it's correctly considering\nv9's api. But in the other place where `SourceCode` is used, it's only\nusing the legacy api, which was removed in v9.",
      "author": {
        "name": "michael faith",
        "email": "michaelfaith@users.noreply.github.com"
      },
      "authored_date": "2025-01-13T12:49:31-06:00",
      "committed_date": "2025-01-13T13:49:31-05:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts"
      ]
    },
    {
      "sha": "6099351c768670246e8b47e702545d03ddc97320",
      "short_sha": "6099351",
      "message": "Use internal `ReactCompilerRuntime` in `react/compiler-runtime` entrypoint (#32054)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2025-01-13T19:42:20+01:00",
      "committed_date": "2025-01-13T19:42:20+01:00",
      "changed_files": [
        "packages/react/compiler-runtime.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactCompilerRuntime.js"
      ]
    },
    {
      "sha": "af8532f25121a6b4060e3edd7186f0a58812d771",
      "short_sha": "af8532f",
      "message": "[compiler][ez] Patch compilationMode:infer object method edge case (#32055)\n\nFix for  https://github.com/facebook/react/issues/31180",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-01-13T12:18:59-05:00",
      "committed_date": "2025-01-13T12:18:59-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-nested-object-method.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-nested-object-method.jsx"
      ]
    },
    {
      "sha": "cabd8a0e700713900d9573edb162e608268d09ac",
      "short_sha": "cabd8a0",
      "message": "View Transition Class Names based on event kind (#32050)\n\nThis adds five props to `<ViewTransition>` that adds a specific\n`view-transition-class` when React wants to animate it based on the\nheuristic that triggers.\n\n```js\n<ViewTransition\n  enter=\"slide-from-left\"\n  exit=\"slide-to-right\"\n  layout=\"slide\"\n  update=\"none\"\n  share=\"cross-fade\"\n>\n```\n\n- `enter`: The <ViewTransition> or its parent Component is mounted and\nthere's no other <ViewTransition> with the same name being deleted.\n- `exit`: The <ViewTransition> or its parent Component is unmounted and\nthere's no other <ViewTransition> with the same name being deleted.\n- `layout`: There are no updates to the content inside this\n<ViewTransition> boundary itself but the boundary has resized or moved\ndue to other changes to siblings.\n- `share`: This <ViewTransition> is being mounted and another\n<ViewTransition> instance with the same name is being unmounted\nelsewhere.\n- `update`: The content of <ViewTransition> has changed either due to\nDOM mutations or because an inner child <ViewTransition> has resized.\n\nThe existing `className` is the baseline and the others are added to it\nto combine.\n\nThis is convenient to distinguish things like `enter` / `exit` but that\ncan already be expressed as CSS. The other cases can't be expressed as\npurely CSS.\n\n`\"none\"` is a special value that deactivates the view transition name\nunder that condition.\n\nThe most important feature of this is that you can now limit View\nTransitions to only tigger when a particular DOM node is affected, not\nwhen just any child updates, by opt-ing out a subtree. This is safer\nwhen added to shared parent.\n\n```js\n<ViewTransition>\n  <div>\n     <ViewTransition className=\"none\">\n       {children}\n     </ViewTransition>\n  </div>\n</ViewTransition>\n```\n\nThis can't be fully expressed using neither just CSS nor the imperative\nrefs API since we need some way to have already removed the\n`view-transition-name` when this happens. When you think about the\nimplementation details it might seem a bit strange that you specify the\n`class` to `none` to remove the `name` but it's really about picking\nwhich animation should happen for that case default (`undefined`), a\nspecific one (class) or none (`\"none\"`).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-13T09:45:53-05:00",
      "committed_date": "2025-01-13T09:45:53-05:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js"
      ]
    },
    {
      "sha": "540efebcc34357c98412a96805bfd9244d6aa678",
      "short_sha": "540efeb",
      "message": "View Transition Events (#32041)\n\nThis adds five events to `<ViewTransition>` that triggers when React\nwants to animate it.\n\n- `onEnter`: The `<ViewTransition>` or its parent Component is mounted\nand there's no other `<ViewTransition>` with the same name being\ndeleted.\n- `onExit`: The `<ViewTransition>` or its parent Component is unmounted\nand there's no other `<ViewTransition>` with the same name being\ndeleted.\n- `onLayout`: There are no updates to the content inside this\n`<ViewTransition>` boundary itself but the boundary has resized or moved\ndue to other changes to siblings.\n- `onShare`: This `<ViewTransition>` is being mounted and another\n`<ViewTransition>` instance with the same name is being unmounted\nelsewhere.\n- `onUpdate`: The content of `<ViewTransition>` has changed either due\nto DOM mutations or because an inner child `<ViewTransition>` has\nresized.\n\nOnly one of these events is fired per Transition. If you want to cover\nall updates you have to listen to `onLayout`, `onShare` and `onUpdate`.\nWe could potentially do something like fire `onUpdate` if `onLayout` or\n`onShare` isn't specified but it's a little sketchy to have behavior\nbased on if someone is listening since it limits adding wrappers that\nmay or may not need it.\n\nEach takes a `ViewTransitionInstance` as an argument so you don't need a\nref to animate it.\n\n```js\n<ViewTransition onEnter={inst => inst.new.animate(keyframes, options)}>\n```\n\nThe timing of this event is after the View Transition's `ready` state\nwhich means that's too late to do any changes to the View Transition's\nsnapshots but now both the new and old pseudo-elements are ready to\nanimate.\n\nThe order of `onExit` is parent first, where as the others are child\nfirst. This mimics effect mount/unmount.\n\nI implement this by adding to a queue in the commit phase and then call\nit while we're finishing up the commit. This is after layout effects but\nbefore passive effects since passive effects fire after the animation is\n`finished`.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-12T13:16:54-05:00",
      "committed_date": "2025-01-12T13:16:54-05:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "0bf1f39ec6906c666011c0c57aa56aa34a262daf",
      "short_sha": "0bf1f39",
      "message": "View Transition Refs (#32038)\n\nThis adds refs to View Transition that can resolve to an instance of:\n\n```js\ntype ViewTransitionRef = {\n  name: string,\n  group: Animatable,\n  imagePair: Animatable,\n  old: Animatable,\n  new: Animatable,\n}\n```\n\nAnimatable is a type that has `animate(keyframes, options)` and\n`getAnimations()` on it. It's the interface that exists on Element that\nlets you start animations on it. These ones are like that but for the\nfour pseudo-elements created by the view transition.\n\nIf a name changes, then a new ref is created. That way if you hold onto\na ref during an exit animation spawned by the name change, you can keep\ncalling functions on it. It will keep referring to the old name rather\nthan the new name.\n\nThis allows imperative control over the animations instead of using CSS\nfor this.\n\n```js\nconst viewTransition = ref.current;\nconst groupAnimation = viewTransition.group.animate(keyframes, options);\nconst imagePairAnimation = viewTransition.imagePair.animate(keyframes, options);\nconst oldAnimation = viewTransition.old.animate(keyframes, options);\nconst newAnimation = viewTransition.new.animate(keyframes, options);\n```\n\nThe downside of using this API is that it doesn't work with SSR so for\nSSR rendered animations they'll fallback to the CSS. You could use this\nfor progressive enhancement though.\n\nNote: In this PR the ref only controls one DOM node child but there can\nbe more than one DOM node in the ViewTransition fragment and they are\njust left to their defaults. We could try something like making the\n`animate()` function apply to multiple children but that could lead to\nsome weird consequences and the return value would be difficult to\nmerge. We could try to maintain an array of Animatable that updates with\nhow ever many things are currently animating but that makes the API more\ncomplicated to use for the simple case. Conceptually this should be like\na fragment so we would ideally combine the multiple children into a\nsingle isolate if we could. Maybe one day the same name could be applied\nto multiple children to create a single isolate. For now I think I'll\njust leave it like this and you're really expect to just use it with one\nDOM node. If you have more than one they just get the default animations\nfrom CSS.\n\nUsing this is a little tricky due timing. In this fixture I just use a\nlayout effect plus rAF to get into the right timing after the\nstartViewTransition is ready. In the future I'll add an event that fires\nwhen View Transitions heuristics fire with the right timing.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-10T11:51:37-05:00",
      "committed_date": "2025-01-10T11:51:37-05:00",
      "changed_files": [
        ".eslintrc.js",
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoMutation.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js"
      ]
    },
    {
      "sha": "056073de4c50b65807cd77ae6715c9ea8ee64277",
      "short_sha": "056073d",
      "message": "[Fiber] Support moveBefore at the top level of a container (#32036)\n\nParity with appendChild and insertBefore. This allows reordering at the\nroot while preserving state.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-09T16:37:00-05:00",
      "committed_date": "2025-01-09T16:37:00-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "d2a1b8854d5c4bed713e7e732b598d88e3cc4858",
      "short_sha": "d2a1b88",
      "message": "fix[DevTools/Tree]: only scroll to item when panel is visible (#32018)\n\nStacked on https://github.com/facebook/react/pull/31968. See commit on\r\ntop.\r\n\r\nFixes an issue with bank tree view, when we are scrolling to an item\r\nwhile syncing user DOM selection. This should only have an effect on\r\nbrowser extension. Added events with `extension` prefix will only be\r\nemitted in browser extension implementation, for other implementations\r\n`useExtensionComponentsPanelVisibility` will return constant `true`\r\nvalue.\r\n\r\nBefore:\r\n\r\n\r\nhttps://github.com/user-attachments/assets/82667c16-d495-4346-af0a-7ed22ff89cfc\r\n\r\n\r\nAfter:\r\n\r\n\r\nhttps://github.com/user-attachments/assets/a5d223fd-0328-44f0-af68-5c3863f1efee",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-09T18:38:49+00:00",
      "committed_date": "2025-01-09T18:38:49+00:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.js",
        "packages/react-devtools-shared/src/frontend/hooks/useExtensionComponentsPanelVisibility.js"
      ]
    },
    {
      "sha": "f2813ee33d37e20029c6698f34946d7f08eb7a95",
      "short_sha": "f2813ee",
      "message": "[DevTools]  feat[Tree]: set initial scroll offset when inspected element index is set (#31968)\n\nStacked on https://github.com/facebook/react/pull/31956. See [commit on\r\ntop](https://github.com/facebook/react/pull/31968/commits/ecb8df4175342cde7669cd4a6b008b3782eb5b61).\r\n\r\nUse `initialScrollOffset` prop for `FixedSizeList` from `react-window`.\r\nThis happens when user selects an element in built-in Elements panel in\r\nDevTools, and then opens Components panel from React DevTools - elements\r\nwill be synced and corresponding React Element will be pre-selected, we\r\njust have to scroll to its position now.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-09T18:21:55+00:00",
      "committed_date": "2025-01-09T18:21:55+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.js"
      ]
    },
    {
      "sha": "d6345482430952306fc83e62d4c14e2622fb1752",
      "short_sha": "d634548",
      "message": "DevTools: merge element fields in TreeStateContext (#31956)\n\nStacked on https://github.com/facebook/react/pull/31892, see commit on\r\ntop.\r\n\r\nFor some reason, there were 2 fields different fields for essentially\r\nsame thing: `selectedElementID` and `inspectedElementID`. Basically, the\r\nchange is:\r\n```\r\nselectedElementID -> inspectedElementID\r\nselectedElementIndex -> inspectedElementIndex\r\n```\r\n\r\nI have a theory that it was due to previously used async approach around\r\nelement inspection, and the whole `InspectedElementView` was wrapped in\r\n`Suspense`.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-09T18:13:24+00:00",
      "committed_date": "2025-01-09T18:13:24+00:00",
      "changed_files": [
        "packages/react-devtools-inline/__tests__/__e2e__/components.test.js",
        "packages/react-devtools-inline/__tests__/__e2e__/devtools-utils.js",
        "packages/react-devtools-shared/src/__tests__/inspectedElement-test.js",
        "packages/react-devtools-shared/src/__tests__/profilerContext-test.js",
        "packages/react-devtools-shared/src/devtools/utils.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Element.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSourcePanel.js",
        "packages/react-devtools-shared/src/devtools/views/Components/NativeStyleEditor/context.js",
        "packages/react-devtools-shared/src/devtools/views/Components/SelectedTreeHighlight.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/TreeContext.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/ProfilerContext.js"
      ]
    },
    {
      "sha": "54cfa95d3a83328868f9fba00d8213e6de6c7d2f",
      "short_sha": "54cfa95",
      "message": "DevTools: fix initial host instance selection (#31892)\n\nRelated: https://github.com/facebook/react/pull/31342\r\n\r\nThis fixes RDT behaviour when some DOM element was pre-selected in\r\nbuilt-in browser's Elements panel, and then Components panel of React\r\nDevTools was opened for the first time. With this change, React DevTools\r\nwill correctly display the initial state of the Components Tree with the\r\ncorresponding React Element (if possible) pre-selected.\r\n\r\nPreviously, we would only subscribe listener when `TreeContext` is\r\nmounted, but this only happens when user opens one of React DevTools\r\npanels for the first time. With this change, we keep state inside\r\n`Store`, which is created when Browser DevTools are opened. Later,\r\n`TreeContext` will use it for initial state value.\r\n\r\nPlanned next changes:\r\n1. Merge `inspectedElementID` and `selectedElementID`, I have no idea\r\nwhy we need both.\r\n2. Fix issue with `AutoSizer` rendering a blank container.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-09T18:01:07+00:00",
      "committed_date": "2025-01-09T18:01:07+00:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-shared/src/devtools/store.js",
        "packages/react-devtools-shared/src/devtools/views/Components/TreeContext.js"
      ]
    },
    {
      "sha": "d5f3c50f584ab0212e472fc4f4d599194a0286a7",
      "short_sha": "d5f3c50",
      "message": "chore[DevTools/Tree]: don't pre-select root element and remove unused code (#32015)\n\nIn this PR:\r\n1. Removed unused code in `Tree.js`\r\n2. Removed logic for pre-selecting first element in the tree by default.\r\nThis is a bit clowny, because it steals focus and resets scroll, when\r\nuser attempts to expand / collapse some subtree.\r\n3. Updated comments around\r\nhttps://github.com/facebook/react/commit/1c381c588aed1ed6814f1be04fbe42cd069ce174.\r\n\r\nTo expand on 3-rd point, for someone who might be reading this in the\r\nfuture:\r\nWe can't guarantee focus of RDT browser extension panels, because they\r\nare hosted in an `iframe`. Attempting to fire any events won't have any\r\nresult, user action with the corresponding `iframe` is required in order\r\nfor this `iframe` to obtain focus.\r\n\r\nThe only reason why built-in Elements panel in Chrome works correctly is\r\nbecause it is supported natively somewhere in Chrome / Chrome DevTools.\r\nAlso, when you select an element on the application page, Chrome will\r\nmake sure that Elements panel opened, which technically guarantees focus\r\ninside DevTools window and Elements panel subview.\r\n\r\nAs of today, we can't navigate user to third-party extensions panels,\r\nthere is no API for this, hence no ability to guarantee focused RDT\r\npanels.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-09T18:00:30+00:00",
      "committed_date": "2025-01-09T18:00:30+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.js"
      ]
    },
    {
      "sha": "79dcc47191b9e4bb8b767d7371cefe1d21579f3f",
      "short_sha": "79dcc47",
      "message": "chore[DevTools/TraceUpdates]: display names by default (#32019)\n\nFeature was added in https://github.com/facebook/react/pull/31577, lets\r\nenable it by default. Note: for gradual rollout with React Native, we\r\nwill continue to emit different event, requires some changes on React\r\nNative side to support this.\r\n\r\nI have plans to make this feature to be accessible via browser context\r\nmenu, which has really limited API. In order to minimize potential\r\ndivergence, lets make this the default state for the feature.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-09T18:00:09+00:00",
      "committed_date": "2025-01-09T18:00:09+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/views/TraceUpdates/index.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/constants.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/GeneralSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsContext.js"
      ]
    },
    {
      "sha": "d16fe4be5b9b5eee0cfb0f602ad62d6b0842d253",
      "short_sha": "d16fe4b",
      "message": "[compiler] Playground qol: shared compilation option directives with tests (#32012)\n\n- Adds @compilationMode(all|infer|syntax|annotation) and\r\n@panicMode(none) directives. This is now shared with our test infra\r\n- Playground still defaults to `infer` mode while tests default to `all`\r\nmode\r\n- See added fixture tests",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2025-01-09T12:38:16-05:00",
      "committed_date": "2025-01-09T12:38:16-05:00",
      "changed_files": [
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/compilationMode-all-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/compilationMode-infer-output.txt",
        "compiler/apps/playground/__tests__/e2e/page.spec.ts",
        "compiler/apps/playground/components/Editor/EditorImpl.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/parseConfigPragma-test.ts",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "8932ca32f47a1441723ae30ef6828998e9587553",
      "short_sha": "8932ca3",
      "message": "[playground] Partially revert #32009 (#32035)\n\nI had forgotten that our default error reporting threshold was `none`\ndue to the fact that build pipelines should not throw errors. This\nresets it back to throwing on all errors which mostly is the same as the\neslint plugin.\n\nCloses #32014.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-09T12:21:05-05:00",
      "committed_date": "2025-01-09T12:21:05-05:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx"
      ]
    },
    {
      "sha": "c4595ca4c86a2a0795bf4d6d5ca4e074babf7fc3",
      "short_sha": "c4595ca",
      "message": "Add ViewTransitionComponent to Stacks and DevTools (#32034)\n\nJust adding the name so it shows up.\n\n(Note that no experimental ones are added to the list of filters atm.\nIncluding SuspenseList etc.)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-09T11:33:34-05:00",
      "committed_date": "2025-01-09T11:33:34-05:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/DevToolsFiberComponentStack.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/frontend/types.js",
        "packages/react-reconciler/src/ReactFiberComponentStack.js",
        "packages/react-reconciler/src/getComponentNameFromFiber.js"
      ]
    },
    {
      "sha": "74ea0c73a26d1c61609c1f2fa2e4ee3c8d432bcb",
      "short_sha": "74ea0c7",
      "message": "Remove enableGetInspectorDataForInstanceInProduction flag (#32033)\n\n## Summary\r\n\r\nCallers for this method has been removed in\r\nhttps://github.com/facebook/react-native/commit/65bda542320a85f4627d7957e1c6f45c2776298d,\r\nso these methods no longer need to be conditionally exported and the\r\nfeature flag can be removed.\r\n\r\n## How did you test this change?\r\n\r\nFlow fabric/native",
      "author": {
        "name": "Pieter De Baets",
        "email": "pieterdb@meta.com"
      },
      "authored_date": "2025-01-09T15:51:58+00:00",
      "committed_date": "2025-01-09T15:51:58+00:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactFabric.js",
        "packages/react-native-renderer/src/ReactNativeFiberInspector.js",
        "packages/react-native-renderer/src/ReactNativeRenderer.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "1506685f0e6371924962a5b8a8b8bd765eb2e402",
      "short_sha": "1506685",
      "message": "Suspensey Fonts for View Transition  (#32031)\n\nFonts flickering in while loading can be disturbing to any transition\nbut especially View Transitions. Even if they don't cause layout thrash\n- the paint thrash is bad enough. We might add Suspensey fonts to all\nTransitions in the future but it's especially a no-brainer for View\nTransitions.\n\nWe need to apply mutations to the DOM first to know whether that will\ntrigger new fonts to load. For general Suspensey fonts, we'd have to\nrevert the commit by applying mutations in reverse to return to the\nprevious state. For View Transitions, since a snapshot is already\nfrozen, we can freeze the screen while we're waiting for the font at no\nextra cost. It does mean that the page isn't responsive during this time\nbut we should only block this for a short period anyway.\n\nThe timeout needs to be short enough that it doesn't cause too much of\nan issue when it's a new load and slow, yet long enough that you have a\nchance to load it. Otherwise we wait for no reason. The assumption here\nis that you likely have either cached the font or preloaded it earlier -\nor you're on an extremely fast connection. This case is for optimizing\nthe high end experience.\n\nBefore:\n\n\nhttps://github.com/user-attachments/assets/e0acfffe-fa49-40d6-82c3-5b08760175fb\n\nAfter:\n\n\nhttps://github.com/user-attachments/assets/615a03d3-9d6b-4eb1-8bd5-182c4c37a628\n\nNote that since the Navigation is blocked on the font now the browser\nspinner shows up while the font is loading.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-09T10:33:44-05:00",
      "committed_date": "2025-01-09T10:33:44-05:00",
      "changed_files": [
        "fixtures/view-transition/src/components/Chrome.js",
        "fixtures/view-transition/src/components/Page.css",
        "fixtures/view-transition/src/components/Page.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "fd9cfa416f7c01ecdf76b10ab776a43f2430786d",
      "short_sha": "fd9cfa4",
      "message": "Execute layout phase before after mutation phase inside view transition (#32029)\n\nThis allows mutations and scrolling in the layout phase to be counted\ntowards the mutation. This would maybe not be the case for gestures but\nit is useful for fire-and-forget.\n\nThis also avoids the issue that if you resolve navigation in\nuseLayoutEffect that it ends up dead locked.\n\nIt also means that useLayoutEffect does not observe the scroll\nrestoration and in fact, the scroll restoration would win over any\nmanual scrolling in layout effects. For better or worse, this is more in\nline with how things worked before and how it works in popstate. So it's\nless of a breaking change. This does mean that we can't unify the after\nmutation phase with the layout phase though.\n\nTo do this we need split out flushSpawnedWork from the flushLayoutEffect\ncall.\n\nSpawned work from setState inside the layout phase is done outside and\nnot counted towards the transition. They're sync updates and so are not\neligible for their own View Transitions. It's also tricky to support\nthis since it's unclear what things like exits in that update would\nmean. This work will still be able to mutate the live DOM but it's just\nnot eligible to trigger new transitions or adjust the target of those.\n\nOne difference between popstate is that this spawned work is after\nscroll restoration. So any scrolling spawned from a second pass would\nnow win over scroll restoration.\n\nAnother consequence of this change is that you can't safely animate\npseudo elements in useLayoutEffect. We'll introduce a better event for\nthat anyway.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-08T19:13:25-05:00",
      "committed_date": "2025-01-08T19:13:25-05:00",
      "changed_files": [
        "fixtures/view-transition/src/components/App.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js"
      ]
    },
    {
      "sha": "800c9db22e69680f17e238724478537282215f89",
      "short_sha": "800c9db",
      "message": "ViewTransitions in Navigation (#32028)\n\nThis adds navigation support to the View Transition fixture using both\n`history.pushState/popstate` and the Navigation API models.\n\nBecause `popstate` does scroll restoration synchronously at the end of\nthe event, but `startViewTransition` cannot start synchronously, it\nwould observe the \"old\" state as after applying scroll restoration. This\nleads to weird artifacts. So we intentionally do not support View\nTransitions in `popstate`. If it suspends anyway for some other reason,\nthen scroll restoration is broken anyway and then it is supported. We\ndon't have to do anything here because this is already how things worked\nbecause the sync `popstate` special case already included the sync lane\nwhich opts it out of View Transitions.\n\nFor the Navigation API, scroll restoration can be blocked. The best way\nto do this is to resolve the Navigation API promise after React has\napplied its mutation. We can detect if there's currently any pending\nnavigation and wait to resolve the `startViewTransition` until it\nfinishes and any scroll restoration has been applied.\n\n\nhttps://github.com/user-attachments/assets/f53b3282-6315-4513-b3d6-b8981d66964e\n\nThere is a subtle thing here. If we read the viewport metrics before\nscroll restoration has been applied, then we might assume something is\nor isn't going to be within the viewport incorrectly. This is evident on\nthe \"Slide In from Left\" example. When we're going forward to that page\nwe shift the scroll position such that it's going to appear in the\nviewport. If we did this before applying scroll restoration, it would\nnot animate because it wasn't in the viewport then. Therefore, we need\nto run the after mutation phase after scroll restoration.\n\nA consequence of this is that you have to resolve Navigation in\n`useInsertionEffect` as otherwise it leads to a deadlock (which\neventually gets broken by `startViewTransition`'s timeout of 10\nseconds). Another consequence is that now `useLayoutEffect` observes the\nrestored state. However, I think what we'll likely do is move the layout\nphase to before the after mutation phase which also ensures that\nauto-scrolling inside `useLayoutEffect` are considered in the viewport\nmeasurements as well.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-08T18:57:54-05:00",
      "committed_date": "2025-01-08T18:57:54-05:00",
      "changed_files": [
        "fixtures/view-transition/server/render.js",
        "fixtures/view-transition/src/components/App.js",
        "fixtures/view-transition/src/components/Page.js",
        "fixtures/view-transition/src/index.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "98418e8902d6045e5138a2e765e026ce2e4de82d",
      "short_sha": "98418e8",
      "message": "[Fiber] Suspend the commit while we wait for the previous View Transition to finish (#32002)\n\nStacked on #31975.\n\nView Transitions cannot handle interruptions in that if you start a new\none before the previous one has finished, it just stops and then\nrestarts. It doesn't seamlessly transition into the new transition.\n\nThis is generally considered a bad thing but I actually think it's quite\ngood for fire-and-forget animations (gestures is another story). There\nare too many examples of bad animations in fast interactions because the\nscenario wasn't predicted. Like overlapping toasts or stacked layers\nthat look bad. The only case interrupts tend to work well is when you do\na strict reversal of an animation like returning to the page you just\nleft or exiting a modal just being opened. However, we're limited by the\nplatform even in that regard.\n\nI think one reason interruptions have traditionally been seen as good is\nbecause it's hard if you have a synchronous framework to not interrupt\nsince your application state has already moved on. We don't have that\nlimitation since we can suspend commits. We can do all the work to\nprepare for the next commit by rendering while the animation is going\nbut then delay the commit until the previous one finishes.\n\nAnother technical limitation earlier animation libraries suffered from\nis only have the option to either interrupt or sequence animations since\nit's modeling just one change set. Like showing one toast at a time.\nThat's bad. We don't have that limitation because we can interrupt a\npreviously suspended commit and start working on a new one instead.\nThat's what we do for suspended transitions in general. The net effect\nis that we batch the commits.\n\nTherefore if you get multiple toasts flying in fast, they can animate as\na batch in together all at once instead of overlapping slightly or being\nstaggered. Interruptions (often) bad. Staggered animations bad. Batched\nanimations good.\n\nThis PR stashes the currently active View Transition with an expando on\nthe container that's animating (currently always document). This is\nsimilar to what we do with event handlers etc. We reason we do this with\nan expando is that if you have multiple Reacts on the same page they\nneed to wait for each other. However, one of those might also be the SSR\nruntime. So this lets us wait for the SSR runtime's animations to finish\nbefore starting client ones. This could really be a more generic name\nsince this should ideally be shared across frameworks. It's kind of\nstrange that this property doesn't already exist in the DOM given that\nthere can only be one. It would be useful to be able to coordinate this\nacross libraries.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-08T13:36:57-05:00",
      "committed_date": "2025-01-08T13:36:57-05:00",
      "changed_files": [
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js"
      ]
    },
    {
      "sha": "38127b281567d43972b7fb44c3fcb0d1806e7c10",
      "short_sha": "38127b2",
      "message": "[Fiber] Support only View Transitions v2 (#31996)\n\nStacked on #31975.\n\nWe're going to recommend that the primary way you style a View\nTransition is using a View Transition Class (and/or Type). These are\nonly available in the View Transitions v2 spec. When they're not\navailable it's better to fallback to just not animating instead of\nanimating with the wrong styling rules applied.\n\nThis is already widely supported in Chrome and Safari 18.2. Safari 18.2\nusage is still somewhat low but it's rolling out quickly as we speak.\n\nA way to detect this is by just passing the object form to\n`startViewTransition` which throws if it's an earlier version. The\nobject form is required for `types` but luckily classes rolled out at\nthe same time. Therefore we're only indirectly detecting class support.\n\nThis means that in practice Safari 18.0 and 18.1 won't animate. We could\ntry to only apply the feature detection if you're actually using classes\nor types, but that would create an unfortunate ecosystem burden to try\nto support names. It also leads to flaky effects when only some\nanimations work. Better to just disable them all.\n\nFirefox has yet to ship anything. We'll have to look out for how the\nfeature detection happens there and if they roll things out in different\norder but if you ship late, you deal with web compat as the ball lies.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-08T13:22:15-05:00",
      "committed_date": "2025-01-08T13:22:15-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "3a5496b3f56f1c0b138811a564299ee0b64a64ba",
      "short_sha": "3a5496b",
      "message": "[Fiber] Use className on <ViewTransition> to assign view-transition-class (#31999)\n\nStacked on #31975.\n\nThis is the primary way we recommend styling your View Transitions since\nit allows for reusable styling such as a CSS library specializing in\nView Transitions in a way that's composable and without naming\nconflicts. E.g.\n\n```js\n<ViewTransition className=\"enter-slide-in exit-fade-out update-cross-fade\">\n```\n\nThis doesn't change the HTML `class` attribute. It's not a CSS class.\nInstead it assign the `view-transition-class` style prop of the\nunderlying DOM node while it's transitioning.\n\nYou can also just use `<div style={{viewTransitionClass: ...}}>` on the\nDOM node but it's convenient to control the Transition completely from\nthe outside and conceptually we're transitioning the whole fragment. You\ncan even make Transition components that just wraps existing components.\n`<RevealTransition><Component /></RevealTransition>` this way.\n\nSince you can also have multiple wrappers for different circumstances it\nallows React's heuristics to use different classes for different\nscenarios. We'll likely add more options like configuring different\nclasses for different `types` or scenarios that can't be described by\nCSS alone.\n\n## CSS Modules\n\n```js\nimport transitions from './transitions.module.css';\n\n<ViewTransition className={transitions.bounceIn}>...</ViewTransition>\n```\n\nCSS Modules works well with this strategy because you can have globally\nunique namespaces and define your transitions in the CSS modules as a\nlibrary that you can import. [As seen in the fixture\nhere.](https://github.com/facebook/react/commit/8b91b37bb8b4add5f3f8be5ef8f49bb23966b13b#diff-b4d9854171ffdac4d2c01be92a5eff4f8e9e761e6af953094f99ca243b054a85R11)\n\nI did notice an unfortunate bug in how CSS Modules (at least in Webpack)\ngenerates class names. Sometimes the `+` character is used in the hash\nof the class name which is not valid for `view-transition-class` and so\nit breaks. I had to rename my class names until the hash yielded\nsomething different to work around it. Ideally that bug gets fixed soon.\n\n## className, rly?\n\n`className` isn't exactly the most loved property name, however, I'm\nusing `className` here too for consistency. Even though in this case\nthere's no direct equivalent DOM property name. The CSS property is\nnamed `viewTransitionClass`, but the \"viewTransition\" prefix is implied\nby the Component it is on in this case. For most people the fact that\nthis is actually a different namespace than other CSS classes doesn't\nmatter. You'll most just use a CSS library anyway and conceptually\nyou're just assigning classes the same way as `className` on a DOM node.\n\nBut if we ever rename the `class` prop then we can do that for this one\nas well.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-08T13:22:06-05:00",
      "committed_date": "2025-01-08T13:22:06-05:00",
      "changed_files": [
        "fixtures/view-transition/package.json",
        "fixtures/view-transition/server/index.js",
        "fixtures/view-transition/server/render.js",
        "fixtures/view-transition/src/components/Page.js",
        "fixtures/view-transition/src/components/Transitions.module.css",
        "fixtures/view-transition/yarn.lock",
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js"
      ]
    },
    {
      "sha": "a4d122f2d192fe0b6480e669cca43c8f953aaf85",
      "short_sha": "a4d122f",
      "message": "Add <ViewTransition> Component (#31975)\n\nThis will provide the opt-in for using [View\nTransitions](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API)\nin React.\n\nView Transitions only trigger for async updates like `startTransition`,\n`useDeferredValue`, Actions or `<Suspense>` revealing from fallback to\ncontent. Synchronous updates provide an opt-out but also guarantee that\nthey commit immediately which View Transitions can't.\n\nThere's no need to opt-in to View Transitions at the \"cause\" side like\nevent handlers or actions. They don't know what UI will change and\nwhether that has an animated transition described.\n\nConceptually the `<ViewTransition>` component is like a DOM fragment\nthat transitions its children in its own isolate/snapshot. The API works\nby wrapping a DOM node or inner component:\n\n```js\nimport {ViewTransition} from 'react';\n\n<ViewTransition><Component /></ViewTransition>\n```\n\nThe default is `name=\"auto\"` which will automatically assign a\n`view-transition-name` to the inner DOM node. That way you can add a\nView Transition to a Component without controlling its DOM nodes styling\notherwise.\n\nA difference between this and the browser's built-in\n`view-transition-name: auto` is that switching the DOM nodes within the\n`<ViewTransition>` component preserves the same name so this example\ncross-fades between the DOM nodes instead of causing an exit and enter:\n\n```js\n<ViewTransition>{condition ? <ComponentA /> : <ComponentB />}</ViewTransition>\n```\n\nThis becomes especially useful with `<Suspense>` as this example\ncross-fades between Skeleton and Content:\n\n```js\n<ViewTransition>\n  <Suspense fallback={<Skeleton />}>\n    <Content />\n  </Suspense>\n</ViewTransition>\n```\n\nWhere as this example triggers an exit of the Skeleton and an enter of\nthe Content:\n\n```js\n<Suspense fallback={<ViewTransition><Skeleton /></ViewTransition>}>\n  <ViewTransition><Content /></ViewTransition>\n</Suspense>\n```\n\nManaging instances and keys becomes extra important.\n\nYou can also specify an explicit `name` property for example for\nanimating the same conceptual item from one page onto another. However,\nbest practices is to property namespace these since they can easily\ncollide. It's also useful to add an `id` to it if available.\n\n```js\n<ViewTransition name=\"my-shared-view\">\n```\n\nThe model in general is the same as plain `view-transition-name` except\nReact manages a set of heuristics for when to apply it. A problem with\nthe naive View Transitions model is that it overly opts in every\nboundary that *might* transition into transitioning. This is leads to\nunfortunate effects like things floating around when unrelated updates\nhappen. This leads the whole document to animate which means that\nnothing is clickable in the meantime. It makes it not useful for smaller\nand more local transitions. Best practice is to add\n`view-transition-name` only right before you're about to need to animate\nthe thing. This is tricky to manage globally on complex apps and is not\ncompositional. Instead we let React manage when a `<ViewTransition>`\n\"activates\" and add/remove the `view-transition-name`. This is also when\nReact calls `startViewTransition` behind the scenes while it mutates the\nDOM.\n\nI've come up with a number of heuristics that I think will make a lot\neasier to coordinate this. The principle is that only if something that\nupdates that particular boundary do we activate it. I hope that one day\nmaybe browsers will have something like these built-in and we can remove\nour implementation.\n\nA `<ViewTransition>` only activates if:\n\n- If a mounted Component renders a `<ViewTransition>` within it outside\nthe first DOM node, and it is within the viewport, then that\nViewTransition activates as an \"enter\" animation. This avoids inner\n\"enter\" animations trigger when the parent mounts.\n- If an unmounted Component had a `<ViewTransition>` within it outside\nthe first DOM node, and it was within the viewport, then that\nViewTransition activates as an \"exit\" animation. This avoids inner\n\"exit\" animations triggering when the parent unmounts.\n- If an explicitly named `<ViewTransition name=\"...\">` is deep within an\nunmounted tree and one with the same name appears in a mounted tree at\nthe same time, then both are activated as a pair, but only if they're\nboth in the viewport. This avoids these triggering \"enter\" or \"exit\"\nanimations when going between parents that don't have a pair.\n- If an already mounted `<ViewTransition>` is visible and a DOM\nmutation, that might affect how it's painted, happens within its\nchildren but outside any nested `<ViewTransition>`. This allows it to\n\"cross-fade\" between its updates.\n- If an already mounted `<ViewTransition>` resizes or moves as the\nresult of direct DOM nodes siblings changing or moving around. This\nallows insertion, deletion and reorders into a list to animate all\nchildren. It is only within one DOM node though, to avoid unrelated\nchanges in the parent to trigger this. If an item is outside the\nviewport before and after, then it's skipped to avoid things flying\nacross the screen.\n- If a `<ViewTransition>` boundary changes size, due to a DOM mutation\nwithin it, then the parent activates (or the root document if there are\nno more parents). This ensures that the container can cross-fade to\navoid abrupt relayout. This can be avoided by using absolutely\npositioned children. When this can avoid bubbling to the root document,\nwhatever is not animating is still responsive to clicks during the\ntransition.\n\nConceptually each DOM node has its own default that activates the parent\n`<ViewTransition>` or no transition if the parent is the root. That\nmeans that if you add a DOM node like `<div><ViewTransition><Component\n/></ViewTransition></div>` this won't trigger an \"enter\" animation since\nit was the div that was added, not the ViewTransition. Instead, it might\ncause a cross-fade of the parent ViewTransition or no transition if it\nhad no parent. This ensures that only explicit boundaries perform coarse\nanimations instead of every single node which is really the benefit of\nthe View Transitions model. This ends up working out well for simple\ncases like switching between two pages immediately while transitioning\none floating item that appears on both pages. Because only the floating\nitem transitions by default.\n\nNote that it's possible to add manual `view-transition-name` with CSS or\n`style={{ viewTransitionName: 'auto' }}` that always transitions as long\nas something else has a `<ViewTransition>` that activates. For example a\n`<ViewTransition>` can wrap a whole page for a cross-fade but inside of\nit an explicit name can be added to something to ensure it animates as a\nmove when something relates else changes its layout. Instead of just\ncross-fading it along with the Page which would be the default.\n\nThere's more PRs coming with some optimizations, fixes and expanded\nAPIs. This first PR explores the above core heuristic.\n\n---------\n\nCo-authored-by: Sebastian \"Sebbie\" Silbermann <silbermann.sebastian@gmail.com>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-08T12:11:18-05:00",
      "committed_date": "2025-01-08T12:11:18-05:00",
      "changed_files": [
        "fixtures/view-transition/README.md",
        "fixtures/view-transition/package.json",
        "fixtures/view-transition/public/favicon.ico",
        "fixtures/view-transition/public/index.html",
        "fixtures/view-transition/server/index.js",
        "fixtures/view-transition/server/render.js",
        "fixtures/view-transition/src/components/App.js",
        "fixtures/view-transition/src/components/Chrome.css",
        "fixtures/view-transition/src/components/Chrome.js",
        "fixtures/view-transition/src/components/Page.css",
        "fixtures/view-transition/src/components/Page.js",
        "fixtures/view-transition/src/index.js",
        "fixtures/view-transition/yarn.lock",
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-devtools-shared/src/utils.js",
        "packages/react-dom-bindings/src/client/CSSPropertyOperations.js",
        "packages/react-dom-bindings/src/client/DOMPropertyOperations.js",
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-is/src/ReactIs.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberConfigWithNoMutation.js",
        "packages/react-reconciler/src/ReactFiberFlags.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberMutationTracking.js",
        "packages/react-reconciler/src/ReactFiberViewTransitionComponent.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactWorkTags.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-server/src/ReactFizzComponentStack.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "packages/react/index.experimental.development.js",
        "packages/react/index.experimental.js",
        "packages/react/index.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactServer.experimental.development.js",
        "packages/react/src/ReactServer.experimental.js",
        "packages/shared/ReactComponentStackFrame.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/ReactSerializationErrors.js",
        "packages/shared/ReactSymbols.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "packages/shared/getComponentNameFromType.js",
        "packages/shared/isValidElementType.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "e30c6693e4c7f2aec25b07f5df69a87163dbee81",
      "short_sha": "e30c669",
      "message": "[Fiber] Delete isMounted internals (#31966)\n\nThe public API has been deleted a long time ago so this should be unused\nunless it's used by hacks. It should be replaced with an\neffect/lifecycle that manually tracks this if you need it.\n\nThe problem with this API is how the timing implemented because it\nrequires Placement/Hydration flags to be cleared too early. In fact,\nthat's why we also have a separate PlacementDEV flag that works\ndifferently.\n\n\nhttps://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberCommitWork.js#L2157-L2165\n\nWe should be able to remove this code now.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-08T12:08:30-05:00",
      "committed_date": "2025-01-08T12:08:30-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactComponentLifeCycle-test.js",
        "packages/react-reconciler/src/ReactFiberClassComponent.js",
        "packages/react-reconciler/src/ReactFiberContext.js",
        "packages/react-reconciler/src/ReactFiberTreeReflection.js",
        "packages/react-reconciler/src/__tests__/ReactIncrementalReflection-test.js",
        "packages/react-server/src/ReactFizzClassComponent.js"
      ]
    },
    {
      "sha": "379089d28875f565a488ec169e84c78e87a1dc4d",
      "short_sha": "379089d",
      "message": "[flags] remove enableDeferRootSchedulingToMicrotask (#32008)\n\nWait for me to merge, but this has landed everywhere and is ready to\nremove.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-08T12:03:01-05:00",
      "committed_date": "2025-01-08T12:03:01-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react/src/__tests__/ReactProfiler-test.internal.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "426872679d0f15f7a008a61ac97cd4e63d1bfd96",
      "short_sha": "4268726",
      "message": "chore[react-devtools-shell]: disable warnings in dev server overlay (#32005)\n\nDisables warnings Webpack DevServer overlay, which is used by React\r\nDevTools shell.\r\n\r\nWe are testing against `react-native-web` in this shell, and it installs\r\nolder versions of the `react-dom` package, and there are some expected\r\ndiscrepancies between it and `react-dom` from source.\r\n\r\nBefore:\r\n![Screenshot 2025-01-07 at 12 50\r\n21](https://github.com/user-attachments/assets/ba7d435e-3265-4446-9994-6a77c6d3d4ef)\r\n\r\nAfter:\r\n![Screenshot 2025-01-07 at 12 49\r\n47](https://github.com/user-attachments/assets/cb45d07c-f561-496a-b76f-bdce3154ab88)",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-08T12:14:52+00:00",
      "committed_date": "2025-01-08T12:14:52+00:00",
      "changed_files": [
        "packages/react-devtools-shell/webpack-server.js"
      ]
    },
    {
      "sha": "a160102f3aedae0da2d692e7cf53b28a011b7bc9",
      "short_sha": "a160102",
      "message": "[tests] Remove to*Dev matchers (#31989)\n\nBased off: https://github.com/facebook/react/pull/31988\n\n<img width=\"741\" alt=\"Screenshot 2025-01-06 at 12 52 08 AM\"\nsrc=\"https://github.com/user-attachments/assets/29b159ca-66d4-441f-8817-dd2db66d1edb\"\n/>\n\nit is done",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-07T14:17:14-05:00",
      "committed_date": "2025-01-07T14:17:14-05:00",
      "changed_files": [
        ".eslintrc.js",
        "packages/internal-test-utils/__tests__/ReactInternalTestUtils-test.js",
        "packages/internal-test-utils/consoleMock.js",
        "scripts/eslint-rules/__tests__/no-to-warn-dev-within-to-throw-test.internal.js",
        "scripts/eslint-rules/index.js",
        "scripts/eslint-rules/no-to-warn-dev-within-to-throw.js",
        "scripts/jest/matchers/__tests__/toWarnDev-test.js",
        "scripts/jest/matchers/toWarnDev.js",
        "scripts/jest/setupTests.js",
        "scripts/jest/spec-equivalence-reporter/setupTests.js",
        "scripts/jest/typescript/jest.d.ts"
      ]
    },
    {
      "sha": "f892dabd8c5cd3c112532104bab7aef46503fb30",
      "short_sha": "f892dab",
      "message": "[ci] Make gh workflow names consistent (#32010)\n\nSuper minor change to keep our naming scheme consistent for gh workflows",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-07T12:09:10-05:00",
      "committed_date": "2025-01-07T12:09:10-05:00",
      "changed_files": [
        ".github/workflows/discord_notify.yml"
      ]
    },
    {
      "sha": "6efbc0897f08d688c614baa205f1e1625b3a7c83",
      "short_sha": "6efbc08",
      "message": "[playground] Use default compiler config (#32009)\n\nThe playground's compilation mode is currently set to 'all' along with\nreporting all errors.\n\nThis tends to be misleading since people usually expect a 1:1 match\nbetween how the playground works with what the compiler does in their\ncodebase, eg https://github.com/reactwg/react-compiler/discussions/51.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-07T11:53:27-05:00",
      "committed_date": "2025-01-07T11:53:27-05:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx"
      ]
    },
    {
      "sha": "7b402084af3f43284eed3c7c3155762a871fc817",
      "short_sha": "7b40208",
      "message": "Fix notify target, add lines (#32006)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-07T09:34:18-05:00",
      "committed_date": "2025-01-07T09:34:18-05:00",
      "changed_files": [
        ".github/workflows/discord_notify.yml"
      ]
    },
    {
      "sha": "3314162535c45360ee178d7bf1dc03c291f45930",
      "short_sha": "3314162",
      "message": "bot for pr notifications (#31985)\n\nGoing to take some testing to get this right",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-06T17:57:19-05:00",
      "committed_date": "2025-01-06T17:57:19-05:00",
      "changed_files": [
        ".github/workflows/discord_notify.yml"
      ]
    },
    {
      "sha": "e0c893f51d6620ede7ad9a65102ac581da464680",
      "short_sha": "e0c893f",
      "message": "[assert helpers] ServerIntegration tests (#31988)\n\nBased off: https://github.com/facebook/react/pull/31986",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-06T14:13:03-05:00",
      "committed_date": "2025-01-06T14:13:03-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationElements-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationLegacyContext-test.js"
      ]
    },
    {
      "sha": "6b865330f4bc6c87dcd2c8cdf665895c8a190fc1",
      "short_sha": "6b86533",
      "message": "[assert helpers] react-reconciler (#31986)\n\nBased off: https://github.com/facebook/react/pull/31984",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-06T14:12:53-05:00",
      "committed_date": "2025-01-06T14:12:53-05:00",
      "changed_files": [
        "packages/react-reconciler/src/__tests__/Activity-test.js",
        "packages/react-reconciler/src/__tests__/ReactActWarnings-test.js",
        "packages/react-reconciler/src/__tests__/ReactAsyncActions-test.js",
        "packages/react-reconciler/src/__tests__/ReactFragment-test.js",
        "packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactIncremental-test.js",
        "packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactIncrementalErrorLogging-test.js",
        "packages/react-reconciler/src/__tests__/ReactIncrementalUpdates-test.js",
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactMemo-test.js",
        "packages/react-reconciler/src/__tests__/ReactNewContext-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseCallback-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactTransitionTracing-test.js"
      ]
    },
    {
      "sha": "83be48b9dee25737063ca64880f82ef9fea11737",
      "short_sha": "83be48b",
      "message": "[tests] fix hidden use() warnings (#31984)\n\n`spyOnDev` is such a footgun.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-06T14:12:35-05:00",
      "committed_date": "2025-01-06T14:12:35-05:00",
      "changed_files": [
        "packages/react-reconciler/src/__tests__/ReactUse-test.js"
      ]
    },
    {
      "sha": "defffdbba43f89b95d9f67a4fb0fa146c1211734",
      "short_sha": "defffdb",
      "message": "[Fiber] Don't work on scheduled tasks while we're in an async commit but flush it eagerly if we're sync (#31987)\n\nThis is a follow up to #31930 and a prerequisite for #31975.\n\nWith View Transitions, the commit phase becomes async which means that\nother work can sneak in between. We need to be resilient to that.\n\nThis PR first refactors the flushMutationEffects and flushLayoutEffects\nto use module scope variables to track its arguments so we can defer\nthem. It shares these with how we were already doing it for\nflushPendingEffects.\n\nWe also track how far along the commit phase we are so we know what we\nhave left to flush.\n\nThen callers of flushPassiveEffects become flushPendingEffects. That\nhelper synchronously flushes any remaining phases we've yet to commit.\nThat ensure that things are at least consistent if that happens.\n\nFinally, when we are using a scheduled task, we don't do any work. This\nensures that we're not flushing any work too early if we could've\ndeferred it. This still ensures that we always do flush it before\nstarting any new work on any root so new roots observe the committed\nstate.\n\nThere are some unfortunate effects that could happen from allowing\nthings to flush eagerly. Such as if a flushSync sneaks in before\nstartViewTransition, it'll skip the animation. If it's during a\nsuspensey font it'll start the transition before the font has loaded\nwhich might be better than breaking flushSync. It'll also potentially\nflush passive effects inside the startViewTransition which should\ntypically be ok.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-06T11:30:53-05:00",
      "committed_date": "2025-01-06T11:30:53-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHotReloading.js",
        "packages/react-reconciler/src/ReactFiberReconciler.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "3ce77d55a205065714fcf4b0533a4ac6d009992b",
      "short_sha": "3ce77d5",
      "message": "[playground:ci] Don't install compiler deps twice (#31995)\n\nThe compiler playground already installs the compiler's dependencies in\na preinstall step. No need to repeat it in CI.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31995).\n* __->__ #31995\n* #31994",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-06T11:02:23-05:00",
      "committed_date": "2025-01-06T11:02:23-05:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml"
      ]
    },
    {
      "sha": "11df5224e6be1d5282fb7fbdaff4f277409f8b76",
      "short_sha": "11df522",
      "message": "[rcr] Generate ts defs (#31994)\n\nThis was accidentally removed in the esbuild transition.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31994).\n* #31995\n* __->__ #31994",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-06T11:01:38-05:00",
      "committed_date": "2025-01-06T11:01:38-05:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/react-compiler-runtime/package.json",
        "compiler/packages/react-compiler-runtime/scripts/build.js",
        "compiler/packages/snap/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "9627d71c5050c7665a44e499fc643acce8a8a5e4",
      "short_sha": "9627d71",
      "message": "fix: `react-compiler-runtime` should be cjs (#31993)",
      "author": {
        "name": "Cody Olsen",
        "email": "81981+stipsan@users.noreply.github.com"
      },
      "authored_date": "2025-01-06T15:06:09+01:00",
      "committed_date": "2025-01-06T09:06:09-05:00",
      "changed_files": [
        "compiler/packages/react-compiler-runtime/scripts/build.js"
      ]
    },
    {
      "sha": "301a18a6afeaea9c6113d7e459025ba69f436b24",
      "short_sha": "301a18a",
      "message": "react-hooks/rules-of-hooks: detect issues in class properties (#31823)\n\nCo-authored-by: Elizabeth Craig <elcraig@microsoft.com>",
      "author": {
        "name": "Miguel Jiménez Esún",
        "email": "mjesun@users.noreply.github.com"
      },
      "authored_date": "2025-01-06T12:12:09+01:00",
      "committed_date": "2025-01-06T12:12:09+01:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js",
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js",
        "packages/eslint-plugin-react-hooks/package.json",
        "packages/eslint-plugin-react-hooks/src/RulesOfHooks.js",
        "yarn.lock"
      ]
    },
    {
      "sha": "03e4ec2d0fe7cd854d28634ba035dc8996ff244d",
      "short_sha": "03e4ec2",
      "message": "[assert helpers] react-dom (pt3) (#31983)\n\nmoar assert helpers\n\nthis finishes all of react-dom except the server integration tests which\nare tricky to convert",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-05T17:10:29-05:00",
      "committed_date": "2025-01-05T17:10:29-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMInvalidARIAHook-test.js",
        "packages/react-dom/src/__tests__/ReactDOMLegacyComponentTree-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMLegacyFiber-test.js",
        "packages/react-dom/src/__tests__/ReactDOMOption-test.js",
        "packages/react-dom/src/__tests__/ReactDOMRoot-test.js",
        "packages/react-dom/src/__tests__/ReactDOMSelect-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerLifecycles-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMShorthandCSSPropertyCollision-test.js",
        "packages/react-dom/src/__tests__/ReactDOMSingletonComponents-test.js",
        "packages/react-dom/src/__tests__/ReactDOMTextarea-test.js",
        "packages/react-dom/src/__tests__/ReactErrorBoundaries-test.internal.js",
        "packages/react-dom/src/__tests__/ReactFunctionComponent-test.js",
        "packages/react-dom/src/__tests__/ReactIdentity-test.js",
        "packages/react-dom/src/__tests__/ReactLegacyCompositeComponent-test.js",
        "packages/react-dom/src/__tests__/ReactLegacyContextDisabled-test.internal.js",
        "packages/react-dom/src/__tests__/ReactLegacyErrorBoundaries-test.internal.js",
        "packages/react-dom/src/__tests__/ReactLegacyMount-test.js",
        "packages/react-dom/src/__tests__/ReactLegacyUpdates-test.js",
        "packages/react-dom/src/__tests__/ReactMountDestruction-test.js",
        "packages/react-dom/src/__tests__/ReactMultiChild-test.js",
        "packages/react-dom/src/__tests__/ReactMultiChildText-test.js",
        "packages/react-dom/src/__tests__/ReactRenderDocument-test.js",
        "packages/react-dom/src/__tests__/ReactServerRendering-test.js",
        "packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js",
        "packages/react-dom/src/__tests__/ReactTestUtilsAct-test.js",
        "packages/react-dom/src/__tests__/ReactUpdates-test.js",
        "packages/react-dom/src/__tests__/validateDOMNesting-test.js"
      ]
    },
    {
      "sha": "bf883bebbc4973dea0e4801a5a62f82043ff57ee",
      "short_sha": "bf883be",
      "message": "[fizz] fix empty string href double warning (#31783)\n\nI think this is the suggested change from\nhttps://github.com/facebook/react/pull/31765#discussion_r1884541447\n\nBut no tests fail and I'm not sure how to test it? Seems sus. \n\nAlso seems like the `removeAttribute` here should be changed?\n\n\nhttps://github.com/facebook/react/blob/9d9f12f2699a049777fa88914306ad4de9e2b74d/packages/react-dom-bindings/src/client/ReactDOMComponent.js#L400-L427",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-03T12:53:28-05:00",
      "committed_date": "2025-01-03T12:53:28-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js"
      ]
    },
    {
      "sha": "f42f8c0635775c3cb8beb5252aa777ff7d468ae5",
      "short_sha": "f42f8c0",
      "message": "[flags] Remove enableServerComponentLogs (#31772)\n\nThis has landed everywhere.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-03T12:53:19-05:00",
      "committed_date": "2025-01-03T12:53:19-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "3b009b4cd58d382cfde2a72232c87df1a34d56d5",
      "short_sha": "3b009b4",
      "message": "Make RefStatic and LayoutStatic the same bit (#31965)\n\nRefs are basically just fancy Layout Effects. These are conceptually the\nsame thing and are always visited together so they don't need to be\ndifferent flags.\n\nWhenever we disappear/reappear Offscreen content we need to do both Refs\nand Layout Effects.\n\nThis is just indicating which phase needs to be visited and these are\nalways the same phase.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-02T21:23:09-05:00",
      "committed_date": "2025-01-02T21:23:09-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberFlags.js"
      ]
    },
    {
      "sha": "220dece92b9ab5f8867a589f8104b15717d68d2f",
      "short_sha": "220dece",
      "message": "[compiler] Switch to esbuild (#31963)\n\nThis migrates the compiler's bundler to esbuild instead of rollup.\nUnlike React, our bundling use cases are far simpler since the majority\nof our packages are meant to be run on node. Rollup was adding\nconsiderable build time overhead whereas esbuild remains fast and has\nall the functionality we need out of the box.\n\n\n### Before\n```\ntime yarn workspaces run build\nyarn workspaces v1.22.22\n\n> babel-plugin-react-compiler\nyarn run v1.22.22\n$ rimraf dist && rollup --config --bundleConfigAsCjs\n\nsrc/index.ts → dist/index.js...\n(!) Circular dependencies\n# ...\ncreated dist/index.js in 15.5s\n✨  Done in 16.45s.\n\n> eslint-plugin-react-compiler\nyarn run v1.22.22\n$ rimraf dist && rollup --config --bundleConfigAsCjs\n\nsrc/index.ts → dist/index.js...\n(!) Circular dependencies\n# ...\ncreated dist/index.js in 9.1s\n✨  Done in 10.11s.\n\n> make-read-only-util\nyarn run v1.22.22\nwarning package.json: No license field\n$ tsc\n✨  Done in 1.81s.\n\n> react-compiler-healthcheck\nyarn run v1.22.22\n$ rimraf dist && rollup --config --bundleConfigAsCjs\n\nsrc/index.ts → dist/index.js...\n(!) Circular dependencies\n# ...\ncreated dist/index.js in 8.7s\n✨  Done in 10.43s.\n\n> react-compiler-runtime\nyarn run v1.22.22\n$ rimraf dist && rollup --config --bundleConfigAsCjs\n\nsrc/index.ts → dist/index.js...\n(!) src/index.ts (1:0): Module level directives cause errors when bundled, \"use no memo\" in \"src/index.ts\" was ignored.\n# ...\ncreated dist/index.js in 1.1s\n✨  Done in 1.82s.\n\n> snap\nyarn run v1.22.22\n$ rimraf dist && concurrently -n snap,runtime \"tsc --build\" \"yarn --silent workspace react-compiler-runtime build --silent\"\n$ rimraf dist && rollup --config --bundleConfigAsCjs --silent\n[runtime] yarn --silent workspace react-compiler-runtime build --silent exited with code 0\n[snap] tsc --build exited with code 0\n✨  Done in 5.73s.\n✨  Done in 47.30s.\nyarn workspaces run build  75.92s user 5.48s system 170% cpu 47.821 total\n```\n\n### After\n\n```\ntime yarn workspaces run build\nyarn workspaces v1.22.22\n\n> babel-plugin-react-compiler\nyarn run v1.22.22\n$ rimraf dist && scripts/build.js\n✨  Done in 1.02s.\n\n> eslint-plugin-react-compiler\nyarn run v1.22.22\n$ rimraf dist && scripts/build.js\n✨  Done in 0.93s.\n\n> make-read-only-util\nyarn run v1.22.22\nwarning package.json: No license field\n$ rimraf dist && scripts/build.js\n✨  Done in 0.89s.\n\n> react-compiler-healthcheck\nyarn run v1.22.22\n$ rimraf dist && scripts/build.js\n✨  Done in 0.58s.\n\n> react-compiler-runtime\nyarn run v1.22.22\n$ rimraf dist && scripts/build.js\n✨  Done in 0.48s.\n\n> snap\nyarn run v1.22.22\n$ rimraf dist && concurrently -n snap,runtime \"tsc --build\" \"yarn --silent workspace react-compiler-runtime build\"\n$ rimraf dist && scripts/build.js\n[runtime] yarn --silent workspace react-compiler-runtime build exited with code 0\n[snap] tsc --build exited with code 0\n✨  Done in 4.69s.\n✨  Done in 9.46s.\nyarn workspaces run build  9.70s user 0.99s system 103% cpu 10.329 total\n```\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31963).\n* #31964\n* __->__ #31963\n* #31962",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-02T16:59:56-05:00",
      "committed_date": "2025-01-02T16:59:56-05:00",
      "changed_files": [
        "compiler/apps/playground/package.json",
        "compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/rollup.config.js",
        "compiler/packages/babel-plugin-react-compiler/scripts/build.js",
        "compiler/packages/eslint-plugin-react-compiler/package.json",
        "compiler/packages/eslint-plugin-react-compiler/rollup.config.js",
        "compiler/packages/eslint-plugin-react-compiler/scripts/build.js",
        "compiler/packages/make-read-only-util/package.json",
        "compiler/packages/make-read-only-util/scripts/build.js",
        "compiler/packages/react-compiler-healthcheck/package.json",
        "compiler/packages/react-compiler-healthcheck/rollup.config.js",
        "compiler/packages/react-compiler-healthcheck/scripts/build.js",
        "compiler/packages/react-compiler-runtime/package.json",
        "compiler/packages/react-compiler-runtime/rollup.config.js",
        "compiler/packages/react-compiler-runtime/scripts/build.js",
        "compiler/packages/react-compiler-runtime/src/index.ts",
        "compiler/packages/snap/package.json",
        "compiler/scripts/release/shared/build-packages.js",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "c784273bcc78df995b3a45c01c26188f7bb36911",
      "short_sha": "c784273",
      "message": "[compiler] Update prettier-plugin-hermes-parser (#31962)\n\nJust updating this package.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31962).\n* #31964\n* #31963\n* __->__ #31962",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-02T16:59:45-05:00",
      "committed_date": "2025-01-02T16:59:45-05:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "dc7578290f1bc55c358bee3a7eeb5e5f4551adfd",
      "short_sha": "dc75782",
      "message": "[assert helpers] ReactDOMFloat-test (#31901)\n\nSplitting out ReactDOMFloat to it's own PR because it's huge.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-02T15:53:19-05:00",
      "committed_date": "2025-01-02T15:53:19-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js"
      ]
    },
    {
      "sha": "7c11aad3746d7aa89435d12322e79a72896d5a9b",
      "short_sha": "7c11aad",
      "message": "[assert helpers] react-dom (pt2) (#31902)\n\nConverts more react-dom tests",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-02T15:53:06-05:00",
      "committed_date": "2025-01-02T15:53:06-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMComponentTree-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFiber-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMForm-test.js",
        "packages/react-dom/src/__tests__/ReactDOMInput-test.js"
      ]
    },
    {
      "sha": "d8a08f8e39972978cd0666f277409a1657083bb5",
      "short_sha": "d8a08f8",
      "message": "[assert helpers] ReactDOMComponent-test (#31898)\n\nSplitting out ReactDOMComponent to it's own PR because it's huge.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-02T15:28:15-05:00",
      "committed_date": "2025-01-02T15:28:15-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMComponent-test.js"
      ]
    },
    {
      "sha": "a7c898d83a991c48f3981fcc65d969f1d90d80a1",
      "short_sha": "a7c898d",
      "message": "[assert helpers] react-dom (pt 1) (#31897)\n\nConverts ~half of react-dom tests",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2025-01-02T15:28:06-05:00",
      "committed_date": "2025-01-02T15:28:06-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/CSSPropertyOperations-test.js",
        "packages/react-dom/src/__tests__/DOMPropertyOperations-test.js",
        "packages/react-dom/src/__tests__/InvalidEventListeners-test.js",
        "packages/react-dom/src/__tests__/ReactChildReconciler-test.js",
        "packages/react-dom/src/__tests__/ReactComponent-test.js",
        "packages/react-dom/src/__tests__/ReactComponentLifeCycle-test.js",
        "packages/react-dom/src/__tests__/ReactCompositeComponent-test.js",
        "packages/react-dom/src/__tests__/ReactCompositeComponentState-test.js",
        "packages/react-dom/src/__tests__/ReactDOM-test.js",
        "packages/react-dom/src/__tests__/ReactDOMAttribute-test.js",
        "packages/react-dom/src/__tests__/ReactDeprecationWarnings-test.js",
        "packages/react-dom/src/__tests__/findDOMNodeFB-test.js",
        "packages/react-dom/src/__tests__/utils/ReactDOMServerIntegrationTestUtils.js"
      ]
    },
    {
      "sha": "c81312e3a78dcbf71ed98c8893abe6dbfeaef3f2",
      "short_sha": "c81312e",
      "message": "[Fiber] Refactor Commit Phase into Separate Functions for Before Mutation/Mutation/Layout (#31930)\n\nThis is doing some general clean up to be able to split the commit root three phases into three separate async steps.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-02T14:55:34-05:00",
      "committed_date": "2025-01-02T14:55:34-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js"
      ]
    },
    {
      "sha": "d8b903f49edebdd9ed081ff0514c28fe130cd510",
      "short_sha": "d8b903f",
      "message": "[Fiber] Avoid return value from commitBeforeMutationEffects (#31922)\n\nThis is behind an unusual flag (enableCreateEventHandleAPI) that doesn't\nserve a special return value. I'll be collecting other flags from this\nphase too.\n\nWe can just use the global flag and reset it before the next mutation\nphase. Unlike focusedInstanceHandle this doesn't leak any memory in the\nmeantime.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-02T14:34:26-05:00",
      "committed_date": "2025-01-02T14:34:26-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "6ca7fbe884d17ef6c18d143421cc3e232bbba516",
      "short_sha": "6ca7fbe",
      "message": "[Fiber] Gate Update flag on BeforeMutationMask on flags (#31921)\n\nWe're currently visiting the snapshot phase for every `Update` flag even\nthough we rarely have to do anything in the Snapshot phase.\n\nThe only flags that seem to use these wider visits is\n`enableCreateEventHandleAPI` and `enableUseEffectEventHook` but really\nneither of those should do that neither. They should schedule explicit\nSnapshot phases if needed.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-02T14:34:10-05:00",
      "committed_date": "2025-01-02T14:34:10-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberFlags.js"
      ]
    },
    {
      "sha": "0de1233fd180969f7ffdfc98151922f2466ceb1f",
      "short_sha": "0de1233",
      "message": "[Fiber] Mark error boundaries and commit phases when an error is thrown (#31876)\n\nThis tracks commit phase errors and marks the component that errored as\nred. These also get the errors attached to the entry.\n\n<img width=\"1505\" alt=\"Screenshot 2024-12-20 at 2 40 14 PM\"\nsrc=\"https://github.com/user-attachments/assets/cac3ead7-a024-4e33-ab27-2e95293c4299\"\n/>\n\nIn the render phase I just mark the Error Boundary that caught the\nerror. We don't have access to the actual error since it's locked behind\nclosures in the update queue. We could probably expose that someway.\n\n<img width=\"949\" alt=\"Screenshot 2024-12-20 at 1 49 05 PM\"\nsrc=\"https://github.com/user-attachments/assets/3032455d-d9f2-462b-9c07-7be23663ecd3\"\n/>\n\nFollow ups:\n\nSince the Error Boundary doesn't commit its attempted render, we don't\nlog those. If we did then maybe we should just mark the errored\ncomponent like I do for the commit phase. We could potentially walk the\nlist of errors and log the captured fibers and just log their entries as\nchildren.\n\nWe could also potentially walk the uncommitted Fiber tree by stashing it\nsomewhere or even getting it from the alternate. This could be done on\nSuspense boundaries too to track failed hydrations.\n\n---------\n\nCo-authored-by: Ricky <rickhanlonii@gmail.com>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-02T13:28:24-05:00",
      "committed_date": "2025-01-02T13:28:24-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "1e9eb95db5b3a2064ecc26915a4e640b3a9bdaf5",
      "short_sha": "1e9eb95",
      "message": "[Fiber] Mark cascading updates (#31866)\n\nA common source of performance problems is due to cascading renders from\ncalling `setState` in `useLayoutEffect` or `useEffect`. This marks the\nentry from the update to when we start the render as red and `\"Cascade\"`\nto highlight this.\n\n<img width=\"964\" alt=\"Screenshot 2024-12-19 at 10 54 59 PM\"\nsrc=\"https://github.com/user-attachments/assets/2bfa91e6-1dc1-4b7f-a659-50aaf2a97e83\"\n/>\n\nIn addition to this case, there's another case where you call `setState`\nmultiple times in the same event causing multiple renders. This might be\ndue to multiple `flushSync`, or spawned a microtasks from a\n`useLayoutEffect`. In theory it could also be from a microtask scheduled\nafter the first `setState`. This one we can only detect if it's from an\nevent that has a `window.event` since otherwise it's hard to know if\nwe're still in the same event.\n\n<img width=\"1210\" alt=\"Screenshot 2024-12-19 at 11 38 44 PM\"\nsrc=\"https://github.com/user-attachments/assets/ee188bc4-8ebb-4e95-b5a5-4d724856c27d\"\n/>\n\nI decided against making a ping in a microtask considered a cascade.\nBecause that should ideally be using the Suspense Optimization and so\nwouldn't be considered multi-pass.\n\n<img width=\"1284\" alt=\"Screenshot 2024-12-19 at 11 07 30 PM\"\nsrc=\"https://github.com/user-attachments/assets/2d173750-a475-41a0-b6cf-679d15c4ca97\"\n/>\n\nWe might consider making the whole render phase and maybe commit phase\nred but that should maybe reserved for actual errors. The \"Blocked\"\nphase really represents the `setState` and so will have the stack trace\nof the first update.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-02T13:04:09-05:00",
      "committed_date": "2025-01-02T13:04:09-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "fe21c947c82b173ae538aa1d215559ec3dccd103",
      "short_sha": "fe21c94",
      "message": "[Fiber] Yield every other frame for Transition/Retry work (#31828)\n\nThis flag first moves the `shouldYield()` logic into React itself. We\nneed this for `postTask` compatibility anyway since this logic is no\nlonger a concern of the scheduler. This means that there can also be no\nglobal `requestPaint()` that asks for painting earlier. So this is best\nrolled out with `enableAlwaysYieldScheduler` (and ideally\n`enableYieldingBeforePassive`) instead of `enableRequestPaint`.\n\nOnce in React we can change the yield timing heuristics. This uses the\nprevious 5ms for Idle work to keep everything responsive while doing\nbackground work. However, for Transitions and Retries we have seen that\nsame thread animations (like loading states animating, or constant\nanimations like cool Three.js stuff) can take CPU time away from the\nTransition that causes moving into new content to slow down. Therefore\nwe only yield every 25ms.\n\nThe purpose of this yield is not to avoid the overhead of yielding,\nwhich is very low, but rather to intentionally block any frequently\noccurring other main thread work like animations from starving our work.\nIf we could we could just tell everyone else to throttle their stuff for\nideal scheduling but that's not quite realistic. In other words, the\npurpose of this is to reduce the frame rate of animations to 30 fps and\nwe achieve this by not yielding. We still do yield to allow the\nanimations to not just stall. This seems like a good balance.\n\nThe 5ms of Idle is because we don't really need to yield less often\nsince the overhead is low. We keep it low to allow 120 fps animations to\nrun if necessary and our work may not be the only work within a frame so\nwe need to yield early enough to leave enough time left.\n\nSimilarly we choose 25ms rather than say 35ms to ensure that we push\nlong enough to guarantee to half the frame rate but low enough that\nthere's plenty of time left for a rAF to power each animation every\nother frame. It's also low enough that if something else interrupts the\nwork like a new interaction, we can still be responsive to that within\n50ms or so. We also need to yield in case there's I/O work that needs to\nget bounced through the main thread.\n\nThis flag is currently off everywhere since we have so many other\nscheduling flags but that means there's some urgency to roll those out\nfully so we can test this one. There's also some tests to update since\nthis doesn't go through the Mock scheduler anymore for yields.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2025-01-02T13:02:22-05:00",
      "committed_date": "2025-01-02T13:02:22-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "c8c89fab5beaa481d132318437b2651ec89440c3",
      "short_sha": "c8c89fa",
      "message": "[compiler] Update rollup plugins (#31919)\n\nUpdate our various compiler rollup plugins.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31919).\n* #31927\n* #31918\n* #31917\n* #31916\n* __->__ #31919",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2025-01-02T11:24:26-05:00",
      "committed_date": "2025-01-02T11:24:26-05:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/rollup.config.js",
        "compiler/packages/eslint-plugin-react-compiler/rollup.config.js",
        "compiler/packages/react-compiler-healthcheck/rollup.config.js",
        "compiler/packages/react-compiler-runtime/rollup.config.js",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "62208bee5ad7e447d42459ace8c0edcb7c4f9197",
      "short_sha": "62208be",
      "message": "DevTools: fork FastRefresh test for <18 versions of React (#31893)\n\nWe currently have a failing test for React DevTools against React 17.\r\nThis started failing in https://github.com/facebook/react/pull/30899,\r\nwhere we changed logic for error tracking and started relying on\r\n`onPostCommitFiberRoot` hook.\r\n\r\nLooking at https://github.com/facebook/react/pull/21183,\r\n`onPostCommitFiberRoot` was shipped in 18, which means that any console\r\nerrors / warnings emitted in passive effects won't be recorded by React\r\nDevTools for React < 18.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2025-01-02T14:07:21+00:00",
      "committed_date": "2025-01-02T14:07:21+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/FastRefreshDevToolsIntegration-test.js",
        "packages/react-devtools-shared/src/hook.js"
      ]
    },
    {
      "sha": "694d3e1aae4ae9e29fe8de8ad246662be65f5e0b",
      "short_sha": "694d3e1",
      "message": "[Flight Parcel] Implement prepareDestinationForModule (#31799)\n\nFollowup to #31725\n\nThis implements `prepareDestinationForModule` in the Parcel Flight\nclient. On the Parcel side, the `<Resources>` component now only inserts\n`<link>` elements for stylesheets (along with a bootstrap script when\nneeded), and React is responsible for inserting scripts. This ensures\nthat components that are conditionally dynamic imported during render\nare also preloaded.\n\nCSS must be added to the RSC tree using `<Resources>` to avoid FOUC.\nThis must be manually rendered in both the top-level page, and in any\ncomponent that is dynamic imported. It would be nice if there was a way\nfor React to automatically insert CSS as well, but unfortunately\n`prepareDestinationForModule` only knows about client components and not\nCSS for server components. Perhaps there could be a way we could\nannotate components at code splitting boundaries with the resources they\nneed? More thoughts in this thread:\nhttps://github.com/facebook/react/pull/31725#discussion_r1884867607",
      "author": {
        "name": "Devon Govett",
        "email": "devongovett@gmail.com"
      },
      "authored_date": "2024-12-31T13:13:43-05:00",
      "committed_date": "2024-12-31T13:13:43-05:00",
      "changed_files": [
        "fixtures/flight-parcel/package.json",
        "fixtures/flight-parcel/src/server.tsx",
        "fixtures/flight-parcel/types.d.ts",
        "fixtures/flight-parcel/yarn.lock",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-browser-parcel.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-edge-parcel.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-parcel.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightClientConfigBundlerParcel.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightClientConfigTargetParcelBrowser.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightClientConfigTargetParcelServer.js",
        "scripts/flow/environment.js"
      ]
    },
    {
      "sha": "c01b8058e6e2d50a5c1ed69f1bdd4c541bf4aa92",
      "short_sha": "c01b805",
      "message": "DevTools: fix Compiler inegration test with 18.2 (#31904)\n\nCurrently failing with `TypeError: Invalid Version: 19`, looks like I've\r\noverlooked this one in https://github.com/facebook/react/pull/31241.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-12-29T15:36:21+00:00",
      "committed_date": "2024-12-29T15:36:21+00:00",
      "changed_files": [
        "scripts/ci/download_devtools_regression_build.js"
      ]
    },
    {
      "sha": "50f00fd876b0b92b243cd8b54a222f9577446392",
      "short_sha": "50f00fd",
      "message": "[Flight] Mark Errored Server Components (#31879)\n\nThis is similar to #31876 but for Server Components.\n\nIt marks them as errored and puts the error message in the Summary\nproperties.\n\n<img width=\"1511\" alt=\"Screenshot 2024-12-20 at 5 05 35 PM\"\nsrc=\"https://github.com/user-attachments/assets/92f11e42-0e23-41c7-bfd4-09effb25e024\"\n/>\n\nThis only looks at the current chunk for rejections. That means that\nthere might still be promises deeper that rejected but it's only the\nimmediate return value of the Server Component that's considered a\nrejection of the component itself.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-28T02:02:16-05:00",
      "committed_date": "2024-12-28T02:02:16-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js"
      ]
    },
    {
      "sha": "d4ac7689f94f8ed53b779a651d62a2b9af20e6c0",
      "short_sha": "d4ac768",
      "message": "Add Profiler mode to fixtures even if React DevTools is not installed (#31877)\n\nCurrently you need to do one of either:\n\n1. Install React DevTools\n2. Install React Refresh\n3. Add Profiler component\n\nTo opt in to component level profiling.\n\nIt was a bit confusing that some of the fixtures was doing 2 which made\nthem work while other was depending on if you had DevTools.\n\nReally React Refresh shouldn't really opt you in I think.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-28T02:01:49-05:00",
      "committed_date": "2024-12-28T02:01:49-05:00",
      "changed_files": [
        "fixtures/flight/src/index.js",
        "fixtures/ssr/src/index.js"
      ]
    },
    {
      "sha": "4309bde2b4faa044dc6266142378a330c030e053",
      "short_sha": "4309bde",
      "message": "[rcr] Relax react peer dep requirement (#31915)\n\nThere's no real reason to restrict the React peer dep to\nnon-experimental, so relax it.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31915).\n* #31919\n* #31918\n* #31917\n* #31916\n* __->__ #31915\n* #31920",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-12-27T14:27:43-05:00",
      "committed_date": "2024-12-27T14:27:43-05:00",
      "changed_files": [
        "compiler/packages/react-compiler-runtime/package.json"
      ]
    },
    {
      "sha": "fc8a898dd126198305fce458edd084c5d9c4b67a",
      "short_sha": "fc8a898",
      "message": "[compiler] Fix broken fire snapshot (#31920)\n\nThis was not committed in #31811\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31920).\n* #31919\n* #31918\n* #31917\n* #31916\n* #31915\n* __->__ #31920",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-12-26T14:58:37-05:00",
      "committed_date": "2024-12-26T14:58:37-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-rewrite-deps-spread.expect.md"
      ]
    },
    {
      "sha": "97d794958f5b19b66a980f737facd890463f0cb8",
      "short_sha": "97d7949",
      "message": "[assert helpers] Remove toWarnDev from fixtures/dom (#31894)\n\nThis is unused and never was:\nhttps://github.com/facebook/react/commit/e6a0473c3c6f501dbe291f60b9ee35760ab99eed",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-23T18:11:04-05:00",
      "committed_date": "2024-12-23T18:11:04-05:00",
      "changed_files": [
        "fixtures/dom/src/__tests__/nested-act-test.js",
        "fixtures/dom/src/toWarnDev.js"
      ]
    },
    {
      "sha": "94867f33be327a52bfffda89a14c85897180e43e",
      "short_sha": "94867f3",
      "message": "[asserts helpers] react package (#31853)\n\nBased off https://github.com/facebook/react/pull/31844\n\nCommit to review:\nhttps://github.com/facebook/react/commit/11aa104e3e70c0accc21f785060b812beb145089\n\nConverts the rest of the `react` package.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-23T14:58:20-05:00",
      "committed_date": "2024-12-23T14:58:20-05:00",
      "changed_files": [
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react/src/__tests__/ReactCoffeeScriptClass-test.coffee",
        "packages/react/src/__tests__/ReactContextValidator-test.js",
        "packages/react/src/__tests__/ReactCreateElement-test.js",
        "packages/react/src/__tests__/ReactCreateRef-test.js",
        "packages/react/src/__tests__/ReactES6Class-test.js",
        "packages/react/src/__tests__/ReactElementClone-test.js",
        "packages/react/src/__tests__/ReactElementValidator-test.internal.js",
        "packages/react/src/__tests__/ReactJSXElementValidator-test.js",
        "packages/react/src/__tests__/ReactJSXRuntime-test.js",
        "packages/react/src/__tests__/ReactJSXTransformIntegration-test.js",
        "packages/react/src/__tests__/ReactProfilerComponent-test.internal.js",
        "packages/react/src/__tests__/ReactPureComponent-test.js",
        "packages/react/src/__tests__/ReactStartTransition-test.js",
        "packages/react/src/__tests__/ReactStrictMode-test.js",
        "packages/react/src/__tests__/ReactTypeScriptClass-test.ts",
        "packages/react/src/__tests__/createReactClassIntegration-test.js",
        "scripts/jest/spec-equivalence-reporter/setupTests.js"
      ]
    },
    {
      "sha": "6907aa2a309bdc47dc3504683159cb50b590eed8",
      "short_sha": "6907aa2",
      "message": "[compiler] Rewrite effect dep arrays that use fire (#31811)\n\nIf an effect uses a dep array, also rewrite the dep array to use the\r\nfire binding\r\n\r\n--",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2024-12-20T17:16:59-05:00",
      "committed_date": "2024-12-20T17:16:59-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Transform/TransformFire.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-rewrite-deps-no-array-literal.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-rewrite-deps-no-array-literal.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-rewrite-deps-spread.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-rewrite-deps-spread.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/fire-and-autodeps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/fire-and-autodeps.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/rewrite-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/rewrite-deps.js"
      ]
    },
    {
      "sha": "45a720f7c7ff98e22fb299b50fef90fe319081a7",
      "short_sha": "45a720f",
      "message": "[compile] Error on fire outside of effects and ensure correct compilation, correct import (#31798)\n\nTraverse the compiled functions to ensure there are no lingering fires\r\nand that all\r\nfire calls are inside an effect lambda.\r\n\r\nAlso corrects the import to import from the compiler runtime instead\r\n\r\n\r\n--",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2024-12-20T16:55:01-05:00",
      "committed_date": "2024-12-20T16:55:01-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Transform/TransformFire.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/basic.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/deep-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-mix-fire-and-no-fire.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-mix-fire-and-no-fire.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-outside-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-outside-effect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/multiple-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/repeated-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/shared-hook-calls.expect.md"
      ]
    },
    {
      "sha": "ab27231dc51aa2535df37555797e630d31047fa4",
      "short_sha": "ab27231",
      "message": "[compiler] add fire imports (#31797)\n\nSummary:\r\n\r\nAdds import {useFire} from 'react' when fire syntax is used.\r\n\r\nThis is experimentation and may not become a stable feature in the\r\ncompiler.\r\n\r\n--\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31797).\r\n* #31811\r\n* #31798\r\n* __->__ #31797",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2024-12-20T15:25:30-05:00",
      "committed_date": "2024-12-20T15:25:30-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Transform/TransformFire.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/basic.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/deep-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/multiple-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/repeated-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/shared-hook-calls.expect.md"
      ]
    },
    {
      "sha": "03297e048d08de2f7c4c0d2950e2cb1c13875f66",
      "short_sha": "03297e0",
      "message": "[compiler] transform fire calls (#31796)\n\nThis is the diff with the meaningful changes. The approach is:\r\n1. Collect fire callees and remove fire() calls, create a new binding\r\nfor the useFire result\r\n2. Update LoadLocals for captured callees to point to the useFire result\r\n3. Update function context to reference useFire results\r\n4. Insert useFire calls after getting to the component scope\r\n\r\nThis approach aims to minimize the amount of new bindings we introduce\r\nfor the function expressions\r\nto minimize bookkeeping for dependency arrays. We keep all of the\r\nLoadLocals leading up to function\r\ncalls as they are and insert new instructions to load the originally\r\ncaptured function, call useFire,\r\nand store the result in a new promoted temporary. The lvalues that\r\nreferenced the original callee are\r\nchanged to point to the new useFire result.\r\n\r\nThis is the minimal diff to implement the expected behavior (up to\r\nimporting the useFire call, next diff)\r\nand further stacked diffs implement error handling. The rules for fire\r\nare:\r\n1. If you use fire for a callee in the effect once you must use it for\r\nevery time you call it in that effect\r\n2. You can only use fire in a useEffect lambda/functions defined inside\r\nthe useEffect lambda\r\n\r\nThere is still more work to do here, like updating the effect dependency\r\narray and handling object methods\r\n\r\n--\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31796).\r\n* #31811\r\n* #31798\r\n* #31797\r\n* __->__ #31796",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2024-12-20T15:09:09-05:00",
      "committed_date": "2024-12-20T15:09:09-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Transform/TransformFire.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Transform/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/basic.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/basic.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/deep-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/deep-scope.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-conditional-use-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-conditional-use-effect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-multiple-args.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-multiple-args.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-nested-use-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-nested-use-effect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-not-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-not-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-spread.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.invalid-spread.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.todo-method.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/error.todo-method.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/multiple-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/multiple-scope.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/repeated-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/repeated-calls.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/shared-hook-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/shared-hook-calls.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/use-effect-no-args-no-op.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/transform-fire/use-effect-no-args-no-op.js"
      ]
    },
    {
      "sha": "99471c02dd6631df1892bf76d932afd22fffa5e3",
      "short_sha": "99471c0",
      "message": "[assert helpers] ReactFlight (#31860)",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-20T12:41:30-05:00",
      "committed_date": "2024-12-20T12:41:30-05:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js"
      ]
    },
    {
      "sha": "26297f5383f7e7150d9aa2cf12e8326c96991cab",
      "short_sha": "26297f5",
      "message": "[assert helpers] not dom or reconciler (#31862)\n\nconverts everything left outside react-dom and react-reconciler",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-20T12:41:13-05:00",
      "committed_date": "2024-12-20T12:41:13-05:00",
      "changed_files": [
        "packages/react-cache/src/__tests__/ReactCacheOld-test.internal.js",
        "packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js",
        "packages/react-dom/src/client/__tests__/trustedTypes-test.internal.js",
        "packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js",
        "packages/react-native-renderer/src/__tests__/ReactNativeEvents-test.internal.js",
        "packages/react-native-renderer/src/__tests__/ReactNativeMount-test.internal.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMForm-test.js",
        "packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.js"
      ]
    },
    {
      "sha": "6a3d6a4382cdafc1260483a6fc5f76593fc038e4",
      "short_sha": "6a3d6a4",
      "message": "[compiler] Allow type cast expressions with refs (#31871)\n\nWe report a false positive for the combination of a ref-accessing\r\nfunction placed inside an array which is they type-cast. Here we teach\r\nref validation about type casts. I also tried other variants like\r\n`return ref as const` but those already worked.\r\n\r\nCloses #31864",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2024-12-20T08:56:48-08:00",
      "committed_date": "2024-12-20T08:56:48-08:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-type-cast-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-type-cast-in-render.js"
      ]
    },
    {
      "sha": "de82912e620518d501680bbd93fbb5cc8d134223",
      "short_sha": "de82912",
      "message": "Turn off enableYieldingBeforePassive in internal test renderers (#31863)\n\nhttps://github.com/facebook/react/pull/31785 turned on\n`enableYieldingBeforePassive` for the internal test renderer builds. We\nhave some failing tests on the RN side blocking the sync so lets turn\nthese off for now.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-12-20T09:48:50-05:00",
      "committed_date": "2024-12-20T09:48:50-05:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js"
      ]
    },
    {
      "sha": "518d06d26a97df6d4f5b04e529e5018ad35ea936",
      "short_sha": "518d06d",
      "message": "Turn off `enableYieldingBeforePassive` (#31857)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-12-19T20:43:01+01:00",
      "committed_date": "2024-12-19T20:43:01+01:00",
      "changed_files": [
        "packages/react-reconciler/src/__tests__/ReactSuspenseyCommitPhase-test.js",
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "36d15d58628baf5e15624a52febae873a7a56345",
      "short_sha": "36d15d5",
      "message": "[assert helpers] ReactChildren-test (#31844)\n\nBased off https://github.com/facebook/react/pull/31843\n\nCommit to review:\nhttps://github.com/facebook/react/pull/31844/commits/2c653b81a73e155f1548c0362e5334629a45351e\n\nMoar tests",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-19T13:05:23-05:00",
      "committed_date": "2024-12-19T13:05:23-05:00",
      "changed_files": [
        "packages/react/src/__tests__/ReactChildren-test.js"
      ]
    },
    {
      "sha": "c70ab3f4b051348e3dd91144d9c7299a2e2311a5",
      "short_sha": "c70ab3f",
      "message": "[ci] getWorkflowRun should not throw early if workflow hasn't completed (#31861)\n\nWe already have handling and retry logic for in-flight workflows in\n`downloadArtifactsFromGitHub`, so there's no need to exit early if we\nfind a workflow for a given commit but it hasn't finished yet.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-12-19T13:03:11-05:00",
      "committed_date": "2024-12-19T13:03:11-05:00",
      "changed_files": [
        "scripts/release/shared-commands/download-build-artifacts.js"
      ]
    },
    {
      "sha": "9f540fcc51eae6fb6eab8d4ccba00cb0477a6b7d",
      "short_sha": "9f540fc",
      "message": "[Flight] Support streaming of decodeReply in Edge environments (#31852)\n\nWe support streaming `multipart/form-data` in Node.js using Busboy since\nthat's kind of the idiomatic ecosystem way for handling these stream\nthere. There's not really anything idiomatic like that for Edge that's\nuniversal yet.\n\nThis adds a version that's basically just\n`AsyncIterable.from(formData)`. It could also be a `ReadableStream` of\nthose entries since those are also `AsyncIterable`.\n\nI imagine that in the future we might add one from a binary\n`ReadableStream` that does the parsing built-in.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-19T12:54:59-05:00",
      "committed_date": "2024-12-19T12:54:59-05:00",
      "changed_files": [
        "packages/react-server-dom-parcel/npm/server.edge.js",
        "packages/react-server-dom-parcel/server.edge.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.edge.js",
        "packages/react-server-dom-turbopack/npm/server.edge.js",
        "packages/react-server-dom-turbopack/server.edge.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.edge.js",
        "packages/react-server-dom-webpack/npm/server.edge.js",
        "packages/react-server-dom-webpack/server.edge.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMReplyEdge-test.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.edge.js"
      ]
    },
    {
      "sha": "8f92ea467e2672a436e3e032299d5230d03187ed",
      "short_sha": "8f92ea4",
      "message": "[assert helpers] forwardRef-test (#31843)\n\nStarting to convert the rest of tests to the `assertConsoleTypeDev`\nhelpers.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-19T11:50:05-05:00",
      "committed_date": "2024-12-19T11:50:05-05:00",
      "changed_files": [
        "packages/internal-test-utils/consoleMock.js",
        "packages/react/src/__tests__/forwardRef-test.js"
      ]
    },
    {
      "sha": "bd76ce54d93153cc84d861bd59e906bc28e1c160",
      "short_sha": "bd76ce5",
      "message": "Fork Scheduler feature flags for native-fb (#31859)\n\n#31787 introduces an experimental scheduler flag:\n`enableAlwaysYieldScheduler`, which is turned off for www. There wasn't\na SchedulerFeatureFlags fork for native-fb, so the experimental change\nwas enabled in the Scheduler-dev build there which causes test failures\nand is blocking the sync.\n\n#31805 introduces another scheduler flag `enableRequestPaint`, which is\nset as a `__VARIANT__` on www. I've set this to `true` here to preserve\nthe existing behavior. We can follow up with dynamic flags for native-fb\nafter unblocking the sync.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-12-19T11:49:14-05:00",
      "committed_date": "2024-12-19T11:49:14-05:00",
      "changed_files": [
        "packages/scheduler/src/forks/SchedulerFeatureFlags.native-fb.js",
        "scripts/rollup/forks.js"
      ]
    },
    {
      "sha": "9463d51e515544bb3119dd4cec46ce2177cf4c62",
      "short_sha": "9463d51",
      "message": "Update runtime workflow to use HEAD commit (#31850)\n\nThis updates the CI workflow for the runtime build and tests to use the\nHEAD commit of the PR branch rather than the Fake News merge commit that\nthe `@actions/checkout` action bafflingly defaults to.\n\nTesting against the merge commit never made sense to me as a behavior\nbecause as soon as someone updates upstream, it's out of date anyway.\n\nIt should just match the exact commit that the developer pushed, and the\nonce that appears in the GitHub UI.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-12-19T10:18:06-05:00",
      "committed_date": "2024-12-19T10:18:06-05:00",
      "changed_files": [
        ".github/workflows/runtime_build_and_test.yml"
      ]
    },
    {
      "sha": "a9bbe34622885ef5667d33236d580fe7321c0d8b",
      "short_sha": "a9bbe34",
      "message": "[Flight] Reject any new Chunks not yet discovered at the time of reportGlobalError (#31851)\n\nSame as #31840 but for the Flight Client.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-19T00:03:40-05:00",
      "committed_date": "2024-12-19T00:03:40-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-noop-renderer/src/ReactNoopFlightClient.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js"
      ]
    },
    {
      "sha": "17520b638190a20e745fe53299813b29b52dfc4c",
      "short_sha": "17520b6",
      "message": "[Fiber] Mark hydrated components in tertiary color (green) (#31829)\n\nThis is a follow up to #31752.\n\nThis keeps track in the commit phase whether this subtree was hydrated.\nIf it was, then we mark those components in the Components track as\ngreen. Just like the phase itself is marked as green.\n\nIf the boundary client rendered we instead mark it as \"errored\" and its\nchildren given the plain primary render color (blue). I also collect the\nhydration error for this case so we can include its message in the\ndetails view. (Unfortunately this doesn't support newlines atm.)\n\nMost of the time this happens in separate commits for each boundary but\nit is possible to force a client render in the same pass as a hydration.\nSuch as if an update flows into a boundary that has been put into\nfallback state after it was initially attempted.\n\n<img width=\"1487\" alt=\"Screenshot 2024-12-18 at 12 06 54 AM\"\nsrc=\"https://github.com/user-attachments/assets/74c57291-4d11-414c-9751-3dac3285a89a\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-18T23:53:54-05:00",
      "committed_date": "2024-12-18T23:53:54-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberHydrationContext.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberSuspenseComponent.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "7de040ccfa49f4128f0f5c6a7a81c019b4a381b8",
      "short_sha": "7de040c",
      "message": "[ci] Don't cancel runs if more than one branch triggers CI (#31848)\n\nThis might primarily only affect those using Sapling for React\r\ndevelopment, but pushing the same commit to multiple branches shouldn't\r\ncancel the run\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31848).\r\n* __->__ #31848\r\n* #31847\r\n* #31846",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-12-18T20:10:03-05:00",
      "committed_date": "2024-12-18T20:10:03-05:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_rust.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "74e39ce2a1eec803936db8a29349f6fda176cce7",
      "short_sha": "74e39ce",
      "message": "[ci] Validate downloaded build artifact (#31847)\n\nAdds validation to download-build-artifacts to confirm that the\r\ndownloaded artifact matches what was requested.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31847).\r\n* #31848\r\n* __->__ #31847\r\n* #31846",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-12-18T20:09:50-05:00",
      "committed_date": "2024-12-18T20:09:50-05:00",
      "changed_files": [
        "scripts/release/shared-commands/download-build-artifacts.js"
      ]
    },
    {
      "sha": "a34aa05e6991b6ec82986b56b786bcd497ed8aa1",
      "short_sha": "a34aa05",
      "message": "[ci] Allow build artifacts to be downloaded from any branch (#31846)\n\nThis was previously scoped to just commits on `main` but this\r\nrestriction is unnecessary.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31846).\r\n* #31848\r\n* #31847\r\n* __->__ #31846",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-12-18T20:09:09-05:00",
      "committed_date": "2024-12-18T20:09:09-05:00",
      "changed_files": [
        "scripts/release/shared-commands/download-build-artifacts.js"
      ]
    },
    {
      "sha": "faf6c4dfdcd3c9b3862af6a3afcb3d80abd407c0",
      "short_sha": "faf6c4d",
      "message": "[flags] Remove debugRenderPhaseSideEffectsForStrictMode (#31839)\n\nThis is enabled everywhere, we can just use the inline `__DEV__` checks.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-18T17:51:12-05:00",
      "committed_date": "2024-12-18T17:51:12-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberClassComponent.js",
        "packages/react-reconciler/src/ReactFiberClassUpdateQueue.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactUpdaters-test.internal.js",
        "packages/react-reconciler/src/__tests__/useRef-test.internal.js",
        "packages/react/src/__tests__/ReactStrictMode-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "ef979d4703ffcd1f379a4b76195816bea3da3c81",
      "short_sha": "ef979d4",
      "message": "[Flight Reply] Reject any new Chunks not yet discovered at the time of reportGlobalError (#31840)\n\nWe might have already resolved models that are not pending and so are\r\nnot rejected by aborting the stream. When those later get parsed they\r\nmight discover new chunks which end up as pending. These should be\r\nerrored since they will never be able to resolve later.\r\n\r\nThis avoids infinitely hanging the stream.\r\n\r\nThis same fix needs to be ported to ReactFlightClient that has the same\r\nissue.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-18T15:56:57-05:00",
      "committed_date": "2024-12-18T12:56:57-08:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMReplyEdge-test.js",
        "packages/react-server/src/ReactFlightReplyServer.js"
      ]
    },
    {
      "sha": "95465dc4913377ab7e2fa98d956c87adb5e38e6c",
      "short_sha": "95465dc",
      "message": "Allow `<script>` and `<template>` tags in `<select>` tag (#31837)",
      "author": {
        "name": "Jonathan Hefner",
        "email": "jonathan@hefner.pro"
      },
      "authored_date": "2024-12-18T14:29:16-06:00",
      "committed_date": "2024-12-18T21:29:16+01:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/validateDOMNesting.js"
      ]
    },
    {
      "sha": "74dd2da9ac4bf82ff1232694e971879bb07f37dc",
      "short_sha": "74dd2da",
      "message": "[flags] Remove enableModernStrictMode (#31838)\n\nThis is enabled everywhere.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-18T14:45:37-05:00",
      "committed_date": "2024-12-18T14:45:37-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ActivityStrictMode-test.js",
        "packages/react-reconciler/src/__tests__/StrictEffectsMode-test.js",
        "packages/react-reconciler/src/__tests__/StrictEffectsModeDefaults-test.internal.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "e1d843f4d8776bbf5d4fbd12a39bcfd2c565f900",
      "short_sha": "e1d843f",
      "message": "[tests] <StrictMode /> nested in tree is broken (#31825)\n\nAdds a test that shows using <StrictMode /> anywhere outside of the root\nnode will not fire strict effects.\n\nThis works:\n\n```js\nroot.render(\n  <StrictMode>\n    <App>\n      <Children />\n    </App>\n  </StrictMode>\n);\n  ```\n  \n  This does not fire strict effects on mount:\n```js\nroot.render(\n  <App>\n    <StrictMode>\n      <Children />\n    </StrictMode>\n  </App>\n);\n```",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-18T13:29:41-05:00",
      "committed_date": "2024-12-18T13:29:41-05:00",
      "changed_files": [
        "packages/react/src/__tests__/ReactStrictMode-test.internal.js"
      ]
    },
    {
      "sha": "1e9ef39a8742889f8414c7df9c9e6ef463fe3d01",
      "short_sha": "1e9ef39",
      "message": "[flags] Delete enableSchedulerDebugger (#31826)\n\nThe tool for this isn't used so I killed it internally and we can clean\nup the code to make it easier to reduce the scheduler code.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-18T13:29:22-05:00",
      "committed_date": "2024-12-18T13:29:22-05:00",
      "changed_files": [
        "fixtures/scheduler/index.html",
        "packages/scheduler/src/SchedulerFeatureFlags.js",
        "packages/scheduler/src/forks/Scheduler.js",
        "packages/scheduler/src/forks/SchedulerFeatureFlags.www.js",
        "packages/scheduler/src/forks/SchedulerMock.js",
        "packages/scheduler/src/forks/SchedulerNative.js",
        "packages/scheduler/src/forks/SchedulerPostTask.js",
        "scripts/jest/setupTests.www.js"
      ]
    },
    {
      "sha": "7eb8234f7cbeda298fffb1566b5cc771c09eff2e",
      "short_sha": "7eb8234",
      "message": "[Flight] Fix double-incremented pending chunks counter (#31833)\n\nBefore calling `emitTimingChunk` inside of `forwardDebugInfo`, we must\r\nnot increment `request.pendingChunks`, as this is already done inside of\r\nthe `emitTimingChunk` function.\r\n\r\nI don't have a unit test for this, but manually verified that this fixes\r\nthe hanging responses in https://github.com/vercel/next.js/pull/73804.",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2024-12-18T16:35:02+01:00",
      "committed_date": "2024-12-18T16:35:02+01:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "2bd1c756c6fffefb00cdb2986218fa2701ece82e",
      "short_sha": "2bd1c75",
      "message": "Ensure function arity is preserved after build (#31808)\n\nCo-authored-by: eps1lon <sebastian.silbermann@vercel.com>",
      "author": {
        "name": "David Sancho",
        "email": "dsnxmoreno@gmail.com"
      },
      "authored_date": "2024-12-18T14:08:56+01:00",
      "committed_date": "2024-12-18T14:08:56+01:00",
      "changed_files": [
        "packages/react-dom/src/client/ReactDOMRoot.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react/src/__tests__/React-hooks-arity.js",
        "scripts/rollup/validate/eslintrc.cjs.js",
        "scripts/rollup/validate/eslintrc.cjs2015.js",
        "scripts/rollup/validate/eslintrc.esm.js",
        "scripts/rollup/validate/eslintrc.fb.js",
        "scripts/rollup/validate/eslintrc.rn.js"
      ]
    },
    {
      "sha": "6a4b46cd70d2672bc4be59dcb5b8dede22ed0cef",
      "short_sha": "6a4b46c",
      "message": "[Fiber] Log Effect and Render Times in Offscreen Commit Phase (#31788)\n\nIn https://github.com/facebook/react/pull/30967 and\nhttps://github.com/facebook/react/pull/30983 I added logging of the just\nrendered components and the effects. However this didn't consider the\nspecial Offscreen passes. So this adds the same thing to those passes.\n\nLog component effect timings for disconnected/reconnected offscreen\nsubtrees. This includes initial mount of a Suspense boundary.\n\nLog component render timings for reconnected and already offscreen\noffscreen subtrees.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-17T19:46:03-05:00",
      "committed_date": "2024-12-17T19:46:03-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "facec3ee71fff8b23f1e91005fce730cc96e4021",
      "short_sha": "facec3e",
      "message": "[Fiber] Schedule passive effects using the regular ensureRootIsScheduled flow (#31785)\n\nThis treats workInProgressRoot work and rootWithPendingPassiveEffects\nthe same way. Basically as long as there's some work on the root, yield\nthe current task. Including passive effects. This means that passive\neffects are now a continuation instead of a separate callback. This can\nmean they're earlier or later than before. Later for Idle in case\nthere's other non-React work. Earlier for same Default if there's other\nDefault priority work.\n\nThis makes sense since increasing priority of the passive effects beyond\nIdle doesn't really make sense for an Idle render.\n\nHowever, for any given render at same priority it's more important to\ncomplete this work than start something new.\n\nSince we special case continuations to always yield to the browser, this\nhas the same effect as #31784 without implementing `requestPaint`. At\nleast assuming nothing else calls `requestPaint`.\n\n<img width=\"587\" alt=\"Screenshot 2024-12-14 at 5 37 37 PM\"\nsrc=\"https://github.com/user-attachments/assets/8641b172-8842-4191-8bf0-50cbe263a30c\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-17T17:01:31-05:00",
      "committed_date": "2024-12-17T17:01:31-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMSelect-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-reconciler/src/__tests__/ReactExpiration-test.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactSiblingPrerendering-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactUpdatePriority-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "packages/use-subscription/src/__tests__/useSubscription-test.js"
      ]
    },
    {
      "sha": "f5077bcc925aa6d0ba2ca4041c875d35e24f6266",
      "short_sha": "f5077bc",
      "message": "[Scheduler] Always yield to native macro tasks when a virtual task completes (#31787)\n\nAs an alternative to #31784.\n\nWe should really just always yield each virtual task to a native task.\nSo that it's 1:1 with native tasks. This affects when microtasks within\neach task happens. This brings us closer to native `postTask` semantics\nwhich makes it more seamless to just use that when available.\n\nThis still doesn't yield when a task expires to protect against\nstarvation.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-17T16:49:01-05:00",
      "committed_date": "2024-12-17T16:49:01-05:00",
      "changed_files": [
        "packages/scheduler/src/SchedulerFeatureFlags.js",
        "packages/scheduler/src/__tests__/Scheduler-test.js",
        "packages/scheduler/src/__tests__/SchedulerSetImmediate-test.js",
        "packages/scheduler/src/forks/Scheduler.js",
        "packages/scheduler/src/forks/SchedulerFeatureFlags.www.js"
      ]
    },
    {
      "sha": "34ee3919c39bc9b149462322713a9811db4b8498",
      "short_sha": "34ee391",
      "message": "Clean up enableLazyContextPropagation (#31810)\n\nThis flag has shipped everywhere, let's clean it up.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-12-17T11:56:00-05:00",
      "committed_date": "2024-12-17T11:56:00-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactLegacyContextDisabled-test.internal.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberClassComponent.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberNewContext.js",
        "packages/react-reconciler/src/ReactFiberThrow.js",
        "packages/react-reconciler/src/__tests__/ReactContextPropagation-test.js",
        "packages/react/src/__tests__/ReactContextValidator-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "d42872588282b9eef56b8fa02441b33d596fd197",
      "short_sha": "d428725",
      "message": "[flags] Clean up scheduler flags (#31814)\n\nThese flags are hardcoded now, we can make them static.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-17T10:27:46-05:00",
      "committed_date": "2024-12-17T10:27:46-05:00",
      "changed_files": [
        "packages/scheduler/src/forks/SchedulerFeatureFlags.www-dynamic.js",
        "packages/scheduler/src/forks/SchedulerFeatureFlags.www.js"
      ]
    },
    {
      "sha": "975cea2d3ddb95ad31f10ae112bdde5101725c85",
      "short_sha": "975cea2",
      "message": "Enable debugRenderPhaseSideEffectsForStrictMode in test renderers (#31761)\n\nThis flag controls the strict mode double invoke render/lifecycles/etc\nbehavior in Strict Mode.\n\nThe only place this flag is off is the test renderers, which it should\nbe on for.\n\nIf we can land this, we can follow up to remove the flag.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-16T22:52:18-05:00",
      "committed_date": "2024-12-16T22:52:18-05:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js"
      ]
    },
    {
      "sha": "49b1a956a915da972e60221e9610d383fac08bd7",
      "short_sha": "49b1a95",
      "message": "Enable disableDefaultPropsExceptForClasses (#31804)\n\nTODO: test this PR to see what internal tests fail",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-16T22:51:15-05:00",
      "committed_date": "2024-12-16T22:51:15-05:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js"
      ]
    },
    {
      "sha": "8dab5920e019950874bcc9061480dd78c849e1d7",
      "short_sha": "8dab592",
      "message": "Turn on useModernStrictMode in test renderers (#31769)\n\nIt's on everywhere else, let's turn this on so we can remove it. \n\nProbably should have been turned on in the test renderer for 19.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-16T22:43:51-05:00",
      "committed_date": "2024-12-16T22:43:51-05:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js"
      ]
    },
    {
      "sha": "8a7b30669aaa6f020494ba143d40fb396521e7a7",
      "short_sha": "8a7b306",
      "message": "[compiler][ez] Add shape for global Object.keys (#31583)\n\nAdd shape / type for global Object.keys. This is useful because\r\n- it has an Effect.Read (not an Effect.Capture) as it cannot alias its\r\nargument.\r\n- Object.keys return an array\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31583).\r\n* __->__ #31583\r\n* #31582",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-12-16T16:45:17-05:00",
      "committed_date": "2024-12-16T16:45:17-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/shapes-object-key.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/shapes-object-key.ts"
      ]
    },
    {
      "sha": "a78bbf9dbcf92434c902f9265ddfee34eae51a54",
      "short_sha": "a78bbf9",
      "message": "[compiler] Context variables as dependencies (#31582)\n\nWe previously didn't track context variables in the hoistable values\r\nsidemap of `propagateScopeDependencies`. This was overly conservative as\r\nwe *do* track the mutable range of context variables, and it is safe to\r\nhoist accesses to context variables after their last direct / aliased\r\nmaybe-assignment.\r\n\r\n```js\r\nfunction Component({value}) {\r\n  // start of mutable range for `x`\r\n  let x = DEFAULT;\r\n  const setX = () => x = value;\r\n  const aliasedSet = maybeAlias(setX);\r\n  maybeCall(aliasedSet);\r\n  // end of mutable range for `x`\r\n\r\n  // here, we should be able to take x (and property reads\r\n  // off of x) as dependencies\r\n  return <Jsx value={x} />\r\n}\r\n```\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31582).\r\n* #31583\r\n* __->__ #31582",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-12-16T16:45:05-05:00",
      "committed_date": "2024-12-16T16:45:05-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-functiondecl-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructure-array-assignment-to-context-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructure-array-declaration-to-context-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructure-object-assignment-to-context-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructure-object-declaration-to-context-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lambda-mutated-non-reactive-to-reactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.todo-useCallback-captures-reassigned-context-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-captures-reassigned-context-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.todo-useCallback-captures-reassigned-context-property.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-assignment.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/repro-scope-missing-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-control-dependency-on-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/context-var-granular-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/context-var-granular-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-scope-missing-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-operator-conditional.expect.md",
        "compiler/packages/snap/src/sprout/index.ts",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "c869063f0dd92f09244bb43e44fe175a5f97b7e6",
      "short_sha": "c869063",
      "message": "[compiler] Add fire to known React APIs (#31795)\n\nMakes `fire` a known export for type-based analysis\r\n\r\n--\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31795).\r\n* #31811\r\n* #31798\r\n* #31797\r\n* #31796\r\n* __->__ #31795\r\n* #31794",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2024-12-16T15:48:32-05:00",
      "committed_date": "2024-12-16T15:48:32-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts"
      ]
    },
    {
      "sha": "308be6e8dc0310c67c0b7341e459ebd8ad1ee1d0",
      "short_sha": "308be6e",
      "message": "[compiler] Add option for firing effect functions (#31794)\n\nConfig flag for `fire`\r\n\r\n--\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31794).\r\n* #31811\r\n* #31798\r\n* #31797\r\n* #31796\r\n* #31795\r\n* __->__ #31794",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2024-12-16T15:48:19-05:00",
      "committed_date": "2024-12-16T15:48:19-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "d325f872de658fc26127a91c965c135d8ad4e877",
      "short_sha": "d325f87",
      "message": "[compiler][be] Logger based debug printing in test runner (#31809)\n\nAvoid mutable logging enabled state and writing to `process.stdout`\r\nwithin our babel transform.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-12-16T15:15:13-05:00",
      "committed_date": "2024-12-16T15:15:13-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/InferReactiveScopeVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/logger.ts",
        "compiler/packages/snap/src/compiler.ts",
        "compiler/packages/snap/src/constants.ts",
        "compiler/packages/snap/src/runner-worker.ts"
      ]
    },
    {
      "sha": "ac172706526a840100302f92ae90dfa4ad804c56",
      "short_sha": "ac17270",
      "message": "[compiler][ez] Clean up duplicate code in propagateScopeDeps (#31581)\n\nClean up duplicate checks for when to skip processing values as\r\ndependencies / hoistable temporaries.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31581).\r\n* #31583\r\n* #31582\r\n* __->__ #31581",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-12-16T15:11:52-05:00",
      "committed_date": "2024-12-16T15:11:52-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts"
      ]
    },
    {
      "sha": "80b81fe56353f7419bd07ecfc3534d274a413fca",
      "short_sha": "80b81fe",
      "message": "[compiler] Repro for aliased captures within inner function expressions (#31770)\n\nsee fixture",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-12-16T14:43:34-05:00",
      "committed_date": "2024-12-16T14:43:34-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-capturing-func-maybealias-captured-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-capturing-func-maybealias-captured-mutate.ts",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "e30872a4e01bdc0cf185a818156ae7741c815e21",
      "short_sha": "e30872a",
      "message": "[compiler][be] Playground now compiles entire program (#31774)\n\nCompiler playground now runs the entire program through\r\n`babel-plugin-react-compiler` instead of a custom pipeline which\r\npreviously duplicated function inference logic from `Program.ts`. In\r\naddition, the playground output reflects the tranformed file (instead of\r\na \"virtual file\" of manually concatenated functions).\r\n\r\nThis helps with the following:\r\n- Reduce potential discrepencies between playground and babel plugin\r\nbehavior. See attached fixture output for an example where we previously\r\ndiverged.\r\n- Let playground users see compiler-inserted imports (e.g. `_c` or\r\n`useFire`)\r\n\r\nThis also helps us repurpose playground into a more general tool for\r\ncompiler-users instead of just for compiler engineers.\r\n- imports and other functions are preserved.\r\nWe differentiate between imports and globals in many cases (e.g.\r\n`inferEffectDeps`), so it may be misleading to omit imports in printed\r\noutput\r\n- playground now shows other program-changing behavior like position of\r\noutlined functions and hoisted declarations\r\n- emitted compiled functions do not need synthetic names\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31774).\r\n* #31809\r\n* __->__ #31774",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-12-16T14:43:21-05:00",
      "committed_date": "2024-12-16T14:43:21-05:00",
      "changed_files": [
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/01-user-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/02-default-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/module-scope-use-memo-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/module-scope-use-no-memo-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/parse-flow-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/parse-typescript-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/todo-function-scope-does-not-beat-module-scope-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/use-memo-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/use-no-memo-output.txt",
        "compiler/apps/playground/__tests__/e2e/page.spec.ts",
        "compiler/apps/playground/components/Editor/EditorImpl.tsx",
        "compiler/apps/playground/components/Editor/Output.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/Babel/BabelPlugin.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-no-memo-module-scope-usememo-function-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-no-memo-module-scope-usememo-function-scope.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/parseConfigPragma-test.ts",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts"
      ]
    },
    {
      "sha": "54e86bd0d0eac76320c8810090810e7a858125d6",
      "short_sha": "54e86bd",
      "message": "[Flight] Color and badge non-primary environments (#31738)\n\nStacked on #31737.\n\n<img width=\"987\" alt=\"Screenshot 2024-12-11 at 8 41 15 PM\"\nsrc=\"https://github.com/user-attachments/assets/438379a9-0138-4d02-a53a-419402839558\"\n/>\n\nWhen mixing environments (like \"use cache\" or third party RSC) it's\nuseful to color and badge those components differently to differentiate.\n\nI'm not putting them in separate tracks because when they do actually\nexecute, like cache misses or third party RSCs, they behave like they're\npart of the same tree.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-16T13:39:19-05:00",
      "committed_date": "2024-12-16T13:39:19-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js"
      ]
    },
    {
      "sha": "bdf187174d610eb6471bfe39f0d80ab33b68cb3a",
      "short_sha": "bdf1871",
      "message": "[Flight] Emit Deduped Server Components Marker (#31737)\n\nStacked on #31736.\n\n<img width=\"1223\" alt=\"Screenshot 2024-12-11 at 8 21 12 PM\"\nsrc=\"https://github.com/user-attachments/assets/a7cbc04b-c831-476b-aa2f-baddec9461c9\"\n/>\n\nThis emits a placeholder when we're deduping a component. This starts\nwhen the parent's self time ends, where we would've started rendering\nthis component if it wasn't already started. The end time is when the\nactual render ends since the parent is also blocked by it.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-16T13:16:53-05:00",
      "committed_date": "2024-12-16T13:16:53-05:00",
      "changed_files": [
        "fixtures/flight/src/App.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js"
      ]
    },
    {
      "sha": "07facb52d3cad10ae9888bf3b645d5a0cb760016",
      "short_sha": "07facb5",
      "message": "[Flight] Sort Server Components Track Group ahead of Client Scheduler/Components Tracks (#31736)\n\nStacked on #31735.\n\nThis ensures that Server Components Track comes first. Since it's\ntypically rendered first on the server for initial load and then flows\ninto scheduler and client components work. Also puts it closer to the\nNetwork and further away from \"Main\" JS.\n\n<img width=\"769\" alt=\"Screenshot 2024-12-11 at 5 31 41 PM\"\nsrc=\"https://github.com/user-attachments/assets/7198db0f-075e-4a78-8ea4-3bfbf06727cb\"\n/>\n\nSame trick as in #31615.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-16T12:39:15-05:00",
      "committed_date": "2024-12-16T12:39:15-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js"
      ]
    },
    {
      "sha": "909ed63e0adc162a95a4704d3ed07a956dcf9cd1",
      "short_sha": "909ed63",
      "message": "Clean up context access profiling experiment (#31806)\n\nWe introduced the `unstable_useContextWithBailout` API to run compiler\nbased experiments. This API was designed to be an experiment proxy for\nalternative approaches which would be heavier to implement. The\nexperiment turned out to be inconclusive. Since most of our performance\ncritical usage is already optimized, we weren't able to find a clear win\nwith this approach.\n\nSince we don't have further plans for this API, let's clean it up.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-12-16T12:32:07-05:00",
      "committed_date": "2024-12-16T12:32:07-05:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberNewContext.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/__tests__/ReactContextWithBailout-test.js",
        "packages/react/index.fb.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactHooks.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "031230d2e047c1a354037795a5790ed421d51c55",
      "short_sha": "031230d",
      "message": "[Flight] Stack Parallel Components in Separate Tracks (#31735)\n\nStacked on https://github.com/facebook/react/pull/31729\n\n<img width=\"1436\" alt=\"Screenshot 2024-12-11 at 3 36 41 PM\"\nsrc=\"https://github.com/user-attachments/assets/0a201913-0076-4bbf-be18-8f1df6c58313\"\n/>\n\nThe Server Components visualization is currently a tree flame graph\nwhere parent spans the child. This makes it equivalent to the Client\nComponents visualization.\n\nHowever, since Server Components can be async and therefore parallel, we\nneed to do something when two children are executed in parallel. This PR\nbumps parallel children into a separate track and then within that track\nif that child has more children it can grow within that track.\n\nI currently just cut off more than 10 parallel tracks.\n\nSynchronous Server Components are still in sequence but it's unlikely\nbecause even a simple microtasky Async Component is still parallel.\n\n<img width=\"959\" alt=\"Screenshot 2024-12-11 at 4 31 17 PM\"\nsrc=\"https://github.com/user-attachments/assets/5ad6a7f8-7fa0-46dc-af51-78caf9849176\"\n/>\n\nI think this is probably not a very useful visualization for Server\nComponents but we can try it out.\n\nI'm also going to try a different visualization where parent-child\nrelationship is horizontal and parallel vertical instead, but it might\nnot be possible to make that line up in this tool. It makes it a little\nharder to see how much different components (including their children)\nimpact the overall tree. If that's the only visualization it's also\nconfusing why it's different dimensions than the Client Component\nversion.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-16T11:58:25-05:00",
      "committed_date": "2024-12-16T11:58:25-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js"
      ]
    },
    {
      "sha": "f7b1273da2c96057d3908f52f8587379d4418f66",
      "short_sha": "f7b1273",
      "message": "Flag for requestPaint (#31805)\n\nWill run a quick experiment for this.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-16T11:18:03-05:00",
      "committed_date": "2024-12-16T11:18:03-05:00",
      "changed_files": [
        "packages/scheduler/src/SchedulerFeatureFlags.js",
        "packages/scheduler/src/__tests__/Scheduler-test.js",
        "packages/scheduler/src/forks/Scheduler.js",
        "packages/scheduler/src/forks/SchedulerFeatureFlags.www-dynamic.js",
        "packages/scheduler/src/forks/SchedulerFeatureFlags.www.js"
      ]
    },
    {
      "sha": "e06c72fcf4632ad3117add713a25f6354631f037",
      "short_sha": "e06c72f",
      "message": "[flags] Cleanup enableCache (#31778)\n\nThis is landed everywhere",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-15T12:34:08-05:00",
      "committed_date": "2024-12-15T12:34:08-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactCompositeComponent-test.js",
        "packages/react-markup/src/__tests__/ReactMarkupServer-test.js",
        "packages/react-reconciler/src/ReactFiberAsyncDispatcher.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCacheComponent.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactFiberTransition.js",
        "packages/react-reconciler/src/ReactFiberUnwindWork.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactCache-test.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "2d320563f35ad75419983f166431055b4e7ed9f6",
      "short_sha": "2d32056",
      "message": "[flags] Delete enableDebugTracing (#31780)\n\nThis is unused, even in the one builds that uses it, and we don't plan\non landing it in this form.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-15T12:16:10-05:00",
      "committed_date": "2024-12-15T12:16:10-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationModes-test.js",
        "packages/react-reconciler/src/DebugTracing.js",
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberClassComponent.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberThrow.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactTypeOfMode.js",
        "packages/react-reconciler/src/__tests__/DebugTracing-test.internal.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react/index.development.js",
        "packages/react/index.experimental.development.js",
        "packages/react/index.experimental.js",
        "packages/react/index.fb.js",
        "packages/react/index.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactServer.experimental.development.js",
        "packages/react/src/ReactServer.experimental.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/ReactSymbols.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "packages/shared/isValidElementType.js"
      ]
    },
    {
      "sha": "c80b336d23aa472b5e5910268138ac0447d6ae19",
      "short_sha": "c80b336",
      "message": "Implement requestPaint in the actual scheduler (#31784)\n\nWhen implementing passive effects we did a pretty massive oversight.\nWhile the passive effect is scheduled into its own scheduler task, the\nscheduler doesn't always yield to the browser if it has time left. That\nmeans that if you have a fast commit phase, it might try to squeeze in\nthe passive effects in the same frame but those then might end being\nvery heavy.\n\nWe had `requestPaint()` for this but that was only implemented for the\n`isInputPending` experiment. It wasn't thought we needed it for the\nregular scheduler because it yields \"every frame\" anyway - but it\ndoesn't yield every task. While the `isInputPending` experiment showed\nthat it wasn't actually any significant impact, and it was better to\nkeep shorter yield time anyway. Which is why we deleted the code.\nWhatever small win it did see in some cases might have been actually due\nto this issue rather than anything to do with `isInputPending` at all.\n\nAs you can see in https://github.com/facebook/react/pull/31782 we do\nhave this implemented in the mock scheduler and a lot of behavior that\nwe assert assumes that this works.\n\nSo this just implements yielding after `requestPaint` is called.\n\nBefore:\n\n<img width=\"1023\" alt=\"Screenshot 2024-12-14 at 3 40 24 PM\"\nsrc=\"https://github.com/user-attachments/assets/d60f4bb2-c8f8-4f91-a402-9ac25b278450\"\n/>\n\nAfter:\n\n<img width=\"1108\" alt=\"Screenshot 2024-12-14 at 3 41 25 PM\"\nsrc=\"https://github.com/user-attachments/assets/170cdb90-a049-436f-9501-be3fb9bc04ca\"\n/>\n\nNotice how in after the native task is split into two. It might not\nalways actually paint and the native scheduler might make the same\nmistake and think it has enough time left but it's at least less likely\nto.\n\nWe do have another way to do this. When we yield a continuation we also\nyield to the native browser. This is to enable the Suspense Optimization\n(currently disabled) to work. We could do the same for passive effects\nand, in fact, I have a branch that does but because that requires a lot\nmore tests to be fixed it's a lot more invasive of a change. The nice\nthing about this approach is that this is not even running in tests at\nall and the tests we do have assert that this is the behavior already. 😬",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-14T16:17:06-05:00",
      "committed_date": "2024-12-14T16:17:06-05:00",
      "changed_files": [
        "packages/scheduler/src/__tests__/Scheduler-test.js",
        "packages/scheduler/src/forks/Scheduler.js"
      ]
    },
    {
      "sha": "c32780eeb4c44e138d09a35da841926f512d3b07",
      "short_sha": "c32780e",
      "message": "[Fiber] Highlight hydration and offscreen render phases (#31752)\n\nThis highlights the render phase as the tertiary color (green) when\nwe're render a hydration lane or offscreen lane.\n\nI call the \"Render\" phase \"Hydrated\" instead in this case. For the\noffscreen case we don't currently have a differentiation between\nhydrated or activity. I just called that \"Prepared\". Even for the\nhydration case where there's no discovered client rendered boundaries\nit's more like it's preparing for an interaction rather than blocking\none. Where as for the other lanes the hydration might block something.\n\n<img width=\"1173\" alt=\"Screenshot 2024-12-12 at 11 23 14 PM\"\nsrc=\"https://github.com/user-attachments/assets/49ab1508-840f-4188-a085-18fe94b14187\"\n/>\n\nIn a follow up I'd like to color the components in the Components tree\ngreen if they were hydrated but not the ones that was actually client\nrendered e.g. due to a mismatch or forced client rendering so you can\ntell the difference. Unfortunately, the current signals we have for this\nget reset earlier in the commit phase than when we log these.\n\nAnother thing is that a failed hydration should probably be colored red\neven though it ends up committing successfully. I.e. a recoverable\nerror.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-14T13:49:47-05:00",
      "committed_date": "2024-12-14T13:49:47-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "d1dd7feabc63bf8ca61e9b3f4d78245a29ebbe9a",
      "short_sha": "d1dd7fe",
      "message": "[Fiber] Schedule client renders using non-hydration lane (#31776)\n\nRelated to #31752.\n\nWhen hydrating, we have two different ways of handling a Suspense\nboundary that the server has already given up on and decided to client\nrender. If we have already hydrated the parent and then later this\nhappens, then we'll use the retry lane like any ping. If we discover\nthat it was already in client-render mode when we discover the Suspense\nboundary for the first time, then schedule a default lane to let us\nfirst finish the current render and then upgrade the priority to sync to\ntry to client render this boundary as soon as possible since we're\nholding back content.\n\nWe used to use the `DefaultHydrationLane` for this but this is not\nreally a Hydration. It's actually a client render. If we get any other\nupdates flowing in from above at the same time we might as well do them\nin the same pass instead of two passes. So this should be considered\nmore like any update.\n\nThis also means that visually the client render pass now gets painted as\na render instead of a hydration.\n\nThis show the flow of a shell being hydrated at the default priority,\nthen a Suspense boundary being discovered and hydrated at Idle and then\nan inner boundary being discovered as client rendered which gets\nupgraded to default.\n\n<img width=\"1363\" alt=\"Screenshot 2024-12-14 at 12 13 57 AM\"\nsrc=\"https://github.com/user-attachments/assets/a141133e-4856-4f38-a11f-f26bd00b6245\"\n/>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-14T13:46:21-05:00",
      "committed_date": "2024-12-14T13:46:21-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "9e2c233139e62ea2f50bfa8986de02044e895c65",
      "short_sha": "9e2c233",
      "message": "[flags] Delete enableSuspenseAvoidThisFallbackFizz (#31779)\n\nWe're not shipping `enableSuspenseAvoidThisFallback` and the fizz flag\nis already off so we can delete it.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-14T13:05:17-05:00",
      "committed_date": "2024-12-14T13:05:17-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/forks/ReactFizzConfig.custom.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "0d67cc065157b2b98843cd1e2578b0969765c54b",
      "short_sha": "0d67cc0",
      "message": "Fix `commong` typo in <title> multiple children error message (#31777)",
      "author": {
        "name": "Brooke",
        "email": "samholmes1337@gmail.com"
      },
      "authored_date": "2024-12-14T17:32:58+00:00",
      "committed_date": "2024-12-14T12:32:58-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js"
      ]
    },
    {
      "sha": "2e25ee373d96a882cee9a1ee3d7fee3f498bde2d",
      "short_sha": "2e25ee3",
      "message": "[flags] Cleanup enableUseMemoCacheHook (#31767)\n\nBased off https://github.com/facebook/react/pull/31766\n\nThis has already landed everywhere.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-14T11:11:04-05:00",
      "committed_date": "2024-12-14T11:11:04-05:00",
      "changed_files": [
        "packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/__tests__/useMemoCache-test.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "a1b3bd0da0357bdd4b5ecfc26ea6ca3fad0e2f20",
      "short_sha": "a1b3bd0",
      "message": "Optimize method calls w props receiver (#31775)\n\nRedo of #31771 without ghstack",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2024-12-13T17:10:07-08:00",
      "committed_date": "2024-12-13T17:10:07-08:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OptimizePropsMethodCalls.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-child-stored-in-id.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-child-stored-in-id.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/props-method-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/props-method-dependency.js"
      ]
    },
    {
      "sha": "152080276c61873fdfc88db7f5856332742ddb02",
      "short_sha": "1520802",
      "message": "Remove enableFlightReadableStream (#31766)\n\nBase: https://github.com/facebook/react/pull/31765\n\nLanded everywhere",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-13T16:39:13-05:00",
      "committed_date": "2024-12-13T16:39:13-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMReply-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMReplyEdge-test.js",
        "packages/react-server/src/ReactFlightReplyServer.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "4996a8fa5c5bf9e12e750c46b48f25656fb050cf",
      "short_sha": "4996a8f",
      "message": "Remove enableFilterEmptyStringAttributesDOM (#31765)\n\nBase off https://github.com/facebook/react/pull/31764\n\nThis has landed everywhere",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-13T16:30:10-05:00",
      "committed_date": "2024-12-13T16:30:10-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMComponent-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "3ad17ecd313a8e53b339adf8052e35b3d73f8c62",
      "short_sha": "3ad17ec",
      "message": "Remove enableComponentStackLocations (#31764)\n\nThis has landed everywhere",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-13T15:52:42-05:00",
      "committed_date": "2024-12-13T15:52:42-05:00",
      "changed_files": [
        "packages/shared/ReactComponentStackFrame.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/__tests__/describeComponentFrame-test.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "982cf95c8b1914f87c5b1ea4ed73528e9d5dfb66",
      "short_sha": "982cf95",
      "message": "Add --cleanup option to flags script to show groups of flags by status (#31762)\n\n`yarn flags --cleanup` will categorize flags to make it more clear which\r\nones may need to be cleaned up, experiments checked on, or are blocked\r\nby internal rollouts.\r\n\r\nAlternative to #31760\r\n\r\n<img width=\"787\" alt=\"Screenshot 2024-12-13 at 2 31 30 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/452aee7e-9caf-4210-a621-53941d59cb2b\"\r\n/>",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-12-13T15:49:06-05:00",
      "committed_date": "2024-12-13T15:49:06-05:00",
      "changed_files": [
        "scripts/flags/flags.js"
      ]
    },
    {
      "sha": "08dfd0b8053d8d712607d3f37ddbb4da00c351f1",
      "short_sha": "08dfd0b",
      "message": "Remove enableBinaryflight (#31759)\n\nBased off https://github.com/facebook/react/pull/31757\n\nThis has landed everywhere.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-13T14:50:13-05:00",
      "committed_date": "2024-12-13T14:50:13-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMForm-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMReplyEdge-test.js",
        "packages/react-server/src/ReactFlightReplyServer.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react/src/ReactTaint.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "ef63718a27407b6d6b262d6be92e6bf0a87ff1a3",
      "short_sha": "ef63718",
      "message": "Remove enableAsyncActions (#31757)\n\nBased on https://github.com/facebook/react/pull/31756\n\nThis is landed everywhere",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-13T13:58:18-05:00",
      "committed_date": "2024-12-13T13:58:18-05:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/shared/ReactDOMFormActions.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMForm-test.js",
        "packages/react-dom/src/client/ReactDOMRoot.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberHostContext.js",
        "packages/react-reconciler/src/ReactFiberNewContext.js",
        "packages/react-reconciler/src/ReactFiberTransition.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/__tests__/ReactAsyncActions-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMForm-test.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/react-server/src/ReactFlightHooks.js",
        "packages/react/src/ReactHooks.js",
        "packages/react/src/ReactStartTransition.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "fb12845d779667b35cc7f44eee6bea47f4db72ba",
      "short_sha": "fb12845",
      "message": "Remove disableIEWorkarounds (#31756)\n\nBased off https://github.com/facebook/react/pull/31755\r\n\r\nThis is landed everywhere.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-13T12:26:40-05:00",
      "committed_date": "2024-12-13T12:26:40-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
        "packages/react-dom-bindings/src/client/setInnerHTML.js",
        "packages/react-dom/src/client/__tests__/dangerouslySetInnerHTML-test.js",
        "packages/react-dom/src/client/__tests__/trustedTypes-test.internal.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "scripts/jest/setupTests.www.js"
      ]
    },
    {
      "sha": "17ca4b157fcba6c734583513353ba72376a7ba2d",
      "short_sha": "17ca4b1",
      "message": "Fix useResourceEffect in Fizz (#31758)\n\nWe're seeing errors when testing useResourceEffect in SSR and it turns\r\nout we're missing the noop dispatcher function on Fizz.\r\n\r\nI tested a local build with this change and it resolved the late\r\nmutation errors in the e2e tests.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-12-13T11:26:44-05:00",
      "committed_date": "2024-12-13T11:26:44-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js",
        "packages/react-server/src/ReactFizzHooks.js"
      ]
    },
    {
      "sha": "4dff0e62b2320d8c97746a16c95efd9c9ad0bc07",
      "short_sha": "4dff0e6",
      "message": "Remove consoleManagedByDevToolsDuringStrictMode (#31755)\n\nThis is enabled everywhere except the test renderers, which don't use\r\nit.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-13T11:05:10-05:00",
      "committed_date": "2024-12-13T11:05:10-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberDevToolsHook.js",
        "packages/react/src/__tests__/ReactStrictMode-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "a7b829524b295bb114b112c7fc2375bbcd4c65e3",
      "short_sha": "a7b8295",
      "message": "[DevTools] Show component names while highlighting renders (#31577)\n\n## Summary\r\nThis PR improves the Trace Updates feature by letting developers see\r\ncomponent names directly on the update overlay. Before this change, the\r\noverlay only highlighted updated regions, leaving it unclear which\r\ncomponents were involved. With this update, you can now match visual\r\nupdates to their corresponding components, making it much easier to\r\ndebug rendering performance.\r\n\r\n### New Feature: Show component names while highlighting\r\nWhen the new **\"Show component names while highlighting\"** setting is\r\nenabled, the update overlay display the names of affected components\r\nabove the rectangles, along with the update count. This gives immediate\r\ncontext about what’s rendering and why. The preference is stored in\r\nlocal storage and synced with the backend, so it’s remembered across\r\nsessions.\r\n\r\n### Improvements to Drawing Logic\r\nThe drawing logic has been updated to make the overlay sharper and\r\neasier to read. Overlay now respect device pixel ratios, so they look\r\ngreat on high-DPI screens. Outlines have also been made crisper, which\r\nmakes it easier to spot exactly where updates are happening.\r\n\r\n> [!NOTE]\r\n> **Grouping Logic and Limitations**\r\n> Updates are grouped by their screen position `(left, top coordinates)`\r\nto combine overlapping or nearby regions into a single group. Groups are\r\nsorted by the highest update count within each group, making the most\r\nfrequently updated components stand out.\r\n> Overlapping labels may still occur when multiple updates involve\r\ncomponents that overlap but are not in the exact same position. This is\r\nintentional, as the logic aims to maintain a straightforward mapping\r\nbetween update regions and component names without introducing\r\nunnecessary complexity.\r\n\r\n### Testing\r\nThis PR also adds tests for the new `groupAndSortNodes` utility, which\r\nhandles the logic for grouping and sorting updates. The tests ensure the\r\nbehavior is reliable across different scenarios.\r\n\r\n## Before & After\r\n\r\n\r\nhttps://github.com/user-attachments/assets/6ea0fe3e-9354-44fa-95f3-9a867554f74c\r\n\r\n\r\nhttps://github.com/user-attachments/assets/32af4d98-92a5-47dd-a732-f05c2293e41b\r\n\r\n---------\r\n\r\nCo-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>",
      "author": {
        "name": "Piotr Tomczewski",
        "email": "piotr@tomczewski.dev"
      },
      "authored_date": "2024-12-13T12:53:05+01:00",
      "committed_date": "2024-12-13T11:53:05+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/traceUpdates-test.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/views/TraceUpdates/canvas.js",
        "packages/react-devtools-shared/src/backend/views/TraceUpdates/index.js",
        "packages/react-devtools-shared/src/backend/views/utils.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/constants.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/GeneralSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsContext.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsShared.css"
      ]
    },
    {
      "sha": "56ae4b8d22f773c961c6f57946e648de0879c7f1",
      "short_sha": "56ae4b8",
      "message": "Remove unused field _debugIsCurrentlyTiming (#31753)\n\nThis field is unused. It's not there at runtime. It's just legacy from\r\nthe type.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-12T23:53:37-05:00",
      "committed_date": "2024-12-12T23:53:37-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactInternalTypes.js"
      ]
    },
    {
      "sha": "d5e8f79cf4d11fa7eee263b3f937deecbe65ffd7",
      "short_sha": "d5e8f79",
      "message": "[Fiber] Use hydration lanes when scheduling hydration work (#31751)\n\nWhen scheduling the initial root and when using\r\n`unstable_scheduleHydration` we should use the Hydration Lanes rather\r\nthan the raw update lane. This ensures that we're always hydrating using\r\na Hydration Lane or the Offscreen Lane rather than other lanes getting\r\nsome random hydration in it.\r\n\r\nThis fixes an issue where updating a root while it is still hydrating\r\ncauses it to trigger client rendering when it could just hydrate and\r\nthen apply the update on top of that.\r\n\r\nIt also fixes a potential performance issue where\r\n`unstable_scheduleHydration` gets batched with an update that then ends\r\nup forcing an update of a boundary that requires it to rewind to do the\r\nhydration lane anyway. Might as well just start with the hydration\r\nwithout the update applied first.\r\n\r\nI added a kill switch (`enableHydrationLaneScheduling`) just in case but\r\nseems very safe given that using `unstable_scheduleHydration` at all is\r\nvery rare and updating the root before the shell hydrates is extremely\r\nrare (and used to trigger a recoverable error).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-12T23:06:07-05:00",
      "committed_date": "2024-12-12T23:06:07-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzShellHydration-test.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberReconciler.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "7130d0c6cf1f604badc5e479a944bda2c19ba971",
      "short_sha": "7130d0c",
      "message": "[Flight Parcel] Remove private package (#31746)\n\nWe'll start publishing these.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-12T15:26:03-05:00",
      "committed_date": "2024-12-12T15:26:03-05:00",
      "changed_files": [
        "packages/react-server-dom-parcel/package.json"
      ]
    },
    {
      "sha": "130095f76b7c0a90943fe8062afd1355a6d3188f",
      "short_sha": "130095f",
      "message": "[Flight Parcel] Align with more recent changes (#31741)\n\nFollow up to #31725.\r\n\r\nI diffed against the Turbopack one to find any unexpected discrepancies.\r\nSome parts are forked enough that it's hard to diff but I think I got\r\nmost of it.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-12T14:39:25-05:00",
      "committed_date": "2024-12-12T14:39:25-05:00",
      "changed_files": [
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-browser-parcel.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-edge-parcel.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-parcel.js",
        "packages/react-server-dom-esm/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-parcel/npm/server.browser.js",
        "packages/react-server-dom-parcel/npm/server.edge.js",
        "packages/react-server-dom-parcel/npm/server.node.js",
        "packages/react-server-dom-parcel/npm/static.browser.js",
        "packages/react-server-dom-parcel/npm/static.edge.js",
        "packages/react-server-dom-parcel/npm/static.js",
        "packages/react-server-dom-parcel/npm/static.node.js",
        "packages/react-server-dom-parcel/src/shared/ReactFlightClientConfigBundlerParcel.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.browser.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.browser.stable.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.edge.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.edge.stable.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-parcel/static.browser.js",
        "packages/react-server-dom-parcel/static.edge.js",
        "packages/react-server-dom-parcel/static.node.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.browser.stable.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.edge.stable.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.browser.stable.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.edge.stable.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.unbundled.stable.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "e854ce3b1551a4ac97012336c2e2076ab0cc0636",
      "short_sha": "e854ce3",
      "message": "Fix canary version strings (#31721)\n\nWe're still publishing RCs and creating canary version strings using the\r\nRC naming convention. Setting the `canaryChannelLabel` back to canary\r\nfixes the version names and tags after the 19 stable release.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-12-12T14:11:24-05:00",
      "committed_date": "2024-12-12T14:11:24-05:00",
      "changed_files": [
        "ReactVersions.js"
      ]
    },
    {
      "sha": "c86542b240375f95dfd14af5b8ec39e29881e74d",
      "short_sha": "c86542b",
      "message": "Bump next prerelease version numbers (#31676)\n\nUpdates the version numbers in the prerelease (canary and experimental)\r\nchannels.\r\n\r\n---------\r\n\r\nCo-authored-by: Jack Pope <jackpope1@gmail.com>",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-12-12T14:10:46-05:00",
      "committed_date": "2024-12-12T14:10:46-05:00",
      "changed_files": [
        "ReactVersions.js",
        "packages/eslint-plugin-react-hooks/package.json",
        "packages/jest-react/package.json",
        "packages/react-art/package.json",
        "packages/react-dom-bindings/package.json",
        "packages/react-dom/package.json",
        "packages/react-is/package.json",
        "packages/react-markup/package.json",
        "packages/react-native-renderer/package.json",
        "packages/react-reconciler/package.json",
        "packages/react-refresh/package.json",
        "packages/react-server-dom-esm/package.json",
        "packages/react-server-dom-fb/package.json",
        "packages/react-server-dom-turbopack/package.json",
        "packages/react-server-dom-webpack/package.json",
        "packages/react-test-renderer/package.json",
        "packages/react/package.json",
        "packages/scheduler/package.json",
        "packages/shared/ReactVersion.js",
        "packages/use-subscription/package.json",
        "packages/use-sync-external-store/package.json",
        "yarn.lock"
      ]
    },
    {
      "sha": "6928bf2f7c7375ed9038a7b30d5b4760bb57055a",
      "short_sha": "6928bf2",
      "message": "[Flight] Log Server Component into Performance Track (#31729)\n\n<img width=\"966\" alt=\"Screenshot 2024-12-10 at 10 49 19 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/27a21bdf-86b9-4203-893b-89523e698138\">\r\n\r\nThis emits a tree view visualization of the timing information for each\r\nServer Component provided in the RSC payload.\r\n\r\nThe unique thing about this visualization is that the end time of each\r\nServer Component spans the end of the last child. Now what is\r\nconceptually a blocking child is kind of undefined in RSC. E.g. if\r\nyou're not using a Promise on the client, or if it is wrapped in\r\nSuspense, is it really blocking the parent?\r\n\r\nHere I reconstruct parent-child relationship by which chunks reference\r\nother chunks. A child can belong to more than one parent like when we\r\ndedupe the result of a Server Component.\r\n\r\nThen I wait until the whole RSC payload has streamed in, and then I\r\ntraverse the tree collecting the end time from children as I go and emit\r\nthe `performance.measure()` calls on the way up.\r\n\r\nThere's more work for this visualization in follow ups but this is the\r\nbasics. For example, since the Server Component time span includes async\r\nwork it's possible for siblings to execute their span in parallel (Foo\r\nand Bar in the screenshot are parallel siblings). To deal with this we\r\nneed to spawn parallel work into separate tracks. Each one can be deep\r\ndue to large trees. This can makes this type of visualization unwieldy\r\nwhen you have a lot of parallelism. Therefore I also plan another\r\nflatter Timeline visualization in a follow up.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-12T14:03:18-05:00",
      "committed_date": "2024-12-12T14:03:18-05:00",
      "changed_files": [
        "fixtures/flight/src/App.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightPerformanceTrack.js"
      ]
    },
    {
      "sha": "ca587425fe21b644bebb336f058f1a0d9763631b",
      "short_sha": "ca58742",
      "message": "Implement react-server-dom-parcel (#31725)\n\nThis adds a new `react-server-dom-parcel-package`, which is an RSC\r\nintegration for the Parcel bundler. It is mostly copied from the\r\nexisting webpack/turbopack integrations, with some changes to utilize\r\nParcel runtime APIs for loading and executing bundles/modules.\r\n\r\nSee https://github.com/parcel-bundler/parcel/pull/10043 for the Parcel\r\nside of this, which includes the plugin needed to generate client and\r\nserver references. https://github.com/parcel-bundler/rsc-examples also\r\nincludes examples of various ways to use RSCs with Parcel.\r\n\r\nDifferences from other integrations:\r\n\r\n* Client and server modules are all part of the same graph, and we use\r\nParcel's\r\n[environments](https://parceljs.org/plugin-system/transformer/#the-environment)\r\nto distinguish them. The server is the Parcel build entry point, and it\r\nimports and renders server components in route handlers. When a `\"use\r\nclient\"` directive is seen, the environment changes and Parcel creates a\r\nnew client bundle for the page, combining all client modules together.\r\nCSS from both client and server components are also combined\r\nautomatically.\r\n* There is no separate manifest file that needs to be passed around by\r\nthe user. A [Runtime](https://parceljs.org/plugin-system/runtime/)\r\nplugin injects client and server references as needed into the relevant\r\nbundles, and registers server action ids using `react-server-dom-parcel`\r\nautomatically.\r\n* A special `<Resources>` component is also generated by Parcel to\r\nrender the `<script>` and `<link rel=\"stylesheet\">` elements needed for\r\na page, using the relevant info from the bundle graph.\r\n\r\nNote: I've already published a 0.0.x version of this package to npm for\r\ntesting purposes but happy to add whoever needs access to it as well.\r\n\r\n### Questions\r\n\r\n* How to test this in the React repo. I'll have integration tests in\r\nParcel, but setting up all the different mocks and environments to\r\nsimulate that here seems challenging. I could try to copy how\r\nWebpack/Turbopack do it but it's a bit different.\r\n* Where to put TypeScript types. Right now I have some ambient types in\r\nmy [example\r\nrepo](https://github.com/parcel-bundler/rsc-examples/blob/main/types.d.ts)\r\nbut it would be nice for users not to copy and paste these. Can I\r\ninclude them in the package or do they need to maintained separately in\r\ndefinitelytyped? I would really prefer not to have to maintain code in\r\nthree different repos ideally.\r\n\r\n---------\r\n\r\nCo-authored-by: Sebastian Markbage <sebastian@calyptus.eu>",
      "author": {
        "name": "Devon Govett",
        "email": "devongovett@gmail.com"
      },
      "authored_date": "2024-12-11T22:58:51-05:00",
      "committed_date": "2024-12-11T22:58:51-05:00",
      "changed_files": [
        ".eslintrc.js",
        "ReactVersions.js",
        "fixtures/flight-parcel/.gitignore",
        "fixtures/flight-parcel/.parcelrc",
        "fixtures/flight-parcel/package.json",
        "fixtures/flight-parcel/src/Dialog.tsx",
        "fixtures/flight-parcel/src/TodoCreate.tsx",
        "fixtures/flight-parcel/src/TodoDetail.tsx",
        "fixtures/flight-parcel/src/TodoItem.tsx",
        "fixtures/flight-parcel/src/TodoList.tsx",
        "fixtures/flight-parcel/src/Todos.css",
        "fixtures/flight-parcel/src/Todos.tsx",
        "fixtures/flight-parcel/src/actions.ts",
        "fixtures/flight-parcel/src/client.tsx",
        "fixtures/flight-parcel/src/server.tsx",
        "fixtures/flight-parcel/tsconfig.json",
        "fixtures/flight-parcel/types.d.ts",
        "fixtures/flight-parcel/yarn.lock",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-browser-parcel.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-edge-parcel.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-parcel.js",
        "packages/react-server-dom-parcel/README.md",
        "packages/react-server-dom-parcel/client.browser.js",
        "packages/react-server-dom-parcel/client.edge.js",
        "packages/react-server-dom-parcel/client.js",
        "packages/react-server-dom-parcel/client.node.js",
        "packages/react-server-dom-parcel/index.js",
        "packages/react-server-dom-parcel/npm/client.browser.js",
        "packages/react-server-dom-parcel/npm/client.edge.js",
        "packages/react-server-dom-parcel/npm/client.js",
        "packages/react-server-dom-parcel/npm/client.node.js",
        "packages/react-server-dom-parcel/npm/index.js",
        "packages/react-server-dom-parcel/npm/server.browser.js",
        "packages/react-server-dom-parcel/npm/server.edge.js",
        "packages/react-server-dom-parcel/npm/server.js",
        "packages/react-server-dom-parcel/npm/server.node.js",
        "packages/react-server-dom-parcel/package.json",
        "packages/react-server-dom-parcel/server.browser.js",
        "packages/react-server-dom-parcel/server.edge.js",
        "packages/react-server-dom-parcel/server.js",
        "packages/react-server-dom-parcel/server.node.js",
        "packages/react-server-dom-parcel/src/ReactFlightParcelReferences.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-parcel/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-parcel/src/server/ReactFlightServerConfigParcelBundler.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.browser.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.browser.stable.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.edge.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.edge.stable.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-parcel/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-parcel/src/shared/ReactFlightClientConfigBundlerParcel.js",
        "packages/react-server-dom-parcel/src/shared/ReactFlightImportMetadata.js",
        "packages/react-server-dom-parcel/static.browser.js",
        "packages/react-server-dom-parcel/static.edge.js",
        "packages/react-server-dom-parcel/static.js",
        "packages/react-server-dom-parcel/static.node.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-browser-parcel.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-edge-parcel.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node-parcel.js",
        "scripts/flow/environment.js",
        "scripts/rollup/bundles.js",
        "scripts/rollup/validate/eslintrc.cjs.js",
        "scripts/rollup/validate/eslintrc.cjs2015.js",
        "scripts/rollup/validate/eslintrc.esm.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "a4964987dc140526702e996223fe7ee293def8ac",
      "short_sha": "a496498",
      "message": "Make enableOwnerStacks dynamic (#31661)\n\nfollowing up on https://github.com/facebook/react/pull/31287, fixing\r\ntests\r\n\r\n---------\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>",
      "author": {
        "name": "Noah Lemen",
        "email": "noahlemen@meta.com"
      },
      "authored_date": "2024-12-11T12:00:25-05:00",
      "committed_date": "2024-12-11T12:00:25-05:00",
      "changed_files": [
        "packages/react/index.fb.js",
        "packages/react/src/ReactServer.fb.js",
        "packages/react/src/__tests__/ReactStrictMode-test.js",
        "packages/react/src/__tests__/createReactClassIntegration-test.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "92b62f500c3fca44a9dc9ead936ef3bf19481f02",
      "short_sha": "92b62f5",
      "message": "Remove comment syntax from ReactNativeTypes (#31457)\n\n# Summary\r\n\r\nI'm working to get the main `react-native` package parsable by modern\r\nFlow tooling (both `flow-bundler`, `flow-api-translator`).\r\n\r\nThis diff trivially removes some redundant Flow comment syntax in\r\n`ReactNativeTypes.js`, which fixes parsing under these newer tools.\r\n\r\n## How did you test this change?\r\n\r\nFiles were pasted into `react-native-github` under fbsource, where Flow\r\nvalidates ✅.",
      "author": {
        "name": "Alex Hunt",
        "email": "hello@alexhunt.io"
      },
      "authored_date": "2024-12-11T16:55:11+00:00",
      "committed_date": "2024-12-11T16:55:11+00:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeTypes.js"
      ]
    },
    {
      "sha": "79ddf5b574db085104d917c24a964cbd5b824e09",
      "short_sha": "79ddf5b",
      "message": "[Flight] Track Timing Information (#31716)\n\nStacked on #31715.\r\n\r\nThis adds profiling data for Server Components to the RSC stream (but\r\ndoesn't yet use it for anything). This is on behind\r\n`enableProfilerTimer` which is on for Dev and Profiling builds. However,\r\nfor now there's no Profiling build of Flight so in practice only in DEV.\r\nIt's gated on `enableComponentPerformanceTrack` which is experimental\r\nonly for now.\r\n\r\nWe first emit a timeOrigin in the beginning of the stream. This provides\r\nus a relative time to emit timestamps against for cross environment\r\ntransfer so that we can log it in terms of absolute times. Using this as\r\na separate field allows the actual relative timestamps to be a bit more\r\ncompact representation and preserves floating point precision.\r\n\r\nWe emit a timestamp before emitting a Server Component which represents\r\nthe start time of the Server Component. The end time is either when the\r\nnext Server Component starts or when we finish the task.\r\n\r\nWe omit the end time for simple tasks that are outlined without Server\r\nComponents.\r\n\r\nBy encoding this as part of the debugInfo stream, this information can\r\nbe forwarded between Server to Server RSC.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-10T20:46:19-05:00",
      "committed_date": "2024-12-10T20:46:19-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "7c4a7c9ddf2f1c8e223565af1256ea201ec0f303",
      "short_sha": "7c4a7c9",
      "message": "react-hooks/rules-of-hooks: Improve support for `do/while` loops (#31720)",
      "author": {
        "name": "Marin Atanasov",
        "email": "8436925+tyxla@users.noreply.github.com"
      },
      "authored_date": "2024-12-10T23:46:33+02:00",
      "committed_date": "2024-12-10T22:46:33+01:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js",
        "packages/eslint-plugin-react-hooks/src/RulesOfHooks.js"
      ]
    },
    {
      "sha": "16367ceb02faf5673e0380dec4c4928dfa37f17b",
      "short_sha": "16367ce",
      "message": "[compiler] Fix dropped ref with spread props in InlineJsxTransform (#31726)\n\nWhen supporting ref as prop in\r\nhttps://github.com/facebook/react/pull/31558, I missed fixing the\r\noptimization to pass a spread-props-only props object in without an\r\nadditional object copy. In the case that we have only a ref along with a\r\nspread, we cannot return only the spread object. This results in\r\ndropping the ref.\r\n\r\nIn this example\r\n```javascript\r\n<Foo ref={ref} {...props} />\r\n```\r\n\r\nThe bugged output is:\r\n```javascript\r\n{\r\n  // ...\r\n  props: props\r\n}\r\n```\r\n\r\nWith this change we now get the correct output:\r\n```javascript\r\n{\r\n  // ...\r\n  props: {ref: ref, ...props}\r\n}\r\n```",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-12-10T16:11:17-05:00",
      "committed_date": "2024-12-10T16:11:17-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/InlineJsxTransform.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.js"
      ]
    },
    {
      "sha": "7cb356e8622e6413671bc22ea273ea39b0b265e4",
      "short_sha": "7cb356e",
      "message": "[Flight] rename `prerender` to `unstable_prerender` and include in stable channel (#31724)\n\nWe added an experimental `prerender` API to flight. This change exposes\r\nthis API in stable channels prefixed as `unstable_prerender`. We have\r\nhigh confidence this API should exist but because we have not yet\r\nsettled on how to handle resuming/replaying of RSC streams we may need\r\nto change the API contract to suit future needs. This release will allow\r\nus to get more usage out of the existing implemented functionality\r\nwithout requiring you to use experimental builds which will open up\r\ngreater adoption and opportunity for feedback.\r\n\r\nthe `prerender` implementation is documented in the `react-server`\r\npackage. As with all RSC APIs implemented in bundler specific binding\r\npackages these aren't intended to be called by end users but instead be\r\nused by frameworks implementing React Server Components.\r\n\r\nPreviously `prerender` was exposed unprefixed and only in the\r\nexperimental channel. This PR renames the export across all channels to\r\n`unstable_prerender` so users of this previously unprefixed api will\r\nneed to update to the unstable form. This isn't a breaking change\r\nbecause it was only exposed in the experimental channel which does not\r\nfollow semver. The reason we don't expose it under both names is that\r\nusers may feature detect the unprefixed form and then when we finally do\r\nship it as unprefixed we may change the function signature and break\r\nthis code. Changing the name now is much safer.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-12-10T11:51:39-08:00",
      "committed_date": "2024-12-10T11:51:39-08:00",
      "changed_files": [
        "fixtures/flight/server/region.js",
        "packages/react-server-dom-esm/npm/static.node.js",
        "packages/react-server-dom-esm/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-esm/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-esm/static.node.js",
        "packages/react-server-dom-turbopack/npm/static.browser.js",
        "packages/react-server-dom-turbopack/npm/static.edge.js",
        "packages/react-server-dom-turbopack/npm/static.node.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.browser.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.browser.stable.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.edge.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.edge.stable.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-turbopack/static.browser.js",
        "packages/react-server-dom-turbopack/static.edge.js",
        "packages/react-server-dom-turbopack/static.node.js",
        "packages/react-server-dom-webpack/npm/static.browser.js",
        "packages/react-server-dom-webpack/npm/static.edge.js",
        "packages/react-server-dom-webpack/npm/static.node.js",
        "packages/react-server-dom-webpack/npm/static.node.unbundled.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.browser.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.browser.stable.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.edge.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.edge.stable.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.unbundled.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.unbundled.stable.js",
        "packages/react-server-dom-webpack/static.browser.js",
        "packages/react-server-dom-webpack/static.edge.js",
        "packages/react-server-dom-webpack/static.node.js",
        "packages/react-server-dom-webpack/static.node.unbundled.js"
      ]
    },
    {
      "sha": "4a8fc0f92e0f75257962522b51a938bf4dfda77a",
      "short_sha": "4a8fc0f",
      "message": "[Flight] Don't call onError/onPostpone when halting and unify error branches (#31715)\n\nWe shouldn't call onError/onPostpone when we halt a stream because that\r\nnode didn't error yet. Its digest would also get lost.\r\n\r\nWe also have a lot of error branches now for thenables and streams. This\r\nunifies them under erroredTask. I'm not yet unifying the cases that\r\ndon't allocate a task for the error when those are outlined.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-10T11:59:50-05:00",
      "committed_date": "2024-12-10T11:59:50-05:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "3b597c0576977773910c77e075cc6d6308decb04",
      "short_sha": "3b597c0",
      "message": "Clean up findFiberByHostInstance from DevTools Hook (#31711)\n\nThe need for this was removed in\r\nhttps://github.com/facebook/react/pull/30831\r\n\r\nSince the new DevTools version has been released for a while and we\r\nexpect people to more or less auto-update. Future versions of React\r\ndon't need this.\r\n\r\nOnce we remove the remaining uses of `getInstanceFromNode` e.g. in the\r\ndeprecated internal `findDOMNode`/`findNodeHandle` and the event system,\r\nwe can completely remove the tagging of DOM nodes.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-10T11:24:59-05:00",
      "committed_date": "2024-12-10T11:24:59-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberReconciler.js"
      ]
    },
    {
      "sha": "372ec00c0384cd2089651154ea7c67693ee3f2a5",
      "short_sha": "372ec00",
      "message": "Update ReactDebugInfo types to declare timing info separately (#31714)\n\nThis clarifies a few things by ensuring that there is always at least\r\none required field. This can be used to refine the object to one of the\r\nspecific types. However, it's probably just a matter of time until we\r\nmake this tagged unions instead. E.g. it would be nice to rename the\r\n`name` field `ReactComponentInfo` to `type` and tag it with the React\r\nElement symbol because then it's just the same as a React Element.\r\n\r\nI also extract a time field. The idea is that this will advance (or\r\nrewind) the time to the new timestamp and then anything below would be\r\ndefined as happening within that time stamp. E.g. to model the start and\r\nend for a server component you'd do something like:\r\n\r\n```\r\n[\r\n  {time: 123},\r\n  {name: 'Component', ... },\r\n  {time: 124},\r\n]\r\n```\r\n\r\nThe reason this needs to be in the `ReactDebugInfo` is so that timing\r\ninformation from one environment gets transferred into the next\r\nenvironment. It lets you take a Promise from one world and transfer it\r\ninto another world and its timing information is preserved without\r\neverything else being preserved.\r\n\r\nI've gone back and forth on if this should be part of each other Info\r\nobject like `ReactComponentInfo` but since those can be deduped and can\r\nchange formats (e.g. this should really just be a React Element) it's\r\nbetter to store this separately.\r\n\r\nThe time format is relative to a `timeOrigin` which is the current\r\nenvironment's `timeOrigin`. When it's serialized between environments\r\nthis needs to be considered.\r\n\r\nEmitting these timings is not yet implemented in this PR.\r\n\r\n---------\r\n\r\nCo-authored-by: eps1lon <sebastian.silbermann@vercel.com>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-09T19:47:43-05:00",
      "committed_date": "2024-12-09T19:47:43-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "3d2ab01a559943b3f041f841dc0d796d92be0a87",
      "short_sha": "3d2ab01",
      "message": "[Flight] Extract special cases for Server Component return value position (#31713)\n\nThis is just moving some code into a helper.\r\n\r\nWe have a bunch of special cases for the return value slot of a Server\r\nComponent that's different from just rendering that inside an object.\r\nThis was getting a little tricky to reason about inline with the rest of\r\nrendering.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-09T17:20:46-05:00",
      "committed_date": "2024-12-09T17:20:46-05:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "76d603a72aa14e93e73a68e0f96024a1841902f3",
      "short_sha": "76d603a",
      "message": "[compiler] Support for non-declatation for in/of iterators\n\nghstack-source-id: a28801e022561029e2f46c3dcb858bd4a81dea6a\nPull Request resolved: https://github.com/facebook/react/pull/31710",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-12-09T10:48:43-08:00",
      "committed_date": "2024-12-09T12:04:00-08:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-kitchensink.expect.md"
      ]
    },
    {
      "sha": "226b85926a70a9b258583c234bd4e143e6bb42e4",
      "short_sha": "226b859",
      "message": "[compiler] Support for context variable loop iterators\n\nSummary:\nFixing a compiler todo\n\nghstack-source-id: c4d9226b1745d003dc9945df1ac5c5a01712f909\nPull Request resolved: https://github.com/facebook/react/pull/31709",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-12-09T10:15:20-08:00",
      "committed_date": "2024-12-09T12:03:52-08:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-for-loop-with-context-variable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/for-loop-with-context-variable-iterator.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-for-loop-with-context-variable-iterator.js"
      ]
    },
    {
      "sha": "7283a213dbbc31029e65005276f12202558558fc",
      "short_sha": "7283a21",
      "message": "Fix headings in React 19 CHANGELOG (#31683)\n\nCo-authored-by: eps1lon <sebastian.silbermann@vercel.com>",
      "author": {
        "name": "Alexander Kachkaev",
        "email": "alexander@kachkaev.ru"
      },
      "authored_date": "2024-12-06T15:55:53+00:00",
      "committed_date": "2024-12-06T16:55:53+01:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "65ba3e87e49f7ea1bac04e1ed938debdbafcf30a",
      "short_sha": "65ba3e8",
      "message": "docs: use diff codeblock for `useReducer` typings change (#31685)\n\n## Summary\r\n\r\nThis PR updates the 19.0.0 changelog to use diff-styled code blocks for\r\nillustrating changes to `useReducer` typings. Also removes the incorrect\r\nsquare brackets in the second diff, it should be `Action` instead of\r\n`[Action]`.\r\n\r\n\r\n## How did you test this change?\r\n\r\n**Before**\r\n\r\n\r\n![2024-12-06_10-49](https://github.com/user-attachments/assets/bde94eec-a7cc-4fc8-bcca-37867633d37e)\r\n\r\n\r\n**After**\r\n\r\n\r\n![2024-12-06_10-51](https://github.com/user-attachments/assets/693fb7ac-68a3-45fc-aada-0c7594441b2a)\r\n\r\nSigned-off-by: Eng Zer Jun <engzerjun@gmail.com>",
      "author": {
        "name": "Eng Zer Jun",
        "email": "engzerjun@gmail.com"
      },
      "authored_date": "2024-12-06T23:12:38+08:00",
      "committed_date": "2024-12-06T10:12:38-05:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "c56c6234328a29930487295afe61597db48f058c",
      "short_sha": "c56c623",
      "message": "docs: fix capitalization of TypeScript (#31682)",
      "author": {
        "name": "Paul Schreiber",
        "email": "github@paulschreiber.com"
      },
      "authored_date": "2024-12-05T18:04:11-05:00",
      "committed_date": "2024-12-06T00:04:11+01:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "d27fa084f66b2e47933e7760a1e78c6d101dda5b",
      "short_sha": "d27fa08",
      "message": "Fix two typos in CHANGELOG.md (#31678)",
      "author": {
        "name": "owenarthur",
        "email": "owenarthurdesign@gmail.com"
      },
      "authored_date": "2024-12-05T18:03:24-05:00",
      "committed_date": "2024-12-06T00:03:24+01:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "52685a75039846fafec16d174e743d4525591ce7",
      "short_sha": "52685a7",
      "message": "Add changelog for 19.0.0 (#31675)\n\nCo-authored-by: Jack Pope <jackpope@meta.com>",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-12-05T13:46:52-05:00",
      "committed_date": "2024-12-05T13:46:52-05:00",
      "changed_files": [
        "CHANGELOG.md"
      ]
    },
    {
      "sha": "1c9b138714a69cd136a3d82769b1fd9a4b318953",
      "short_sha": "1c9b138",
      "message": "Don't serialize chunk ids for Hint and Console rows (#31671)\n\nHints and Console logs are side-effects and don't belong to any\r\nparticular value. They're `void`. Therefore they don't need a row ID.\r\n\r\nIn the current parsing scheme it's ok to omit the id. It just becomes\r\n`0` which is the initial value which is then unused for these row types.\r\n\r\nSo it looks like:\r\n\r\n```\r\n:HP[...]\r\n:W[...]\r\n0:{...}\r\n```\r\n\r\nWe could patch the parsing to encode the tag in the ID so it's more like\r\nthe ID is the target of the side-effect.\r\n\r\n```\r\nH:P[...]\r\nW:[...]\r\n0:{...}\r\n```\r\n\r\nOr move the tagging to the beginning like it used to be.\r\n\r\nBut this seems simple enough for now.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-12-04T19:53:20-05:00",
      "committed_date": "2024-12-04T19:53:20-05:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "de68d2f4a2403ad1ef46a3036ddc1f9080640588",
      "short_sha": "de68d2f",
      "message": "Register Suspense retry handlers in commit phase (#31667)\n\nTo avoid GC pressure and accidentally hanging onto old trees Suspense\r\nboundary retries are now implemented in the commit phase. I used the\r\nCallback flag which was previously only used to schedule callbacks for\r\nClass components. This isn't quite semantically equivalent but it's\r\nunused and seemingly compatible.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-12-04T07:58:43-08:00",
      "committed_date": "2024-12-04T07:58:43-08:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "16d2bbbd1f1617d636ea0fd271b902a12a763c27",
      "short_sha": "16d2bbb",
      "message": "Client render dehydrated Suspense boundaries on document load (#31620)\n\nWhen streaming SSR while hydrating React will wait for Suspense\r\nboundaries to be revealed by the SSR stream before attempting to hydrate\r\nthem. The rationale here is that the Server render is likely further\r\nahead of whatever the client would produce so waiting to let the server\r\nstream in the UI is preferable to retrying on the client and possibly\r\ndelaying how quickly the primary content becomes available. However If\r\nthe connection closes early (user hits stop for instance) or there is a\r\nserver error which prevents additional HTML from being delivered to the\r\nclient this can put React into a broken state where the boundary never\r\nresolves nor errors and the hydration never retries that boundary\r\nfreezing it in it's fallback state.\r\n\r\nOnce the document has fully loaded we know there is not way any\r\nadditional Suspense boundaries can arrive. This update changes react-dom\r\non the client to schedule client renders for any unfinished Suspense\r\nboundaries upon document loading.\r\n\r\nThe technique for client rendering a fallback is pretty straight\r\nforward. When hydrating a Suspense boundary if the Document is in\r\n'complete' readyState we interpret pending boundaries as fallback\r\nboundaries. If the readyState is not 'complete' we register an event to\r\nretry the boundary when the DOMContentLoaded event fires.\r\n\r\nTo test this I needed JSDOM to model readyState. We previously had a\r\ntemporary implementation of readyState for SSR streaming but I ended up\r\nimplementing this as a mock of JSDOM that implements a fake readyState\r\nthat is mutable. It starts off in 'loading' readyState and you can\r\nadvance it by mutating document.readyState. You can also reset it to\r\n'loading'. It fires events when changing states.\r\n\r\nThis seems like the least invasive way to get closer-to-real-browser\r\nbehavior in a way that won't require remembering this subtle detail\r\nevery time you create a test that asserts Suspense resolution order.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-12-03T13:13:35-08:00",
      "committed_date": "2024-12-03T13:13:35-08:00",
      "changed_files": [
        "packages/internal-test-utils/ReactJSDOM.js",
        "packages/internal-test-utils/ReactJSDOMUtils.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js",
        "packages/react-dom/src/test-utils/FizzTestUtils.js",
        "scripts/jest/ReactDOMServerIntegrationEnvironment.js",
        "scripts/jest/ReactJSDOMEnvironment.js",
        "scripts/jest/config.base.js",
        "scripts/jest/setupTests.js"
      ]
    },
    {
      "sha": "6bcf0d20dae349bba428d8f73dbcf0284b0acb10",
      "short_sha": "6bcf0d2",
      "message": "[compiler] Empty dep arrays for globals/module-scoped values/imports (#31666)\n\nAny LoadGlobal in the \"infer deps\" position can safely use an empty dep\r\narray. Globals have no reactive deps!\r\n\r\nI just keep messing up sapling. This is the revised version of #31662",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2024-12-03T13:54:08-05:00",
      "committed_date": "2024-12-03T13:54:08-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/outlined-function.expect.md"
      ]
    },
    {
      "sha": "b9b510df2a2ab45387c8d302930bc4a14f1450f5",
      "short_sha": "b9b510d",
      "message": "Revert \"Replace deprecated dependency in `eslint-plugin-react-compiler`\" (#31665)\n\nReverts facebook/react#31629\r\n\r\n`@babel/plugin-proposal-private-methods` is not compatible with\r\n`@babel/traverse` versions < 7.25 (see\r\nhttps://github.com/babel/babel/issues/16851). Internally we have\r\npartners that use a less modern babel version, and we expect this to be\r\nan issue for older codebases in OSS as well.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-12-03T11:46:08-05:00",
      "committed_date": "2024-12-03T11:46:08-05:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/package.json",
        "compiler/packages/eslint-plugin-react-compiler/rollup.config.js",
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "1b1283ade72dfdfa8981b08cf4cc9669bbf905f0",
      "short_sha": "1b1283a",
      "message": "[compiler] Support default imports for autodep config (#31657)\n\n## Summary\r\n\r\nAllows us to add deps for things like `import useWrapperEffect from\r\n'useWrapperEffect'`\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31657).\r\n* __->__ #31657\r\n* #31652",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2024-12-03T07:42:53-05:00",
      "committed_date": "2024-12-03T07:42:53-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies.js",
        "compiler/packages/snap/src/compiler.ts",
        "compiler/packages/snap/src/sprout/useEffectWrapper.ts",
        "compiler/packages/snap/src/types.d.ts"
      ]
    },
    {
      "sha": "2ab471c8d2d689e3a5a81178d9fac9bb6d4805bd",
      "short_sha": "2ab471c",
      "message": "[compiler] Don't include current field accesses in auto-deps (#31652)\n\n## Summary\r\n\r\nDrops .current field accesses in inferred dep arrays\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31652).\r\n* #31657\r\n* __->__ #31652",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@meta.com"
      },
      "authored_date": "2024-12-03T07:42:28-05:00",
      "committed_date": "2024-12-03T07:42:28-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-ref-helper.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-ref-helper.js"
      ]
    },
    {
      "sha": "865d2c418d5ba6fb4546e4b58616cd9b7701af85",
      "short_sha": "865d2c4",
      "message": "[compiler] Add meta internal option for useMemoCache import (#31654)\n\nAdds `target: 'donotuse_meta_internal'`, which inserts useMemoCache\r\nimports directly from `react`. Note that this is only valid for Meta\r\nbundles, as others do not [re-export the `c`\r\nfunction](https://github.com/facebook/react/blob/5b0ef217ef32333a8e56f39be04327c89efa346f/packages/react/index.fb.js#L68-L70).\r\n\r\n```js\r\n// target=donotuse_meta_internal\r\nimport {c as _c} from 'react';\r\n\r\n// target=19\r\nimport {c as _c} from 'react/compiler-runtime';\r\n\r\n// target=17,18\r\nimport {c as _c} from 'react-compiler-runtime';\r\n```\r\n\r\nMeta is a bit special in that react runtime and compiler are guaranteed\r\nto be up-to-date and compatible. It also has its own bundling and module\r\nresolution logic, which makes importing from `react/compiler-runtime`\r\ntricky.\r\n\r\nI'm also fine with implementing the alternative which adds an internal\r\nstub for `react-compiler-runtime` and\r\n[bundles](https://github.com/facebook/react/blob/5b0ef217ef32333a8e56f39be04327c89efa346f/scripts/rollup/bundles.js#L120)\r\nthe runtime for internal builds.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-12-02T16:42:58-06:00",
      "committed_date": "2024-12-02T17:42:58-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/target-flag-meta-internal.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/target-flag-meta-internal.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "5b0ef217ef32333a8e56f39be04327c89efa346f",
      "short_sha": "5b0ef21",
      "message": "s/server action/server function (#31005)\n\n## Overview\r\n\r\nChanges the error message to say \"Server Functions\" instead of \"Server\r\nActions\" since this error can fire in cases like:\r\n\r\n```\r\n<button onClick={serverFunction} />\r\n```\r\n\r\nWhich is calling a server function, not a server action.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-12-02T10:02:31-05:00",
      "committed_date": "2024-12-02T10:02:31-05:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightReplyClient.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "7670501b0dc1a97983058b5217a205b62e2094a1",
      "short_sha": "7670501",
      "message": "Replace deprecated dependency in `eslint-plugin-react-compiler` (#31629)",
      "author": {
        "name": "Pavel",
        "email": "19418601+rakleed@users.noreply.github.com"
      },
      "authored_date": "2024-11-25T07:32:11+03:00",
      "committed_date": "2024-11-24T23:32:11-05:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/package.json",
        "compiler/packages/eslint-plugin-react-compiler/rollup.config.js",
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "2a9f4c04e54294b668e0a2ae11c1930c2e57b248",
      "short_sha": "2a9f4c0",
      "message": "[compiler] Infer deps configuration (#31616)\n\nAdds a way to configure how we insert deps for experimental purposes.\r\n\r\n```\r\n[\r\n  {\r\n    module: 'react',\r\n    imported: 'useEffect',\r\n    numRequiredArgs: 1,\r\n  },\r\n  {\r\n    module: 'MyExperimentalEffectHooks',\r\n    imported: 'useExperimentalEffect',\r\n    numRequiredArgs: 2,\r\n  },\r\n]\r\n```\r\n\r\nwould insert dependencies for calls of `useEffect` imported from `react`\r\nif they have 1 argument and calls of useExperimentalEffect` from\r\n`MyExperimentalEffectHooks` if they have 2 arguments. The pushed dep\r\narray is appended to the arg list.",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@fb.com"
      },
      "authored_date": "2024-11-22T17:19:20-05:00",
      "committed_date": "2024-11-22T17:19:20-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-deps-custom-config.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-deps-custom-config.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies.js",
        "compiler/packages/snap/src/compiler.ts",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "e3b7ef32be6a6d01ea050a10a218538e3a75c64f",
      "short_sha": "e3b7ef3",
      "message": "[crud] Only export uRC when flag is enabled (#31617)\n\nIt's tricky to do feature detection of uRC currently because it's always\npresent on the export. Let's conditionally export it instead.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-22T16:13:42-05:00",
      "committed_date": "2024-11-22T16:13:42-05:00",
      "changed_files": [
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react/src/ReactClient.js"
      ]
    },
    {
      "sha": "eee5ca2a92c32103b6bc3c1f7e6cdf1c4807ee56",
      "short_sha": "eee5ca2",
      "message": "[compiler] Prune all unused array destructure items during DCE (#31619)\n\nWe didn't originally support holes within array patterns, so DCE was\r\nonly able to prune unused items from the end of an array pattern. Now\r\nthat we support holes we can replace any unused item with a hole, and\r\nthen just prune the items to the last identifier/spread entry.\r\n\r\nNote: this was motivated by finding useState where either the state or\r\nsetState go unused — both are strong indications that you're violating\r\nthe rules in some way. By DCE-ing the unused portions of the useState\r\ndestructuring we can easily check if you're ignoring either value.\r\n\r\ncloses #31603 \r\n\r\nThis is a redo of that PR not using ghstack",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2024-11-22T15:59:59-05:00",
      "committed_date": "2024-11-22T15:59:59-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/DeadCodeElimination.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/concise-arrow-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/escape-analysis-destructured-rest-element.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inadvertent-mutability-readonly-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multiple-calls-to-hoisted-callback-from-other-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/preserve-use-memo-transition.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/react-namespace.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-control-dependency-phi-setState-type.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-undefined-expression-of-jsxexpressioncontainer.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/unused-array-middle-element.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useActionState-dispatch-considered-as-non-reactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useReducer-returned-dispatcher-is-non-reactive.expect.md"
      ]
    },
    {
      "sha": "aba370f1e45d21f19f33c04c33fc99fb3d0109e5",
      "short_sha": "aba370f",
      "message": "Add moveBefore Experiment (#31596)\n\nA long standing issue for React has been that if you reorder stateful\r\nnodes, they may lose their state and reload. The thing moving loses its\r\nstate. There's no way to solve this in general where two stateful nodes\r\nswap.\r\n\r\nThe [`moveBefore()`\r\nproposal](https://chromestatus.com/feature/5135990159835136?gate=5177450351558656)\r\nhas now moved to\r\n[intent-to-ship](https://groups.google.com/a/chromium.org/g/blink-dev/c/YE_xLH6MkRs/m/_7CD0NYMAAAJ).\r\nThis function is kind of like `insertBefore` but preserves state.\r\n\r\nThere's [a demo here](https://state-preserving-atomic-move.glitch.me/).\r\nIdeally we'd port this demo to a fixture so we can try it.\r\n\r\nCurrently this flag is always off - even in experimental. That's because\r\nthis is still behind a Chrome flag so it's a little early to turn it on\r\neven in experimental. So you need a custom build. It's on in RN but only\r\nbecause it doesn't apply there which makes it easier to tell that it's\r\nsafe to ship once it's on everywhere else.\r\n\r\nThe other reason it's still off is because there's currently a semantic\r\nbreaking change. `moveBefore()` errors if both nodes are disconnected.\r\nThat happens if we're inside a completely disconnected React root.\r\nThat's not usually how you should use React because it means effects\r\ncan't read layout etc. However, it is currently supported. To handle\r\nthis we'd have to try/catch the `moveBefore` to handle this case but we\r\nhope this semantic will change before it ships. Before we turn this on\r\nin experimental we either have to wait for the implementation to not\r\nerror in the disconnected-disconnected case in Chrome or we'd have to\r\nadd try/catch.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-22T13:24:29-05:00",
      "committed_date": "2024-11-22T13:24:29-05:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "1345c37941d4e2e29034bb0fc0cfb6d01bb1d841",
      "short_sha": "1345c37",
      "message": "Mark all lanes in order on every new render (#31615)\n\nThis is a hack that ensures that all four lanes as visible whether you\r\nhave any tracks in them or not, and that they're in the priority order\r\nwithin the Scheduler track group. We do want to show all even if they're\r\nnot used because it shows what options you're missing out on.\r\n\r\n<img width=\"1035\" alt=\"Screenshot 2024-11-22 at 12 38 30 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/f30ab0b9-af5e-48ed-b042-138444352575\">\r\n\r\nIn Chrome, the order of tracks within a group are determined by the\r\nearliest start time. We add fake markers at start time zero in that\r\norder eagerly. Ideally we could do this only once but because calls that\r\naren't recorded aren't considered for ordering purposes, we need to keep\r\nadding these over and over again in case recording has just started. We\r\ncan't tell when recording starts.\r\n\r\nCurrently performance.mark() are in first insertion order but\r\nperformance.measure() are in the reverse order. I'm not sure that's\r\nintentional. We can always add the 0 time slot even if it's in the past.\r\nThat's still considered for ordering purposes as long as the measurement\r\nis recorded at the time we call it.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-22T13:04:05-05:00",
      "committed_date": "2024-11-22T13:04:05-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "e697386c10d837017de9516b9252b717fbb60924",
      "short_sha": "e697386",
      "message": "[compiler] First cut at dep inference (#31386)\n\nThis is for researching/prototyping, not a feature we are releasing\r\nimminently.\r\n\r\nPutting up an early version of inferring effect dependencies to get\r\nfeedback on the approach. We do not plan to ship this as-is, and may not\r\nstart by going after direct `useEffect` calls. Until we make that\r\ndecision, the heuristic I use to detect when to insert effect deps will\r\nsuffice for testing.\r\n\r\nThe approach is simple: when we see a useEffect call with no dep array\r\nwe insert the deps inferred for the lambda passed in. If the first\r\nargument is not a lambda then we do not do anything.\r\n\r\nThis diff is the easy part. I think the harder part will be ensuring\r\nthat we can infer the deps even when we have to bail out of memoization.\r\nWe have no other features that *must* run regardless of rules of react\r\nviolations. Does anyone foresee any issues using the compiler passes to\r\ninfer reactive deps when there may be violations?\r\n\r\nI have a few questions:\r\n1. Will there ever be more than one instruction in a block containing a\r\nuseEffect? if no, I can get rid of the`addedInstrs` variable that I use\r\nto make sure I insert the effect deps array temp creation at the right\r\nspot.\r\n2. Are there any cases for resolving the first argument beyond just\r\nlooking at the lvalue's identifier id that I'll need to take into\r\naccount? e.g., do I need to recursively resolve certain bindings?\r\n\r\n---------\r\n\r\nCo-authored-by: Mofei Zhang <feifei0@meta.com>",
      "author": {
        "name": "Jordan Brown",
        "email": "jmbrown@fb.com"
      },
      "authored_date": "2024-11-22T12:15:13-05:00",
      "committed_date": "2024-11-22T12:15:13-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferEffectDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-effect-dependencies.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonreactive-ref.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/outlined-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/outlined-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/pruned-nonreactive-obj.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/pruned-nonreactive-obj.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-memberexpr-merge.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-memberexpr-merge.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-memberexpr.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-optional-chain.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-variable.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-import-namespace-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-import-namespace-useEffect.js",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "91061073d57783c061889ac6720ef1ab7f0c2149",
      "short_sha": "9106107",
      "message": "Mark ping time as update (#31611)\n\nThis ensures that we mark the time from ping until we render as\r\n\"Blocked\".\r\n\r\nWe intentionally don't want to show the event time even if it's\r\nsomething like \"load\" because it draws attention away from interactions\r\netc.\r\n\r\n<img width=\"577\" alt=\"Screenshot 2024-11-21 at 7 22 39 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/70cca2e8-bd5e-489f-98f0-b4dfee5940af\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-21T19:36:38-05:00",
      "committed_date": "2024-11-21T19:36:38-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "a9f14cb44e58c13843cdeacc7dc352562cb3b976",
      "short_sha": "a9f14cb",
      "message": "Fix Logging of Immediately Resolved Promises (#31610)\n\nThis avoid re-emitting the yellow \"Event\" log when we ping inside the\r\noriginal event. Instead of treating events as repeated when we get\r\nrepeated updates, we treat them as repeated if we've ever logged out\r\nthis event before.\r\n\r\nAdditionally, in the case the prerender sibling flag is on we need to\r\nensure that if a render gets interrupted when it has been suspended we\r\ntreat that as \"Prewarm\" instead of \"Interrupted Render\".\r\n\r\nBefore:\r\n<img width=\"539\" alt=\"Screenshot 2024-11-19 at 2 39 44 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/190ca50c-5168-40d8-a6fd-6b9a583af1f0\">\r\n\r\nAfter:\r\n\r\n<img width=\"1004\" alt=\"Screenshot 2024-11-21 at 4 53 16 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/0c441ada-1ed1-412c-8935-aaf040c25dfe\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-21T17:16:54-05:00",
      "committed_date": "2024-11-21T17:16:54-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "c11c9510fa14bbd87053685c19bfdfec2f427f49",
      "short_sha": "c11c951",
      "message": "[crud] Fix deps comparison bug (#31599)\n\nFixes a bug with the experimental `useResourceEffect` hook where we\nwould compare the wrong deps when there happened to be another kind of\neffect preceding the ResourceEffect. To do this correctly we need to add\na pointer to the ResourceEffect's identity on the update.\n\nI also unified the previously separate push effect impls for resource\neffects since they are always pushed together as a unit.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-20T16:54:41-05:00",
      "committed_date": "2024-11-20T16:54:41-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "64f89510af244b1d812de7a74e161975d99ad3e1",
      "short_sha": "64f8951",
      "message": "[crud] Enable on RTR FB builds (#31590)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-19T17:25:11-05:00",
      "committed_date": "2024-11-19T17:25:11-05:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js"
      ]
    },
    {
      "sha": "7558ffe84df6bab5d701fd90de1c6313f9a1c066",
      "short_sha": "7558ffe",
      "message": "[crud] Fix copy paste typo (#31588)\n\nHappens to the best of us.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-19T17:13:01-05:00",
      "committed_date": "2024-11-19T17:13:01-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHooks.js"
      ]
    },
    {
      "sha": "7c254b65761c56951a67d965461b0174f224a7e9",
      "short_sha": "7c254b6",
      "message": "Log yielded time in the Component Track (#31563)\n\nStacked on #31552. Must be tested with `enableSiblingPrerendering` off\r\nsince the `use()` optimization is not on there yet.\r\n\r\nThis adds a span to the Components track when we yield in the middle of\r\nthe event loop. In this scenario, the \"Render\" span continues through\r\nout the Scheduler track. So you can see that the Component itself might\r\nnot take a long time but yielding inside of it might.\r\n\r\nThis lets you see if something was blocking the React render loop while\r\nyielding. If we're blocked 1ms or longer we log that as \"Blocked\".\r\n\r\nIf we're yielding due to suspending in the middle of the work loop we\r\nlog this as \"Suspended\".\r\n\r\n<img width=\"837\" alt=\"Screenshot 2024-11-16 at 1 15 14 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/45a858ea-17e6-416c-af1a-78c126e033f3\">\r\n\r\nIf the render doesn't commit because it restarts due to some other\r\nprewarming or because some non-`use()` suspends, it doesn't have from\r\ncontext components.\r\n\r\n<img width=\"971\" alt=\"Screenshot 2024-11-16 at 1 13 55 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/a67724f8-702e-4e7d-9499-9ffc09541a61\">\r\n\r\nThe `useActionState` path doesn't work yet because the `use()`\r\noptimization doesn't work there for some reason. But the idea is that it\r\nshould mark the time that the component is blocked as Action instead of\r\nSuspended.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-19T13:56:22-05:00",
      "committed_date": "2024-11-19T13:56:22-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "6177b18c66c010d2b2f03202623a0533e7a89004",
      "short_sha": "6177b18",
      "message": "Track suspended time when the render doesn't commit because it suspended (#31552)\n\nWhen we suspend the render with delay, we won't do any more work until\r\nwe get some kind of another update/ping. It's because conceptually\r\nsomething is suspended and then will update later. We need to highlight\r\nthis period to show why it's not doing any work. We fill the empty space\r\nwith \"Suspended\". This stops whenever the same lane group starts\r\nrendering again. Clamped by the preceeding start time/event time/update\r\ntime.\r\n\r\n<img width=\"902\" alt=\"Screenshot 2024-11-15 at 1 01 29 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/acf9dc9a-8fc3-4367-a8b0-d19f9c9eac73\">\r\n\r\nIdeally we would instead start the next render and suspend the work loop\r\nat all places we suspend. In that mode this will instead show up as a\r\nvery long \"Render\" with a \"Suspended\" period instead highlighted in the\r\nComponents track as one component is suspended. We'll soon have that for\r\n`use()` but not all updates so this covers the rest.\r\n\r\nOne issue with `useActionState` is that it is implemented as suspending\r\nat the point of the `useActionState` which means that the period of the\r\nAction shows up as a suspended render instead of as an Action which\r\nhappens for raw actions. This is not really how you conceptually think\r\nabout it so we need some special case for `useActionState`. In the\r\nscreenshot above, the first \"Suspended\" is actually awaiting an Action\r\nand the second \"Suspended\" is awaiting the data from it.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-19T13:42:44-05:00",
      "committed_date": "2024-11-19T13:42:44-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "6f0dc2947bed21f9be484f37eb32d02fdc4c0481",
      "short_sha": "6f0dc29",
      "message": "[compiler] Update hermes deps (#31586)\n\n```\n=> Found \"hermes-parser@0.25.1\"\ninfo Reasons this module exists\n   - \"_project_#prettier-plugin-hermes-parser\" depends on it\n   - Hoisted from \"_project_#prettier-plugin-hermes-parser#hermes-parser\"\n   - Hoisted from \"_project_#eslint-plugin-react-compiler#hermes-parser\"\n   - Hoisted from \"_project_#snap#hermes-parser\"\n   - Hoisted from \"_project_#snap#babel-plugin-syntax-hermes-parser#hermes-parser\"\n   - Hoisted from \"_project_#eslint-plugin-react-compiler#hermes-eslint#hermes-parser\"\ninfo Disk size without dependencies: \"1.49MB\"\ninfo Disk size with unique dependencies: \"1.82MB\"\ninfo Disk size with transitive dependencies: \"1.82MB\"\ninfo Number of shared dependencies: 1\n✨  Done in 0.81s.\n```\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31586).\n* __->__ #31586\n* #31585",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-19T10:52:48-05:00",
      "committed_date": "2024-11-19T10:52:48-05:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/packages/eslint-plugin-react-compiler/package.json",
        "compiler/packages/snap/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "d2e8954d067be32ee8979cdbfb63d5ccb4152e12",
      "short_sha": "d2e8954",
      "message": "[compiler] Update react deps (#31585)\n\n```\n=> Found \"react@0.0.0-experimental-4beb1fd8-20241118\"\ninfo Reasons this module exists\n   - \"_project_#babel-plugin-react-compiler\" depends on it\n   - Hoisted from \"_project_#babel-plugin-react-compiler#react\"\n   - Hoisted from \"_project_#snap#react\"\ninfo Disk size without dependencies: \"252KB\"\ninfo Disk size with unique dependencies: \"252KB\"\ninfo Disk size with transitive dependencies: \"252KB\"\ninfo Number of shared dependencies: 0\n✨  Done in 0.60s.\n```\n\n```\n=> Found \"react-dom@0.0.0-experimental-4beb1fd8-20241118\"\ninfo Reasons this module exists\n   - \"_project_#babel-plugin-react-compiler\" depends on it\n   - Hoisted from \"_project_#babel-plugin-react-compiler#react-dom\"\n   - Hoisted from \"_project_#snap#react-dom\"\ninfo Disk size without dependencies: \"8.04MB\"\ninfo Disk size with unique dependencies: \"8.17MB\"\ninfo Disk size with transitive dependencies: \"8.17MB\"\ninfo Number of shared dependencies: 1\n✨  Done in 0.56s.\n```\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31585).\n* #31586\n* __->__ #31585",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-19T10:52:38-05:00",
      "committed_date": "2024-11-19T10:52:38-05:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/module-scoped-bindings.expect.md",
        "compiler/packages/snap/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "eaf2d5c670c84124618977156d81946435922eb3",
      "short_sha": "eaf2d5c",
      "message": "fix[eslint-plugin-react-hooks]: Fix error when callback argument is an identifier with an `as` expression (#31119)",
      "author": {
        "name": "Mark Skelton",
        "email": "mdskelton99@gmail.com"
      },
      "authored_date": "2024-11-19T03:36:30-06:00",
      "committed_date": "2024-11-19T10:36:30+01:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js",
        "packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js"
      ]
    },
    {
      "sha": "c866d7506086140aaa79a015f4a7b2cf20c51905",
      "short_sha": "c866d75",
      "message": "[playground] Fix broken tests (#31573)\n\nOur e2e setup with monaco is kinda brittle since it relies on the dom.\nIt seems like longish text gets truncated so let's just simpify all\nthese test cases.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31573).\n* __->__ #31573\n* #31572",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-18T19:18:09-05:00",
      "committed_date": "2024-11-18T19:18:09-05:00",
      "changed_files": [
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/01-user-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/02-default-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-beats-module-scope-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-no-directive-arrow-function-expression-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-use-memo-arrow-function-expression-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-use-memo-function-declaration-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-use-no-memo-function-declaration-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-use-no-memo-function-expression-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/module-scope-use-memo-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/module-scope-use-no-memo-function-expression-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/module-scope-use-no-memo-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/use-memo-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/use-no-memo-output.txt",
        "compiler/apps/playground/__tests__/e2e/page.spec.ts",
        "compiler/apps/playground/playwright.config.js"
      ]
    },
    {
      "sha": "ee10c74824fa9631032f031b20ad1f208ccb4aca",
      "short_sha": "ee10c74",
      "message": "[playground] Fix incorrect ci path and change reporter (#31572)\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31572).\n* #31573\n* __->__ #31572",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-18T19:17:58-05:00",
      "committed_date": "2024-11-18T19:17:58-05:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        "compiler/apps/playground/playwright.config.js"
      ]
    },
    {
      "sha": "2a4f2507a09a715e8182b7954b1bc3d9c107f492",
      "short_sha": "2a4f250",
      "message": "[playground] Always upload test results in ci (#31571)\n\nSmall change to always upload test results from CI even if the test\nfailed.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-18T16:34:10-05:00",
      "committed_date": "2024-11-18T16:34:10-05:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml"
      ]
    },
    {
      "sha": "579cc2a44c17f848bb3ad3b82121c87eb415935a",
      "short_sha": "579cc2a",
      "message": "[playground] Add support for \"use no memo\" (#31561)\n\nFixes #31331\n\n## Summary\nThere is a bug in\nplayground(https://github.com/facebook/react/issues/31331) which doesnt\nsupport 'use memo' or 'use no memo' directives. Its misleading while\ndebugging components in the playground\n\n## How did you test this change?\nRan test cases and added a few extra test cases as well\n\n## Changes\n1) Adds support for 'use memo' and 'use no memo'\n2) Cleanup E2E test cases a bit\n3) Adds test cases for use memo\n4) Added documentation to run test cases\n\n## Implementation\n`parseFunctions` returns a set of functions to be compiled. But, it\ndoesnt filter out/handle memoized opted/un-opted functions using\ndirectives.\n\nive just created a `compile` flag to enable/disable compiling\n[here](https://github.com/facebook/react/pull/31561/files#diff-305de47a3fe3ce778e22d5c5cf438419a59de8e7f785b45f659e7b41b1e30b03R113)\n\nThen I am just skipping those functions from getting compile\n[here](https://github.com/facebook/react/pull/31561/files#diff-305de47a3fe3ce778e22d5c5cf438419a59de8e7f785b45f659e7b41b1e30b03R253)",
      "author": {
        "name": "Aditya Subramanyam",
        "email": "subbu963@users.noreply.github.com"
      },
      "authored_date": "2024-11-19T02:08:22+05:30",
      "committed_date": "2024-11-18T15:38:22-05:00",
      "changed_files": [
        "compiler/apps/playground/README.md",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/user-input.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/default-input.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-no-directive-arrow-function-expression-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-use-memo-arrow-function-expression-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-use-memo-function-declaration-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-use-no-memo-function-declaration-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/function-scope-use-no-memo-function-expression-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/module-scope-use-memo-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/module-scope-use-no-memo-function-expression-output.txt",
        "compiler/apps/playground/__tests__/e2e/__snapshots__/page.spec.ts/module-scope-use-no-memo-output.txt",
        "compiler/apps/playground/__tests__/e2e/page.spec.ts",
        "compiler/apps/playground/components/Editor/EditorImpl.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts"
      ]
    },
    {
      "sha": "e33b13795dd25eba780c97b17cf7deee7f21a3e5",
      "short_sha": "e33b137",
      "message": "[compiler] repro for type inference + control flow bug (#31570)\n\nRepro for bug in our type inference system.\r\n\r\nWe currently propagate inferred types through control flow / potential\r\ntype guards. Note that this is inconsistent with both\r\n[Flow](https://flow.org/try/#1N4Igxg9gdgZglgcxALlAIwIZoKYBsD6uEEAztvhgE6UYCe+JADpdhgCYowa5kA0I2KAFcAtiRQAXSkOz9sADwxgJ+NPTbYuQ3BMnTZA+Y2yU4IwRO4A6SFBIrGVDGM7c+h46fNRLuKxJIGWh8MeT0ZfhYlCStpHzNsFBAMIQkIEQwJODAQfiEyfBE4eWw2fDgofDBMsAALfAA3KjgsXGxxZC4eAw0G-GhcWn9aY3wWZldu-g1mbGqJUoBaCRHEzrcDEgBrbAk62kXhXFxJ923d-cPRHEpTgyEoMDaqZdW7vKgoOfaSKgOKpqmDA+d4gB5fMA-P6LCCMLLQbiLOoYCqgh6-GDYRYIXYLSgkRZkCR4jpddwPfJLZjpOBkO4AX34kA0SRWxgABAAxYjsgC87OAAB0oOzReythU2Mh2YKQNyILLeMKxeymrgZNLhCIbsL6QBuYVs7DsgBCVD5AuVYolUClMpAZsoiqtorVGvZWpuSqg9OFMAeyjg0HZdTmW3lAAp5NKAPJoABWcwkAEppWZGLg4O12fJ2bSuTyhSKxSwJEJKCKAOQ2tiVvMi3MAMkbOasNb5vP5svlsoNPuFfoD8JFGQqUel8vZAB9TVReCHoHa0MRnlBUwWIJbi6K4DB2RHbGxk1uVSrd-uAIShsDh4hR5PHoun5-siS1SgQADuHuw34AotQECUBGsqysmfYvuyvrbqepblg2EFitBKpwRWOZ9vSuQgA0JgkEGUBJBk9gmCA9JAA)\r\nand\r\n[Typescript](https://www.typescriptlang.org/play/?#code/C4TwDgpgBAYg9nKBeKBvAUFLUDWBLAOwBMAuKAInjnIBpNsA3AQwBsBXCMgtgWwCMIAJ3QBfANzpQkKACEmg5GnpZ8xMuTmDayqM3aco3fkLoj0AMzYEAxsDxwCUawAsI1nFQAUADzJw+AFZuwACUZEwAzhFCwBFQ3lB4cVRK2InmUJ4AhJ4A5KpEuYmOCQBkpfEAdAXISCiUCOQhIalp2MDOgnAA7oYQvQCigl2CnuRWEN6QthBETTpmZhZWtvaOPEyEPmQpAD6y8jRODqRQfAgsEEwEYbAIrVh4GZ7WJy0Ybdgubh4IPiEST5YQQQYBsQQlQHYMxpEFgiHxCQiIA)",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-18T11:54:11-05:00",
      "committed_date": "2024-11-18T11:54:11-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-type-inference-control-flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-type-inference-control-flow.ts",
        "compiler/packages/snap/src/SproutTodoFilter.ts",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "4beb1fd8bacacd3f4faeb180bca00ea0edcf27e4",
      "short_sha": "4beb1fd",
      "message": "[compiler] Support enableRefAsProp in jsx transform (#31558)\n\nSince `enableRefAsProp` shipped everywhere, the ReactElement\r\nimplementation on prod puts refs on both `element.ref` and\r\n`element.props.ref`. Here we let the `ref` case fall through so its now\r\navailable on props, matching the JSX runtime.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-11-18T10:51:16-05:00",
      "committed_date": "2024-11-18T10:51:16-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/InlineJsxTransform.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.expect.md"
      ]
    },
    {
      "sha": "047d95e85f0f0cfa6085b2e355e052a3c34ae24d",
      "short_sha": "047d95e",
      "message": "[crud] Basic implementation (#31523)\n\nThis PR introduces a new experimental hook `useResourceEffect`, which is\nsomething that we're doing some very early initial tests on.\n\nThis may likely not pan out and will be removed or modified if so.\nPlease do not rely on it as it will break.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-18T10:16:37-05:00",
      "committed_date": "2024-11-18T10:16:37-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCallUserSpace.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react/index.development.js",
        "packages/react/index.experimental.development.js",
        "packages/react/index.fb.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactHooks.js"
      ]
    },
    {
      "sha": "92c0f5f85fed42024b17bf6595291f9f5d6e8734",
      "short_sha": "92c0f5f",
      "message": "Track separate SuspendedOnAction flag by rethrowing a separate SuspenseActionException sentinel (#31554)\n\nThis lets us track separately if something was suspended on an Action\r\nusing useActionState rather than suspended on Data.\r\n\r\nThis approach feels quite bloated and it seems like we'd eventually\r\nmight want to read more information about the Promise that suspended and\r\nthe context it suspended in. As a more general reason for suspending.\r\n\r\nThe way useActionState works in combination with the prewarming is quite\r\nunfortunate because 1) it renders blocking to update the isPending flag\r\nwhether you use it or not 2) it prewarms and suspends the useActionState\r\n3) then it does another third render to get back into the useActionState\r\nposition again.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-15T17:52:24-05:00",
      "committed_date": "2024-11-15T17:52:24-05:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-reconciler/src/ReactChildFiber.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberThenable.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-server/src/ReactFizzThenable.js",
        "packages/react-server/src/ReactFlightThenable.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "053b3cb0503e26da6d1dfa02b74fa52e30936bd6",
      "short_sha": "053b3cb",
      "message": "[crud] Rename Effect type (#31557)\n\nAdds a new `Effect` type which for now just points to the `SimpleEffect`\r\ntype, in prepartion for later in the stack where we add more.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31557).\r\n* #31523\r\n* __->__ #31557\r\n* #31556\r\n* #31555",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-15T17:50:50-05:00",
      "committed_date": "2024-11-15T17:50:50-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHooks.js"
      ]
    },
    {
      "sha": "7dd6b9e68abed4f37a2dafb649294dafdfd26b63",
      "short_sha": "7dd6b9e",
      "message": "[crud] Add enableUseResourceEffectHook flag (#31556)\n\nAdds a new feature flag for `enableUseResourceEffectHook`.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31556).\r\n* #31523\r\n* #31557\r\n* __->__ #31556\r\n* #31555",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-15T17:49:42-05:00",
      "committed_date": "2024-11-15T17:49:42-05:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "d8afd1c82e671662c6d1e998bad7fe524071bd56",
      "short_sha": "d8afd1c",
      "message": "[crud] Scaffold initial types (#31555)\n\nScaffolds the initial `useResourceEffect` dispatcher type. This will\r\neventually be folded into `useEffect` et al as an overload.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31555).\r\n* #31523\r\n* #31557\r\n* #31556\r\n* __->__ #31555",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-15T17:49:31-05:00",
      "committed_date": "2024-11-15T17:49:31-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react/src/ReactHooks.js"
      ]
    },
    {
      "sha": "0480cdb58c867c62586ff602fdb06a06c1d63f0c",
      "short_sha": "0480cdb",
      "message": "[compiler][be] Clean up nested function context in DCE (#31202)\n\nNow that we rely on function context exclusively, let's clean up\r\n`HIRFunction.context` after DCE. This PR is in preparation of #31204,\r\nwhich would otherwise have unnecessary declarations (of context values\r\nthat become entirely DCE'd)\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31202).\r\n* __->__ #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* #31521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-15T13:06:39-05:00",
      "committed_date": "2024-11-15T13:06:39-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/DeadCodeElimination.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/arrow-expr-directive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capture-param-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/function-expr-directive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/merge-scopes-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-no-declarations-in-reactive-scope-with-early-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/resolve-react-hooks-based-on-import-name.expect.md"
      ]
    },
    {
      "sha": "0f3c62b4667f62bf36485079ab242dba8e54917c",
      "short_sha": "0f3c62b",
      "message": "[compiler][be] Patch test fixtures for evaluator (#31203)\n\nAdd more `FIXTURE_ENTRYPOINT`s\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31203).\r\n* #31202\r\n* __->__ #31203\r\n* #31201\r\n* #31200\r\n* #31521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-15T13:06:29-05:00",
      "committed_date": "2024-11-15T13:06:29-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-captured-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-captured-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-no-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-no-mutate.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "858633f900768e63870a0a8d450ad7b5d6df0256",
      "short_sha": "858633f",
      "message": "[compiler] Lower JSXMemberExpression with LoadLocal (#31201)\n\n`JSXMemberExpression` is currently the only instruction (that I know of)\r\nthat directly references identifier lvalues without a corresponding\r\n`LoadLocal`.\r\n\r\nThis has some side effects:\r\n- deadcode elimination and constant propagation now reach\r\nJSXMemberExpressions\r\n- we can delete `LoweredFunction.dependencies` without dangling\r\nreferences (previously, the only reference to JSXMemberExpression\r\nobjects in HIR was in function dependencies)\r\n- JSXMemberExpression now is consistent with all other instructions\r\n(e.g. has a rvalue-producing LoadLocal)\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31201).\r\n* #31202\r\n* #31203\r\n* __->__ #31201\r\n* #31200\r\n* #31521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-15T13:06:19-05:00",
      "committed_date": "2024-11-15T13:06:19-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-jsx-lowercase-localvar.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/invalid-jsx-lowercase-localvar.jsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-local-memberexpr-tag-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-local-memberexpr-tag.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-lowercase-localvar-memberexpr-in-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-lowercase-localvar-memberexpr-in-lambda.jsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-lowercase-localvar-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-lowercase-localvar-memberexpr.jsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-lowercase-memberexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-lowercase-memberexpr.jsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-memberexpr-tag-in-lambda.expect.md",
        "compiler/packages/snap/src/SproutTodoFilter.ts",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "c09402aa2fc4da56f6ecabe5f5a042436b277a57",
      "short_sha": "c09402a",
      "message": "[compiler] Stop using function `dependencies` in propagateScopeDeps (#31200)\n\nRecursively visit inner function instructions to extract dependencies\r\ninstead of using `LoweredFunction.dependencies` directly.\r\n\r\nThis is currently gated by enableFunctionDependencyRewrite, which needs\r\nto be removed before we delete `LoweredFunction.dependencies` altogether\r\n(#31204).\r\n\r\nSome nice side effects\r\n- optional-chaining deps for inner functions\r\n- full DCE and outlining for inner functions (see #31202)\r\n- fewer extraneous instructions (see #31204)\r\n\r\n-\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31200).\r\n* #31202\r\n* #31203\r\n* #31201\r\n* __->__ #31200\r\n* #31521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-15T13:06:05-05:00",
      "committed_date": "2024-11-15T13:06:05-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-mutate-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.todo-useCallback-captures-reassigned-context-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.todo-useCallback-captures-reassigned-context-property.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-captures-reassigned-context-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-captures-reassigned-context-property.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-captures-reassigned-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-extended-contextvar-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/todo-infer-function-uncond-optionals-hoisted.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/todo-infer-function-uncond-optionals-hoisted.expect.md"
      ]
    },
    {
      "sha": "4972718c264f8f92ea56b86fde6aab610e876717",
      "short_sha": "4972718",
      "message": "[compiler] Fix: ref.current now correctly reactive (#31521)\n\nWe were previously filtering out `ref.current` dependencies in\r\npropagateScopeDependencies:checkValidDependency`. This is incorrect.\r\n\r\nInstead, we now always take a dependency on ref values (the outer box)\r\nas they may be reactive. Pruning is done in\r\npruneNonReactiveDependencies.\r\n\r\nThis PR includes a small patch to `collectReactiveIdentifier`. Prior to\r\nthis, we conservatively assumed that pruned scopes always produced\r\nreactive declarations. This assumption fixed a bug with non-reactivity,\r\nbut some of these declarations are `useRef` calls. Now we have special\r\nhandling for this case\r\n```js\r\n// This often produces a pruned scope\r\nReact.useRef(1);\r\n```\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31521).\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* __->__ #31521",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-15T13:05:55-05:00",
      "committed_date": "2024-11-15T13:05:55-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CollectReactiveIdentifiers.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-nonreactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-nonreactive-ref.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-ref-param.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-ref-param.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-ref.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-parameter-mutate-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-parameter-mutate-in-effect.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "3720870a979b48a1ea8776f64a190878b8558f2b",
      "short_sha": "3720870",
      "message": "Log Render Phases that Never Committed (#31548)\n\nThis includes:\r\n\r\n- `Interrupted Render`: Interrupted Renders (setState or ping at higher\r\npriority)\r\n- `Prewarm`: Suspended Renders outside a Suspense boundary\r\n(RootSuspendedWithDelay/RootSuspendedAtTheShell)\r\n- `Errored Render`: Render that errored somewhere in the tree (Fatal or\r\nNot) (which may or may not be retried and then complete)\r\n- `Teared Render`: Due to useSyncExternalStore not matching (which will\r\ndo another sync attempt)\r\n\r\nSuspended Commit:\r\n\r\n<img width=\"893\" alt=\"Screenshot 2024-11-14 at 11 47 40 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/b25a6a8b-a5e9-4d66-b325-57aef4bf9dad\">\r\n\r\nErrored with a second recovery attempt that also errors:\r\n\r\n<img width=\"976\" alt=\"Screenshot 2024-11-15 at 12 09 06 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/9ce52cbb-b587-4f1e-8b67-e51d9073ae5b\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-15T12:13:24-05:00",
      "committed_date": "2024-11-15T12:13:24-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js",
        "packages/react/src/__tests__/ReactProfiler-test.internal.js"
      ]
    },
    {
      "sha": "e1ef8c95154a4c5fffa301de9392519121b47dbf",
      "short_sha": "e1ef8c9",
      "message": "Don't dist-tag canaries with `rc` (#31546)",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-11-15T04:05:36-05:00",
      "committed_date": "2024-11-15T10:05:36+01:00",
      "changed_files": [
        ".github/workflows/runtime_prereleases_manual.yml",
        ".github/workflows/runtime_prereleases_nightly.yml"
      ]
    },
    {
      "sha": "8a41d6ceab8af642d8ab9ed04fc744a699f4ac09",
      "short_sha": "8a41d6c",
      "message": "Unify RootDidNotComplete and RootSuspendedWithDelay exit path  (#31547)\n\nAlso rename RootDidNotComplete to RootSuspendedAtTheShell since it\r\nspecifically means something suspended in the shell during hydration.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-14T23:51:51-05:00",
      "committed_date": "2024-11-14T23:51:51-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "63cde684f5340b1ca73f6244501aac1c3d2c92a8",
      "short_sha": "63cde68",
      "message": "(chore): copy fix in <style> precedence error (#31524)\n\n## Summary\r\n\r\nThis fixes a typo in the error that gets reported when Float errors\r\nwhile hoisting a style tag that does not contain both `precedence` and\r\n`href`. There was a typo in _conflict_ and the last part of the sentence\r\ndoesn't make sense. I assume it wasn't needed since the message already\r\nsuggests moving the style tag to the head manually.",
      "author": {
        "name": "Zack Tanner",
        "email": "1939140+ztanner@users.noreply.github.com"
      },
      "authored_date": "2024-11-14T14:03:59-08:00",
      "committed_date": "2024-11-14T14:03:59-08:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/__tests__/ReactDOMFloat-test.js"
      ]
    },
    {
      "sha": "b01722d58533e5e2664a71b70031e1c5390d813b",
      "short_sha": "b01722d",
      "message": "Format event with \"warning\" yellow and prefix with \"Event: \" (#31536)\n\nIt's useful to quickly see where new events are kicking off new\r\nrendering. This uses the new \"warning\" color (yellow) to do that. This\r\nis to help distinguish it from the purple (secondary color) which is\r\nused for the commit phase which is more of a follow up and it's often\r\nthat you have several rerenders within one event which makes it hard to\r\ntell a part where it starts and event otherwise.\r\n\r\nFor the span marking between previous render within the same event and\r\nthe next setState, I use secondary-light (light purple) since it's kind\r\nof still part of the same sequence at that point. It's usually a spawned\r\nrender (e.g. setState in useEffect or microtask) but it can also be\r\nsequential flushSync.\r\n\r\nI was bothered by that the event name is the only thing that's lower\r\ncase so I prefixed it with `Event: ` like the JS traces are.\r\n\r\n<img width=\"1499\" alt=\"Screenshot 2024-11-13 at 7 15 45 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/0c81c810-6b5d-4fc7-9bc0-d15b53844ade\">\r\n\r\nIt might be a little confusing why our track starts earlier than the JS\r\none below in the \"Main Thread\" flamegraph which looks the same. That's\r\nbecause ours is the start of the event time which is when the click\r\nhappens where as the Main Thread one is when the JS event loop gets\r\naround to processing the event.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-14T16:44:29-05:00",
      "committed_date": "2024-11-14T16:44:29-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js"
      ]
    },
    {
      "sha": "c13986da7866a1a70a73b7ee05c87a9618ce6d03",
      "short_sha": "c13986d",
      "message": "Fix Overlapping \"message\" Bug in Performance Track (#31528)\n\nWhen you schedule a microtask from render or effect and then call\r\nsetState (or ping) from there, the \"event\" is the event that React\r\nscheduled (which will be a postMessage). The event time of this new\r\nrender will be before the last render finished.\r\n\r\nWe usually clamp these but in this scenario the update doesn't happen\r\nwhile a render is happening. Causing overlapping events.\r\n\r\nBefore:\r\n\r\n<img width=\"1229\" alt=\"Screenshot 2024-11-12 at 11 01 30 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/9652cf3b-b358-453c-b295-1239cbb15952\">\r\n\r\nTherefore when we finalize a render we need to store the end of the last\r\nrender so when we a new update comes in later with an event time earlier\r\nthan that, we know to clamp it.\r\n\r\nThere's also a special case here where when we enter the\r\n`RootDidNotComplete` or `RootSuspendedWithDelay` case we neither leave\r\nthe root as in progress nor commit it. Those needs to finalize too.\r\nReally this should be modeled as a suspended track that we haven't added\r\nyet. That's the gap between \"Blocked\" and \"message\" below.\r\n\r\nAfter:\r\n\r\n<img width=\"1471\" alt=\"Screenshot 2024-11-13 at 12 31 34 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/b24f994e-9055-4b10-ad29-ad9b36302ffc\">\r\n\r\nI also fixed an issue where we may log the same event name multiple\r\ntimes if we're rendering more than once in the same event. In this case\r\nI just leave a blank trace between the last commit and the next update.\r\n\r\nI also adding ignoring of the \"message\" event at all in these cases when\r\nthe event is from React's scheduling itself.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-14T16:35:08-05:00",
      "committed_date": "2024-11-14T16:35:08-05:00",
      "changed_files": [
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js",
        "packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js"
      ]
    },
    {
      "sha": "4686872159e357accd092b195fb5cafceb980ac8",
      "short_sha": "4686872",
      "message": "Log passive commit phase when it wasn't delayed (#31526)\n\nFixes a bug.\r\n\r\nWe're supposed to not log \"Waiting for Paint\" if the passive effect\r\nphase was forced since we weren't really waiting until the paint.\r\nInstead we just log an empty string when we force it to still ensure\r\ncontinuity.\r\n\r\nWe should always log the passive phase. This check was in the wrong\r\nplace.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-14T16:30:05-05:00",
      "committed_date": "2024-11-14T16:30:05-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "5d89471ca6a74916bf345ef742e162c77672d2a2",
      "short_sha": "5d89471",
      "message": "Export __COMPILER_RUNTIME in stable (#31540)\n\nIn order to make use of the compiler in stable releases (eg React 19 RC,\r\ncanary), we need to export the compiler runtime in the stable channel as\r\nwell.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-14T15:46:35-05:00",
      "committed_date": "2024-11-14T15:46:35-05:00",
      "changed_files": [
        "packages/react/index.stable.js"
      ]
    },
    {
      "sha": "3c15d219aa6a573504d42ec0bcff1c0c9f35a842",
      "short_sha": "3c15d21",
      "message": "[compiler] Disable emit of .tsbuildinfo (#31459)\n\n## Summary\r\n`@rollup/plugin-typescript` emits a warning while building, hinting that\r\n`outputToFilesystem` defaults to true.\r\n\r\nAlthough \"noEmit\" is set to `true` for the tsconfig, rollup writes a\r\n`dist/.tsbuildinfo`. That file is then also shipped inside the npm\r\nmodule and doesn't offer any benefit for library consumers. Setting this\r\noption to false results in the file not being written and thus omitted\r\nfrom the npm module.\r\n\r\n## How did you test this change?\r\n`dist/.tsbuildinfo` is not emitted any more.",
      "author": {
        "name": "Niklas Mollenhauer",
        "email": "nikeee@users.noreply.github.com"
      },
      "authored_date": "2024-11-14T21:43:36+01:00",
      "committed_date": "2024-11-14T15:43:36-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/rollup.config.js"
      ]
    },
    {
      "sha": "3644f0bd214b7c08a522cc9212dfca902777bf8c",
      "short_sha": "3644f0b",
      "message": "Use completedRenderEndTime as the start of the commit phase if it's an immediate commit (#31527)\n\nWe don't log a phase like \"Throttled\" or \"Suspended\" for this case so it\r\ncan leave a tiny gap otherwise.\r\n\r\nThis ensures it connects without a seam.\r\n\r\n<img width=\"1059\" alt=\"Screenshot 2024-11-12 at 9 34 17 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/7ed4a3c7-b508-4fc1-b956-44c4e31faa4d\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-14T13:05:38-05:00",
      "committed_date": "2024-11-14T13:05:38-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "8657869999d3ed36cde45a4b2ef33fc815869295",
      "short_sha": "8657869",
      "message": "Separate Tracks for Components and Phases (#31525)\n\nPreviously we were showing Components inside each lane track but that\r\nmeant that as soon as you expanded a lane you couldn't see the other\r\nline so you couldn't get an overview over how well things were\r\nscheduled.\r\n\r\nThis instead moves all the Components into a single top-level track and\r\nrenames the previous one to a \"Scheduler\" track group.\r\n\r\n<img width=\"1352\" alt=\"Screenshot 2024-11-12 at 8 26 05 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/590bc6d3-3540-4ee4-b474-5d733b8d8d8d\">\r\n\r\nThat way you can get an overview over what React is working on first and\r\nthen right below see which Component is being worked on.\r\n\r\nIdeally the \"Scheduler\" track would be always expanded since each Track\r\nis always just a single row. Now you have to expand each lane to see the\r\nlabels but then you're wasting a lot of vertical real estate. There's\r\ncurrently no option to create this with the Chrome performance.measure\r\nextensions.\r\n\r\n<img width=\"1277\" alt=\"Screenshot 2024-11-12 at 8 26 16 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/4fc39e35-10ec-4452-ad32-c1c2e6b5e1a8\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-14T13:05:20-05:00",
      "committed_date": "2024-11-14T13:05:20-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js"
      ]
    },
    {
      "sha": "b15135b9f59e4d40e1142342f97cfa18d228d0d4",
      "short_sha": "b15135b",
      "message": "[ez] Update useMemoCache return type (#31539)\n\nUse `mixed` instead of `any`",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-14T12:10:51-05:00",
      "committed_date": "2024-11-14T12:10:51-05:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/react/src/ReactHooks.js"
      ]
    },
    {
      "sha": "7aa5dda3b3e4c2baa905a59b922ae7ec14734b24",
      "short_sha": "7aa5dda",
      "message": "Bump RC version to 19.0.0-rc.1 (#31542)",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-11-14T11:48:33-05:00",
      "committed_date": "2024-11-14T11:48:33-05:00",
      "changed_files": [
        "ReactVersions.js"
      ]
    },
    {
      "sha": "988e2176702fca9b25113d9a8a3e7e3f484e16f2",
      "short_sha": "988e217",
      "message": "Turn on enableSiblingPrerendering in canary (#31541)\n\nIn preparation for the next RC, I set this feature flag to true\r\neverywhere. I did not delete the feature flag yet, in case there are yet\r\nmore bugs to be discovered.\r\n\r\nI also didn't remove the dynamic feature flag from the Meta builds; I'll\r\nlet the Meta folks handle that.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-11-14T11:48:14-05:00",
      "committed_date": "2024-11-14T11:48:14-05:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js"
      ]
    },
    {
      "sha": "380f5d675d2269f090d15c3f92e10de66e12516c",
      "short_sha": "380f5d6",
      "message": "Fix sizebot (#31535)\n\nOur CI workflows generally cache `**/node_modules` (note the glob, it\r\ncaches all transitive node_module directories) to speed up startup for\r\nnew jobs that don't change any dependencies. However it seems like one\r\nof our caches got into a weird state (not sure how it happened) where\r\nthe `build` directory (used in various other scripts as the directory\r\nfor compiled React packages) would contain a `node_modules` directory as\r\nwell. This made sizebot size change messages very big since it would try\r\nto compare every single file in `build/node_modules`.\r\n\r\nThe fix is to ensure we always clean the `build` directory before doing\r\nanything with it. We can also delete that one problematic cache but this\r\nPR is a little more resilient to other weird behavior with that\r\ndirectory.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-13T15:13:46-05:00",
      "committed_date": "2024-11-13T15:13:46-05:00",
      "changed_files": [
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_commit_artifacts.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "7ac8e612118a1285ac6aa0bb333d910b9f23a7ad",
      "short_sha": "7ac8e61",
      "message": "Only log component level profiling for components that actually performed work (#31522)\n\nThis provides less context but skips a lot of noise.\r\n\r\nPreviously we were including parent components to provide context about\r\nwhat is rendering but this turns out to be:\r\n\r\n1) Very expensive due to the overhead of `performance.measure()` while\r\nprofiling.\r\n2) Unactionable noise in the profile that hurt more than it added in\r\nreal apps with large trees.\r\n\r\nThis approach instead just add performance.measure calls for each\r\ncomponent that was marked as PerformedWork (which was used for this\r\npurpose by React Profiler) or had any Effects.\r\n\r\nNot everything gets marked with PerformedWork though. E.g. DOM nodes do\r\nnot but they can have significant render times since creating them takes\r\ntime. We might consider including them if a self-time threshold is met.\r\n\r\nBecause there is little to no context about the component anymore it\r\nbecomes really essential to get a feature from Chrome DevTools that can\r\nlink to something with more context like React DevTools.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-13T10:57:15-05:00",
      "committed_date": "2024-11-13T10:57:15-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "3770c11011c78d227c7013468787e0c34ae91dc8",
      "short_sha": "3770c11",
      "message": "[compiler] repro for reactive ref.current accesses (#31519)\n\nSee test fixture\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31519).\r\n* #31521\r\n* __->__ #31519",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-12T14:04:54-05:00",
      "committed_date": "2024-11-12T14:04:54-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-nonreactive-ref.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-nonreactive-ref.tsx",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "d9b3841ca64f292e3450edcd0a87eca05ac4c5f9",
      "short_sha": "d9b3841",
      "message": "Revert \"Performance tracks are sorted by start time\" hack (#31518)\n\nThis reverts commit d3bf32a95806b6d583ef041b8d83781cd686cfd8 which was\r\npart of #30983\r\n\r\nWhen you have very deep trees this trick can cause the top levels to\r\nskew way too much from the real numbers. Creating unbalanced trees.\r\n\r\nThe bug should have been fixed in Chrome Canary now so that entries\r\nadded later are sorted to go first which should've addressed this issue.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-12T12:46:55-05:00",
      "committed_date": "2024-11-12T12:46:55-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "2ec26bc4323673d1f2035191d3aaf0a18b20d488",
      "short_sha": "2ec26bc",
      "message": "[compiler] Repro for mutable range edge case (#31479)\n\nSee test fixtures",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-11T18:04:29-05:00",
      "committed_date": "2024-11-11T18:04:29-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-aliased-capture-aliased-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-aliased-capture-aliased-mutate.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-aliased-capture-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-aliased-capture-mutate.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "b836de613d66ff36574af95cb93ad15fd743d1f4",
      "short_sha": "b836de6",
      "message": "Fix continuation bug (#31434)\n\n## Overview\r\n\r\nIn `scheduleTaskForRootDuringMicrotask` we clear `root.callbackNode` if\r\nthe work loop is [suspended waiting on\r\ndata](https://github.com/facebook/react/blob/ac3ca097aeecae8fe3ec7f9b286307a923676518/packages/react-reconciler/src/ReactFiberRootScheduler.js#L338).\r\n\r\nBut we don't null check `root.callbackNode` before returning a\r\ncontinuation in `performWorkOnRootViaSchedulerTask` where\r\n`scheduleTaskForRootDuringMicrotask` is synchronously called, causing an\r\ninfinite loop when the only thing in the queue is something suspended\r\nwaiting on data.\r\n\r\nThis essentially restores the behavior from here:\r\nhttps://github.com/facebook/react/pull/26328/files#diff-72ff2175ae3569037f0b16802a41b0cda2b2d66bb97f2bda78ed8445ed487b58L1168\r\n\r\nFound by investigating the failures for\r\nhttps://github.com/facebook/react/pull/31417\r\n\r\n## TODO\r\n- add a test\r\n\r\n---------\r\n\r\nCo-authored-by: Joe Savona <joesavona@fb.com>",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-11-11T17:25:37-05:00",
      "committed_date": "2024-11-11T17:25:37-05:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/__tests__/ActivityLegacySuspense-test.js",
        "packages/react-reconciler/src/__tests__/ActivitySuspense-test.js"
      ]
    },
    {
      "sha": "ed15d5007ca7ee4d61294c741ce3e858d3c1d461",
      "short_sha": "ed15d50",
      "message": "update flight readme wording (#31466)",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-11-10T11:58:52-08:00",
      "committed_date": "2024-11-10T11:58:52-08:00",
      "changed_files": [
        "packages/react-server/README.md"
      ]
    },
    {
      "sha": "6e29479bffc188719e797801a9bf7859256b2ea0",
      "short_sha": "6e29479",
      "message": "[devtools] allow non-coercible objects in formatConsoleArgumentsToSingleString (#31444)\n\n## Summary\r\n\r\nWe have been getting unhandled `TypeError: Cannot convert object to\r\nprimitive value` errors in development that only occur when using\r\ndevtools. I tracked it down to `console.error()` calls coming from\r\nApollo Client where one of the arguments is an object without a\r\nprototype (created with `Object.create(null)`). This causes\r\n`formatConsoleArgumentsToSingleString()` in React's devtools to error as\r\nthe function does not defend against `String()` throwing an error.\r\n\r\nMy attempted fix is to introduce a `safeToString` function (naming\r\nsuggestions appreciated) which expects `String()` to throw on certain\r\nobject and in that case falls back to returning `[object Object]`, which\r\nis what `String({})` would return.\r\n\r\n## How did you test this change?\r\n\r\nAdded a new unit test.",
      "author": {
        "name": "Henry Q. Dineen",
        "email": "henryqdineen@users.noreply.github.com"
      },
      "authored_date": "2024-11-10T14:24:15-05:00",
      "committed_date": "2024-11-10T19:24:15+00:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/utils-test.js",
        "packages/react-devtools-shared/src/backend/utils/index.js"
      ]
    },
    {
      "sha": "ff595de29af107255fd957ca809d3074c16bcf12",
      "short_sha": "ff595de",
      "message": "[Flight] Add initial readme to react-server package (#31464)\n\nThis readme documents React Server Components from `react-server`\r\npackage enough to get an implementer started. It's not comprehensive but\r\nit's a beginning point and crucially adds documentation for the\r\n`prerender` API for Flight.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-11-08T16:07:37-08:00",
      "committed_date": "2024-11-08T16:07:37-08:00",
      "changed_files": [
        "packages/react-server/README.md"
      ]
    },
    {
      "sha": "989af12f72080c17db03ead91d99b6394a215564",
      "short_sha": "989af12",
      "message": "Make prerendering always non-blocking with fix (#31452)\n\nWe've previously failed to land this change due to some internal apps\r\nseeing infinite render loops due to external store state updates during\r\nrender. It turns out that since the `renderWasConcurrent` var was moved\r\ninto the do block, the sync render triggered from the external store\r\ncheck was stuck with a `RootSuspended` `exitStatus`. So this is not\r\nunique to sibling prerendering but more generally related to how we\r\nhandle update to a sync external store during render.\r\n\r\nWe've tested this build against local repros which now render without\r\ncrashes. We will try to add a unit test to cover the scenario as well.\r\n\r\n---------\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-11-08T12:38:41-05:00",
      "committed_date": "2024-11-08T12:38:41-05:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-reconciler/src/__tests__/ReactSiblingPrerendering-test.js",
        "packages/react-reconciler/src/__tests__/useSyncExternalStore-test.js"
      ]
    },
    {
      "sha": "5c56b873efb300b4d1afc4ba6f16acf17e4e5800",
      "short_sha": "5c56b87",
      "message": "Update React Native shims to use export syntax (#31426)\n\n## Summary\r\n\r\nI'm working to get the main `react-native` package parsable by modern\r\nFlow tooling (both `flow-bundler`, `flow-api-translator`), and one\r\nblocker is legacy `module.exports` syntax. This diff updates files which\r\nare [synced to\r\n`react-native`](https://github.com/facebook/react-native/tree/main/packages/react-native/Libraries/Renderer/shims)\r\nfrom this repo.\r\n\r\n## How did you test this change?\r\n\r\nFiles were pasted into `react-native-github` under fbsource, where Flow\r\nvalidates ✅.",
      "author": {
        "name": "Alex Hunt",
        "email": "hello@alexhunt.io"
      },
      "authored_date": "2024-11-07T14:53:44+00:00",
      "committed_date": "2024-11-07T14:53:44+00:00",
      "changed_files": [
        "scripts/rollup/shims/react-native/ReactFabric.js",
        "scripts/rollup/shims/react-native/ReactFeatureFlags.js",
        "scripts/rollup/shims/react-native/ReactNative.js",
        "scripts/rollup/shims/react-native/createReactNativeComponentClass.js"
      ]
    },
    {
      "sha": "682a103cde99a3091850d1c27de8846b5d14e803",
      "short_sha": "682a103",
      "message": "[www] set disableLegacyMode to true (#31439)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-11-07T09:05:31-05:00",
      "committed_date": "2024-11-07T09:05:31-05:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "e1378902bbb322aa1fe1953780f4b2b5f80d26b1",
      "short_sha": "e137890",
      "message": "[string-refs] cleanup string ref code (#31443)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-11-06T14:00:10-05:00",
      "committed_date": "2024-11-06T14:00:10-05:00",
      "changed_files": [
        "packages/jest-react/src/JestReact.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-dom/src/__tests__/ReactComponent-test.js",
        "packages/react-dom/src/__tests__/ReactCompositeComponent-test.js",
        "packages/react-dom/src/__tests__/ReactDOMServerIntegrationRefs-test.js",
        "packages/react-dom/src/__tests__/ReactDeprecationWarnings-test.js",
        "packages/react-dom/src/__tests__/ReactFunctionComponent-test.js",
        "packages/react-dom/src/__tests__/multiple-copies-of-react-test.js",
        "packages/react-dom/src/__tests__/refs-test.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberAsyncDispatcher.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/__tests__/ReactFiberRefs-test.js",
        "packages/react-reconciler/src/__tests__/ReactIncrementalSideEffects-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server/src/ReactFizzAsyncDispatcher.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/flight/ReactFlightAsyncDispatcher.js",
        "packages/react/src/__tests__/ReactCoffeeScriptClass-test.coffee",
        "packages/react/src/__tests__/ReactCreateElement-test.js",
        "packages/react/src/__tests__/ReactES6Class-test.js",
        "packages/react/src/__tests__/ReactElementClone-test.js",
        "packages/react/src/__tests__/ReactStrictMode-test.js",
        "packages/react/src/__tests__/ReactTypeScriptClass-test.ts",
        "packages/react/src/jsx/ReactJSXElement.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "a88b9e5f6882a121417b2e8434d4c7ec30a60c52",
      "short_sha": "a88b9e5",
      "message": "[compiler] Outline JSX with non-jsx children (#31442)\n\nPreviously, we bailed out on outlining jsx that had children that were\r\nnot part of the outlined jsx.\r\n\r\nNow, we add support for children by treating as attributes.",
      "author": {
        "name": "Sathya Gunasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-11-06T17:54:44+00:00",
      "committed_date": "2024-11-06T17:54:44+00:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OutlineJsx.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.jsx-outlining-children.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.jsx-outlining-children.js"
      ]
    },
    {
      "sha": "09197bb786344d2ede1286e7f3ec4e21b18a58f2",
      "short_sha": "09197bb",
      "message": "[compiler] Outline jsx with duplicate attributes (#31441)\n\nPreviously, we would skip outlining jsx expressions that had duplicate\r\njsx attributes as we would not rename them causing incorrect\r\ncompilation.\r\n\r\nIn this PR, we add outlining support for duplicate jsx attributes by\r\nrenaming them.",
      "author": {
        "name": "Sathya Gunasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-11-06T17:50:13+00:00",
      "committed_date": "2024-11-06T17:50:13+00:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OutlineJsx.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-dup-key-diff-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-dup-key-diff-value.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-dupe-attr-after-rename.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-dupe-attr-after-rename.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-dupe-key-dupe-component.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-dupe-key-dupe-component.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.jsx-outlining-duplicate-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.jsx-outlining-duplicate-prop.js"
      ]
    },
    {
      "sha": "2df8f6188537514a538741064ae83682c2bef7c1",
      "short_sha": "2df8f61",
      "message": "[compiler] Store original and new prop names (#31440)\n\nPreviously, we'd directly store the original attributes from the jsx\r\nexpressions. But this isn't enough as we want to rename duplicate\r\nattributes.\r\n\r\nThis PR refactors the prop collection logic to store both the original\r\nand new names for jsx attributes in the newly outlined jsx expression.\r\n\r\nFor now, both the new and old names are the same. In the future, they\r\nwill be different when we add support for outlining expressions with\r\nduplicate attribute names.",
      "author": {
        "name": "Sathya Gunasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-11-06T17:44:52+00:00",
      "committed_date": "2024-11-06T17:44:52+00:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OutlineJsx.ts"
      ]
    },
    {
      "sha": "a7b83e7ceb3e0390e4ad4f9b417f21cb5a0ef17f",
      "short_sha": "a7b83e7",
      "message": "[www] set disableStringRefs to true (#31438)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-11-06T12:13:43-05:00",
      "committed_date": "2024-11-06T12:13:43-05:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "66855b96378daedb1405e83f2365e0d90966ea0e",
      "short_sha": "66855b9",
      "message": "Remove unused lastFullyObservedContext (#31435)",
      "author": {
        "name": "Sophie Alpert",
        "email": "git@sophiebits.com"
      },
      "authored_date": "2024-11-06T07:35:23-08:00",
      "committed_date": "2024-11-06T07:35:23-08:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberNewContext.js"
      ]
    },
    {
      "sha": "314968561b547957c76c9d7be3620e38f87770d4",
      "short_sha": "3149685",
      "message": "Back out \"[bundles] stop building legacy Paper renderer (#31429)\" (#31437)\n\nBacks out the 2 related commits:\r\n-\r\nhttps://github.com/facebook/react/commit/f8f6e1a21a1cac64cf6faf666367d641b2d8b171\r\n-\r\nhttps://github.com/facebook/react/commit/6c0f37f94b020279fb5ada70facc008fccb7172e\r\n\r\nSince I only realized when syncing that we need the version of `react`\r\nand the legacy renderer to match.\r\n\r\nWhile I investigate if there's anything we can do to work around that\r\nwhile preserving the legacy renderer, this unblocks the sync.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-11-06T09:41:18-05:00",
      "committed_date": "2024-11-06T09:41:18-05:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml",
        "scripts/rollup/bundles.js"
      ]
    },
    {
      "sha": "d1f04722d617600cc6cd96dcebc1c2ef7affc904",
      "short_sha": "d1f0472",
      "message": "[string-refs] remove enableLogStringRefsProd flag (#31414)\n\nWe no longer need this production logging.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-11-06T09:00:49-05:00",
      "committed_date": "2024-11-06T09:00:49-05:00",
      "changed_files": [
        "packages/react/src/jsx/ReactJSXElement.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "3dc1e4820ec985baa6668a4fa799760c4b99f5d9",
      "short_sha": "3dc1e48",
      "message": "Followup: remove dead test code from #30346 (#31415)\n\nI missed that this was a constant false check when making the broader\r\ncleanup changes in https://github.com/facebook/react/pull/30346",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-11-06T08:58:36-05:00",
      "committed_date": "2024-11-06T08:58:36-05:00",
      "changed_files": [
        "packages/react/src/__tests__/ReactElementClone-test.js"
      ]
    },
    {
      "sha": "c3570b158d087eb4e3ee5748c4bd9360045c8a26",
      "short_sha": "c3570b1",
      "message": "[compiler] Collect temporaries and optional chains from inner functions (#31346)\n\nRecursively collect identifier / property loads and optional chains from\r\ninner functions. This PR is in preparation for #31200\r\n\r\nPreviously, we only did this in `collectHoistablePropertyLoads` to\r\nunderstand hoistable property loads from inner functions.\r\n1. collectTemporariesSidemap\r\n2. collectOptionalChainSidemap\r\n3. collectHoistablePropertyLoads\r\n- ^ this recursively calls `collectTemporariesSidemap`,\r\n`collectOptionalChainSidemap`, and `collectOptionalChainSidemap` on\r\ninner functions\r\n4. collectDependencies\r\n\r\nNow, we have\r\n1. collectTemporariesSidemap\r\n- recursively record identifiers in inner functions. Note that we track\r\nall temporaries in the same map as `IdentifierIds` are currently unique\r\nacross functions\r\n2. collectOptionalChainSidemap\r\n    - recursively records optional chain sidemaps in inner functions\r\n3. collectHoistablePropertyLoads\r\n    - (unchanged, except to remove recursive collection of temporaries)\r\n4. collectDependencies\r\n- unchanged: to be modified to recursively collect dependencies in next\r\nPR\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31346).\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* __->__ #31346\r\n* #31199",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T19:25:05-05:00",
      "committed_date": "2024-11-05T19:25:05-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectOptionalChainDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/visitors.ts"
      ]
    },
    {
      "sha": "fd018af617cf9f8be607f45fc53d6d8167d29eb4",
      "short_sha": "fd018af",
      "message": "[compiler] Delete propagateScopeDeps (non-hir) (#31199)\n\n`enablePropagateScopeDepsHIR` is now used extensively in Meta. This has\r\nbeen tested for over two weeks in our e2e tests and production.\r\n\r\nThe rest of this stack deletes `LoweredFunction.dependencies`, which the\r\nnon-hir version of `PropagateScopeDeps` depends on. To avoid a more\r\nforked HIR (non-hir with dependencies and hir with no dependencies),\r\nlet's go ahead and clean up the non-hir version of\r\nPropagateScopeDepsHIR.\r\n\r\nNote that all fixture changes in this PR were previously reviewed when\r\nthey were copied to `propagate-scope-deps-hir-fork`. Will clean up /\r\nmerge these duplicate fixtures in a later PR\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31199).\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* #31346\r\n* __->__ #31199",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T19:22:04-05:00",
      "committed_date": "2024-11-05T19:22:04-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PropagateScopeDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-hoisting-functionexpr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-try-catch-maybe-null-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-mutate-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/conditional-break-labeled.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/conditional-early-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/conditional-on-mutable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/early-return-nested-early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoist-optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional-optional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoist-optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-call-chain-in-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/functionexpr-conditional-access-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/functionexpr-conditional-access-2.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/functionexpr–conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/functionexpr–conditional-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/iife-return-modified-later-phi.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-sequential-optional-chain-nonnull.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nested-optional-chains.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-mutated-in-consequent-alternate-both-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/partial-early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/phi-type-inference-array-push-consecutive-phis.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/phi-type-inference-array-push.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/phi-type-inference-property-store.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-conditional-access-own-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-conditional-access-own-scope.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-infer-conditional-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-infer-conditional-value-block.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-conditional-access-own-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-infer-conditional-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactive-dependencies-non-optional-properties-inside-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reassigned-phi-in-returned-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-infer-function-cond-access-not-hoisted.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-merge-uncond-optional-chain-and-cond.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/join-uncond-scopes-cond-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/promote-uncond.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-cascading-eliminated-phis.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-leave-case.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary-destruction-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary-destruction.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-unconditional-ternary-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-unconditional-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-unconditional-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-via-destructuring-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/switch-non-final-default.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/switch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/try-catch-mutate-outer-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/try-catch-within-function-expression-returns-caught-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/try-catch-within-object-method-returns-caught-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-multiple-if-else.expect.md"
      ]
    },
    {
      "sha": "f2f002c7c19e273f3f31289d6f288c3248f10183",
      "short_sha": "f2f002c",
      "message": "[compiler][be] Stabilize compiler output: sort deps and decls by name (#31362)\n\nAll dependencies and declarations of a reactive scope can be reordered\r\nto scope start/end. i.e. generated code does not depend on conditional\r\nshort-circuiting logic as dependencies are inferred to have no side\r\neffects.\r\n\r\nSorting these by name helps us get higher signal compilation snapshot\r\ndiffs when upgrading the compiler and testing PRs",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T18:26:50-05:00",
      "committed_date": "2024-11-05T18:26:50-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allocating-primitive-as-dep-nested-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-at-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-expression-spread.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/array-property-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-phi-as-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-object-expression-computed-key-modified-during-after-construction-hoisted-sequence-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-fun-alias-captured-mutate-2-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-fun-alias-captured-mutate-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-fun-alias-captured-mutate-arr-2-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-fun-alias-captured-mutate-arr-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-captured-mutate-arr-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-captured-mutate-arr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-captured-mutate-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-func-alias-captured-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capturing-function-member-expr-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/component.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/computed-call-spread.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/dependencies-outputs.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructure-in-branch-ssa.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructuring-same-property-identifier-names.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructuring.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/dont-merge-if-dep-is-inner-declaration-of-previous-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/existing-variables-with-c-name.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fast-refresh-reloading.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-repro-invalid-mutable-range-destructured-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbtparam-with-jsx-element-content.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/for-loop-with-value-block-initializer.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/for-of-nonmutating-loop-local-collection.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/function-expression-prototype-call-mutating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/functionexpr-conditional-access-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/functionexpr–conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/globals-dont-resolve-local-useState.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-noAlias.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hooks-with-prefix.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/incompatible-destructuring-kinds.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inner-memo-value-not-promoted-to-outer-scope-dynamic.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-child-stored-in-id.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-jsx-stored-in-id.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-separate-nested.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-simple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-tag-evaluation-order-non-global.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lambda-capture-returned-alias.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-acess-multiple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-selector-simple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/merge-consecutive-scopes-reordering.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/method-call-computed.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/method-call-fn-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nonmutating-capture-in-unsplittable-memo-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-shorthand-method-nested.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/partial-early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-in-other-reactive-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-reordering-deplist-controlflow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-conditional-access-alloc.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-conditional-access-noAlloc.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-in-other-reactive-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-controlflow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/primitive-as-dep-nested-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/primitive-reassigned-loop-force-scopes-enabled.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/early-return-nested-early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/iife-return-modified-later-phi.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/partial-early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-property-store.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-cond-access-local-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-cond-access-not-hoisted.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-access-hoists-other-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-optional-hoists-other-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-objectmethod-cond-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/memberexpr-join-optional-chain2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/promote-uncond.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/switch-non-final-default.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/switch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-try-value-modified-in-catch-escaping.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-try-value-modified-in-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/useMemo-multiple-if-else.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactivity-analysis-interleaved-reactivity.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactivity-analysis-reactive-via-mutation-of-computed-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reactivity-analysis-reactive-via-mutation-of-property-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reassignment-separate-scopes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-cond-deps-break-in-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-cond-deps-return-in-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-infer-function-cond-access-not-hoisted.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/hoist-deps-diff-ssa-instance.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/jump-poisoned/break-in-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/jump-poisoned/loop-break-in-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/jump-poisoned/reduce-if-nonexhaustive-poisoned-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/jump-poisoned/reduce-if-nonexhaustive-poisoned-deps1.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/jump-poisoned/return-in-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/jump-poisoned/return-poisons-outer-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/jump-unpoisoned/jump-target-within-scope-loop-break.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/jump-unpoisoned/reduce-if-exhaustive-nonpoisoned-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/jump-unpoisoned/reduce-if-exhaustive-nonpoisoned-deps1.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/memberexpr-join-optional-chain2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/promote-uncond.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/reduce-if-exhaustive-poisoned-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/subpath-order1.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/superpath-order1.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/uncond-access-in-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/uncond-nonoverlap-descendant.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reordering-across-blocks.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-independently-memoized-property-load-for-method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-invalid-pruned-scope-leaks-value-via-alias.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-invalid-pruned-scope-leaks-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-invalid-reactivity-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-memoization-lack-of-phi-types-explicit-types.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-memoization-lack-of-phi-types.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-no-value-for-temporary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-propagate-type-of-ternary-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-slow-validate-preserve-memo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-unmerged-fbt-call-merge-overlapping-reactive-scopes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-unreachable-code-early-return-in-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rest-param-with-array-pattern.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rest-param-with-identifier.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rest-param-with-object-spread-pattern.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/same-variable-as-dep-and-redeclare-maybe-frozen.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/same-variable-as-dep-and-redeclare.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/sequential-destructuring-assignment-to-scope-declarations.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/sequential-destructuring-both-mixed-local-and-scope-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/switch-non-final-default.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/switch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.jsx-outlining-children.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.jsx-outlining-duplicate-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-array-destructuring.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-destructure-multiple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-mixed-array-obj.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-nested-destructuring.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-property-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/try-catch-in-nested-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/try-catch-try-value-modified-in-catch-escaping.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/try-catch-try-value-modified-in-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/try-catch-with-catch-param.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/try-catch-with-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-log-default-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-log.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-store-capture-namespace-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-store-capture.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/unary-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-operator-call-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-operator-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-operator-method-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useEffect-nested-lambdas.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useState-unpruned-dependency.expect.md"
      ]
    },
    {
      "sha": "792fa065ca7a46ce4a583e8f6f35eec8bd813d43",
      "short_sha": "792fa06",
      "message": "[compiler][ez] Clean up pragma parsing for tests + playground (#31347)\n\nMove environment config parsing for `inlineJsxTransform`,\r\n`lowerContextAccess`, and some dev-only options out of snap (test\r\nfixture). These should now be available for playground via\r\n`@inlineJsxTransform` and `lowerContextAccess`.\r\n\r\nOther small change:\r\nChanged zod fields from `nullish()` -> `nullable().default(null)`.\r\n[`nullish`](https://zod.dev/?id=nullish) fields accept `null |\r\nundefined` and default to `undefined`. We don't distinguish between null\r\nand undefined for any of these options, so let's only accept null +\r\ndefault to null. This also makes EnvironmentConfig in the playground\r\nmore accurate. Previously, some fields just didn't show up as\r\n`prettyFormat({field: undefined})` does not print `field`.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T18:19:44-05:00",
      "committed_date": "2024-11-05T18:19:44-05:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-emit-imports-same-source.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-emit-imports-same-source.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-instrument-forget-gating-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-instrument-forget-gating-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-instrument-forget-test.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-instrument-forget-test.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/parseConfigPragma-test.ts",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts",
        "compiler/packages/snap/src/compiler.ts",
        "compiler/packages/snap/src/runner-worker.ts"
      ]
    },
    {
      "sha": "33195602ea125af38f9460f0bb2ccab8713e5f10",
      "short_sha": "3319560",
      "message": "[compiler][ez] tsconfig: treat all snap fixtures as modules (#31350)\n\nQol improvement. Currently, typescript lints treat test fixtures without\r\nan export as a 'global script' (see\r\n[docs](https://www.typescriptlang.org/docs/handbook/2/modules.html#how-javascript-modules-are-defined)).\r\nThis gives confusing lints for duplicate declarations (in the global\r\nscope)",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T17:57:18-05:00",
      "committed_date": "2024-11-05T17:57:18-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/tsconfig.json"
      ]
    },
    {
      "sha": "5ca2bc6d631dde8c221fa482cb8729a67115c7f9",
      "short_sha": "5ca2bc6",
      "message": "[compiler][ez] Fixture repro for function hoisting bug (#31349)\n\nRepro for bug reported by @alexmckenley",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T17:56:53-05:00",
      "committed_date": "2024-11-05T17:56:53-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-functiondecl-hoisting.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-functiondecl-hoisting.tsx",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "bddb7c9b5c248c77fb52743cd319945d782bb7aa",
      "short_sha": "bddb7c9",
      "message": "[compiler] Add fixture for objectexpr computed key bug (#31348)\n\nWe were bailing out on complex computed-key syntax (prior to #31344) as\r\nwe assumed that this caused bugs (due to inferring computed key rvalues\r\nto have `freeze` effects).\r\n\r\nThis fixture shows that this bailout is unrelated to the underlying bug",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T17:56:36-05:00",
      "committed_date": "2024-11-05T17:56:36-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-object-expression-computed-key-modified-during-after-construction-hoisted-sequence-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-object-expression-computed-key-modified-during-after-construction-hoisted-sequence-expr.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "f8f6e1a21a1cac64cf6faf666367d641b2d8b171",
      "short_sha": "f8f6e1a",
      "message": "[bundles] update GitHub actions for commit build branch (#31432)\n\nThis is a followup to\r\nhttps://github.com/facebook/react/commit/6c0f37f94b020279fb5ada70facc008fccb7172e\r\nto unblock the job.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-11-05T16:04:02-05:00",
      "committed_date": "2024-11-05T16:04:02-05:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "6c0f37f94b020279fb5ada70facc008fccb7172e",
      "short_sha": "6c0f37f",
      "message": "[bundles] stop building legacy Paper renderer (#31429)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-11-05T15:49:20-05:00",
      "committed_date": "2024-11-05T15:49:20-05:00",
      "changed_files": [
        "scripts/rollup/bundles.js"
      ]
    },
    {
      "sha": "527bcaa83d9d31e848ca1bea1a5b8532ab361527",
      "short_sha": "527bcaa",
      "message": "[compiler] patch: rewrite scope dep/decl in inlineJsxTransform (#31431)\n\nThis bugfix is needed to land #31199 PropagateScopeDepsHIR infers scope\r\ndeclarations for the `inline-jsx-transform` test fixture (the non-hir\r\nversion does not).\r\n\r\nThese declarations must get the rewritten phi identifiers\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31431).\r\n* #31204\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* #31346\r\n* #31199\r\n* __->__ #31431\r\n* #31345\r\n* #31197",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T15:27:39-05:00",
      "committed_date": "2024-11-05T15:27:39-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/InlineJsxTransform.ts"
      ]
    },
    {
      "sha": "e7e269b7265ec94929a53f4d402037261c87cf44",
      "short_sha": "e7e269b",
      "message": "[compiler] bugfix for hoistable deps for nested functions (#31345)\n\n`PropertyPathRegistry` is responsible for uniqueing identifier and\r\nproperty paths. This is necessary for the hoistability CFG merging logic\r\nwhich takes unions and intersections of these nodes to determine a basic\r\nblock's hoistable reads, as a function of its neighbors. We also depend\r\non this to merge optional chained and non-optional chained property\r\npaths\r\n\r\nThis fixes a small bug in #31066 in which we create a new registry for\r\nnested functions. Now, we use the same registry for a component / hook\r\nand all its inner functions\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31345).\r\n* #31204\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* #31346\r\n* #31199\r\n* #31431\r\n* __->__ #31345\r\n* #31197",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T15:25:54-05:00",
      "committed_date": "2024-11-05T15:25:54-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/repro-invariant.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/repro-invariant.tsx"
      ]
    },
    {
      "sha": "dd1a021bad0908d3ad7ba4314ca9a39173d7758f",
      "short_sha": "dd1a021",
      "message": "[compiler][ez] Patch hoistability for ObjectMethods (#31197)\n\nExtends #31066 to ObjectMethods (somehow missed this before).\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31197).\r\n* #31204\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* #31346\r\n* #31199\r\n* #31431\r\n* #31345\r\n* __->__ #31197",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T15:25:39-05:00",
      "committed_date": "2024-11-05T15:25:39-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-objectmethod-cond-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-objectmethod-cond-access.js"
      ]
    },
    {
      "sha": "156eab2f7b34fe78ef26a1752f95bfdc2092819d",
      "short_sha": "156eab2",
      "message": "Fork the \"empty\" prepareStackTrace case for Server builds (#31427)\n\nWe don't actually want the source mapped version of `.stack` from errors\r\nbecause that would cause us to not be able to associate it with a source\r\nmap in the UIs that need it. The strategy in browsers is more correct\r\nwhere the display is responsible for source maps.\r\n\r\nThat's why we disable any custom `prepareStackTrace` like the ones added\r\nby `source-map`. We reset it to `undefined`.\r\n\r\nHowever, when running node with `--enable-source-maps` the default for\r\n`prepareStackTrace` which is a V8 feature (but may exist elsewhere too\r\nlike Bun) is a source mapped version of the stack. In those environments\r\nwe need to reset it to a default implementation that doesn't apply\r\nsource maps.\r\n\r\nWe already did this in Flight using the `ReactFlightStackConfigV8.js`\r\nconfig. However, we need this more generally in the\r\n`shared/ReactComponentStackFrame` implementation.\r\n\r\nWe could always set it to the default implementation instead of\r\n`undefined` but that's unnecessary code in browser builds and it might\r\nlead to slightly different results. For safety and code size, this PR\r\ndoes it with a fork instead.\r\n\r\nAll builds specific to `node` or `edge` (or `markup` which is a server\r\nfeature) gets the default implementation where as everything else (e.g.\r\nbrowsers) get `undefined` since it's expected that this is not source\r\nmapped. We don't have to do anything about the equivalent in React\r\nDevTools since React DevTools doesn't run on the server.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-11-05T15:05:04-05:00",
      "committed_date": "2024-11-05T15:05:04-05:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightStackConfigV8.js",
        "packages/shared/DefaultPrepareStackTrace.js",
        "packages/shared/DefaultPrepareStackTraceV8.js",
        "packages/shared/ReactComponentStackFrame.js",
        "packages/shared/ReactOwnerStackFrames.js",
        "packages/shared/forks/DefaultPrepareStackTrace.dom-edge.js",
        "packages/shared/forks/DefaultPrepareStackTrace.dom-node.js",
        "packages/shared/forks/DefaultPrepareStackTrace.markup.js",
        "scripts/rollup/forks.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "b81e6dd2dade4c2d43d44ce7c9bfa4e3053fc949",
      "short_sha": "b81e6dd",
      "message": "[cleanup] Remove compiler runtime-compat fixture library (#31430)\n\nThere's no real reason to keep this around anymore now that the compiler\r\nbeta is released and we have validated that react-compiler-runtime is\r\n[usable by\r\nlibraries](https://www.npmjs.com/package/react-compiler-runtime?activeTab=dependents).\r\n\r\nLet's clean this up for now.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-11-05T14:14:39-05:00",
      "committed_date": "2024-11-05T14:14:39-05:00",
      "changed_files": [
        "compiler/fixtures/.gitkeep",
        "compiler/fixtures/runtime-compat/README.md",
        "compiler/fixtures/runtime-compat/app-18/.gitignore",
        "compiler/fixtures/runtime-compat/app-18/README.md",
        "compiler/fixtures/runtime-compat/app-18/eslint.config.js",
        "compiler/fixtures/runtime-compat/app-18/index.html",
        "compiler/fixtures/runtime-compat/app-18/package.json",
        "compiler/fixtures/runtime-compat/app-18/public/vite.svg",
        "compiler/fixtures/runtime-compat/app-18/src/App.css",
        "compiler/fixtures/runtime-compat/app-18/src/App.tsx",
        "compiler/fixtures/runtime-compat/app-18/src/assets/react.svg",
        "compiler/fixtures/runtime-compat/app-18/src/index.css",
        "compiler/fixtures/runtime-compat/app-18/src/main.tsx",
        "compiler/fixtures/runtime-compat/app-18/src/vite-env.d.ts",
        "compiler/fixtures/runtime-compat/app-18/tsconfig.app.json",
        "compiler/fixtures/runtime-compat/app-18/tsconfig.app.tsbuildinfo",
        "compiler/fixtures/runtime-compat/app-18/tsconfig.json",
        "compiler/fixtures/runtime-compat/app-18/tsconfig.node.json",
        "compiler/fixtures/runtime-compat/app-18/tsconfig.node.tsbuildinfo",
        "compiler/fixtures/runtime-compat/app-18/vite.config.ts",
        "compiler/fixtures/runtime-compat/app-18/yarn.lock",
        "compiler/fixtures/runtime-compat/app-19/.gitignore",
        "compiler/fixtures/runtime-compat/app-19/README.md",
        "compiler/fixtures/runtime-compat/app-19/eslint.config.js",
        "compiler/fixtures/runtime-compat/app-19/index.html",
        "compiler/fixtures/runtime-compat/app-19/package.json",
        "compiler/fixtures/runtime-compat/app-19/public/vite.svg",
        "compiler/fixtures/runtime-compat/app-19/src/App.css",
        "compiler/fixtures/runtime-compat/app-19/src/App.tsx",
        "compiler/fixtures/runtime-compat/app-19/src/assets/react.svg",
        "compiler/fixtures/runtime-compat/app-19/src/index.css",
        "compiler/fixtures/runtime-compat/app-19/src/main.tsx",
        "compiler/fixtures/runtime-compat/app-19/src/vite-env.d.ts",
        "compiler/fixtures/runtime-compat/app-19/tsconfig.app.json",
        "compiler/fixtures/runtime-compat/app-19/tsconfig.app.tsbuildinfo",
        "compiler/fixtures/runtime-compat/app-19/tsconfig.json",
        "compiler/fixtures/runtime-compat/app-19/tsconfig.node.json",
        "compiler/fixtures/runtime-compat/app-19/tsconfig.node.tsbuildinfo",
        "compiler/fixtures/runtime-compat/app-19/vite.config.ts",
        "compiler/fixtures/runtime-compat/app-19/yarn.lock",
        "compiler/fixtures/runtime-compat/lib/babel.config.js",
        "compiler/fixtures/runtime-compat/lib/index.js",
        "compiler/fixtures/runtime-compat/lib/package.json",
        "compiler/fixtures/runtime-compat/lib/rollup.config.js",
        "compiler/fixtures/runtime-compat/lib/yarn.lock",
        "compiler/fixtures/runtime-compat/setup.sh"
      ]
    },
    {
      "sha": "33c7bd9ae3b4f998a477fe0ea8ebdf2f2ee8a144",
      "short_sha": "33c7bd9",
      "message": "Remove trim_trailing_whitespace from editorconfig (#31413)\n\nThis setting breaks `toMatchInlineSnapshot` by removing whitespace in\r\nsnapshots.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-11-04T15:30:02-05:00",
      "committed_date": "2024-11-04T15:30:02-05:00",
      "changed_files": [
        ".editorconfig"
      ]
    },
    {
      "sha": "07aa494432e97f63fca9faf2fad6f76fead31063",
      "short_sha": "07aa494",
      "message": "Remove enableRefAsProp feature flag (#30346)\n\nThe flag is fully rolled out.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-11-04T14:30:58-05:00",
      "committed_date": "2024-11-04T14:30:58-05:00",
      "changed_files": [
        "packages/jest-react/src/JestReact.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-devtools-shared/src/__tests__/legacy/storeLegacy-v15-test.js",
        "packages/react-dom/src/__tests__/ReactFunctionComponent-test.js",
        "packages/react-dom/src/__tests__/refs-test.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactChildFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberClassComponent.js",
        "packages/react-reconciler/src/__tests__/ReactFiberRefs-test.js",
        "packages/react-reconciler/src/__tests__/ReactIncrementalSideEffects-test.js",
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactMemo-test.js",
        "packages/react-server/src/ReactFizzServer.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.internal.js",
        "packages/react/src/__tests__/ReactCreateElement-test.js",
        "packages/react/src/__tests__/ReactElementClone-test.js",
        "packages/react/src/__tests__/ReactJSXElementValidator-test.js",
        "packages/react/src/__tests__/ReactJSXRuntime-test.js",
        "packages/react/src/__tests__/ReactJSXTransformIntegration-test.js",
        "packages/react/src/jsx/ReactJSXElement.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "543eb0932155fcf8481c457ed98200006ad57cf5",
      "short_sha": "543eb09",
      "message": "[compiler] Wrap inline jsx transform codegen in conditional (#31267)\n\nJSX inlining is a prod-only optimization. We want to enforce this while\r\nmaintaining the same compiler output in DEV and PROD.\r\n\r\nHere we add a conditional to the transform that only replaces JSX with\r\nobject literals outside of DEV. Then a later build step can handle DCE\r\nbased on the value of `__DEV__`",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-11-04T13:19:05-05:00",
      "committed_date": "2024-11-04T13:19:05-05:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/InlineJsxTransform.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.js",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "4d577fd216735384a262cbacdcbc5cda18626497",
      "short_sha": "4d577fd",
      "message": "More Unit Tests for Refs in Hidden Subtrees (#31404)\n\n## Summary\r\n\r\nWhile fixing ref lifecycles in hidden subtrees in\r\nhttps://github.com/facebook/react/pull/31379, @rickhanlonii noticed that\r\nwe could also add more unit tests for other types of tags to prevent\r\nfuture regressions during code refactors.\r\n\r\nThis PR adds more unit tests in the same vein as those added in\r\nhttps://github.com/facebook/react/pull/31379.\r\n\r\n## How did you test this change?\r\n\r\nVerified unit tests pass:\r\n\r\n```\r\n$ yarn\r\n$ yarn test ReactFreshIntegration-test.js\r\n```",
      "author": {
        "name": "Timothy Yung",
        "email": "yungsters@meta.com"
      },
      "authored_date": "2024-11-04T07:46:28-08:00",
      "committed_date": "2024-11-04T10:46:28-05:00",
      "changed_files": [
        "packages/react-refresh/src/__tests__/ReactFreshIntegration-test.js"
      ]
    },
    {
      "sha": "7c8e5e7ab8bb63de911637892392c5efd8ce1d0f",
      "short_sha": "7c8e5e7",
      "message": "Reenable lazy context propagation (#31405)\n\nReverts facebook/react#31403 to reenable lazy context propagation\r\n\r\nThe disabling was to produce a build that could help track down whether\r\nthis flag is causing a possibly related bug in transitions but we don't\r\nintend to disable it just fix forward once we figure out what the\r\nproblem is",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-11-01T15:17:51-07:00",
      "committed_date": "2024-11-01T15:17:51-07:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "16409d0560863dac41880bd308dea6efee46087a",
      "short_sha": "16409d0",
      "message": "temporarily disable lazy context propagation (#31403)\n\ndisables lazy context propagation in oss to help determine if it is\r\ncausing bugs in startTransition. Will reenable after cutting a canary\r\nrelease with this flag disabled",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-11-01T15:16:26-07:00",
      "committed_date": "2024-11-01T15:16:26-07:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "b7e21579220042c0a60179e2f40f121684e637eb",
      "short_sha": "b7e2157",
      "message": "[Flight] Handle errors during JSON stringify of console values (#31391)\n\nWhen we serialize debug info we should never error even though we don't\r\ncurrently support everything being serialized. Since it's non-essential\r\ndev information.\r\n\r\nWe already handle errors in the replacer but not when errors happen in\r\nthe JSON algorithm itself - such as cyclic errors.\r\n\r\nWe should ideally support cyclic objects but regardless we should\r\ngracefully handle the errors.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-31T16:47:51-04:00",
      "committed_date": "2024-10-31T16:47:51-04:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "ea3ac586693014e882655728fc8396ecb1d6cf6e",
      "short_sha": "ea3ac58",
      "message": "Fix Ref Lifecycles in Hidden Subtrees (#31379)\n\n## Summary\r\n\r\nWe're seeing certain situations in React Native development where ref\r\ncallbacks in `<Activity mode=\"hidden\">` are sometimes invoked exactly\r\nonce with `null` without ever being called with a \"current\" value.\r\n\r\nThis violates the contract for refs because refs are expected to always\r\nattach before detach (and to always eventually detach after attach).\r\nThis is *particularly* bad for refs that return cleanup functions,\r\nbecause refs that return cleanup functions expect to never be invoked\r\nwith `null`. This bug causes such refs to be invoked with `null`\r\n(because since `safelyAttachRef` was never called, `safelyDetachRef`\r\nthinks the ref does not return a cleanup function and invokes it with\r\n`null`).\r\n\r\nThis fix makes use of `offscreenSubtreeWasHidden` in\r\n`commitDeletionEffectsOnFiber`, similar to how\r\nhttps://github.com/facebook/react/commit/ec52a5698e2dfea7050a0b015f0b79abfb2d81b7\r\ndid this for `commitDeletionEffectsOnFiber`.\r\n\r\n## How did you test this change?\r\n\r\nWe were able to isolate the repro steps to isolate the React Native\r\nexperimental changes. However, the repro steps depend on Fast Refresh.\r\n\r\n```\r\nfunction callbackRef(current) {\r\n  // Called once with `current` as null, upon triggering Fast Refresh.\r\n}\r\n\r\n<Activity mode=\"hidden\">\r\n  <View ref={callbackRef} />;\r\n</Activity>\r\n```\r\n\r\nIdeally, we would have a unit test that verifies this behavior without\r\nFast Refresh. (We have evidence that this bug occurs without Fast\r\nRefresh in real product implementations. However, we have not\r\nsuccessfully deduced the root cause, yet.)\r\n\r\nThis PR currently includes a unit test that reproduces the Fast Refresh\r\nscenario, which is also demonstrated in this CodeSandbox:\r\nhttps://codesandbox.io/p/sandbox/hungry-darkness-33wxy7\r\n\r\nVerified unit tests pass:\r\n\r\n```\r\n$ yarn\r\n$ yarn test\r\n# Run with `-r=www-classic` for `enableScopeAPI` tests.\r\n$ yarn test -r=www-classic\r\n```\r\n\r\nVerified on the internal React Native development branch that the bug no\r\nlonger repros.\r\n\r\n---------\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>",
      "author": {
        "name": "Timothy Yung",
        "email": "yungsters@meta.com"
      },
      "authored_date": "2024-10-31T13:24:45-07:00",
      "committed_date": "2024-10-31T13:24:45-07:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-refresh/src/__tests__/ReactFreshIntegration-test.js"
      ]
    },
    {
      "sha": "603e6108f39c6663ec703eed34a89ff1bf0cb70c",
      "short_sha": "603e610",
      "message": "[compiler] Update react deps to experimental instead of beta (#31385)\n\nSome tests rely on experimental APIs so let's just use\r\nreact@experimental instead of beta",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-29T21:51:41-04:00",
      "committed_date": "2024-10-29T21:51:41-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bug-import-as-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bug-import-as-local.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-preserve-whitespace-subtree.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-preserve-whitespace-subtree.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-preserve-whitespace-two-subtrees.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-preserve-whitespace-two-subtrees.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/import-as-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/module-scoped-bindings.expect.md",
        "compiler/packages/snap/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "4abe4b582106f2012f4eb9624a10f77d167cc848",
      "short_sha": "4abe4b5",
      "message": "[compiler] Check if local identifier is a hook when resolving globals (#31384)\n\nWhen resolving import specifiers from the react namespace (`import\r\n{imported as local} from 'react'`), we were previously only checking if\r\nthe `imported` identifier was a hook if we didn't already have its\r\ndefinition in the global registry. We also need to check if `local` is a\r\nhook in the case of aliasing since there may be hook-like APIs in react\r\nthat don't start with `use` (eg they are experimental or unstable).\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31384).\r\n* #31385\r\n* __->__ #31384\r\n* #31383",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-29T21:36:48-04:00",
      "committed_date": "2024-10-29T21:36:48-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/import-as-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/import-as-local.tsx"
      ]
    },
    {
      "sha": "3928cb00db94e31afd3efa6850f0e8bec53aefc1",
      "short_sha": "3928cb0",
      "message": "[compiler] Ref validation repro for ImportSpecifier with renamed local (#31383)\n\nThis was originally reported in\r\nhttps://github.com/reactwg/react-compiler/discussions/27.\r\n\r\nAdding a failing repro to capture this case.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31383).\r\n* #31385\r\n* #31384\r\n* __->__ #31383",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-29T21:36:36-04:00",
      "committed_date": "2024-10-29T21:36:36-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bug-import-as-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.bug-import-as-local.tsx"
      ]
    },
    {
      "sha": "0bc30748730063e561d87a24a4617526fdd38349",
      "short_sha": "0bc3074",
      "message": "Capture the source and not just the stack on first seen error (#31367)\n\nOtherwise we can't capture the owner stack at the right location when\r\nthere's a rethrow.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-28T13:59:38-07:00",
      "committed_date": "2024-10-28T13:59:38-07:00",
      "changed_files": [
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactCapturedValue.js",
        "packages/react-reconciler/src/__tests__/ReactErrorStacks-test.js"
      ]
    },
    {
      "sha": "02c0e824e462c7f81ba79d95cfc41c89c6d81b95",
      "short_sha": "02c0e82",
      "message": "[compiler][ez] Remove unused param (#31376)",
      "author": {
        "name": "Sathya Gunasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-10-28T15:08:27+00:00",
      "committed_date": "2024-10-28T15:08:27+00:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/ConstantPropagation.ts"
      ]
    },
    {
      "sha": "aded0ef831e100a5ee9d9e674cb0482326279118",
      "short_sha": "aded0ef",
      "message": "[compiler] Handle member expr as computed property (#31344)\n\nThis PR loosens the restriction on the types of computed properties we\r\ncan handle.\r\n\r\nPreviously, we would disallow anything that is not an identifier because\r\nnon-identifiers could be mutating. But member expressions are not\r\nmutating so we can treat them similar to identifiers.",
      "author": {
        "name": "Sathya Gunasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-10-28T13:10:01+00:00",
      "committed_date": "2024-10-28T13:10:01+00:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-member-expr-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-object-expression-member-expr-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-expression-computed-member.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/object-expression-computed-member.js"
      ]
    },
    {
      "sha": "fe04dbcbc4185d7c9d7afebbe18589d2b681a88c",
      "short_sha": "fe04dbc",
      "message": "[compiler] Fix to ref access check to ban ref?.current\n\nghstack-source-id: ea417a468eac2607ce8d1dddcb2e9581e1c4db27\nPull Request resolved: https://github.com/facebook/react/pull/31360",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-10-25T16:47:19-07:00",
      "committed_date": "2024-10-25T16:51:36-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-optional.js"
      ]
    },
    {
      "sha": "cae764ce81b1bd6c418e9e23651794b6b09208e8",
      "short_sha": "cae764c",
      "message": "Revert \"[Re-land] Make prerendering always non-blocking (#31268)\" (#31355)\n\nThis reverts commit 6c4bbc783286bf6eebd9927cb52e8fec5ad4dd74.\r\n\r\nIt looked like the bug we found on the original land was related to\r\nbroken product code. But through landing #31268 we found additional bugs\r\ninternally. Since disabling the feature flag does not fix the bugs, we\r\nhave to revert again to unblock the sync. We can continue to debug with\r\nour internal build.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-10-25T09:17:07-07:00",
      "committed_date": "2024-10-25T09:17:07-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-reconciler/src/__tests__/ReactSiblingPrerendering-test.js"
      ]
    },
    {
      "sha": "d19ba8ecdd04639630d0ddcf6ed4ce316482a58d",
      "short_sha": "d19ba8e",
      "message": "[react-compiler-runtime] Support React 17 peer dependency (#31336)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\nThe recent blog post and\r\n[documentation](https://react.dev/learn/react-compiler#using-react-compiler-with-react-17-or-18)\r\nsay that `react-compiler-runtime` supports React 17, yet it currently\r\nrequires React 18 or 19 as a peer dependency, making it unusable for\r\ninstalling on a project still using React 17.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nManually installing the package on a React 17 codebase.\r\n\r\n---------\r\n\r\nCo-authored-by: lauren <poteto@users.noreply.github.com>",
      "author": {
        "name": "Pascal Birchler",
        "email": "pascal.birchler@gmail.com"
      },
      "authored_date": "2024-10-24T20:08:57+02:00",
      "committed_date": "2024-10-24T14:08:57-04:00",
      "changed_files": [
        "compiler/packages/react-compiler-runtime/package.json"
      ]
    },
    {
      "sha": "1631855f4303cc8585205307a56c69e3b7248bb4",
      "short_sha": "1631855",
      "message": "[Flight] encodeURI filenames parsed from stack traces (#31340)\n\nWhen parsing stacks from third parties they may include invalid url\r\ncharacters. So we need to encode them. Since these are expected to be\r\nurls though we use just encodeURI instead of encodeURIComponent.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-23T16:29:20-07:00",
      "committed_date": "2024-10-23T16:29:20-07:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js"
      ]
    },
    {
      "sha": "28668d39bea855c3bda481d018d8f3f0dfad9066",
      "short_sha": "28668d3",
      "message": "[playground] Upgrade to Next 15 stable (#31333)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-23T12:13:22-04:00",
      "committed_date": "2024-10-23T12:13:22-04:00",
      "changed_files": [
        "compiler/apps/playground/package.json",
        "compiler/apps/playground/yarn.lock"
      ]
    },
    {
      "sha": "b3e0a11e8f0689b38a9beec032c0a51cf381e998",
      "short_sha": "b3e0a11",
      "message": "[Flight] Allow <anonymous> stack frames to be serialized if opt-in (#31329)\n\nNormally we filter out stack frames with missing `filename` because they\r\ncan be noisy and not ignore listed. However, it's up to the\r\nfilterStackFrame function to determine whether to do it. This lets us\r\nmatch `<anonymous>` stack frames in V8 parsing (they don't have line\r\nnumbers).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-23T08:38:33-07:00",
      "committed_date": "2024-10-23T08:38:33-07:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightStackConfigV8.js"
      ]
    },
    {
      "sha": "2dc5bebd46d5254f9a02fd58d408acb33c288639",
      "short_sha": "2dc5beb",
      "message": "Fix error handling in `resolveClientReference` (#31332)\n\nWhen a React Server Consumer Manifest does not include an entry for a\r\nclient reference ID, we must not try to look up the export name (or\r\n`'*'`) for the client reference. Otherwise this will fail with\r\n`TypeError: Cannot read properties of undefined (reading '...')` instead\r\nof the custom error we intended to throw.",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2024-10-23T17:36:40+02:00",
      "committed_date": "2024-10-23T08:36:40-07:00",
      "changed_files": [
        "packages/react-server-dom-turbopack/src/client/ReactFlightClientConfigBundlerNode.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightClientConfigBundlerTurbopack.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightClientConfigBundlerNode.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightClientConfigBundlerWebpack.js"
      ]
    },
    {
      "sha": "b4cbdc5a7c18672807e119692f99f1cf751242fd",
      "short_sha": "b4cbdc5",
      "message": "remove terser from react-compiler-runtime build (#31326)\n\n## Summary\r\n\r\nThis fixes a minor nit I have about the `react-compiler-runtime` package\r\nin that the published code is minified. I assume most consumers will\r\nminify their own bundles so there's no real advantage to minifying it as\r\npart of the build.\r\n\r\nFor my purposes it makes it more difficult to read the code, use\r\n`patch-package` (if needed), or diff two versions without referencing\r\nthe source code on github or mapping it back to original source using\r\nthe source maps.\r\n\r\n## How did you test this change?\r\n\r\nI ran the build locally and looked at the result but did not run the\r\ncode. It's a lot more readable except for the commonjs\r\ncompatibility-related stuff that Rollup inserts.",
      "author": {
        "name": "Henry Q. Dineen",
        "email": "henryqdineen@users.noreply.github.com"
      },
      "authored_date": "2024-10-22T19:49:10-04:00",
      "committed_date": "2024-10-22T19:49:10-04:00",
      "changed_files": [
        "compiler/packages/react-compiler-runtime/rollup.config.js"
      ]
    },
    {
      "sha": "9daabc0bf97805be23f6131be4d84d063a3ff446",
      "short_sha": "9daabc0",
      "message": "`react-hooks/rules-of-hooks`: Add support for `do/while` loops (#28714)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\nCurrently, `react-hooks/rules-of-hooks` does not support `do/while`\r\nloops - I've also reported this in\r\nhttps://github.com/facebook/react/issues/28713.\r\n\r\nThis PR takes a stab at adding support for `do/while` by following the\r\nsame logic we already have for detecting `while` loops.\r\n\r\nAfter this PR, any hooks called inside a `do/while` loop will be\r\nconsidered invalid.\r\n\r\nWe're also adding some unit tests to confirm that the behavior is\r\nworking as expected.\r\n\r\nFixes #28713.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI've added unit tests that cover the case and verified that they pass by\r\nrunning:\r\n\r\n```\r\nyarn test packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js --watch\r\n```\r\n\r\nI've also verified that the rest of the tests continue to pass by\r\nrunning:\r\n\r\n```\r\nyarn test\r\n```\r\n\r\nand\r\n\r\n```\r\nyarn test --prod\r\n```",
      "author": {
        "name": "Marin Atanasov",
        "email": "8436925+tyxla@users.noreply.github.com"
      },
      "authored_date": "2024-10-22T23:07:10+03:00",
      "committed_date": "2024-10-22T13:07:10-07:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js",
        "packages/eslint-plugin-react-hooks/src/RulesOfHooks.js"
      ]
    },
    {
      "sha": "ae90522bc6ea80d87f22e845024dc82e2c05e3d5",
      "short_sha": "ae90522",
      "message": "chore: remove unsued deps from React Compiler Babel plugin (#31315)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nSince the Babel plugin is bundled into a single file (except for\r\n`@babel/types`\r\nhttps://github.com/facebook/react/blob/45804af18d589fd2c181f3b020f07661c46b73ea/compiler/packages/babel-plugin-react-compiler/rollup.config.js#L18)\r\nwe can move these deps to `devDependencies`.\r\n\r\nMain motivation is e.g. not installing ancient version of\r\n`pretty-format` (asked in https://github.com/facebook/react/issues/29062\r\nwithout getting a reason, but if consumers can just skip the deps\r\nentirely that's even better).\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nI tested by installing the plugin into an empty project, deleting\r\neverything in `node_modules` _except_ for `babel-plugin-react-compiler`\r\nand doing `require('babel-plugin-react-compiler')`. It still worked\r\nfine, so it should work in other cases as well 😀\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->",
      "author": {
        "name": "Simen Bekkhus",
        "email": "sbekkhus91@gmail.com"
      },
      "authored_date": "2024-10-22T19:51:58+02:00",
      "committed_date": "2024-10-22T13:51:58-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/package.json"
      ]
    },
    {
      "sha": "45804af18d589fd2c181f3b020f07661c46b73ea",
      "short_sha": "45804af",
      "message": "[flow] Eliminate usage of more than 1-arg `React.AbstractComponent` in React codebase (#31314)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nIn order to adopt react 19's ref-as-prop model, Flow needs to eliminate\r\nall the places where they are treated differently.\r\n`React.AbstractComponent` is the worst example of this, and we need to\r\neliminate it.\r\n\r\nThis PR eliminates them from the react repo, and only keeps the one that\r\nhas 1 argument of props.\r\n\r\n## How did you test this change?\r\n\r\nyarn flow",
      "author": {
        "name": "Sam Zhou",
        "email": "sam@developersam.com"
      },
      "authored_date": "2024-10-21T16:17:41-07:00",
      "committed_date": "2024-10-21T16:17:41-07:00",
      "changed_files": [
        ".eslintrc.js",
        "packages/react-devtools-inline/src/frontend.js",
        "packages/react-devtools-shared/src/devtools/ContextMenu/types.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Components.js",
        "packages/react-devtools-shared/src/devtools/views/portaledContent.js",
        "packages/react-devtools-shell/src/app/InspectableElements/CustomHooks.js",
        "packages/react-markup/src/ReactMarkupServer.js",
        "packages/react-native-renderer/src/ReactNativeFiberHostComponent.js",
        "packages/react-native-renderer/src/ReactNativePublicCompat.js",
        "packages/react-native-renderer/src/ReactNativeTypes.js",
        "packages/react-reconciler/src/ReactTestSelectors.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react/index.development.js",
        "packages/react/index.js",
        "packages/react/src/ReactForwardRef.js"
      ]
    },
    {
      "sha": "69d4b800a6c31561bd928eef4a4592fdb38471cb",
      "short_sha": "69d4b80",
      "message": "[Flight] Support Async Modules in Server References (#31313)\n\nThis is required to support for example top level await in a \"use\r\nserver\" module or dependency of a \"use server\".",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-21T14:52:10-04:00",
      "committed_date": "2024-10-21T14:52:10-04:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/client/ReactFlightClientConfigBundlerWebpack.js"
      ]
    },
    {
      "sha": "65a56d0e99261481c721334a3ec4561d173594cd",
      "short_sha": "65a56d0",
      "message": "Fix timing issue with fake promise resolving sync (#31304)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-20T02:35:15-04:00",
      "committed_date": "2024-10-20T02:35:15-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "f11bd3439cfd0e95c490a58059562b781c34c3bb",
      "short_sha": "f11bd34",
      "message": "Fix types (#31303)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-20T02:23:31-04:00",
      "committed_date": "2024-10-20T02:23:31-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "251b666dedde430b7767e1745e71155db8ec585d",
      "short_sha": "251b666",
      "message": "[Flight] Handle bound arguments for loaded server references (#31302)\n\nFollow up to #31300.\r\n\r\nI forgot to pass the bound arguments to the loaded function.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-20T02:12:06-04:00",
      "committed_date": "2024-10-20T02:12:06-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js"
      ]
    },
    {
      "sha": "c1e1358b2dc9848c20be43bfde248ffb90966da3",
      "short_sha": "c1e1358",
      "message": "[Flight] Align turbopack option name with webpack name (#31301)\n\nThis was renamed in #31300.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-20T00:02:48-04:00",
      "committed_date": "2024-10-20T00:02:48-04:00",
      "changed_files": [
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMEdge-test.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientEdge.js"
      ]
    },
    {
      "sha": "d49123f73f12564223c890bfa36be537de2c571d",
      "short_sha": "d49123f",
      "message": "Expose prerender() for SSG in stable (#31298)\n\nWhen we added `renderToReadableStream` we added the `allReady` helper to\r\nmake it easier to do SSG rendering but it's kind of awkward to wire up\r\nthat way. Since we're also discouraging `renderToString` in React 19 the\r\ncliff is kind of awkward. ([As noted by\r\nDocusaurus.](https://github.com/facebook/react/pull/24752#issuecomment-2178309299))\r\n\r\nThe idea of the `react-dom/static` `prerender` API was that this would\r\nbe the replacement for SSG rendering. Awkwardly this entry point\r\nactually already exists in stable but it has only `undefined` exports.\r\n\r\nSince then we've also added other useful heuristics into the `prerender`\r\nbranch that makes this really the favored and easiest to use API for the\r\nprerender (SSG/ISR) use case.\r\n\r\n`prerender` is also used for Partial Prerendering but that part is still\r\nexperimental.\r\n\r\nHowever, we can expose only the `prerender` API on `react-dom/static`\r\nwithout it returning the `postponeState`. Instead the stream is on\r\n`prelude`. The naming is a bit awkward if you don't consider resuming\r\nbut it's the same thing.\r\n\r\nIt's really just `renderToReadable` stream with automatic `allReady` and\r\nbetter heuristics for prerendering.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-19T22:33:28-04:00",
      "committed_date": "2024-10-19T22:33:28-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzStatic-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticBrowser.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticEdge.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticNode.js",
        "packages/react-dom/src/server/react-dom-server.browser.stable.js",
        "packages/react-dom/src/server/react-dom-server.edge.stable.js",
        "packages/react-dom/src/server/react-dom-server.node.stable.js"
      ]
    },
    {
      "sha": "22b2b1a05a86f599d2eea9d0419ac57db510e134",
      "short_sha": "22b2b1a",
      "message": "[Flight] Add serverModuleMap option for mapping ServerReferences (#31300)\n\nStacked on #31299.\r\n\r\nWe already have an option for resolving Client References to other\r\nClient References when consuming an RSC payload on the server.\r\n\r\nThis lets you resolve Server References on the consuming side when the\r\nenvironment where you're consuming the RSC payload also has access to\r\nthose Server References. Basically they becomes like Client References\r\nfor this consumer but for another consumer they wouldn't be.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-19T21:10:25-04:00",
      "committed_date": "2024-10-19T21:10:25-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-markup/src/ReactMarkupServer.js",
        "packages/react-noop-renderer/src/ReactNoopFlightClient.js",
        "packages/react-server-dom-esm/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-esm/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientNode.js"
      ]
    },
    {
      "sha": "39a7730b1311fb78642c36686820d8d1c79e58e4",
      "short_sha": "39a7730",
      "message": "Rename SSRManifest to ServerConsumerManifest (#31299)\n\nThis config is more generally applicable to all server-side Flight\r\nClients and not just SSR.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-19T20:45:20-04:00",
      "committed_date": "2024-10-19T20:45:20-04:00",
      "changed_files": [
        "fixtures/flight/server/global.js",
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.custom.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-bun.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-legacy.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.markup.js",
        "packages/react-server-dom-esm/src/client/ReactFlightClientConfigBundlerESM.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMEdge-test.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightClientConfigBundlerNode.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightClientConfigBundlerTurbopack.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-webpack/src/ReactFlightWebpackPlugin.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMForm-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightClientConfigBundlerNode.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightClientConfigBundlerWebpack.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientNode.js"
      ]
    },
    {
      "sha": "1839e1437f652819682f2c7970687ac19e551534",
      "short_sha": "1839e14",
      "message": "[ez] Update compiler issue template (#31297)\n\nAdd a field to specify which version of React Compiler is being used.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31297).\r\n* __->__ #31297\r\n* #31296",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-18T15:02:26-04:00",
      "committed_date": "2024-10-18T15:02:26-04:00",
      "changed_files": [
        ".github/ISSUE_TEMPLATE/compiler_bug_report.yml"
      ]
    },
    {
      "sha": "54c0edc019b97d8c08b8c2ccb552da4e5ea8a8cd",
      "short_sha": "54c0edc",
      "message": "[ci] Don't use branch name for concurrency (#31296)\n\nI happened to notice some jobs on main get canceled if another PR landed\r\nbefore the prior commit on main had finished running CI. This is not\r\ngreat for difftrain because the commit artifacts job relies on the CI\r\njobs on main finishing before it triggers. This would lead to commits\r\nbeing skipped on DiffTrain which is not great for provenance since we\r\nwant it to be a 1:1 sync.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31296).\r\n* #31297\r\n* __->__ #31296",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-18T15:02:14-04:00",
      "committed_date": "2024-10-18T15:02:14-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_rust.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "9deb36748d699bd33f9041db5559c451c54e77a9",
      "short_sha": "9deb367",
      "message": "[ci] Publish compiler weekly prereleases (#31294)\n\nAdds a new weekly job for the compiler",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-18T14:43:43-04:00",
      "committed_date": "2024-10-18T14:43:43-04:00",
      "changed_files": [
        ".github/workflows/compiler_prereleases_weekly.yml"
      ]
    },
    {
      "sha": "cdde15efe189e8bebe227b7555e7cc95ad74deab",
      "short_sha": "cdde15e",
      "message": "[compiler] InlineJSXTransform transforms jsx inside function expressions (#31282)\n\nInlineJSXTransform wasn't traversing into function expressions or object\r\nmethods, so any JSX inside such functions wouldn't have gotten inlined.\r\nThis PR updates to traverse nested functions to transform all JSX within\r\na hook or component.\r\n\r\nNote that this still doesn't transform JSX outside of components or\r\nhooks, ie in standalone render helpers.",
      "author": {
        "name": "Joseph Savona",
        "email": "6425824+josephsavona@users.noreply.github.com"
      },
      "authored_date": "2024-10-18T11:27:48-07:00",
      "committed_date": "2024-10-18T11:27:48-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/InlineJsxTransform.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.js"
      ]
    },
    {
      "sha": "915be0ef783fa1891f2627e58b2ae2a22d44b4c3",
      "short_sha": "915be0e",
      "message": "[playground] Upgrade various packages (#31293)\n\nJust some housekeeping",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-18T14:25:36-04:00",
      "committed_date": "2024-10-18T14:25:36-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        "compiler/apps/playground/__tests__/e2e/page.spec.ts",
        "compiler/apps/playground/package.json",
        "compiler/apps/playground/yarn.lock"
      ]
    },
    {
      "sha": "61383303d38d8b0c23b700e8c0a7d3b6fd51847e",
      "short_sha": "6138330",
      "message": "[playground] Remove unnecessary fs package (#31292)\n\nSeems like this was accidentally added.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31292).\r\n* #31293\r\n* __->__ #31292\r\n* #31291",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-18T14:09:30-04:00",
      "committed_date": "2024-10-18T14:09:30-04:00",
      "changed_files": [
        "compiler/apps/playground/package.json",
        "compiler/apps/playground/yarn.lock"
      ]
    },
    {
      "sha": "ee6ca23b248a7bdcd973101bda86723ed3c46390",
      "short_sha": "ee6ca23",
      "message": "[playground] Upgrade to Next 15 (#31291)\n\nThis was previously blocked because the playground was a part of the\r\ncompiler's yarn workspace and there was some funky hoisting going on.\r\nNow that we are decoupled we can upgrade to Next 15, which hopefully\r\nshould improve build times.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31291).\r\n* #31293\r\n* #31292\r\n* __->__ #31291",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-18T14:09:07-04:00",
      "committed_date": "2024-10-18T14:09:07-04:00",
      "changed_files": [
        "compiler/apps/playground/babel.config.js",
        "compiler/apps/playground/next-env.d.ts",
        "compiler/apps/playground/next.config.js",
        "compiler/apps/playground/package.json",
        "compiler/apps/playground/yarn.lock"
      ]
    },
    {
      "sha": "d57217544aa2e98ff6370b8bf5f6aafb253fa642",
      "short_sha": "d572175",
      "message": "[fixture] Update compiler to use latest package (#31289)\n\nPins the compiler to the latest version in our fixture app.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-18T13:32:26-04:00",
      "committed_date": "2024-10-18T13:32:26-04:00",
      "changed_files": [
        "compiler/fixtures/runtime-compat/app-18/package.json",
        "compiler/fixtures/runtime-compat/app-18/yarn.lock",
        "compiler/fixtures/runtime-compat/app-19/package.json",
        "compiler/fixtures/runtime-compat/app-19/yarn.lock",
        "compiler/fixtures/runtime-compat/lib/package.json",
        "compiler/fixtures/runtime-compat/lib/yarn.lock"
      ]
    },
    {
      "sha": "35b63ca90db4d5abe3bba6e5a47466d2c7b5a836",
      "short_sha": "35b63ca",
      "message": "[ci:compiler] Only add latest tag to non-experimental (#31288)\n\nIt turns out npm sets the latest tag by default so simply removing it\r\ndidn't change the previous behavior.\r\n\r\nThe `latest` tag is typically used for stable release versions, and\r\nother tags for unstable versions such as prereleases. Since the compiler\r\nis still in prerelease, let's set the latest tag only for\r\nnon-experimental releases to help signal which version is the safest to\r\ntry out.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31288).\r\n* #31289\r\n* __->__ #31288",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-18T13:24:30-04:00",
      "committed_date": "2024-10-18T13:24:30-04:00",
      "changed_files": [
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "b8ae38f88b70f8a0ea96421a4355266aafefee7f",
      "short_sha": "b8ae38f",
      "message": "Audit try/finally around console patching (#31286)\n\nOtherwise if something errors they can be left patched.\r\n\r\n[Review without\r\nwhitespace](https://github.com/facebook/react/pull/31286/files?w=1)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-18T12:05:20-04:00",
      "committed_date": "2024-10-18T12:05:20-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/shared/DevToolsComponentStackFrame.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/shared/ReactComponentStackFrame.js"
      ]
    },
    {
      "sha": "1ce58ddd672ea67631bc52e85be32962b24df6ae",
      "short_sha": "1ce58dd",
      "message": "[ci] Don't auto push to latest tag (#31284)\n\nBy default let's stop pushing to the latest tag now that we have a\r\nnon-experimental release.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-18T00:20:14-04:00",
      "committed_date": "2024-10-18T00:20:14-04:00",
      "changed_files": [
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "25cac220d6b6576e50ec52cf87801ad036fa7bc9",
      "short_sha": "25cac22",
      "message": "[ci] Allow passing various params to compiler publish script (#31283)\n\nAllow passing in a few more inputs when manually publishing.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-17T18:12:58-04:00",
      "committed_date": "2024-10-17T18:12:58-04:00",
      "changed_files": [
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_prereleases_manual.yml",
        ".github/workflows/compiler_prereleases_nightly.yml"
      ]
    },
    {
      "sha": "9c60cbe3d1b95d531ddcd64e0a6730db640c934e",
      "short_sha": "9c60cbe",
      "message": "[compiler] Clean up publish script (#31278)\n\nFew small tweaks to make it easier to run adhoc publishes\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31278).\r\n* #31283\r\n* __->__ #31278",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-17T18:02:41-04:00",
      "committed_date": "2024-10-17T18:02:41-04:00",
      "changed_files": [
        ".github/workflows/compiler_prereleases.yml",
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "c91b3b090ad406fcd103483de0abb6adf44b6f48",
      "short_sha": "c91b3b0",
      "message": "JSX Outlining (#30956)\n\nCurrently, the react compiler can not compile within callbacks which can\r\npotentially cause over rendering. Consider this example:\r\n```jsx\r\nfunction Component(countries, onDelete) {\r\n  const name = useFoo();\r\n  return countries.map(() => {\r\n    return (\r\n      <Foo>\r\n        <Bar name={name}/>\r\n        <Baz onclick={onDelete} />\r\n      </Foo>\r\n    );\r\n  });\r\n}\r\n```\r\n\r\nIn this case, there's no memoization of the nested jsx elements. But\r\ninstead if we were to manually refactor the nested jsx into separate\r\ncomponent like this:\r\n```jsx\r\nfunction Component(countries, onDelete) {\r\n  const name = useFoo();\r\n  return countries.map(() => {\r\n    return <Temp name={name} onDelete={onDelete} />;\r\n  });\r\n}\r\n\r\nfunction Temp({ name, onDelete }) {\r\n  return (\r\n    <Foo>\r\n      <Bar name={name} />\r\n      <Baz onclick={onDelete} />\r\n    </Foo>\r\n  );\r\n}\r\n\r\n```\r\n\r\nThe compiler can now optimise both these components:\r\n```jsx\r\nfunction Component(countries, onDelete) {\r\n  const $ = _c(4);\r\n  const name = useFoo();\r\n  let t0;\r\n  if ($[0] !== name || $[1] !== onDelete || $[2] !== countries) {\r\n    t0 = countries.map(() => <Temp name={name} onDelete={onDelete} />);\r\n    $[0] = name;\r\n    $[1] = onDelete;\r\n    $[2] = countries;\r\n    $[3] = t0;\r\n  } else {\r\n    t0 = $[3];\r\n  }\r\n  return t0;\r\n}\r\n\r\nfunction Temp(t0) {\r\n  const $ = _c(7);\r\n  const { name, onDelete } = t0;\r\n  let t1;\r\n  if ($[0] !== name) {\r\n    t1 = <Bar name={name} />;\r\n    $[0] = name;\r\n    $[1] = t1;\r\n  } else {\r\n    t1 = $[1];\r\n  }\r\n  let t2;\r\n  if ($[2] !== onDelete) {\r\n    t2 = <Baz onclick={onDelete} />;\r\n    $[2] = onDelete;\r\n    $[3] = t2;\r\n  } else {\r\n    t2 = $[3];\r\n  }\r\n  let t3;\r\n  if ($[4] !== t1 || $[5] !== t2) {\r\n    t3 = (\r\n      <Foo>\r\n        {t1}\r\n        {t2}\r\n      </Foo>\r\n    );\r\n    $[4] = t1;\r\n    $[5] = t2;\r\n    $[6] = t3;\r\n  } else {\r\n    t3 = $[6];\r\n  }\r\n  return t3;\r\n}\r\n```\r\n\r\nNow, when `countries` is updated by adding one single value, only the\r\nnewly added value is re-rendered and not the entire list. Rather than\r\nhaving to do this manually, this PR teaches the react compiler to do\r\nthis transformation.\r\n\r\nThis PR adds a new pass (`OutlineJsx`) to capture nested jsx statements\r\nand outline them in a separate component. This newly outlined component\r\ncan then by memoized by the compiler, giving us more fine grained\r\nrendering.",
      "author": {
        "name": "Sathya Gunasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-10-17T18:15:32+01:00",
      "committed_date": "2024-10-17T18:15:32+01:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OutlineJsx.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-child-stored-in-id.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-child-stored-in-id.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-jsx-stored-in-id.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-jsx-stored-in-id.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-separate-nested.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-separate-nested.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-simple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/jsx-outlining-simple.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.jsx-outlining-children.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.jsx-outlining-children.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.jsx-outlining-duplicate-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.jsx-outlining-duplicate-prop.js"
      ]
    },
    {
      "sha": "bf7e210cb5672685bfe992a3b253880f5a3d47f5",
      "short_sha": "bf7e210",
      "message": "tests[react-devtools]: added tests for Compiler integration (#31241)\n\nAdds tests for Compiler integration.\r\n\r\nThis includes:\r\n- Tests against Compiler from source.\r\n- Versioned (18.2 - <19) tests against Compiler from npm.\r\n\r\nFor tests against React 18.2, I had to download `react-compiler-runtime`\r\nfrom npm and put it to `react/compiler-runtime.js`.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-17T09:02:41+01:00",
      "committed_date": "2024-10-17T09:02:41+01:00",
      "changed_files": [
        ".github/workflows/devtools_regression_tests.yml",
        "packages/react-devtools-shared/src/__tests__/compiler-integration-test.js",
        "scripts/ci/download_devtools_regression_build.js"
      ]
    },
    {
      "sha": "3ed64f8232d0709f93f096c6fb9f7a16865b0ff5",
      "short_sha": "3ed64f8",
      "message": "[ez] Update references to 'forget' in react-compiler-runtime (#31277)\n\nUpdates the runtime to reference React Compiler instead of Forget.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-16T18:44:50-04:00",
      "committed_date": "2024-10-16T18:44:50-04:00",
      "changed_files": [
        "compiler/packages/react-compiler-runtime/src/index.ts"
      ]
    },
    {
      "sha": "a3d9ea05bf01f3c3d7aedc2d938c581ad11fd14a",
      "short_sha": "a3d9ea0",
      "message": "Delete `__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` from React Native Renderer (#31276)\n\n## Summary\r\n\r\nThe React Native Renderer exports a\r\n`__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` property with a\r\nsingle method that has no remaining call sites:\r\n`computeComponentStackForErrorReporting`\r\n\r\nThis PR cleans up this unused export.\r\n\r\n## How did you test this change?\r\n\r\n```\r\n$ yarn\r\n$ yarn flow fabric\r\n$ yarn test\r\n```",
      "author": {
        "name": "Timothy Yung",
        "email": "yungsters@meta.com"
      },
      "authored_date": "2024-10-16T11:19:01-07:00",
      "committed_date": "2024-10-16T11:19:01-07:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeRenderer.js",
        "packages/react-native-renderer/src/ReactNativeTypes.js",
        "packages/react-native-renderer/src/__tests__/ReactNativeError-test.internal.js"
      ]
    },
    {
      "sha": "77b637d61200eef4dca4cbe4258da358d6337c7b",
      "short_sha": "77b637d",
      "message": "Add Bridge types for Fusebox (#31274)\n\nNew types used by Fusebox\r\nhttps://github.com/facebookexperimental/rn-chrome-devtools-frontend/pull/117",
      "author": {
        "name": "Edmond Chui",
        "email": "1967998+EdmondChuiHW@users.noreply.github.com"
      },
      "authored_date": "2024-10-16T16:45:24+01:00",
      "committed_date": "2024-10-16T16:45:24+01:00",
      "changed_files": [
        "packages/react-devtools-fusebox/src/frontend.d.ts"
      ]
    },
    {
      "sha": "be94b108264e30873d4b679771e07ce14491e413",
      "short_sha": "be94b10",
      "message": "[Flight] Enable sync stack traces for errors and console replay (#31270)\n\nThis was gated behind `enableOwnerStacks` since they share some code\r\npaths but it's really part of `enableServerComponentLogs`.\r\n\r\nThis just includes the server-side regular stack on Error/replayed logs\r\nbut doesn't use console.createTask and doesn't include owner stacks.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-16T10:57:08-04:00",
      "committed_date": "2024-10-16T10:57:08-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js"
      ]
    },
    {
      "sha": "6c4bbc783286bf6eebd9927cb52e8fec5ad4dd74",
      "short_sha": "6c4bbc7",
      "message": "[Re-land] Make prerendering always non-blocking (#31268)\n\nFollows https://github.com/facebook/react/pull/31238\r\n\r\n___\r\n\r\nThis is a partial re-land of\r\nhttps://github.com/facebook/react/pull/31056. We saw breakages surface\r\nafter the original land and had to revert. Now that they've been fixed,\r\nlet's try this again. This time we'll split up the commits to give us\r\nmore control of testing and rollout internally.\r\n\r\nOriginal PR: https://github.com/facebook/react/pull/31056\r\nOriginal Commit:\r\nhttps://github.com/facebook/react/pull/31056/commits/4c71025d8d1bd46344ad793e7ed3049d24f7395a\r\nRevert PR: https://github.com/facebook/react/pull/31080\r\n\r\nCommit description:\r\n\r\n> When a synchronous update suspends, and we prerender the siblings, the\r\nprerendering should be non-blocking so that we can immediately restart\r\nonce the data arrives.\r\n>\r\n> This happens automatically when there's a Suspense boundary, because\r\nwe immediately commit the boundary and then proceed to a Retry render,\r\nwhich are always concurrent. When there's not a Suspense boundary, there\r\nis no Retry, so we need to take care to switch from the synchronous work\r\nloop to the concurrent one, to enable time slicing.\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-10-15T16:47:02-04:00",
      "committed_date": "2024-10-15T16:47:02-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-reconciler/src/__tests__/ReactSiblingPrerendering-test.js"
      ]
    },
    {
      "sha": "838258144652ab2ef0cbe54d03e9bdd454348d48",
      "short_sha": "8382581",
      "message": "[ESLint] Add test for rejected `useId` in async Components (#31208)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-10-15T17:17:41+02:00",
      "committed_date": "2024-10-15T17:17:41+02:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js"
      ]
    },
    {
      "sha": "c7c68ef842639f8535942b6247ef758221d289fb",
      "short_sha": "c7c68ef",
      "message": "React DevTools 6.0.0 -> 6.0.1 (#31263)\n\nChanges in this release:\r\n\r\n* Fix React Compiler badging ([poteto](https://github.com/poteto) in\r\n[#31196](https://github.com/facebook/react/pull/31196))\r\n* fix[react-devtools]: fixed timeline profiler tests\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31261](https://github.com/facebook/react/pull/31261))\r\n* fix[react-devtools]: record timeline data only when supported\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31154](https://github.com/facebook/react/pull/31154))\r\n* refactor[react-devtools]: flatten reload and profile config\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31132](https://github.com/facebook/react/pull/31132))\r\n* fix[react-devtools]: remove all listeners when Agent is shutdown\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31151](https://github.com/facebook/react/pull/31151))\r\n* fix[react-devtools]: removed redundant startProfiling call\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31131](https://github.com/facebook/react/pull/31131))\r\n* refactor[react-devtools/fiber/renderer]: optimize durations resolution\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31118](https://github.com/facebook/react/pull/31118))\r\n* fix[react-devtools]: update profiling status before receiving response\r\nfrom backend ([hoxyq](https://github.com/hoxyq) in\r\n[#31117](https://github.com/facebook/react/pull/31117))\r\n* fix[react-devtools]: wrap key string in preformatted text html element\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31153](https://github.com/facebook/react/pull/31153))\r\n* chore[react-devtools]: drop legacy context tests\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31059](https://github.com/facebook/react/pull/31059))\r\n* chore[react-devtools]: add legacy mode error message to the ignore\r\nlist for tests ([hoxyq](https://github.com/hoxyq) in\r\n[#31060](https://github.com/facebook/react/pull/31060))\r\n* fix[react-devtools]: request hook initialization inside http server\r\nresponse ([hoxyq](https://github.com/hoxyq) in\r\n[#31102](https://github.com/facebook/react/pull/31102))\r\n* [Flight] Serialize Server Components Props in DEV\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#31105](https://github.com/facebook/react/pull/31105))\r\n* Add: reload to profile for Fusebox\r\n([EdmondChuiHW](https://github.com/EdmondChuiHW) in\r\n[#31021](https://github.com/facebook/react/pull/31021))\r\n* refactor: allow custom impl of backend realod-to-profile support check\r\n([EdmondChuiHW](https://github.com/EdmondChuiHW) in\r\n[#31048](https://github.com/facebook/react/pull/31048))\r\n* fix: use public instance in Fiber renderer and expose it from\r\ngetInspectorDataForViewAtPoint ([hoxyq](https://github.com/hoxyq) in\r\n[#31068](https://github.com/facebook/react/pull/31068))",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-15T14:15:26+01:00",
      "committed_date": "2024-10-15T14:15:26+01:00",
      "changed_files": [
        "packages/react-devtools-core/package.json",
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-inline/package.json",
        "packages/react-devtools-timeline/package.json",
        "packages/react-devtools/CHANGELOG.md",
        "packages/react-devtools/package.json"
      ]
    },
    {
      "sha": "9806a4b0d4e659863f3f04d32da50f545c7199a8",
      "short_sha": "9806a4b",
      "message": "[DevTools] Fix React Compiler badging (#31196)\n\nIn #31140 we switched over the uMC polyfill to use memo instead of state\r\nsince memo would FastRefresh properly. However this busted devtools'\r\nbadging of compiled components; this PR fixes it.\r\n\r\nTODO: tests\r\nCo-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-15T07:53:45-04:00",
      "committed_date": "2024-10-15T12:53:45+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "ec2bf022450107a77cc2850ec96b9173fc6f40eb",
      "short_sha": "ec2bf02",
      "message": "fix[react-devtools]: fixed timeline profiler tests (#31261)\n\nFixes tests against React 18 after\r\nhttps://github.com/facebook/react/pull/31154:\r\n- Set `supportsTimeline` to true for `Store`.\r\n- Execute `store.profilerStore.startProfiling` after `legacyRender`\r\nimport, because this is where `react-dom` is imported and renderer is\r\nregistered. We don't yet propagate `isProfiling` flag to newly\r\nregistered renderers, when profiling already started see:\r\n\r\nhttps://github.com/facebook/react/blob/d5bba18b5d81f234657586865248c5b6849599cd/packages/react-devtools-shared/src/hook.js#L203-L204",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-15T12:46:05+01:00",
      "committed_date": "2024-10-15T12:46:05+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/TimelineProfiler-test.js",
        "packages/react-devtools-shared/src/__tests__/setupTests.js"
      ]
    },
    {
      "sha": "13411e4589f3d999727c5322781e2dd7bef3b256",
      "short_sha": "13411e4",
      "message": "[Re-land] Make prerendering always non-blocking: Add missing feature flag checks (#31238)\n\nThis is a partial re-land of\r\nhttps://github.com/facebook/react/pull/31056. We saw breakages surface\r\nafter the original land and had to revert. Now that they've been fixed,\r\nlet's try this again. This time we'll split up the commits to give us\r\nmore control of testing and rollout internally.\r\n\r\nOriginal PR: https://github.com/facebook/react/pull/31056\r\nOriginal Commit:\r\nhttps://github.com/facebook/react/pull/31056/commits/2a9fb445d98b60a97f3642cec2ff22469727e0c7\r\nRevert PR: https://github.com/facebook/react/pull/31080\r\n\r\nCommit description:\r\n```\r\nNeglected to wrap some places in the enableSiblingPrerendering flag.\r\n```\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-10-14T14:12:23-04:00",
      "committed_date": "2024-10-14T14:12:23-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberLane.js"
      ]
    },
    {
      "sha": "6cf8518505b198c58c950976174b1642760d48ee",
      "short_sha": "6cf8518",
      "message": "[ci] Specify limited concurrency for PR jobs (#31240)\n\nThere was a concurrency setting we hadn't enabled on jobs that are\r\nprimarily triggered for PRs. This meant that every update to the PR\r\nwould trigger new CI jobs without canceling any ones already in flight,\r\nwhich can greatly slow down CI due to the number of jobs that need to\r\nrun.\r\n\r\nThis PR adds concurrency [based on the workflow name and PR number or\r\nhead\r\nref.](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/control-the-concurrency-of-workflows-and-jobs)\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31240).\r\n* __->__ #31240\r\n* #31239",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-14T12:07:24-04:00",
      "committed_date": "2024-10-14T12:07:24-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_rust.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "cbcc1d2027c1d77abdf934b7f5e645882ffa4195",
      "short_sha": "cbcc1d2",
      "message": "[ci] Consistent cache names (#31239)\n\nMakes cache names more descriptive and consistent for CI, so it's easier\r\nto tell which cache is used for what purpose.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31239).\r\n* #31240\r\n* __->__ #31239",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-14T12:07:08-04:00",
      "committed_date": "2024-10-14T12:07:08-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_commit_artifacts.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "b60286b8349e79f025103b9d106458ed667d9914",
      "short_sha": "b60286b",
      "message": "[compiler] Use consistent version hash for npm (#31177)\n\nModifies our release script to use the same version hash (the hashed\r\n`compiler` directory) for all compiler packages to keep them consistent.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-14T11:20:47-04:00",
      "committed_date": "2024-10-14T11:20:47-04:00",
      "changed_files": [
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "75dd053b5e83e8ae20e9f771bca7b95dba4ff881",
      "short_sha": "75dd053",
      "message": "[string-refs] make disableStringRefs a dynamic www flag (#31175)",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-10-14T10:13:40-04:00",
      "committed_date": "2024-10-14T10:13:40-04:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "cd22717c274061fd7dc13cd6eaff10e6a3946508",
      "short_sha": "cd22717",
      "message": "[Flight] Also don't cut off type and key (#31209)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-13T12:57:50-04:00",
      "committed_date": "2024-10-13T18:57:50+02:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "147374d71a73f3f63ff6532dc081d1175f783352",
      "short_sha": "147374d",
      "message": "[compiler] Kill markReactiveIdentifier and friends\n\nSummary:\nWith the previous PR we no longer need to mark identifiers as reactive in contexts where we don't have places. We already deleted most uses of markReactiveId; the last case was to track identifiers through loadlocals etc -- but we already use a disjoint alias map that accounts for loadlocals when setting reactivity.\n\nghstack-source-id: 69ce0a78b0729da3fe9d08177bf7d827af5325fb\nPull Request resolved: https://github.com/facebook/react/pull/31178",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-10-11T16:19:45-07:00",
      "committed_date": "2024-10-11T17:26:57-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReactivePlaces.ts"
      ]
    },
    {
      "sha": "6cf5bd90135823d249fb5270896f238d04ec296c",
      "short_sha": "6cf5bd9",
      "message": "[compiler] Allow refs to be lazily initialized during render\n\nSummary:\nThe official guidance for useRef notes an exception to the rule that refs cannot be accessed during render: to avoid recreating the ref's contents, you can test that the ref is uninitialized and then initialize it using an if statement:\n\n```\nif (ref.current == null) {\n  ref.current = SomeExpensiveOperation()\n}\n```\n\nThe compiler didn't recognize this exception, however, leading to code that obeyed all the official guidance for refs being rejected by the compiler. This PR fixes that, by extending the ref validation machinery with an awareness of guard operations that allow lazy initialization. We now understand `== null` and similar operations, when applied to a ref and consumed by an if terminal, as marking the consequent of the if as a block in which the ref can be safely written to. In order to do so we need to create a notion of ref ids, which link different usages of the same ref via both the ref and the ref value.\n\nghstack-source-id: d2729274f351e1eb0268f28f629fa4c2568ebc4d\nPull Request resolved: https://github.com/facebook/react/pull/31188",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-10-11T16:14:32-07:00",
      "committed_date": "2024-10-11T16:14:33-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-initialization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-initialization.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-arbitrary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-arbitrary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-call-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-call-2.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-call.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-call.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-linear.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-linear.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-nonif.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-nonif.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-other.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-other.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-post-access-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-post-access-2.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-post-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.ref-initialization-post-access.js"
      ]
    },
    {
      "sha": "9c525ea44aef36b614c8dac2f351ebec0917606c",
      "short_sha": "9c525ea",
      "message": "Bump micromatch from 4.0.5 to 4.0.8 in /compiler (#31186)\n\nBumps [micromatch](https://github.com/micromatch/micromatch) from 4.0.5\r\nto 4.0.8.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/micromatch/micromatch/releases\">micromatch's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>4.0.8</h2>\r\n<p>Ultimate release that fixes both CVE-2024-4067 and CVE-2024-4068. We\r\nconsider the issues low-priority, so even if you see automated scanners\r\nsaying otherwise, don't be scared.</p>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/micromatch/micromatch/blob/master/CHANGELOG.md\">micromatch's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h2>[4.0.8] - 2024-08-22</h2>\r\n<ul>\r\n<li>backported CVE-2024-4067 fix (from v4.0.6) over to 4.x branch</li>\r\n</ul>\r\n<h2>[4.0.7] - 2024-05-22</h2>\r\n<ul>\r\n<li>this is basically v4.0.5, with some README updates</li>\r\n<li><strong>it is vulnerable to CVE-2024-4067</strong></li>\r\n<li>Updated braces to v3.0.3 to avoid CVE-2024-4068</li>\r\n<li>does NOT break API compatibility</li>\r\n</ul>\r\n<h2>[4.0.6] - 2024-05-21</h2>\r\n<ul>\r\n<li>Added <code>hasBraces</code> to check if a pattern contains\r\nbraces.</li>\r\n<li>Fixes CVE-2024-4067</li>\r\n<li><strong>BREAKS API COMPATIBILITY</strong></li>\r\n<li>Should be labeled as a major release, but it's not.</li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/8bd704ec0d9894693d35da425d827819916be920\"><code>8bd704e</code></a>\r\n4.0.8</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/a0e68416a44da10f3e4e30845ab95af4fd286d5a\"><code>a0e6841</code></a>\r\nrun verb to generate README documentation</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/4ec288484f6e8cccf597ad3d43529c31d0f7a02a\"><code>4ec2884</code></a>\r\nMerge branch 'v4' into hauserkristof-feature/v4.0.8</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/03aa8052171e878897eee5d7bb2ae0ae83ec2ade\"><code>03aa805</code></a>\r\nMerge pull request <a\r\nhref=\"https://redirect.github.com/micromatch/micromatch/issues/266\">#266</a>\r\nfrom hauserkristof/feature/v4.0.8</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/814f5f70efcd100ca9d29198867812a3d6ab91a8\"><code>814f5f7</code></a>\r\nlint</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/67fcce6a1077c2faf5ad0c5f998fa70202cc5dae\"><code>67fcce6</code></a>\r\nfix: CHANGELOG about braces &amp; CVE-2024-4068, v4.0.5</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/113f2e3fa7cb30b429eda7c4c38475a8e8ba1b30\"><code>113f2e3</code></a>\r\nfix: CVE numbers in CHANGELOG</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/d9dbd9a266686f44afb38da26fe016f96d1ec04f\"><code>d9dbd9a</code></a>\r\nfeat: updated CHANGELOG</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/2ab13157f416679f54e3a32b1425e184bd16749e\"><code>2ab1315</code></a>\r\nfix: use actions/setup-node@v4</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/1406ea38f3e24b29f4d4f46908d5cffcb3e6c4ce\"><code>1406ea3</code></a>\r\nfeat: rework test to work on macos with node 10,12 and 14</li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/micromatch/micromatch/compare/4.0.5...4.0.8\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=micromatch&package-manager=npm_and_yarn&previous-version=4.0.5&new-version=4.0.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
      "author": {
        "name": "dependabot[bot]",
        "email": "49699333+dependabot[bot]@users.noreply.github.com"
      },
      "authored_date": "2024-10-11T16:29:34-04:00",
      "committed_date": "2024-10-11T16:29:34-04:00",
      "changed_files": [
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "2011074ab8fc6182a2ad0af2766409c1e15f7fc4",
      "short_sha": "2011074",
      "message": "Bump json5 from 2.2.1 to 2.2.3 in /compiler (#31185)\n\nBumps [json5](https://github.com/json5/json5) from 2.2.1 to 2.2.3.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/json5/json5/releases\">json5's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>v2.2.3</h2>\r\n<ul>\r\n<li>Fix: json5@2.2.3 is now the 'latest' release according to npm\r\ninstead of v1.0.2. (<a\r\nhref=\"https://redirect.github.com/json5/json5/issues/299\">#299</a>)</li>\r\n</ul>\r\n<h2>v2.2.2</h2>\r\n<ul>\r\n<li>Fix: Properties with the name <code>__proto__</code> are added to\r\nobjects and arrays.\r\n(<a href=\"https://redirect.github.com/json5/json5/issues/199\">#199</a>)\r\nThis also fixes a prototype pollution vulnerability reported by\r\nJonathan Gregson! (<a\r\nhref=\"https://redirect.github.com/json5/json5/issues/295\">#295</a>).</li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/json5/json5/blob/main/CHANGELOG.md\">json5's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h3>v2.2.3 [<a\r\nhref=\"https://github.com/json5/json5/tree/v2.2.3\">code</a>, <a\r\nhref=\"https://github.com/json5/json5/compare/v2.2.2...v2.2.3\">diff</a>]</h3>\r\n<ul>\r\n<li>Fix: json5@2.2.3 is now the 'latest' release according to npm\r\ninstead of\r\nv1.0.2. (<a\r\nhref=\"https://redirect.github.com/json5/json5/issues/299\">#299</a>)</li>\r\n</ul>\r\n<h3>v2.2.2 [<a\r\nhref=\"https://github.com/json5/json5/tree/v2.2.2\">code</a>, <a\r\nhref=\"https://github.com/json5/json5/compare/v2.2.1...v2.2.2\">diff</a>]</h3>\r\n<ul>\r\n<li>Fix: Properties with the name <code>__proto__</code> are added to\r\nobjects and arrays.\r\n(<a href=\"https://redirect.github.com/json5/json5/issues/199\">#199</a>)\r\nThis also fixes a prototype pollution vulnerability reported by\r\nJonathan Gregson! (<a\r\nhref=\"https://redirect.github.com/json5/json5/issues/295\">#295</a>).</li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/c3a75242772a5026a49c4017a16d9b3543b62776\"><code>c3a7524</code></a>\r\n2.2.3</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/94fd06d82eeed225fa172f6fb2ca27375cbd2e39\"><code>94fd06d</code></a>\r\ndocs: update CHANGELOG for v2.2.3</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/3b8cebf0c474a8b20c78bd75c89cca0c4dce84ce\"><code>3b8cebf</code></a>\r\ndocs(security): use GitHub security advisories</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/f0fd9e194dde282caff114a110f4fac635f3a62c\"><code>f0fd9e1</code></a>\r\ndocs: publish a security policy</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/6a91a05fffeda16ff6b3b5008b6b340d42d31ec0\"><code>6a91a05</code></a>\r\ndocs(template): bug -&gt; bug report</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/14f8cb186e8abdfaccf6527171da7b1224374650\"><code>14f8cb1</code></a>\r\n2.2.2</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/10cc7ca9169b59c5e0f5afc03dbd870cd06bcc46\"><code>10cc7ca</code></a>\r\ndocs: update CHANGELOG for v2.2.2</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8\"><code>7774c10</code></a>\r\nfix: add <strong>proto</strong> to objects and arrays</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/edde30abd8b22facf2c06c72586b9f6edf12700d\"><code>edde30a</code></a>\r\nReadme: slight tweak to intro</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/97286f8bd542c89dcee096bc05dd28ed2dfc1e16\"><code>97286f8</code></a>\r\nImprove example in readme</li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/json5/json5/compare/v2.2.1...v2.2.3\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=json5&package-manager=npm_and_yarn&previous-version=2.2.1&new-version=2.2.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
      "author": {
        "name": "dependabot[bot]",
        "email": "49699333+dependabot[bot]@users.noreply.github.com"
      },
      "authored_date": "2024-10-11T16:29:18-04:00",
      "committed_date": "2024-10-11T16:29:18-04:00",
      "changed_files": [
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "09111202d617477b63507b41e8b6c3101b4afd87",
      "short_sha": "0911120",
      "message": "eslint-plugin-react-hooks: Release 5.0.0 (#31176)\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-10-11T14:51:59+02:00",
      "committed_date": "2024-10-11T14:51:59+02:00",
      "changed_files": [
        "packages/eslint-plugin-react-hooks/CHANGELOG.md"
      ]
    },
    {
      "sha": "5636fad840942cfea80301d91e931a50c6370d19",
      "short_sha": "5636fad",
      "message": "[string-refs] log string ref from prod (#31161)\n\nIf passed as a feature flag, this calls the configured function when a\r\nstring ref is used even from prod code to find the last usages.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-10-10T18:12:47-04:00",
      "committed_date": "2024-10-10T18:12:47-04:00",
      "changed_files": [
        "packages/react/src/jsx/ReactJSXElement.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js",
        "scripts/flags/flags.js"
      ]
    },
    {
      "sha": "7b7fac073d1473df839a1caf8d0444c32bf4de49",
      "short_sha": "7b7fac0",
      "message": "[compiler] Represent phis with places rather than identifiers\n\nSummary:\nThe fact that phis are identifiers rather than places is unfortunate in a few cases. In some later analyses, we might wish to know whether a phi is reactive, but we don't have an easy way to do that currently.\n\nMost of the changes here is just replacing phi.id with phi.place.identifier and such. Interesting bits are EnterSSA (several functions now take places rather than identifiers, and InferReactivePlaces now needs to mark places as reactive explicitly.\n\nghstack-source-id: 5f4fb396cd86b421008c37832a5735ac40f8806e\nPull Request resolved: https://github.com/facebook/react/pull/31171",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-10-10T12:41:03-07:00",
      "committed_date": "2024-10-10T12:41:03-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/AssertConsistentIdentifiers.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/AssertValidMutableRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/MergeConsecutiveBlocks.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferAliasForPhis.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutableLifetimes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReactivePlaces.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/ConstantPropagation.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/DeadCodeElimination.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/PruneMaybeThrows.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/InferReactiveScopeVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/SSA/EliminateRedundantPhi.ts",
        "compiler/packages/babel-plugin-react-compiler/src/SSA/EnterSSA.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/PropagatePhiTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateHooksUsage.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts"
      ]
    },
    {
      "sha": "70fb1363912a35fc59c1bf648b963c3a0b719b97",
      "short_sha": "70fb136",
      "message": "Fix limit without owner stacks (#31179)\n\nMove out of gate.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-10T14:52:33-04:00",
      "committed_date": "2024-10-10T14:52:33-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "fbfe37ee4010d36dad795d9144bb88fbeb8e1419",
      "short_sha": "fbfe37e",
      "message": "[compiler] Test fixture: non-reactive phi creates 'dangling ref' scope (#31103)",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-10-10T12:23:44-04:00",
      "committed_date": "2024-10-10T12:23:44-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-phi-as-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-phi-as-dependency.tsx",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "77f438931f3da3bfe3dff91825737f06f2637f79",
      "short_sha": "77f4389",
      "message": "[compiler] Consume compiled lib in react 19 app (#31167)\n\nit works\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31167).\r\n* __->__ #31167\r\n* #31166\r\n* #31165",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-10T11:40:06-04:00",
      "committed_date": "2024-10-10T11:40:06-04:00",
      "changed_files": [
        "compiler/fixtures/runtime-compat/app-19/package.json",
        "compiler/fixtures/runtime-compat/app-19/src/App.tsx",
        "compiler/fixtures/runtime-compat/app-19/tsconfig.app.tsbuildinfo",
        "compiler/fixtures/runtime-compat/app-19/tsconfig.node.tsbuildinfo",
        "compiler/fixtures/runtime-compat/app-19/vite.config.ts",
        "compiler/fixtures/runtime-compat/app-19/yarn.lock"
      ]
    },
    {
      "sha": "0a1fdeee9ed6d93e2731ce7cc3957a75ce6a6da7",
      "short_sha": "0a1fdee",
      "message": "[compiler] Consume compiled lib in react 18 app (#31166)\n\n`yarn dev` doesn't work quite correctly because of an outdated\r\nassumption in vite-plugin-react, I have a [PR\r\nopen](https://github.com/vitejs/vite-plugin-react/pull/374) to address.\r\n\r\nHowever `yarn build` and `yarn preview` does work as expected.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31166).\r\n* #31167\r\n* __->__ #31166\r\n* #31165",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-10T11:39:54-04:00",
      "committed_date": "2024-10-10T11:39:54-04:00",
      "changed_files": [
        "compiler/fixtures/runtime-compat/app-18/package.json",
        "compiler/fixtures/runtime-compat/app-18/src/App.tsx",
        "compiler/fixtures/runtime-compat/app-18/tsconfig.app.tsbuildinfo",
        "compiler/fixtures/runtime-compat/app-18/tsconfig.node.tsbuildinfo",
        "compiler/fixtures/runtime-compat/app-18/vite.config.ts",
        "compiler/fixtures/runtime-compat/app-18/yarn.lock"
      ]
    },
    {
      "sha": "eb0e265cd9dbf3ebcabac52664beefdf64389ad0",
      "short_sha": "eb0e265",
      "message": "[compiler] Compile lib (#31165)\n\nAdd and compile a simple hook with rollup and babel.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31165).\r\n* #31167\r\n* #31166\r\n* __->__ #31165",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-10T11:39:42-04:00",
      "committed_date": "2024-10-10T11:39:42-04:00",
      "changed_files": [
        "compiler/fixtures/runtime-compat/lib/babel.config.js",
        "compiler/fixtures/runtime-compat/lib/index.js",
        "compiler/fixtures/runtime-compat/lib/package.json",
        "compiler/fixtures/runtime-compat/lib/rollup.config.js",
        "compiler/fixtures/runtime-compat/lib/yarn.lock"
      ]
    },
    {
      "sha": "2ef407937b724a3af5b8ca4d082ecee5005d731b",
      "short_sha": "2ef4079",
      "message": "[compiler] Scaffold fixture apps (#31164)\n\nScaffold empty apps to consume the fixture lib.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31164).\r\n* #31167\r\n* #31166\r\n* #31165\r\n* __->__ #31164\r\n* #31148\r\n* #31168",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-10T11:33:02-04:00",
      "committed_date": "2024-10-10T11:33:02-04:00",
      "changed_files": [
        "compiler/fixtures/runtime-compat/app-18/.gitignore",
        "compiler/fixtures/runtime-compat/app-18/README.md",
        "compiler/fixtures/runtime-compat/app-18/eslint.config.js",
        "compiler/fixtures/runtime-compat/app-18/index.html",
        "compiler/fixtures/runtime-compat/app-18/package.json",
        "compiler/fixtures/runtime-compat/app-18/public/vite.svg",
        "compiler/fixtures/runtime-compat/app-18/src/App.css",
        "compiler/fixtures/runtime-compat/app-18/src/App.tsx",
        "compiler/fixtures/runtime-compat/app-18/src/assets/react.svg",
        "compiler/fixtures/runtime-compat/app-18/src/index.css",
        "compiler/fixtures/runtime-compat/app-18/src/main.tsx",
        "compiler/fixtures/runtime-compat/app-18/src/vite-env.d.ts",
        "compiler/fixtures/runtime-compat/app-18/tsconfig.app.json",
        "compiler/fixtures/runtime-compat/app-18/tsconfig.json",
        "compiler/fixtures/runtime-compat/app-18/tsconfig.node.json",
        "compiler/fixtures/runtime-compat/app-18/vite.config.ts",
        "compiler/fixtures/runtime-compat/app-18/yarn.lock",
        "compiler/fixtures/runtime-compat/app-19/.gitignore",
        "compiler/fixtures/runtime-compat/app-19/README.md",
        "compiler/fixtures/runtime-compat/app-19/eslint.config.js",
        "compiler/fixtures/runtime-compat/app-19/index.html",
        "compiler/fixtures/runtime-compat/app-19/package.json",
        "compiler/fixtures/runtime-compat/app-19/public/vite.svg",
        "compiler/fixtures/runtime-compat/app-19/src/App.css",
        "compiler/fixtures/runtime-compat/app-19/src/App.tsx",
        "compiler/fixtures/runtime-compat/app-19/src/assets/react.svg",
        "compiler/fixtures/runtime-compat/app-19/src/index.css",
        "compiler/fixtures/runtime-compat/app-19/src/main.tsx",
        "compiler/fixtures/runtime-compat/app-19/src/vite-env.d.ts",
        "compiler/fixtures/runtime-compat/app-19/tsconfig.app.json",
        "compiler/fixtures/runtime-compat/app-19/tsconfig.json",
        "compiler/fixtures/runtime-compat/app-19/tsconfig.node.json",
        "compiler/fixtures/runtime-compat/app-19/vite.config.ts",
        "compiler/fixtures/runtime-compat/app-19/yarn.lock",
        "compiler/fixtures/runtime-compat/setup.sh"
      ]
    },
    {
      "sha": "16ac71a650d8ec9f24cd0bd6ebbe9c6d2edf9cb8",
      "short_sha": "16ac71a",
      "message": "Fix prepare-prerelease script (#31159)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-10-10T17:24:51+02:00",
      "committed_date": "2024-10-10T17:24:51+02:00",
      "changed_files": [
        "scripts/release/prepare-release-from-npm-commands/confirm-stable-version-numbers.js",
        "scripts/release/prepare-release-from-npm-commands/update-stable-version-numbers.js",
        "scripts/release/prepare-release-from-npm.js"
      ]
    },
    {
      "sha": "b781c9f564d05c7ceaf5d8af2e26966601c0a669",
      "short_sha": "b781c9f",
      "message": "[compiler] Scaffold fixture library (#31148)\n\nScaffolds an empty library to test backwards compatibility with the\r\ncompiler enabled.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31148).\r\n* #31167\r\n* #31166\r\n* #31165\r\n* #31164\r\n* __->__ #31148\r\n* #31168",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-10T10:53:58-04:00",
      "committed_date": "2024-10-10T10:53:58-04:00",
      "changed_files": [
        "compiler/fixtures/runtime-compat/README.md",
        "compiler/fixtures/runtime-compat/lib/index.js",
        "compiler/fixtures/runtime-compat/lib/package.json",
        "compiler/fixtures/runtime-compat/lib/yarn.lock"
      ]
    },
    {
      "sha": "0f1127b552790e6dc0b65650680237ba4c94d977",
      "short_sha": "0f1127b",
      "message": "[prettier] Ignore compiler/target (#31168)\n\nAdd missing directory to prettierignore.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31168).\r\n* #31167\r\n* #31166\r\n* #31165\r\n* #31164\r\n* #31148\r\n* __->__ #31168",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-10T10:53:27-04:00",
      "committed_date": "2024-10-10T10:53:27-04:00",
      "changed_files": [
        ".prettierignore"
      ]
    },
    {
      "sha": "38af456a494acb34931c71e31efbccdb53e11174",
      "short_sha": "38af456",
      "message": "[Flight] don't emit chunks for rejected thenables after abort (#31169)\n\nWhen aborting we emit chunks for each pending task. However there was a\r\nbug where a thenable could also reject before we could flush and we end\r\nup with an extra chunk throwing off the pendingChunks bookeeping. When a\r\ntask is retried we skip it if is is not in PENDING status because we\r\nunderstand it was completed some other way. We need to replciate this\r\nfor the reject pathway on serialized thenables since aborting if\r\neffectively completing all pending tasks and not something we need to\r\ncontinue to do once the thenable rejects later.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-10-10T06:47:32-07:00",
      "committed_date": "2024-10-10T06:47:32-07:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "566b0b0f14356f6e1a13722cac005c2f94f4c3f9",
      "short_sha": "566b0b0",
      "message": "[Flight] Don't limit objects that are children of special types (#31160)\n\nWe can't make a special getter to mark the boundary of deep\r\nserialization (which can be used for lazy loading in the future) when\r\nthe parent object is a special object that we parse with\r\ngetOutlinedModel. Such as Map/Set and JSX.\r\n\r\nThis marks the objects that are direct children of those as not possible\r\nto limit.\r\n\r\nI don't love this solution since ideally it would maybe be more local to\r\nthe serialization of a specific object.\r\n\r\nIt also means that very deep trees of only Map/Set never get cut off.\r\nMaybe we should instead override the `get()` and enumeration methods on\r\nthese instead somehow.\r\n\r\nIt's important to have it be a getter though because that's the\r\nmechanism that lets us lazy-load more depth in the future.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-10T07:36:37-04:00",
      "committed_date": "2024-10-10T07:36:37-04:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "131ae818a1b4b2599d9748384e0346aaaad1fdbf",
      "short_sha": "131ae81",
      "message": "[compiler][ez] Include phi identifier in AssertValidMutableRanges\n\nSummary:\nLooks like we accidentally skipped validating this identifier.\n\nghstack-source-id: 05964331a812d18430b27dd90c3d5fe9dd8d65d8\nPull Request resolved: https://github.com/facebook/react/pull/31170",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-10-09T22:09:14-07:00",
      "committed_date": "2024-10-09T22:15:41-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/AssertValidMutableRanges.ts"
      ]
    },
    {
      "sha": "f5b8d9378b36e7e2bb9b908752e6a9d250a44c84",
      "short_sha": "f5b8d93",
      "message": "[Flight] Serialize top-level Date (#31163)\n\nrenderModelDesctructive can sometimes be called direclty on Date values.\r\nWhen this happens we don't first call toJSON on the Date value so we\r\nneed to explicitly handle the case where where the rendered value is a\r\nDate instance as well. This change updates renderModelDesctructive to\r\naccount for sometimes receiving Date instances directly.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-10-09T20:29:48-07:00",
      "committed_date": "2024-10-09T20:29:48-07:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "de43d560a8622fa44ba4162424437125564e906e",
      "short_sha": "de43d56",
      "message": "[cleanup] remove flag enableAddPropertiesFastPath (#31062)\n\nThe experiment was tested internally and rolled out, replacing the flag\r\nwith `true`.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-10-09T16:46:35-04:00",
      "committed_date": "2024-10-09T16:46:35-04:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeAttributePayloadFabric.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "d5bba18b5d81f234657586865248c5b6849599cd",
      "short_sha": "d5bba18",
      "message": "fix[react-devtools]: record timeline data only when supported (#31154)\n\nStacked on https://github.com/facebook/react/pull/31132. See last\r\ncommit.\r\n\r\nThere are 2 issues:\r\n1. We've been recording timeline events, even if Timeline Profiler was\r\nnot supported by the Host. We've been doing this for React Native, for\r\nexample, which would significantly regress perf of recording a profiling\r\nsession, but we were not even using this data.\r\n2. Currently, we are generating component stack for every state update\r\nevent. This is extremely expensive, and we should not be doing this.\r\n\r\nWe can't currently fix the second one, because we would still need to\r\ngenerate all these stacks, and this would still take quite a lot of\r\ntime. As of right now, we can't generate a component stack lazily\r\nwithout relying on the fact that reference to the Fiber is not stale.\r\nWith `enableOwnerStacks` we could populate component stacks in some\r\ncollection, which would be cached at the Backend, and then returned only\r\nonce Frontend asks for it. This approach also eliminates the need for\r\nkeeping a reference to a Fiber.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-09T15:27:04+01:00",
      "committed_date": "2024-10-09T15:27:04+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/profilingHooks.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/constants.js",
        "packages/react-devtools-shared/src/devtools/ProfilerStore.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/ReloadAndProfileButton.js",
        "packages/react-devtools-shared/src/hook.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "bfe91fbecf183f85fc1c4f909e12a6833a247319",
      "short_sha": "bfe91fb",
      "message": "refactor[react-devtools]: flatten reload and profile config (#31132)\n\nStacked on https://github.com/facebook/react/pull/31131. See last\r\ncommit.\r\n\r\nThis is a clean-up and a pre-requisite for next changes:\r\n1. `ReloadAndProfileConfig` is now split into boolean value and settings\r\nobject. This is mainly because I will add one more setting soon, and\r\nalso because settings might be persisted for a longer time than the flag\r\nwhich signals if the Backend was reloaded for profiling. Ideally, this\r\nsettings should probably be moved to the global Hook object, same as we\r\ndid for console patching.\r\n2. Host is now responsible for reseting the cached values, Backend will\r\nexecute provided `onReloadAndProfileFlagsReset` callback.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-09T13:57:02+01:00",
      "committed_date": "2024-10-09T13:57:02+01:00",
      "changed_files": [
        "packages/react-devtools-core/src/backend.js",
        "packages/react-devtools-extensions/src/contentScripts/backendManager.js",
        "packages/react-devtools-extensions/src/contentScripts/installHook.js",
        "packages/react-devtools-inline/src/backend.js",
        "packages/react-devtools-shared/src/attachRenderer.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/hook.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "1d8d12005fc9d856c4c936b269adb4f52bf82e47",
      "short_sha": "1d8d120",
      "message": "fix[react-devtools]: remove all listeners when Agent is shutdown (#31151)\n\nBased on https://github.com/facebook/react/pull/31049, credits to\r\n@EdmondChuiHW.\r\n\r\nWhat is happening here:\r\n1. Once Agent is destroyed, unsubscribe own listeners and bridge\r\nlisteners.\r\n2. [Browser extension only] Once Agent is destroyed, unsubscribe\r\nlisteners from BackendManager.\r\n3. [Browser extension only] I've discovered that `backendManager.js`\r\ncontent script can get injected multiple times by the browser. When\r\nFrontend is initializing, it will create Store first, and then execute a\r\ncontent script for bootstraping backend manager. If Frontend was\r\ndestroyed somewhere between these 2 steps, Backend won't be notified,\r\nbecause it is not initialized yet, so it will not unsubscribe listeners\r\ncorrectly. We might end up duplicating listeners, and the next time\r\nFrontend is launched, it will report an issues \"Cannot add / remove node\r\n...\", because same operations are emitted twice.\r\n\r\nTo reproduce 3 you can do the following:\r\n1. Click reload-to-profile\r\n2. Right after when both app and Chrome DevTools panel are reloaded,\r\nclose Chrome DevTools.\r\n3. Open Chrome DevTools again, open Profiler panel and observe \"Cannot\r\nadd / remove node ...\" error in the UI.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-09T13:34:01+01:00",
      "committed_date": "2024-10-09T13:34:01+01:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/contentScripts/backendManager.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/index.js"
      ]
    },
    {
      "sha": "4a86ec5a66d0dd375f8433d380f71ade3e67d5d0",
      "short_sha": "4a86ec5",
      "message": "fix[react-devtools]: removed redundant startProfiling call (#31131)\n\nStacked on https://github.com/facebook/react/pull/31118. See last\r\ncommit.\r\n\r\nWe don't need to call `startProfiling()` here, because we delegate this\r\nto the Renderer itself:\r\n\r\nhttps://github.com/facebook/react/blob/830e823cd2c6ee675636d31320b10350e8ade9ae/packages/react-devtools-shared/src/backend/fiber/renderer.js#L5227-L5232\r\n\r\nSince this is de-facto the constructor of Renderer, this will be called\r\nearlier.\r\n\r\nValidated via testing the reload-to-profile for Chrome browser\r\nextension.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-09T13:32:04+01:00",
      "committed_date": "2024-10-09T13:32:04+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/agent.js"
      ]
    },
    {
      "sha": "389a2deebc2dc41deb268f4b543709989d688d69",
      "short_sha": "389a2de",
      "message": "refactor[react-devtools/fiber/renderer]: optimize durations resolution (#31118)\n\nStacked on https://github.com/facebook/react/pull/31117. \r\n\r\nNo need for sending long float numbers and to have resolution less than\r\na microsecond, we end up formatting it on a Frontend side:\r\n\r\nhttps://github.com/facebook/react/blob/6c7b41da3de12be2d95c60181b3fe896f824f13a/packages/react-devtools-shared/src/devtools/views/Profiler/utils.js#L359-L360",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-09T13:26:16+01:00",
      "committed_date": "2024-10-09T13:26:16+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/utils/index.js"
      ]
    },
    {
      "sha": "dbf80c8d7a823041d83baff8b0dca8892ce27411",
      "short_sha": "dbf80c8",
      "message": "fix[react-devtools]: update profiling status before receiving response from backend (#31117)\n\nWe can't wait for a response from Backend, because it might take some\r\ntime to actually finish profiling.\r\n\r\nWe should keep a flag on the frontend side, so user can quickly see the\r\nfeedback in the UI.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-09T13:23:23+01:00",
      "committed_date": "2024-10-09T13:23:23+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/ProfilerStore.js",
        "packages/react-devtools-shared/src/devtools/store.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/ProfilerContext.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsModal.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsModalContextToggle.js"
      ]
    },
    {
      "sha": "bf0c054649f0573c184499bd571f08150152c086",
      "short_sha": "bf0c054",
      "message": "fix[react-devtools]: wrap key string in preformatted text html element (#31153)\n\nFixes https://github.com/facebook/react/issues/28984.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-09T09:54:34+01:00",
      "committed_date": "2024-10-09T09:54:34+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/Element.js"
      ]
    },
    {
      "sha": "ed966dac4a025fd37580e8197e5b271044ffbd9f",
      "short_sha": "ed966da",
      "message": "[compiler] Fix busted postinstall script (#31147)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T20:37:41-04:00",
      "committed_date": "2024-10-07T20:37:41-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/package.json"
      ]
    },
    {
      "sha": "f74f6cd945675158eb40402041305e7af4ce731c",
      "short_sha": "f74f6cd",
      "message": "[rcr] Publish react-compiler-runtime to npm (#31146)\n\nUpdates our publishing scripts to also publish react-compiler-runtime.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T18:50:07-04:00",
      "committed_date": "2024-10-07T18:50:07-04:00",
      "changed_files": [
        "compiler/packages/react-compiler-runtime/README.md",
        "compiler/scripts/release/shared/packages.js"
      ]
    },
    {
      "sha": "23cd3aca283817b8c359e806e9c7bc6b26fcd27c",
      "short_sha": "23cd3ac",
      "message": "[rcr] Remove runtimeModule compiler option (#31145)\n\nNow that the compiler always injects `react-compiler-runtime`, this\r\noption is unnecessary.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T18:07:12-04:00",
      "committed_date": "2024-10-07T18:07:12-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/userspace-use-memo-cache.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/userspace-use-memo-cache.js",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "3fd3364107ba1fa0e8edf86ee9cb9562a9be3929",
      "short_sha": "3fd3364",
      "message": "[rcr] Update default runtimeModule to react-compiler-runtime (#31144)\n\nUpdates the compiler to always import from `react-compiler-runtime` by\r\ndefault. The runtime then decides whether to use the official or\r\nuserspace implementation of useMemoCache.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T17:59:33-04:00",
      "committed_date": "2024-10-07T17:59:33-04:00",
      "changed_files": [
        "compiler/apps/playground/babel.config.js",
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/scripts/link-react-compiler-runtime.sh",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/target-flag.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/target-flag.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/userspace-use-memo-cache.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/userspace-use-memo-cache.js"
      ]
    },
    {
      "sha": "8dd4cda3808d83f2565c25f367fb8f16e7a2fc73",
      "short_sha": "8dd4cda",
      "message": "[rcr] Add target flag to compiler (#31143)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T17:50:53-04:00",
      "committed_date": "2024-10-07T17:50:53-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "68d5288359c86f7761f099cde1c5c0d22f46757d",
      "short_sha": "68d5288",
      "message": "[snap] Add react-compiler-runtime as a dependency (#31142)\n\nWe need `react-compiler-runtime` to use the same version of React as\r\nsnap",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T16:38:06-04:00",
      "committed_date": "2024-10-07T16:38:06-04:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/infer-component-props-non-null.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/infer-component-props-non-null.tsx",
        "compiler/packages/snap/package.json",
        "compiler/packages/snap/scripts/link-react-compiler-runtime.sh"
      ]
    },
    {
      "sha": "0e43aa7f7ad5aa88a566cfc50504006d411cc841",
      "short_sha": "0e43aa7",
      "message": "[snap] Remove unnecessary React.c override (#31141)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T16:31:59-04:00",
      "committed_date": "2024-10-07T16:31:59-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/module-scoped-bindings.expect.md",
        "compiler/packages/snap/src/sprout/evaluator.ts"
      ]
    },
    {
      "sha": "d2367f17d9cac8f0325660455beff60a82b618d4",
      "short_sha": "d2367f1",
      "message": "[rcr] Reexport React.__COMPILER_RUNTIME.c or fallback to polyfill (#31140)\n\nThis PR updates the standalone `react-compiler-runtime` package to\r\neither re-export `React.__COMPILER_RUNTIME.c` or to use a userspace\r\npolyfill.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T16:31:20-04:00",
      "committed_date": "2024-10-07T16:31:20-04:00",
      "changed_files": [
        "compiler/packages/react-compiler-runtime/src/index.ts"
      ]
    },
    {
      "sha": "b78a7f2f35e554a8647c3262d7f392e68d06febc",
      "short_sha": "b78a7f2",
      "message": "[rcr] Re-export useMemoCache in top level React namespace (#31139)\n\nIn order to support using the compiler on versions of React prior to 19,\r\nwe need the ability to statically import `c` (aka useMemoCache) or\r\nfallback to a polyfill supplied by `react-compiler-runtime` (note: this\r\nis a separate npm package, not to be confused with\r\n`react/compiler-runtime`, which is currently a part of react).\r\n\r\nTo do this we first need to re-export `useMemoCache` under the top level\r\nReact namespace again, which is additive and thus non-breaking. Doing so\r\nallows `react-compiler-runtime` to statically either re-export\r\n`React.__COMPILER_RUNTIME.c` or supply a polyfill, without the need for\r\na dynamic import which is finicky to support due to returning a promise.\r\n\r\nIn later PRs I will remove `react/compiler-runtime` and update the\r\ncompiler to emit imports to `react-compiler-runtime` instead.",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T16:25:04-04:00",
      "committed_date": "2024-10-07T16:25:04-04:00",
      "changed_files": [
        "packages/react/index.development.js",
        "packages/react/index.experimental.development.js",
        "packages/react/index.experimental.js",
        "packages/react/index.fb.js",
        "packages/react/index.js",
        "packages/react/src/ReactClient.js",
        "packages/react/src/ReactCompilerRuntime.js"
      ]
    },
    {
      "sha": "68d59d43d5640f7e44b46bfa7ee758de063767b4",
      "short_sha": "68d59d4",
      "message": "[compiler][ez] Fix reanimated custom type defs for imports (#31137)\n\nWhen we added support for Reanimated, we didn't distinguish between true\r\nglobals (i.e. identifiers with no static resolutions), module types, and\r\nimports #29188. For the past 3-4 months, Reanimated imports were not\r\nbeing matched to the correct hook / function shape we match globals and\r\nmodule imports against two different registries.\r\n\r\nThis PR fixes our support for Reanimated library functions imported\r\nunder `react-native-reanimated`. See test fixtures for details",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T13:09:39-04:00",
      "committed_date": "2024-10-07T13:09:39-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-non-imported-reanimated-shared-value-writes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-non-imported-reanimated-shared-value-writes.jsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reanimated-no-memo-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reanimated-no-memo-arg.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reanimated-shared-value-writes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reanimated-shared-value-writes.jsx",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "91c42a14c7a698fe6baeab770d3c2548fcdf32b4",
      "short_sha": "91c42a1",
      "message": "[rcr][ez] Clean up unused $read from rcr (#31136)",
      "author": {
        "name": "lauren",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-10-07T12:39:14-04:00",
      "committed_date": "2024-10-07T12:39:14-04:00",
      "changed_files": [
        "compiler/packages/react-compiler-runtime/src/index.ts"
      ]
    },
    {
      "sha": "1460d67c5b9a0d4498b4d22e1a5a6c0ccac85fdd",
      "short_sha": "1460d67",
      "message": "[compiler][hir] Only hoist always-accessed PropertyLoads from function decls (#31066)\n\nStack from [ghstack](https://github.com/ezyang/ghstack) (oldest at\r\nbottom):\r\n* __->__ #31066\r\n* #31032\r\n\r\nPrior to this PR, we consider all of a nested function's accessed paths\r\nas 'hoistable' (to the basic block in which the function was defined).\r\nNow, we traverse nested functions and find all paths hoistable to their\r\n*entry block*.\r\n\r\nNote that this only replaces the *hoisting* part of function\r\ndeclarations, not dependencies. This realistically only affects optional\r\nchains within functions, which always get truncated to its inner\r\nnon-optional path (see\r\n[todo-infer-function-uncond-optionals-hoisted.tsx](https://github.com/facebook/react/blob/576f3c0aa898cb99da1b7bf15317756e25c13708/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/todo-infer-function-uncond-optionals-hoisted.tsx))\r\n\r\nSee newly added test fixtures for details\r\n\r\nUpdate: Note that toggling `enableTreatFunctionDepsAsConditional` makes\r\na non-trivial impact on granularity of inferred deps (i.e. we find that\r\nfunction declarations uniquely identify some paths as hoistable).\r\nSnapshot comparison of internal code shows ~2.5% of files get worse\r\ndependencies ([internal\r\nlink](https://www.internalfb.com/phabricator/paste/view/P1625792186))",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-10-03T14:41:32-04:00",
      "committed_date": "2024-10-03T14:41:32-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-cond-access-local-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-cond-access-local-var.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-cond-access-not-hoisted.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-cond-access-not-hoisted.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-access-hoisted.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-access-hoisted.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-access-hoists-other-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-access-hoists-other-dep.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-access-local-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-access-local-var.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-optional-hoists-other-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-function-uncond-optional-hoists-other-dep.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-nested-function-uncond-access-local-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-nested-function-uncond-access-local-var.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-nested-function-uncond-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-nested-function-uncond-access.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-object-method-uncond-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/infer-object-method-uncond-access.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/todo-infer-function-uncond-optionals-hoisted.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/todo-infer-function-uncond-optionals-hoisted.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-infer-function-cond-access-not-hoisted.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-infer-function-cond-access-not-hoisted.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/todo-infer-function-uncond-optionals-hoisted.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/todo-infer-function-uncond-optionals-hoisted.tsx",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "edacbde73f50cc9dc00819d61275cd43f12665c1",
      "short_sha": "edacbde",
      "message": "[compiler][hir-rewrite] Check mutability of base identifier when hoisting (#31032)\n\nStack from [ghstack](https://github.com/ezyang/ghstack) (oldest at\r\nbottom):\r\n* #31066\r\n* __->__ #31032\r\n\r\nPrior to this PR, we check whether the property load source (e.g. the\r\nevaluation of `<base>` in `<base>.property`) is mutable + scoped to\r\ndetermine whether the property load itself is eligible for hoisting.\r\nThis changes to check the base identifier of the load.\r\n- This is needed for the next PR #31066. We want to evaluate whether the\r\nbase identifier is mutable within the context of the *outermost\r\nfunction*. This is because all LoadLocals and PropertyLoads within a\r\nnested function declaration have mutable-ranges within the context of\r\nthe function, but the base identifier is a context variable.\r\n- A side effect is that we no longer infer loads from props / other\r\nfunction arguments as mutable in edge cases (e.g. props escaping out of\r\ntry-blocks or being assigned to context variables)",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-10-03T13:55:59-04:00",
      "committed_date": "2024-10-03T13:55:59-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-try-catch-maybe-null-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-try-catch-maybe-null-dependency.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-maybe-null-dependency.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-maybe-null-dependency.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-try-value-modified-in-catch-escaping.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-try-value-modified-in-catch.expect.md",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "0751fac747452af8c0494900b4afa7c56ee7b32c",
      "short_sha": "0751fac",
      "message": "[compiler] Optional chaining for dependencies (HIR rewrite)\n\nAdds HIR version of `PropagateScopeDeps` to handle optional chaining.\n\nInternally, this improves memoization on ~4% of compiled files (internal links: [1](https://www.internalfb.com/intern/paste/P1610406497/))\n\nSummarizing the changes in this PR.\n1. `CollectOptionalChainDependencies` recursively traverses optional blocks down to the base. From the base, we build up a set of `baseIdentifier.propertyA?.propertyB` mappings.\nThe tricky bit here is that optional blocks sometimes reference other optional blocks that are *not* part of the same chain e.g. a(c?.d)?.d. See code + comments in `traverseOptionalBlock` for how we avoid concatenating unrelated blocks.\n\n2. Adding optional chains into non-null object calculation.\n(Note that marking `a?.b` as 'non-null' means that `a?.b.c` is safe to evaluate, *not* `(a?.b).c`. Happy to rename this / reword comments accordingly if there's a better term)\nThis pass is split into two stages. (1) collecting non-null objects by block and (2) propagating non-null objects across blocks. The only significant change here was to (2). We add an extra reduce step `X=Reduce(Union(X, Intersect(X_neighbors)))` to merge optional and non-optional nodes (e.g. nonNulls=`{a, a?.b}` reduces to `{a, a.b}`)\n\n3. Adding optional chains into dependency calculation.\nThis was the trickiest. We need to take the \"maximal\" property chain as a dependency. Prior to this PR, we avoided taking subpaths e.g. `a.b` of `a.b.c` as dependencies by only visiting non-PropertyLoad/LoadLocal instructions. This effectively only recorded the property-path at site-of-use.\n\n    Unfortunately, this *quite* doesn't work for optional chains for a few reasons:\n    - We would need to skip relevant `StoreLocal`/`Branch terminal` instructions (but only those within optional blocks that have been successfully read).\n    - Given an optional chain, either (1) only a subpath or (2) the entire path can be represented as a PropertyLoad. We cannot directly add the last hoistable optional-block as a dependency as MethodCalls are an edge case e.g. given a?.b.c(), we should depend on `a?.b`, not `a?.b.c`\n      This means that we add its dependency at either the innermost unhoistable optional-block or when encountering it within its phi-join.\n\n4. Handle optional chains in DeriveMinimalDependenciesHIR.\nThis was also a bit tricky to formulate. Ideally, we would avoid a 2^3 case join (cond | uncond cfg, optional | not optional load, access | dependency). This PR attempts to simplify by building two trees\n    1. First add each hoistable path into a tree containing `Optional | NonOptional` nodes.\n    2. Then add each dependency into another tree containing `Optional | NonOptional`, `Access | Dependency` nodes, truncating the dependency at the earliest non-hoistable node (i.e. non-matching pair when walking the hoistable tree)\n\nghstack-source-id: a2170f26280dfbf65a4893d8a658f863a0fd0c88\nPull Request resolved: https://github.com/facebook/react/pull/31037",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-10-02T12:53:57-04:00",
      "committed_date": "2024-10-02T13:30:55-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectOptionalChainDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/DeriveMinimalDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/utils.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-sequential-optional-chain-nonnull.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-sequential-optional-chain-nonnull.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nested-optional-chains.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/nested-optional-chains.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-call-chain-in-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-as-memo-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-single.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/infer-sequential-optional-chain-nonnull.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/infer-sequential-optional-chain-nonnull.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/nested-optional-chains.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/nested-optional-chains.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-as-memo-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-single-with-unconditional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reactive-dependencies-non-optional-properties-inside-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/conditional-member-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/memberexpr-join-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/memberexpr-join-optional-chain2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/merge-uncond-optional-chain-and-cond.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/merge-uncond-optional-chain-and-cond.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/repro-scope-missing-mutable-range.expect.md"
      ]
    },
    {
      "sha": "459fd418cfbd1f2f1be58efd8c89a0e0ecfb6d44",
      "short_sha": "459fd41",
      "message": "Define `HostInstance` type for React Native (#31101)\n\n## Summary\r\n\r\nCreates a new `HostInstance` type for React Native, to more accurately\r\ncapture the intent most developers have when using the `NativeMethods`\r\ntype or `React.ElementRef<HostComponent<T>>`.\r\n\r\nSince `React.ElementRef<HostComponent<T>>` is typed as\r\n`React.AbstractComponent<T, NativeMethods>`, that means\r\n`React.ElementRef<HostComponent<T>>` is equivalent to `NativeMethods`\r\nwhich is equivalent to `HostInstance`.\r\n\r\n\r\n## How did you test this change?\r\n\r\n```\r\n$ yarn\r\n$ yarn flow fabric\r\n```",
      "author": {
        "name": "Timothy Yung",
        "email": "yungsters@meta.com"
      },
      "authored_date": "2024-10-01T17:25:59-07:00",
      "committed_date": "2024-10-01T17:25:59-07:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeTypes.js"
      ]
    },
    {
      "sha": "99c056abb0dac0e1a15b2c85b620b72c625e065b",
      "short_sha": "99c056a",
      "message": "[Flight] Allow aborting encodeReply (#31106)\n\nAllow aborting encoding arguments to a Server Action if a Promise\r\ndoesn't resolve. That way at least part of the arguments can be used on\r\nthe receiving side. This leaves it unresolved in the stream rather than\r\nencoding an error.\r\n\r\nThis should error on the receiving side when the stream closes but it\r\ndoesn't right now in the Edge/Browser versions because closing happens\r\nimmediately before we've had a chance to call `.then()` so the Chunks\r\nare still in pending state. This is an existing bug also in\r\nFlightClient.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-10-01T11:28:51-07:00",
      "committed_date": "2024-10-01T14:28:51-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-server-dom-esm/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMReply-test.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientEdge.js"
      ]
    },
    {
      "sha": "d8c90fa48d3addefe4b805ec56a3c65e4ee39127",
      "short_sha": "d8c90fa",
      "message": "Disable infinite render loop detection (#31088)\n\nWe're seeing issues with this feature internally including bugs with\r\nsibling prerendering and errors that are difficult for developers to\r\naction on. We'll turn off the feature for the time being until we can\r\nimprove the stability and ergonomics.\r\n\r\nThis PR does two things:\r\n- Turn off `enableInfiniteLoopDetection` everywhere while leaving it as\r\na variant on www so we can do further experimentation.\r\n- Revert https://github.com/facebook/react/pull/31061 which was a\r\ntemporary change for debugging. This brings the feature back to\r\nbaseline.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-10-01T11:00:57-04:00",
      "committed_date": "2024-10-01T11:00:57-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactLegacyUpdates-test.js",
        "packages/react-dom/src/__tests__/ReactUpdates-test.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js"
      ]
    },
    {
      "sha": "6e612587ecfca0ea2e331300635d497d54437930",
      "short_sha": "6e61258",
      "message": "chore[react-devtools]: drop legacy context tests (#31059)\n\nWe've dropped the support for detecting changes in legacy Contexts in\r\nhttps://github.com/facebook/react/pull/30896.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-01T14:26:12+01:00",
      "committed_date": "2024-10-01T14:26:12+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/profilingCache-test.js"
      ]
    },
    {
      "sha": "9ea5ffa9cba4869474a1d5d53e7d6c135be6adf7",
      "short_sha": "9ea5ffa",
      "message": "chore[react-devtools]: add legacy mode error message to the ignore list for tests (#31060)\n\nWithout this, the console gets spammy whenever we run React DevTools\r\ntests against React 18.x, where this deprecation message was added.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-01T14:04:05+01:00",
      "committed_date": "2024-10-01T14:04:05+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/setupTests.js"
      ]
    },
    {
      "sha": "40357fe63071950b0bba304657a003755aec4e30",
      "short_sha": "40357fe",
      "message": "fix[react-devtools]: request hook initialization inside http server response (#31102)\n\nFixes https://github.com/facebook/react/issues/31100.\r\n\r\nThere are 2 things:\r\n1. In https://github.com/facebook/react/pull/30987, we've introduced a\r\nbreaking change: importing `react-devtools-core` is no longer enough for\r\ninstalling React DevTools global Hook. You need to call `initialize`, in\r\nwhich you may provide initial settings. I am not adding settings here,\r\nbecause it is not implemented, and there are no plans for supporting\r\nthis.\r\n2. Calling `installHook` is not necessary inside `standalone.js`,\r\nbecause this script is running inside Electron wrapper (which is just a\r\nUI, not the app that we are debugging). We will loose the ability to use\r\nReact DevTools on this React application, but I guess thats fine.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-10-01T14:03:48+01:00",
      "committed_date": "2024-10-01T14:03:48+01:00",
      "changed_files": [
        "packages/react-devtools-core/src/standalone.js"
      ]
    },
    {
      "sha": "654e387d7eac113ddbf85f8a9029d1af7117679e",
      "short_sha": "654e387",
      "message": "[Flight] Serialize Server Components Props in DEV (#31105)\n\nThis allows us to show props in React DevTools when inspecting a Server\r\nComponent.\r\n\r\nI currently drastically limit the object depth that's serialized since\r\nthis is very implicit and you can have heavy objects on the server.\r\n\r\nWe previously was using the general outlineModel to outline\r\nReactComponentInfo but we weren't consistently using it everywhere which\r\ncould cause some bugs with the parsing when it got deduped on the\r\nclient. It also lead to the weird feature detect of `isReactComponent`.\r\nIt also meant that this serialization was using the plain serialization\r\ninstead of `renderConsoleValue` which means we couldn't safely serialize\r\narbitrary debug info that isn't serializable there.\r\n\r\nSo the main change here is to call `outlineComponentInfo` and have that\r\nalways write every \"Server Component\" instance as outlined and in a way\r\nthat lets its props be serialized using `renderConsoleValue`.\r\n\r\n<img width=\"1150\" alt=\"Screenshot 2024-10-01 at 1 25 05 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/f6e7811d-51a3-46b9-bbe0-1b8276849ed4\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-30T22:39:20-07:00",
      "committed_date": "2024-10-01T01:39:20-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/hydration.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "326832a56d41b4462919f9efe69916712ca87a95",
      "short_sha": "326832a",
      "message": "[Flight] Serialize Error Values (#31104)\n\nThe idea is that the RSC protocol is a superset of Structured Clone.\r\n#25687 One exception that we left out was serializing Error objects as\r\nvalues. We serialize \"throws\" or \"rejections\" as Error (regardless of\r\ntheir type) but not Error values.\r\n\r\nThis fixes that by serializing `Error` objects. We don't include digest\r\nin this case since we don't call `onError` and it's not really expected\r\nthat you'd log it on the server with some way to look it up.\r\n\r\nIn general this is not super useful outside throws. Especially since we\r\nhide their values in prod. However, there is one case where it is quite\r\nuseful. When you replay console logs in DEV you might often log an Error\r\nobject within the scope of a Server Component. E.g. the default RSC\r\nerror handling just console.error and error object.\r\n\r\nBefore this would just be an empty object due to our lax console log\r\nserialization:\r\n<img width=\"1355\" alt=\"Screenshot 2024-09-30 at 2 24 03 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/694b3fd3-f95f-4863-9321-bcea3f5c5db4\">\r\nAfter:\r\n<img width=\"1348\" alt=\"Screenshot 2024-09-30 at 2 36 48 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/834b129d-220d-43a2-a2f4-2eb06921747d\">\r\n\r\nTODO for a follow up: Flight Reply direction. This direction doesn't\r\nactually serialize thrown errors because they always reject the\r\nserialization.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-30T12:45:13-07:00",
      "committed_date": "2024-09-30T15:45:13-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "c67e241c1656dea4ece22a4ee5c25b6b36d0ca75",
      "short_sha": "c67e241",
      "message": "[compiler] Renames and no-op refactor for next PR\n\nRename for clarity:\n- `CollectHoistablePropertyLoads:Tree` -> `CollectHoistablePropertyLoads:PropertyPathRegistry`\n    - `getPropertyLoadNode` -> `getOrCreateProperty`\n    - `getOrCreateRoot` -> `getOrCreateIdentifier`\n- `PropertyLoadNode` -> `PropertyPathNode`\n\nRefactor to CFG joining logic for `CollectHoistablePropertyLoads`. We now write to the same set of inferredNonNullObjects when traversing from entry and exit blocks. This is more correct, as non-nulls inferred from a forward traversal should be included when computing the backward traversal (and vice versa). This fix is needed by an edge case in #31036\n\nAdded invariant into fixed-point iteration to terminate (instead of infinite looping).\n\nghstack-source-id: 1e8eb2d566b649ede93de9a9c13dad09b96416a5\nPull Request resolved: https://github.com/facebook/react/pull/31036",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-09-30T12:24:24-04:00",
      "committed_date": "2024-09-30T12:35:16-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/DeriveMinimalDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts"
      ]
    },
    {
      "sha": "2cbea245cca4044f02c4c231a7f86c8062074579",
      "short_sha": "2cbea24",
      "message": "[compiler][fixtures] Patch error-handling edge case in snap evaluator\n\nFix edge case in which we incorrectly returned a cached exception instead of trying to rerender with new props.\nghstack-source-id: 843fb85df4a2ae7a88f296104fb16b5f9a34c76e\nPull Request resolved: https://github.com/facebook/react/pull/31082",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-09-30T12:24:23-04:00",
      "committed_date": "2024-09-30T12:35:16-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/jump-unpoisoned/throw-before-scope-starts.expect.md",
        "compiler/packages/snap/src/sprout/evaluator.ts"
      ]
    },
    {
      "sha": "5d12e9e10b9957bc131ec77e013e1a76e4f32eb6",
      "short_sha": "5d12e9e",
      "message": "[compiler] repro for dep merging edge case (non-hir)\n\nFound when writing #31037, summary copied from comments:\n\nThis is an extreme edge case and not code we'd expect any reasonable developer to write. In most cases e.g. `(a?.b != null ? a.b : DEFAULT)`, we do want to take a dependency on `a?.b`.\n\nI found this trying to come up with edge cases that break the current dependency + CFG merging logic. I think it makes sense to error on the side of correctness. After all, we still take `a` as a dependency if users write `a != null ? a.b : DEFAULT`, and the same fix (understanding the `<hoistable> != null` test expression) works for both. Can be convinced otherwise though!\n\nghstack-source-id: cc06afda59f7681e228495f5e35a596c20f875f5\nPull Request resolved: https://github.com/facebook/react/pull/31035",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-09-30T12:24:22-04:00",
      "committed_date": "2024-09-30T12:35:16-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-merge-uncond-optional-chain-and-cond.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/bug-merge-uncond-optional-chain-and-cond.ts",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "58a3ca3b47f6a51cea48ea95ded26c9887baca38",
      "short_sha": "58a3ca3",
      "message": "[compiler][hir-rewrite] Cleanup Identifier -> IdentifierId\n\nSince removing ExitSSA, Identifier and IdentifierId should mean the same thing\n\nghstack-source-id: 076cacbe8360e716b0555088043502823f9ee72e\nPull Request resolved: https://github.com/facebook/react/pull/31034",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-09-30T12:24:21-04:00",
      "committed_date": "2024-09-30T12:35:16-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts"
      ]
    },
    {
      "sha": "8c89fa76430b3d9fbecd6d535c93171d22f0377f",
      "short_sha": "8c89fa7",
      "message": "[compiler][hir-rewrite] Infer non-null props, destructure source\n\nFollowup from #30894.\nThis adds a new flagged mode `enablePropagateScopeDepsInHIR: \"enabled_with_optimizations\"`, under which we infer more hoistable loads:\n- it's always safe to evaluate loads from `props` (i.e. first parameter of a `component`)\n- destructuring sources are safe to evaluate loads from (e.g. given `{x} = obj`, we infer that it's safe to evaluate obj.y)\n- computed load sources are safe to evaluate loads from (e.g. given `arr[0]`, we can infer that it's safe to evaluate arr.length)\n\nghstack-source-id: 32f3bb72e9f85922825579bd785d636f4ccf724d\nPull Request resolved: https://github.com/facebook/react/pull/31033",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-09-30T12:24:20-04:00",
      "committed_date": "2024-09-30T12:35:16-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/infer-component-props-non-null.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/infer-component-props-non-null.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/infer-non-null-destructure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/infer-non-null-destructure.ts"
      ]
    },
    {
      "sha": "1a779207a7b85314e16d410b185d427702f22ebc",
      "short_sha": "1a77920",
      "message": "[compiler][test fixtures] Add enablePropagateDepsInHIR to forked tests\n\nAnnotates fixtures added in #31030 with `@enablePropagateDepsInHIR` to fork behavior (and commit snapshot differences)\nghstack-source-id: e423e8c42db62f1bb87562b770761be09fc8ffc6\nPull Request resolved: https://github.com/facebook/react/pull/31031",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-09-30T12:24:20-04:00",
      "committed_date": "2024-09-30T12:35:15-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-break-labeled.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-break-labeled.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-early-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-early-return.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-on-mutable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-on-mutable.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/early-return-nested-early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/early-return-nested-early-return-within-reactive-scope.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/early-return-within-reactive-scope.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-call-chain-in-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-call-chain-in-optional.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/iife-return-modified-later-phi.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/iife-return-modified-later-phi.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/object-mutated-in-consequent-alternate-both-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/object-mutated-in-consequent-alternate-both-return.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/partial-early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/partial-early-return-within-reactive-scope.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-array-push-consecutive-phis.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-array-push-consecutive-phis.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-array-push.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-array-push.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-property-store.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-property-store.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reactive-dependencies-non-optional-properties-inside-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reactive-dependencies-non-optional-properties-inside-optional-chain.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-with-mutation.js"
      ]
    },
    {
      "sha": "943e45e910d1a125f2be431c2b66f22a035ea0c9",
      "short_sha": "943e45e",
      "message": "[compiler][test fixtures] Fork more fixtures for hir-rewrite\n\nFollowup from #30894 , not sure how these got missed. Note that this PR just copies the fixtures without adding `@enablePropagateDepsInHIR`. #31032 follows and actually enables the HIR-version of propagateScopeDeps to run. I split this out into two PRs to make snapshot differences easier to review, but also happy to merge\n\nFixtures found from locally setting snap test runner to default to `enablePropagateDepsInHIR: 'enabled_baseline'` and forking fixtures files with different output.\n\nghstack-source-id: 7d7cf41aa923d83ad49f89079171b0411923ce6b\nPull Request resolved: https://github.com/facebook/react/pull/31030",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-09-30T12:24:19-04:00",
      "committed_date": "2024-09-30T12:35:15-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-break-labeled.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-break-labeled.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-early-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-early-return.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-on-mutable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/conditional-on-mutable.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/early-return-nested-early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/early-return-nested-early-return-within-reactive-scope.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/early-return-within-reactive-scope.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-call-chain-in-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-call-chain-in-optional.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/iife-return-modified-later-phi.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/iife-return-modified-later-phi.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/object-mutated-in-consequent-alternate-both-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/object-mutated-in-consequent-alternate-both-return.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/partial-early-return-within-reactive-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/partial-early-return-within-reactive-scope.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-array-push-consecutive-phis.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-array-push-consecutive-phis.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-array-push.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-array-push.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-property-store.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/phi-type-inference-property-store.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reactive-dependencies-non-optional-properties-inside-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reactive-dependencies-non-optional-properties-inside-optional-chain.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-with-mutation.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "2d16326d9a3f45260aa80bcae78745ab2f199138",
      "short_sha": "2d16326",
      "message": "fix[scripts/devtools/publish-release]: parse version list instead of handling 404 (#31087)\n\nDiscovered yesterday while was publishing a new release.\r\n\r\nNPM `10.x.x` changed the text for 404 errors, so this check was failing.\r\nInstead of handling 404 as a signal, I think its better to just parse\r\nthe whole list of versions and check if the new one is already there.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-30T17:07:54+01:00",
      "committed_date": "2024-09-30T17:07:54+01:00",
      "changed_files": [
        "scripts/devtools/publish-release.js"
      ]
    },
    {
      "sha": "db240980a3aeae65f148b1edf5a1187a2331307e",
      "short_sha": "db24098",
      "message": "[playground] Decouple playground from compiler\n\nCurrently the playground is setup as a linked workspace for the\ncompiler which complicates our yarn workspace setup and means that snap\ncan sometimes pull in a different version of react than was otherwise\nspecified.\n\nThere's no real reason to have these workspaces combined so let's split\nthem up.\n\nghstack-source-id: 56ab064b2fc45366f5d96d37c5d4c5dc26590234\nPull Request resolved: https://github.com/facebook/react/pull/31081",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-27T15:15:15-04:00",
      "committed_date": "2024-09-27T15:25:07-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        "compiler/apps/playground/app/layout.tsx",
        "compiler/apps/playground/app/page.tsx",
        "compiler/apps/playground/components/Editor/EditorImpl.tsx",
        "compiler/apps/playground/components/Editor/Input.tsx",
        "compiler/apps/playground/components/Editor/Output.tsx",
        "compiler/apps/playground/components/Editor/index.tsx",
        "compiler/apps/playground/components/Header.tsx",
        "compiler/apps/playground/components/Logo.tsx",
        "compiler/apps/playground/components/StoreContext.tsx",
        "compiler/apps/playground/lib/createContext.ts",
        "compiler/apps/playground/lib/reactCompilerMonacoDiagnostics.ts",
        "compiler/apps/playground/lib/stores/store.ts",
        "compiler/apps/playground/package.json",
        "compiler/apps/playground/playwright.config.js",
        "compiler/apps/playground/scripts/link-compiler.sh",
        "compiler/apps/playground/tsconfig.json",
        "compiler/apps/playground/yarn.lock",
        "compiler/package.json",
        "compiler/packages/babel-plugin-react-compiler/package.json",
        "compiler/packages/snap/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "3edc000d7717027a1ce23611070a56358040a554",
      "short_sha": "3edc000",
      "message": "[compiler] Fix broken tests\n\nghstack-source-id: 000a37ae1f819eef676dcd52410d5231cd2d50fe\nPull Request resolved: https://github.com/facebook/react/pull/31078",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T17:34:28-04:00",
      "committed_date": "2024-09-26T17:44:28-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/meta-isms/repro-cx-namespace-assigned-to-temporary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/meta-isms/repro-cx-namespace-assigned-to-temporary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/mutate-outer-scope-within-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/mutate-outer-scope-within-value-block.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-dep-scope-pruned.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-dep-scope-pruned.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-allocating-ternary-test-instruction-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-allocating-ternary-test-instruction-scope.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/allow-locals-named-like-hooks.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/allow-locals-named-like-hooks.js"
      ]
    },
    {
      "sha": "d34da5cdb9266ba7928f78107c87383ae211f0f9",
      "short_sha": "d34da5c",
      "message": "[ci] Fix incorrect sha / commit messages in manual Meta builds\n\nghstack-source-id: 0790b32d293f7b528e458cb4b8718d8c2c422dab\nPull Request resolved: https://github.com/facebook/react/pull/31083",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T17:28:01-04:00",
      "committed_date": "2024-09-26T17:43:07-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "67fee58b1f72754cc77488c40c44e786572ef954",
      "short_sha": "67fee58",
      "message": "[Fizz] Start initial work immediately (#31079)\n\nIn a recent update we make Flight start working immediately rather than\r\nwaitin for a new task. This commit updates fizz to have similar\r\nmechanics. We start the render in the currently running task but we do\r\nso in a microtask to avoid reentrancy. This aligns Fizz with Flight.\r\n\r\nref: https://github.com/facebook/react/pull/30961",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-09-26T13:51:45-07:00",
      "committed_date": "2024-09-26T13:51:45-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "76aee6f39d94caa04c11be92d75d12cb9ee56494",
      "short_sha": "76aee6f",
      "message": "Revert \"Make prerendering always non-blocking\" (#31080)\n\nReverts facebook/react#31056",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-09-26T16:48:57-04:00",
      "committed_date": "2024-09-26T16:48:57-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-reconciler/src/__tests__/ReactSiblingPrerendering-test.js"
      ]
    },
    {
      "sha": "60b1420f18e9473230f23f88fdc7b89fea3dbbfd",
      "short_sha": "60b1420",
      "message": "Turn on lazy context propagation for RN and RTR (#31076)\n\nFollowing https://github.com/facebook/react/pull/30935 let's turn this\r\non across the board so we can clean up experiments in RN.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-09-26T12:55:46-04:00",
      "committed_date": "2024-09-26T12:55:46-04:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js"
      ]
    },
    {
      "sha": "204a551eae466ab74ba23870f61dc2b5c71d5ab2",
      "short_sha": "204a551",
      "message": "Add: reload to profile for Fusebox (#31021)\n\n## Summary\r\n\r\nAdd reload to profile for Fusebox \r\n\r\nStacked on #31048. See\r\nhttps://github.com/facebook/react/pull/31021/commits/6be1977112596581f7ce4cfade572f43320ab06f\r\n\r\n## How did you test this change?\r\n\r\nTest E2E in [D63233256](https://www.internalfb.com/diff/D63233256)",
      "author": {
        "name": "Edmond Chui",
        "email": "1967998+EdmondChuiHW@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T16:39:51+01:00",
      "committed_date": "2024-09-26T16:39:51+01:00",
      "changed_files": [
        "packages/react-devtools-core/src/backend.js",
        "packages/react-devtools-fusebox/src/frontend.d.ts",
        "packages/react-devtools-shared/src/attachRenderer.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/hook.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "b091ef7e0be078de64721e72b8dc8d7bc33dad29",
      "short_sha": "b091ef7",
      "message": "fix: update release scripts for react devtools (#31069)\n\nThis has been broken since the migration to GitHub actions.\r\n\r\nPreviously, we've been using `buildId` as an identifier from CircleCI.\r\nI've decided to use a commit hash as an identifier, because I don't know\r\nif there is a better option, and\r\n`scripts/release/download_build_artifacts.js` allows us to download them\r\nfor a specific commit.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-26T15:42:59+01:00",
      "committed_date": "2024-09-26T15:42:59+01:00",
      "changed_files": [
        "scripts/devtools/build-and-test.js",
        "scripts/devtools/publish-release.js",
        "scripts/devtools/utils.js"
      ]
    },
    {
      "sha": "b90e440231d3c18a3d9ebbd6a74555e82a16f666",
      "short_sha": "b90e440",
      "message": "[dependabot] Ignore all fixture directories\n\nSeems like we can specify a wildcard dependency name to ignore all\ndependencies from being updated. As I understand it dependabot will\nstill run monthly but no PRs will be generated.\n\nghstack-source-id: 64b76bd532663cdc4db10ba6299e791b5908d5b1\nPull Request resolved: https://github.com/facebook/react/pull/31074",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T10:22:38-04:00",
      "committed_date": "2024-09-26T10:34:35-04:00",
      "changed_files": [
        ".github/dependabot.yml"
      ]
    },
    {
      "sha": "0e9ccde185d0556f8d672689d937b5423476beff",
      "short_sha": "0e9ccde",
      "message": "[dependabot] Remove stale directories from config\n\nghstack-source-id: 570399bc77529bf9fb005149cfd20ba59405b2bc\nPull Request resolved: https://github.com/facebook/react/pull/31073",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T10:22:37-04:00",
      "committed_date": "2024-09-26T10:34:35-04:00",
      "changed_files": [
        ".github/dependabot.yml"
      ]
    },
    {
      "sha": "b7f74f39d8979307354f0d5c8a5daa8456ea4f2f",
      "short_sha": "b7f74f3",
      "message": "[ez] Update deprecated action\n\nghstack-source-id: 991b314fd610bcbca68df52149866b2c6d8e6799\nPull Request resolved: https://github.com/facebook/react/pull/31047",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T09:55:39-04:00",
      "committed_date": "2024-09-26T10:20:10-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "c900ee0cce3be7703f5abd944611bfe932d5a530",
      "short_sha": "c900ee0",
      "message": "[ez] Make commit sha clickable for fbsource\n\nghstack-source-id: 1307b9a83a8613c08f11be5397ab45719df00992\nPull Request resolved: https://github.com/facebook/react/pull/31046",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T09:55:37-04:00",
      "committed_date": "2024-09-26T10:20:10-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "64be7b4dccb7b19404b94afdfab955e1c73796df",
      "short_sha": "64be7b4",
      "message": "[ci] Fix missing values during manual workflow dispatch\n\nIt seems like the github.event.workflow_run payload is only populated\nfor non manual runs of the workflow, so this would crash the manual\ndispatch\n\nTest plan: https://github.com/facebook/react/actions/runs/11017512571\ncompletes\n\nghstack-source-id: fce02b17f85ac4762de0561764785882e767c872\nPull Request resolved: https://github.com/facebook/react/pull/31045",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T09:55:36-04:00",
      "committed_date": "2024-09-26T10:20:10-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "db320ea4d910d360ccb83850ccdbc464a77fc1c5",
      "short_sha": "db320ea",
      "message": "Bump rollup from 3.20.0 to 3.29.5 (#31072)\n\nBumps [rollup](https://github.com/rollup/rollup) from 3.20.0 to 3.29.5.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/rollup/rollup/releases\">rollup's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>v3.29.4</h2>\r\n<h2>3.29.4</h2>\r\n<p><em>2023-09-28</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Fix static analysis when an exported function uses callbacks (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5158\">#5158</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5158\">#5158</a>:\r\nDeoptimize all parameters when losing track of a function (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>v3.29.3</h2>\r\n<h2>3.29.3</h2>\r\n<p><em>2023-09-24</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Fix a bug where code was wrongly tree-shaken after mutating function\r\nparameters (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5153\">#5153</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5145\">#5145</a>:\r\ndocs: improve the docs repl appearance in the light mode (<a\r\nhref=\"https://github.com/TrickyPi\"><code>@​TrickyPi</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5148\">#5148</a>:\r\nchore(deps): update dependency\r\n<code>@​vue/eslint-config-typescript</code> to v12 (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot])</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5149\">#5149</a>:\r\nchore(deps): lock file maintenance minor/patch updates (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot])</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5153\">#5153</a>:\r\nFully deoptimize first level path when deoptimizing nested parameter\r\npaths (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>v3.29.2</h2>\r\n<h2>3.29.2</h2>\r\n<p><em>2023-09-15</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Export <code>TreeshakingPreset</code> type (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5131\">#5131</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5131\">#5131</a>:\r\nfix: exports <code>TreeshakingPreset</code> (<a\r\nhref=\"https://github.com/moltar\"><code>@​moltar</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5134\">#5134</a>:\r\ndocs: steps to enable symlinks on windows (<a\r\nhref=\"https://github.com/thebanjomatic\"><code>@​thebanjomatic</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5137\">#5137</a>:\r\nchore(deps): lock file maintenance minor/patch updates (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot])</li>\r\n</ul>\r\n<h2>v3.29.1</h2>\r\n<h2>3.29.1</h2>\r\n<p><em>2023-09-10</em></p>\r\n<h3>Bug Fixes</h3>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/rollup/rollup/blob/master/CHANGELOG.md\">rollup's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h1>rollup changelog</h1>\r\n<h2>4.22.4</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS\r\nbundles when run in a browser context (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5671\">#5671</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5670\">#5670</a>:\r\nrefactor: Use object.prototype to check for reserved properties (<a\r\nhref=\"https://github.com/YuHyeonWook\"><code>@​YuHyeonWook</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5671\">#5671</a>:\r\nFix DOM Clobbering CVE (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.3</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Ensure that mutations in modules without side effects are observed\r\nwhile properly handling transitive dependencies (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5669\">#5669</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5669\">#5669</a>:\r\nEnsure impure dependencies of pure modules are added (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.2</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert fix for side effect free modules until other issues are\r\ninvestigated (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5667\">#5667</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5667\">#5667</a>:\r\nPartially revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5658\">#5658</a>\r\nand re-apply <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n(<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.1</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n&quot;stable chunk hashes&quot; while issues are being investigated</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5663\">#5663</a>:\r\nchore(deps): update dependency inquirer to v11 (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot], <a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/dfd233d3a9feb18aa69b49b6c1da0248a4f1c6e3\"><code>dfd233d</code></a>\r\n3.29.5</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4\"><code>2ef77c0</code></a>\r\nFix DOM Clobbering CVE</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/a6448b99f725d457e35821b73a865b5c4d4c6a61\"><code>a6448b9</code></a>\r\n3.29.4</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/4e92d60fa90cead39481e3703d26e5d812f43bd1\"><code>4e92d60</code></a>\r\nDeoptimize all parameters when losing track of a function (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5158\">#5158</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/801ffd1a9bebe550b6a0ce665bdca1ead06313de\"><code>801ffd1</code></a>\r\n3.29.3</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/353e4628284b1ef4d8a8b47d895881e5ce6546f4\"><code>353e462</code></a>\r\nFully deoptimize first level path when deoptimizing nested parameter\r\npaths (#...</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/a1a89e77fbe06a23229486194970f0813593e9df\"><code>a1a89e7</code></a>\r\nchore(deps): update dependency\r\n<code>@​vue/eslint-config-typescript</code> to v12 (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5148\">#5148</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/cc14f7070af8c02ac2d477bda043f3203955291d\"><code>cc14f70</code></a>\r\nchore(deps): lock file maintenance minor/patch updates (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5149\">#5149</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/1e8355b2b68811da24e1d96dea32176b403dc377\"><code>1e8355b</code></a>\r\ndocs: improve the docs repl appearance in the light mode (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5145\">#5145</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/5950fc8a6bf6c9f8ef1c7ae05bb8c43d5c313212\"><code>5950fc8</code></a>\r\nAdapt branches in REPL workflow</li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/rollup/rollup/compare/v3.20.0...v3.29.5\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=3.20.0&new-version=3.29.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
      "author": {
        "name": "dependabot[bot]",
        "email": "49699333+dependabot[bot]@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T09:56:33-04:00",
      "committed_date": "2024-09-26T09:56:33-04:00",
      "changed_files": [
        "package.json",
        "yarn.lock"
      ]
    },
    {
      "sha": "f7aff7f15c451dc78eb967c726be4f612bcaf966",
      "short_sha": "f7aff7f",
      "message": "Bump express from 4.18.2 to 4.21.0 (#30980)\n\nBumps [express](https://github.com/expressjs/express) from 4.18.2 to\r\n4.21.0.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/expressjs/express/releases\">express's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>4.21.0</h2>\r\n<h2>What's Changed</h2>\r\n<ul>\r\n<li>Deprecate <code>&quot;back&quot;</code> magic string in redirects by\r\n<a href=\"https://github.com/blakeembrey\"><code>@​blakeembrey</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5935\">expressjs/express#5935</a></li>\r\n<li>finalhandler@1.3.1 by <a\r\nhref=\"https://github.com/wesleytodd\"><code>@​wesleytodd</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5954\">expressjs/express#5954</a></li>\r\n<li>fix(deps): serve-static@1.16.2 by <a\r\nhref=\"https://github.com/wesleytodd\"><code>@​wesleytodd</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5951\">expressjs/express#5951</a></li>\r\n<li>Upgraded dependency qs to 6.13.0 to match qs in body-parser by <a\r\nhref=\"https://github.com/agadzinski93\"><code>@​agadzinski93</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5946\">expressjs/express#5946</a></li>\r\n</ul>\r\n<h2>New Contributors</h2>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/agadzinski93\"><code>@​agadzinski93</code></a>\r\nmade their first contribution in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5946\">expressjs/express#5946</a></li>\r\n</ul>\r\n<p><strong>Full Changelog</strong>: <a\r\nhref=\"https://github.com/expressjs/express/compare/4.20.0...4.21.0\">https://github.com/expressjs/express/compare/4.20.0...4.21.0</a></p>\r\n<h2>4.20.0</h2>\r\n<h2>What's Changed</h2>\r\n<h3>Important</h3>\r\n<ul>\r\n<li>IMPORTANT: The default <code>depth</code> level for parsing\r\nURL-encoded data is now <code>32</code> (previously was\r\n<code>Infinity</code>)</li>\r\n<li>Remove link renderization in html while using\r\n<code>res.redirect</code></li>\r\n</ul>\r\n<h3>Other Changes</h3>\r\n<ul>\r\n<li>4.19.2 Staging by <a\r\nhref=\"https://github.com/wesleytodd\"><code>@​wesleytodd</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5561\">expressjs/express#5561</a></li>\r\n<li>remove duplicate location test for data uri by <a\r\nhref=\"https://github.com/wesleytodd\"><code>@​wesleytodd</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5562\">expressjs/express#5562</a></li>\r\n<li>feat: document beta releases expectations by <a\r\nhref=\"https://github.com/marco-ippolito\"><code>@​marco-ippolito</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5565\">expressjs/express#5565</a></li>\r\n<li>Cut down on duplicated CI runs by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5564\">expressjs/express#5564</a></li>\r\n<li>Add a Threat Model by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5526\">expressjs/express#5526</a></li>\r\n<li>Assign captain of encodeurl by <a\r\nhref=\"https://github.com/blakeembrey\"><code>@​blakeembrey</code></a> in\r\n<a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5579\">expressjs/express#5579</a></li>\r\n<li>Nominate jonchurch as repo captain for <code>http-errors</code>,\r\n<code>expressjs.com</code>, <code>morgan</code>, <code>cors</code>,\r\n<code>body-parser</code> by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5587\">expressjs/express#5587</a></li>\r\n<li>docs: update Security.md by <a\r\nhref=\"https://github.com/inigomarquinez\"><code>@​inigomarquinez</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5590\">expressjs/express#5590</a></li>\r\n<li>docs: update triage nomination policy by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5600\">expressjs/express#5600</a></li>\r\n<li>Add CodeQL (SAST) by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5433\">expressjs/express#5433</a></li>\r\n<li>docs: add UlisesGascon as triage initiative captain by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5605\">expressjs/express#5605</a></li>\r\n<li>deps: encodeurl@~2.0.0 by <a\r\nhref=\"https://github.com/blakeembrey\"><code>@​blakeembrey</code></a> in\r\n<a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5569\">expressjs/express#5569</a></li>\r\n<li>skip QUERY method test by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5628\">expressjs/express#5628</a></li>\r\n<li>ignore ETAG query test on 21 and 22, reuse skip util by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5639\">expressjs/express#5639</a></li>\r\n<li>add support Node.js@22 in the CI by <a\r\nhref=\"https://github.com/mertcanaltin\"><code>@​mertcanaltin</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5627\">expressjs/express#5627</a></li>\r\n<li>doc: add table of contents, tc/triager lists to readme by <a\r\nhref=\"https://github.com/mertcanaltin\"><code>@​mertcanaltin</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5619\">expressjs/express#5619</a></li>\r\n<li>List and sort all projects, add captains by <a\r\nhref=\"https://github.com/blakeembrey\"><code>@​blakeembrey</code></a> in\r\n<a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5653\">expressjs/express#5653</a></li>\r\n<li>docs: add <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nas captain for cookie-parser by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5666\">expressjs/express#5666</a></li>\r\n<li>✨ bring back query tests for node 21 by <a\r\nhref=\"https://github.com/ctcpip\"><code>@​ctcpip</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5690\">expressjs/express#5690</a></li>\r\n<li>[v4] Deprecate <code>res.clearCookie</code> accepting\r\n<code>options.maxAge</code> and <code>options.expires</code> by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5672\">expressjs/express#5672</a></li>\r\n<li>skip QUERY tests for Node 21 only, still not supported by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5695\">expressjs/express#5695</a></li>\r\n<li>📝 update people, add ctcpip to TC by <a\r\nhref=\"https://github.com/ctcpip\"><code>@​ctcpip</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5683\">expressjs/express#5683</a></li>\r\n<li>remove minor version pinning from ci by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5722\">expressjs/express#5722</a></li>\r\n<li>Fix link variable use in attribution section of CODE OF CONDUCT by\r\n<a href=\"https://github.com/IamLizu\"><code>@​IamLizu</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5762\">expressjs/express#5762</a></li>\r\n<li>Replace Appveyor windows testing with GHA by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5599\">expressjs/express#5599</a></li>\r\n<li>Add OSSF Scorecard badge by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5436\">expressjs/express#5436</a></li>\r\n<li>update scorecard link by <a\r\nhref=\"https://github.com/bjohansebas\"><code>@​bjohansebas</code></a> in\r\n<a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5814\">expressjs/express#5814</a></li>\r\n<li>Nominate <a\r\nhref=\"https://github.com/IamLizu\"><code>@​IamLizu</code></a> to the\r\ntriage team by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5836\">expressjs/express#5836</a></li>\r\n<li>deps: path-to-regexp@0.1.8 by <a\r\nhref=\"https://github.com/blakeembrey\"><code>@​blakeembrey</code></a> in\r\n<a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5603\">expressjs/express#5603</a></li>\r\n</ul>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/expressjs/express/blob/4.21.0/History.md\">express's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h1>4.21.0 / 2024-09-11</h1>\r\n<ul>\r\n<li>Deprecate <code>res.location(&quot;back&quot;)</code> and\r\n<code>res.redirect(&quot;back&quot;)</code> magic string</li>\r\n<li>deps: serve-static@1.16.2\r\n<ul>\r\n<li>includes send@0.19.0</li>\r\n</ul>\r\n</li>\r\n<li>deps: finalhandler@1.3.1</li>\r\n<li>deps: qs@6.13.0</li>\r\n</ul>\r\n<h1>4.20.0 / 2024-09-10</h1>\r\n<ul>\r\n<li>deps: serve-static@0.16.0\r\n<ul>\r\n<li>Remove link renderization in html while redirecting</li>\r\n</ul>\r\n</li>\r\n<li>deps: send@0.19.0\r\n<ul>\r\n<li>Remove link renderization in html while redirecting</li>\r\n</ul>\r\n</li>\r\n<li>deps: body-parser@0.6.0\r\n<ul>\r\n<li>add <code>depth</code> option to customize the depth level in the\r\nparser</li>\r\n<li>IMPORTANT: The default <code>depth</code> level for parsing\r\nURL-encoded data is now <code>32</code> (previously was\r\n<code>Infinity</code>)</li>\r\n</ul>\r\n</li>\r\n<li>Remove link renderization in html while using\r\n<code>res.redirect</code></li>\r\n<li>deps: path-to-regexp@0.1.10\r\n<ul>\r\n<li>Adds support for named matching groups in the routes using a\r\nregex</li>\r\n<li>Adds backtracking protection to parameters without regexes\r\ndefined</li>\r\n</ul>\r\n</li>\r\n<li>deps: encodeurl@~2.0.0\r\n<ul>\r\n<li>Removes encoding of <code>\\</code>, <code>|</code>, and\r\n<code>^</code> to align better with URL spec</li>\r\n</ul>\r\n</li>\r\n<li>Deprecate passing <code>options.maxAge</code> and\r\n<code>options.expires</code> to <code>res.clearCookie</code>\r\n<ul>\r\n<li>Will be ignored in v5, clearCookie will set a cookie with an expires\r\nin the past to instruct clients to delete the cookie</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h1>4.19.2 / 2024-03-25</h1>\r\n<ul>\r\n<li>Improved fix for open redirect allow list bypass</li>\r\n</ul>\r\n<h1>4.19.1 / 2024-03-20</h1>\r\n<ul>\r\n<li>Allow passing non-strings to res.location with new encoding handling\r\nchecks</li>\r\n</ul>\r\n<h1>4.19.0 / 2024-03-20</h1>\r\n<ul>\r\n<li>Prevent open redirect allow list bypass due to encodeurl</li>\r\n<li>deps: cookie@0.6.0</li>\r\n</ul>\r\n<h1>4.18.3 / 2024-02-29</h1>\r\n<ul>\r\n<li>Fix routing requests without method</li>\r\n<li>deps: body-parser@1.20.2\r\n<ul>\r\n<li>Fix strict json error message on Node.js 19+</li>\r\n<li>deps: content-type@~1.0.5</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/7e562c6d8daddff4604f8efaaf9db2cf98c6dcff\"><code>7e562c6</code></a>\r\n4.21.0</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/1bcde96bc87c4704df9a704271d1167064ab56bb\"><code>1bcde96</code></a>\r\nfix(deps): qs@6.13.0 (<a\r\nhref=\"https://redirect.github.com/expressjs/express/issues/5946\">#5946</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/7d364775688be98aaa973302e066d0da9f438997\"><code>7d36477</code></a>\r\nfix(deps): serve-static@1.16.2 (<a\r\nhref=\"https://redirect.github.com/expressjs/express/issues/5951\">#5951</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/40d2d8f2c882712a0f2e4603c38d166c79676b2b\"><code>40d2d8f</code></a>\r\nfix(deps): finalhandler@1.3.1</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/77ada906dba57fd6e308f0d750e01653dbeaddfc\"><code>77ada90</code></a>\r\nDeprecate <code>&quot;back&quot;</code> magic string in redirects (<a\r\nhref=\"https://redirect.github.com/expressjs/express/issues/5935\">#5935</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/21df421ebc7a5249bb31101da666bbf22adc3f18\"><code>21df421</code></a>\r\n4.20.0</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/4c9ddc1c47bf579e55c2fe837d76a952e9fd8959\"><code>4c9ddc1</code></a>\r\nfeat: upgrade to serve-static@0.16.0</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/9ebe5d500d22cbb2b8aaa73446866b084c747971\"><code>9ebe5d5</code></a>\r\nfeat: upgrade to send@0.19.0 (<a\r\nhref=\"https://redirect.github.com/expressjs/express/issues/5928\">#5928</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/ec4a01b6b8814d7b007f36a3023f4dbafdbc3d09\"><code>ec4a01b</code></a>\r\nfeat: upgrade to body-parser@1.20.3 (<a\r\nhref=\"https://redirect.github.com/expressjs/express/issues/5926\">#5926</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/54271f69b511fea198471e6ff3400ab805d6b553\"><code>54271f6</code></a>\r\nfix: don't render redirect values in anchor href</li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/expressjs/express/compare/4.18.2...4.21.0\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<details>\r\n<summary>Maintainer changes</summary>\r\n<p>This version was pushed to npm by <a\r\nhref=\"https://www.npmjs.com/~wesleytodd\">wesleytodd</a>, a new releaser\r\nfor express since your current version.</p>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=express&package-manager=npm_and_yarn&previous-version=4.18.2&new-version=4.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
      "author": {
        "name": "dependabot[bot]",
        "email": "49699333+dependabot[bot]@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T09:56:24-04:00",
      "committed_date": "2024-09-26T09:56:24-04:00",
      "changed_files": [
        "yarn.lock"
      ]
    },
    {
      "sha": "f04b8fc88e83c3cbe670bf6ec46d27cfcb3f52e9",
      "short_sha": "f04b8fc",
      "message": "Bump ws from 6.2.2 to 6.2.3 in /scripts/release (#30463)\n\nBumps [ws](https://github.com/websockets/ws) from 6.2.2 to 6.2.3.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/websockets/ws/releases\">ws's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>6.2.3</h2>\r\n<h1>Bug fixes</h1>\r\n<ul>\r\n<li>Backported e55e5106 to the 6.x release line (eeb76d31).</li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/websockets/ws/commit/d87f3b6d3a00513af9bbb74f45ba9183af4e5f43\"><code>d87f3b6</code></a>\r\n[dist] 6.2.3</li>\r\n<li><a\r\nhref=\"https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63\"><code>eeb76d3</code></a>\r\n[security] Fix crash when the Upgrade header cannot be read (<a\r\nhref=\"https://redirect.github.com/websockets/ws/issues/2231\">#2231</a>)</li>\r\n<li>See full diff in <a\r\nhref=\"https://github.com/websockets/ws/compare/6.2.2...6.2.3\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ws&package-manager=npm_and_yarn&previous-version=6.2.2&new-version=6.2.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\n> **Note**\r\n> Automatic rebases have been disabled on this pull request as it has\r\nbeen open for over 30 days.\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
      "author": {
        "name": "dependabot[bot]",
        "email": "49699333+dependabot[bot]@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T09:56:10-04:00",
      "committed_date": "2024-09-26T09:56:10-04:00",
      "changed_files": [
        "scripts/release/yarn.lock"
      ]
    },
    {
      "sha": "d0772d586650baa5cf5c676ab1092a075ffdf831",
      "short_sha": "d0772d5",
      "message": "Bump axios from 1.7.1 to 1.7.4 in /compiler (#30694)\n\nBumps [axios](https://github.com/axios/axios) from 1.7.1 to 1.7.4.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/axios/axios/releases\">axios's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>Release v1.7.4</h2>\r\n<h2>Release notes:</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>sec:</strong> CVE-2024-39338 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)\r\n(<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6543\">#6543</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/6b6b605eaf73852fb2dae033f1e786155959de3a\">6b6b605</a>)</li>\r\n<li><strong>sec:</strong> disregard protocol-relative URL to remediate\r\nSSRF (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/07a661a2a6b9092c4aa640dcc7f724ec5e65bdda\">07a661a</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/levpachmanov\"\r\ntitle=\"+47/-11 ([#6543](https://github.com/axios/axios/issues/6543)\r\n)\">Lev Pachmanov</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/hainenber\"\r\ntitle=\"+49/-4 ([#6539](https://github.com/axios/axios/issues/6539) )\">Đỗ\r\nTrọng Hải</a></li>\r\n</ul>\r\n<h2>Release v1.7.3</h2>\r\n<h2>Release notes:</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>adapter:</strong> fix progress event emitting; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6518\">#6518</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/e3c76fc9bdd03aa4d98afaf211df943e2031453f\">e3c76fc</a>)</li>\r\n<li><strong>fetch:</strong> fix withCredentials request config (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6505\">#6505</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/85d4d0ea0aae91082f04e303dec46510d1b4e787\">85d4d0e</a>)</li>\r\n<li><strong>xhr:</strong> return original config on errors from XHR\r\nadapter (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6515\">#6515</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/8966ee7ea62ecbd6cfb39a905939bcdab5cf6388\">8966ee7</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a\r\nhref=\"https://github.com/DigitalBrainJS\" title=\"+211/-159\r\n([#6518](https://github.com/axios/axios/issues/6518)\r\n[#6519](https://github.com/axios/axios/issues/6519) )\">Dmitriy\r\nMozgovoy</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/ValeraS\"\r\ntitle=\"+3/-3 ([#6515](https://github.com/axios/axios/issues/6515)\r\n)\">Valerii Sidorenko</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/prianyu\"\r\ntitle=\"+2/-2 ([#6505](https://github.com/axios/axios/issues/6505)\r\n)\">prianYu</a></li>\r\n</ul>\r\n<h2>Release v1.7.2</h2>\r\n<h2>Release notes:</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>fetch:</strong> enhance fetch API detection; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6413\">#6413</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/4f79aef81b7c4644328365bfc33acf0a9ef595bc\">4f79aef</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a\r\nhref=\"https://github.com/DigitalBrainJS\" title=\"+3/-3\r\n([#6413](https://github.com/axios/axios/issues/6413) )\">Dmitriy\r\nMozgovoy</a></li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/axios/axios/blob/v1.x/CHANGELOG.md\">axios's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h2><a\r\nhref=\"https://github.com/axios/axios/compare/v1.7.3...v1.7.4\">1.7.4</a>\r\n(2024-08-13)</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>sec:</strong> CVE-2024-39338 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)\r\n(<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6543\">#6543</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/6b6b605eaf73852fb2dae033f1e786155959de3a\">6b6b605</a>)</li>\r\n<li><strong>sec:</strong> disregard protocol-relative URL to remediate\r\nSSRF (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/07a661a2a6b9092c4aa640dcc7f724ec5e65bdda\">07a661a</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/levpachmanov\"\r\ntitle=\"+47/-11 ([#6543](https://github.com/axios/axios/issues/6543)\r\n)\">Lev Pachmanov</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/hainenber\"\r\ntitle=\"+49/-4 ([#6539](https://github.com/axios/axios/issues/6539) )\">Đỗ\r\nTrọng Hải</a></li>\r\n</ul>\r\n<h2><a\r\nhref=\"https://github.com/axios/axios/compare/v1.7.2...v1.7.3\">1.7.3</a>\r\n(2024-08-01)</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>adapter:</strong> fix progress event emitting; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6518\">#6518</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/e3c76fc9bdd03aa4d98afaf211df943e2031453f\">e3c76fc</a>)</li>\r\n<li><strong>fetch:</strong> fix withCredentials request config (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6505\">#6505</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/85d4d0ea0aae91082f04e303dec46510d1b4e787\">85d4d0e</a>)</li>\r\n<li><strong>xhr:</strong> return original config on errors from XHR\r\nadapter (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6515\">#6515</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/8966ee7ea62ecbd6cfb39a905939bcdab5cf6388\">8966ee7</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a\r\nhref=\"https://github.com/DigitalBrainJS\" title=\"+211/-159\r\n([#6518](https://github.com/axios/axios/issues/6518)\r\n[#6519](https://github.com/axios/axios/issues/6519) )\">Dmitriy\r\nMozgovoy</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/ValeraS\"\r\ntitle=\"+3/-3 ([#6515](https://github.com/axios/axios/issues/6515)\r\n)\">Valerii Sidorenko</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/prianyu\"\r\ntitle=\"+2/-2 ([#6505](https://github.com/axios/axios/issues/6505)\r\n)\">prianYu</a></li>\r\n</ul>\r\n<h2><a\r\nhref=\"https://github.com/axios/axios/compare/v1.7.1...v1.7.2\">1.7.2</a>\r\n(2024-05-21)</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>fetch:</strong> enhance fetch API detection; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6413\">#6413</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/4f79aef81b7c4644328365bfc33acf0a9ef595bc\">4f79aef</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a\r\nhref=\"https://github.com/DigitalBrainJS\" title=\"+3/-3\r\n([#6413](https://github.com/axios/axios/issues/6413) )\">Dmitriy\r\nMozgovoy</a></li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/abd24a7367726616e60dfc04cb394b4be37cf597\"><code>abd24a7</code></a>\r\nchore(release): v1.7.4 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6544\">#6544</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/6b6b605eaf73852fb2dae033f1e786155959de3a\"><code>6b6b605</code></a>\r\nfix(sec): CVE-2024-39338 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)\r\n(<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6543\">#6543</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/07a661a2a6b9092c4aa640dcc7f724ec5e65bdda\"><code>07a661a</code></a>\r\nfix(sec): disregard protocol-relative URL to remediate SSRF (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/c6cce43cd94489f655f4488c5a50ecaf781c94f2\"><code>c6cce43</code></a>\r\nchore(release): v1.7.3 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6521\">#6521</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/e3c76fc9bdd03aa4d98afaf211df943e2031453f\"><code>e3c76fc</code></a>\r\nfix(adapter): fix progress event emitting; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6518\">#6518</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/85d4d0ea0aae91082f04e303dec46510d1b4e787\"><code>85d4d0e</code></a>\r\nfix(fetch): fix withCredentials request config (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6505\">#6505</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/92cd8ed94362f929d3d0ed85ca84296c0ac8fd6d\"><code>92cd8ed</code></a>\r\nchore(github): update ISSUE_TEMPLATE.md (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6519\">#6519</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/8966ee7ea62ecbd6cfb39a905939bcdab5cf6388\"><code>8966ee7</code></a>\r\nfix(xhr): return original config on errors from XHR adapter (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6515\">#6515</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/0e4f9fa29077ebee4499facea6be1492b42e8a26\"><code>0e4f9fa</code></a>\r\nchore(release): v1.7.2 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6414\">#6414</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/4f79aef81b7c4644328365bfc33acf0a9ef595bc\"><code>4f79aef</code></a>\r\nfix(fetch): enhance fetch API detection; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6413\">#6413</a>)</li>\r\n<li>See full diff in <a\r\nhref=\"https://github.com/axios/axios/compare/v1.7.1...v1.7.4\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=axios&package-manager=npm_and_yarn&previous-version=1.7.1&new-version=1.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\n> **Note**\r\n> Automatic rebases have been disabled on this pull request as it has\r\nbeen open for over 30 days.\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
      "author": {
        "name": "dependabot[bot]",
        "email": "49699333+dependabot[bot]@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T09:51:12-04:00",
      "committed_date": "2024-09-26T09:51:12-04:00",
      "changed_files": [
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "9927ab238bde0a2dcadc881e56d6a87208e93e45",
      "short_sha": "9927ab2",
      "message": "Bump rollup from 4.13.2 to 4.22.4 in /compiler (#31039)\n\nBumps [rollup](https://github.com/rollup/rollup) from 4.13.2 to 4.22.4.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/rollup/rollup/releases\">rollup's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>v4.22.4</h2>\r\n<h2>4.22.4</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS\r\nbundles when run in a browser context (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5671\">#5671</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5670\">#5670</a>:\r\nrefactor: Use object.prototype to check for reserved properties (<a\r\nhref=\"https://github.com/YuHyeonWook\"><code>@​YuHyeonWook</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5671\">#5671</a>:\r\nFix DOM Clobbering CVE (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>v4.22.3</h2>\r\n<h2>4.22.3</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Ensure that mutations in modules without side effects are observed\r\nwhile properly handling transitive dependencies (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5669\">#5669</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5669\">#5669</a>:\r\nEnsure impure dependencies of pure modules are added (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>v4.22.2</h2>\r\n<h2>4.22.2</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert fix for side effect free modules until other issues are\r\ninvestigated (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5667\">#5667</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5667\">#5667</a>:\r\nPartially revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5658\">#5658</a>\r\nand re-apply <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n(<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>v4.22.1</h2>\r\n<h2>4.22.1</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n&quot;stable chunk hashes&quot; while issues are being investigated</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/rollup/rollup/blob/master/CHANGELOG.md\">rollup's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h2>4.22.4</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS\r\nbundles when run in a browser context (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5671\">#5671</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5670\">#5670</a>:\r\nrefactor: Use object.prototype to check for reserved properties (<a\r\nhref=\"https://github.com/YuHyeonWook\"><code>@​YuHyeonWook</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5671\">#5671</a>:\r\nFix DOM Clobbering CVE (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.3</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Ensure that mutations in modules without side effects are observed\r\nwhile properly handling transitive dependencies (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5669\">#5669</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5669\">#5669</a>:\r\nEnsure impure dependencies of pure modules are added (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.2</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert fix for side effect free modules until other issues are\r\ninvestigated (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5667\">#5667</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5667\">#5667</a>:\r\nPartially revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5658\">#5658</a>\r\nand re-apply <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n(<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.1</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n&quot;stable chunk hashes&quot; while issues are being investigated</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5663\">#5663</a>:\r\nchore(deps): update dependency inquirer to v11 (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot], <a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5664\">#5664</a>:\r\nchore(deps): lock file maintenance minor/patch updates (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot])</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5665\">#5665</a>:\r\nfix: type in CI file (<a\r\nhref=\"https://github.com/YuHyeonWook\"><code>@​YuHyeonWook</code></a>)</li>\r\n</ul>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/79c0aba353ca84c0e22c3cfe9eee433ba83f3670\"><code>79c0aba</code></a>\r\n4.22.4</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/e2552c9e955e0a61f70f508200ee9f752f85a541\"><code>e2552c9</code></a>\r\nFix DOM Clobbering CVE (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5671\">#5671</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/10ab90ea612f80de21c6c433c2d792eaf7b45f1c\"><code>10ab90e</code></a>\r\nrefactor: Use object.prototype to check for reserved properties (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5670\">#5670</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/e1cba8e84a0c01dd16580ba7a2536a988dfb4e18\"><code>e1cba8e</code></a>\r\n4.22.3</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/59cec3e86748369ce887f8fdb4ef7351335ab281\"><code>59cec3e</code></a>\r\nEnsure impure dependencies of pure modules are added (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5669\">#5669</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/b86ffd776cfa906573d36c3f019316d02445d9ef\"><code>b86ffd7</code></a>\r\n4.22.2</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/d5ff63de9e317283f059bde06320bca11cf90488\"><code>d5ff63d</code></a>\r\nPartially revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5658\">#5658</a>\r\nand re-apply <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n(<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5667\">#5667</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/0a821d931894f7f6f4ee33285b6f0925e10c8348\"><code>0a821d9</code></a>\r\nCreate SECURITY.md</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/76e962daca5b7352bf199c28fa0a10ad4745c5e7\"><code>76e962d</code></a>\r\n4.22.1</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/68c23da8824e05e84460a9a5bf18c4e91912a52a\"><code>68c23da</code></a>\r\nPartially revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a></li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/rollup/rollup/compare/v4.13.2...v4.22.4\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=4.13.2&new-version=4.22.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
      "author": {
        "name": "dependabot[bot]",
        "email": "49699333+dependabot[bot]@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T09:45:02-04:00",
      "committed_date": "2024-09-26T09:45:02-04:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "f8024b0686c87634b233262e8a05e4a37a292e87",
      "short_sha": "f8024b0",
      "message": "refactor: allow custom impl of backend realod-to-profile support check (#31048)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nIn preparation to support reload-to-profile in Fusebox (#31021), we need\r\na way to check capability of different backends, e.g. web vs React\r\nNative.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\n* Default, e.g. existing web impl = no-op\r\n* Custom impl: is called",
      "author": {
        "name": "Edmond Chui",
        "email": "1967998+EdmondChuiHW@users.noreply.github.com"
      },
      "authored_date": "2024-09-26T12:39:28+01:00",
      "committed_date": "2024-09-26T12:39:28+01:00",
      "changed_files": [
        "packages/react-devtools-core/src/backend.js",
        "packages/react-devtools-extensions/src/contentScripts/backendManager.js",
        "packages/react-devtools-inline/src/backend.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/index.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/devtools/store.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "d66fa02a303fc53d901bdb0d7bbdaec3e6774b19",
      "short_sha": "d66fa02",
      "message": "fix: use public instance in Fiber renderer and expose it from getInspectorDataForViewAtPoint (#31068)\n\nReact DevTools no longer operates with just Fibers, it now builds its\r\nown Shadow Tree, which represents the tree on the Host (Fabric on\r\nNative, DOM on Web).\r\n\r\nWe have to keep track of public instances for a select-to-inspect\r\nfeature. We've recently changed this logic in\r\nhttps://github.com/facebook/react/pull/30831, and looks like we've been\r\nincorrectly getting a public instance for Fabric case.\r\n\r\nNot only this, turns out that all `getInspectorData...` APIs are\r\nreturning Fibers, and not public instances. I have to expose it, so that\r\nReact DevTools can correctly identify the element, which was selected.\r\n\r\nChanges for React Native are in\r\n[D63421463](https://www.internalfb.com/diff/D63421463)",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-26T10:17:16+01:00",
      "committed_date": "2024-09-26T10:17:16+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-native-renderer/src/ReactNativeFiberInspector.js",
        "packages/react-native-renderer/src/ReactNativeTypes.js"
      ]
    },
    {
      "sha": "778e1ed2e5ec22d4bac48e14167d3b4a6b28e8b8",
      "short_sha": "778e1ed",
      "message": "[Fiber] Fix missing render times when we cancel a pending commit (#31065)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-09-26T00:20:03+02:00",
      "committed_date": "2024-09-26T00:20:03+02:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "0f1856c49febe96923e469f98c0b123130ea015c",
      "short_sha": "0f1856c",
      "message": "Make prerendering always non-blocking (#31056)\n\nWhen a synchronous update suspends, and we prerender the siblings, the\r\nprerendering should be non-blocking so that we can immediately restart\r\nonce the data arrives.\r\n\r\nThis happens automatically when there's a Suspense boundary, because we\r\nimmediately commit the boundary and then proceed to a Retry render,\r\nwhich are always concurrent. When there's not a Suspense boundary, there\r\nis no Retry, so we need to take care to switch from the synchronous work\r\nloop to the concurrent one, to enable time slicing.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-09-25T16:31:44-04:00",
      "committed_date": "2024-09-25T16:31:44-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-reconciler/src/__tests__/ReactSiblingPrerendering-test.js"
      ]
    },
    {
      "sha": "3c7667a694face1827356a7c90ee6f86a9c0baa0",
      "short_sha": "3c7667a",
      "message": "Unify perform{Sync,Concurrent}WorkOnRoot implementation (#31029)\n\nOver time the behavior of these two paths has converged to be\r\nessentially the same. So this merges them back into one function. This\r\nshould save some code size and also make it harder for the behavior to\r\naccidentally diverge. (For the same reason, rolling out this change\r\nmight expose some areas where we had already accidentally diverged.)",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-09-25T14:33:11-04:00",
      "committed_date": "2024-09-25T14:33:11-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberRootScheduler.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactSiblingPrerendering-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseyCommitPhase-test.js"
      ]
    },
    {
      "sha": "f9ebd85a196948be17efdd6774b4d0464b3b1f53",
      "short_sha": "f9ebd85",
      "message": "Increase nested update limit to 100 (#31061)\n\nWe're seeing the limit hit in some tests after enabling sibling\r\nprerendering. Let's bump the limit so we can run more tests and gather\r\nmore signal on the changes. When we understand the scope of the problem\r\nwe can determine whether we need to change how the updates are counted\r\nin prerenders and/or fix specific areas of product code.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-09-25T11:50:41-04:00",
      "committed_date": "2024-09-25T11:50:41-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactLegacyUpdates-test.js",
        "packages/react-dom/src/__tests__/ReactUpdates-test.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "d2e9b9b4dc22639e2c51fb34e9388b9971ee3e27",
      "short_sha": "d2e9b9b",
      "message": "React DevTools 5.3.1 -> 6.0.0 (#31058)\n\nFull list of changes:\r\n* refactor: data source for errors and warnings tracking is now in Store\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31010](https://github.com/facebook/react/pull/31010))\r\n* fix: consider alternate as a key for componentLogsEntry when\r\ninspecting raw fiber instance ([hoxyq](https://github.com/hoxyq) in\r\n[#31009](https://github.com/facebook/react/pull/31009))\r\n* Fix: profiling crashes #30661 #28838\r\n([EdmondChuiHW](https://github.com/EdmondChuiHW) in\r\n[#31024](https://github.com/facebook/react/pull/31024))\r\n* chore: remove using local storage for persisting console settings on\r\nthe frontend ([hoxyq](https://github.com/hoxyq) in\r\n[#31002](https://github.com/facebook/react/pull/31002))\r\n* feat: display message if user ended up opening hook script\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31000](https://github.com/facebook/react/pull/31000))\r\n* feat: expose installHook with settings argument from\r\nreact-devtools-core/backend ([hoxyq](https://github.com/hoxyq) in\r\n[#30987](https://github.com/facebook/react/pull/30987))\r\n* chore: remove settings manager from react-devtools-core\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30986](https://github.com/facebook/react/pull/30986))\r\n* feat[react-devtools/extension]: use chrome.storage to persist settings\r\nacross sessions ([hoxyq](https://github.com/hoxyq) in\r\n[#30636](https://github.com/facebook/react/pull/30636))\r\n* refactor[react-devtools]: propagate settings from global hook object\r\nto frontend ([hoxyq](https://github.com/hoxyq) in\r\n[#30610](https://github.com/facebook/react/pull/30610))\r\n* chore[react-devtools]: extract some utils into separate modules to\r\nunify implementations ([hoxyq](https://github.com/hoxyq) in\r\n[#30597](https://github.com/facebook/react/pull/30597))\r\n* refactor[react-devtools]: move console patching to global hook\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30596](https://github.com/facebook/react/pull/30596))\r\n* refactor[react-devtools]: remove browserTheme from\r\nConsolePatchSettings ([hoxyq](https://github.com/hoxyq) in\r\n[#30566](https://github.com/facebook/react/pull/30566))\r\n* feat[react-devtools]: add settings to global hook object\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30564](https://github.com/facebook/react/pull/30564))\r\n* fix: add Error prefix to Error objects names\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30969](https://github.com/facebook/react/pull/30969))\r\n* Add enableComponentPerformanceTrack Flag\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30960](https://github.com/facebook/react/pull/30960))\r\n* fix[rdt/fiber/renderer.js]: getCurrentFiber can be injected as null\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30968](https://github.com/facebook/react/pull/30968))\r\n* disable `enableSiblingPrerendering` in experimental channel\r\n([gnoff](https://github.com/gnoff) in\r\n[#30952](https://github.com/facebook/react/pull/30952))\r\n* refactor[react-devtools]: initialize renderer interface early\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30946](https://github.com/facebook/react/pull/30946))\r\n* Start prerendering Suspense retries immediately\r\n([acdlite](https://github.com/acdlite) in\r\n[#30934](https://github.com/facebook/react/pull/30934))\r\n* refactor[Agent/Store]: Store to send messages only after Agent is\r\ninitialized ([hoxyq](https://github.com/hoxyq) in\r\n[#30945](https://github.com/facebook/react/pull/30945))\r\n* refactor[RendererInterface]: expose onErrorOrWarning and\r\ngetComponentStack ([hoxyq](https://github.com/hoxyq) in\r\n[#30931](https://github.com/facebook/react/pull/30931))\r\n* Implement getComponentStack and onErrorOrWarning for replayed Flight\r\nlogs ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30930](https://github.com/facebook/react/pull/30930))\r\n* Use Unicode Atom Symbol instead of Atom Emoji\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30832](https://github.com/facebook/react/pull/30832))\r\n* Improve Layering Between Console and Renderer\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30925](https://github.com/facebook/react/pull/30925))\r\n* Add Map for Server Component Logs\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30905](https://github.com/facebook/react/pull/30905))\r\n* Delete fiberToFiberInstanceMap\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30900](https://github.com/facebook/react/pull/30900))\r\n* Add Flight Renderer ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30906](https://github.com/facebook/react/pull/30906))\r\n* Refactor Error / Warning Count Tracking\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30899](https://github.com/facebook/react/pull/30899))\r\n* [flow] Upgrade Flow to 0.245.2\r\n([SamChou19815](https://github.com/SamChou19815) in\r\n[#30919](https://github.com/facebook/react/pull/30919))\r\n* Separate RDT Fusebox into single-panel entry points\r\n([huntie](https://github.com/huntie) in\r\n[#30708](https://github.com/facebook/react/pull/30708))\r\n* Build Updater List from the Commit instead of Map\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30897](https://github.com/facebook/react/pull/30897))\r\n* Simplify Context Change Tracking in Profiler\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30896](https://github.com/facebook/react/pull/30896))\r\n* Remove use of .alternate in root and recordProfilingDurations\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30895](https://github.com/facebook/react/pull/30895))\r\n* Handle reordered contexts in Profiler\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30887](https://github.com/facebook/react/pull/30887))\r\n* Refactor Forcing Fallback / Error of Suspense / Error Boundaries\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30870](https://github.com/facebook/react/pull/30870))\r\n* Avoid getFiberIDUnsafe in debug() Helper\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30878](https://github.com/facebook/react/pull/30878))\r\n* Include some Filtered Fiber Instances\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30865](https://github.com/facebook/react/pull/30865))\r\n* Track root instances in a root Map\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30875](https://github.com/facebook/react/pull/30875))\r\n* Track all public HostInstances in a Map\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30831](https://github.com/facebook/react/pull/30831))\r\n* Support VirtualInstances in findAllCurrentHostInstances\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30853](https://github.com/facebook/react/pull/30853))\r\n* Add Filtering of Environment Names\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30850](https://github.com/facebook/react/pull/30850))\r\n* Support secondary environment name when it changes\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30842](https://github.com/facebook/react/pull/30842))\r\n* Increase max payload for websocket in standalone app\r\n([runeb](https://github.com/runeb) in\r\n[#30848](https://github.com/facebook/react/pull/30848))\r\n* Filter Server Components\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30839](https://github.com/facebook/react/pull/30839))\r\n* Track virtual instances on the tracked path for selections\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30802](https://github.com/facebook/react/pull/30802))\r\n* Remove displayName from inspected data\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30841](https://github.com/facebook/react/pull/30841))\r\n* chore[react-devtools/hook]: remove unused native values\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30827](https://github.com/facebook/react/pull/30827))\r\n* chore[react-devtools/extensions]: remove unused storage permission\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30826](https://github.com/facebook/react/pull/30826))\r\n* fix[react-devtools/extensions]: fixed tabs API calls and displaying\r\nrestricted access popup ([hoxyq](https://github.com/hoxyq) in\r\n[#30825](https://github.com/facebook/react/pull/30825))\r\n* feat[react-devtools]: support Manifest v3 for Firefox extension\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30824](https://github.com/facebook/react/pull/30824))\r\n* Reconcile Fibers Against Previous Children Instances\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30822](https://github.com/facebook/react/pull/30822))\r\n* Remove findCurrentFiberUsingSlowPathByFiberInstance\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30818](https://github.com/facebook/react/pull/30818))\r\n* Track Tree Base Duration of Virtual Instances\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30817](https://github.com/facebook/react/pull/30817))\r\n* Use Owner Stacks to Implement View Source of a Server Component\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30798](https://github.com/facebook/react/pull/30798))\r\n* Make function inspection instant\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30786](https://github.com/facebook/react/pull/30786))\r\n* Make Functions Clickable to Jump to Definition\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30769](https://github.com/facebook/react/pull/30769))\r\n* Support REACT_LEGACY_ELEMENT_TYPE for formatting JSX\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30779](https://github.com/facebook/react/pull/30779))\r\n* Find owners from the parent path that matches the Fiber or\r\nReactComponentInfo ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30717](https://github.com/facebook/react/pull/30717))\r\n* [Flight/DevTools] Pass the Server Component's \"key\" as Part of the\r\nReactComponentInfo ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30703](https://github.com/facebook/react/pull/30703))\r\n* Hide props section if it is null\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30696](https://github.com/facebook/react/pull/30696))\r\n* Support Server Components in Tree\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30684](https://github.com/facebook/react/pull/30684))\r\n* fix[react-devtools/InspectedElement]: fixed border stylings when some\r\nof the panels are not rendered ([hoxyq](https://github.com/hoxyq) in\r\n[#30676](https://github.com/facebook/react/pull/30676))\r\n* Compute new reordered child set from the instance tree\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30668](https://github.com/facebook/react/pull/30668))\r\n* Unmount instance by walking the instance tree instead of the fiber\r\ntree ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30665](https://github.com/facebook/react/pull/30665))\r\n* Further Refactoring of Unmounts\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30658](https://github.com/facebook/react/pull/30658))\r\n* Remove lodash.throttle ([sebmarkbage](https://github.com/sebmarkbage)\r\nin [#30657](https://github.com/facebook/react/pull/30657))\r\n* Unmount by walking previous nodes no longer in the new tree\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30644](https://github.com/facebook/react/pull/30644))\r\n* Build up DevTools Instance Shadow Tree\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30625](https://github.com/facebook/react/pull/30625))\r\n* chore[packages/react-devtools]: remove unused index.js\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30579](https://github.com/facebook/react/pull/30579))\r\n* Track DOM nodes to Fiber map for HostHoistable Resources\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30590](https://github.com/facebook/react/pull/30590))\r\n* Rename mountFiberRecursively/updateFiberRecursively\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30586](https://github.com/facebook/react/pull/30586))\r\n* Allow Highlighting/Inspect HostSingletons/Hoistables and Resources\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30584](https://github.com/facebook/react/pull/30584))\r\n* chore[react-devtools]: add global for native and use it to fork\r\nbackend implementation ([hoxyq](https://github.com/hoxyq) in\r\n[#30533](https://github.com/facebook/react/pull/30533))\r\n* Enable pointEvents while scrolling\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30560](https://github.com/facebook/react/pull/30560))\r\n* Make Element Inspection Feel Snappy\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30555](https://github.com/facebook/react/pull/30555))\r\n* Track the parent DevToolsInstance while mounting a tree\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30542](https://github.com/facebook/react/pull/30542))\r\n* Add DevToolsInstance to Store Stateful Information\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30517](https://github.com/facebook/react/pull/30517))\r\n* Implement \"best renderer\" by taking the inner most matched node\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30494](https://github.com/facebook/react/pull/30494))\r\n* Rename NativeElement to HostInstance in the Bridge\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30491](https://github.com/facebook/react/pull/30491))\r\n* Rename Fiber to Element in the Bridge Protocol and RendererInterface\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30490](https://github.com/facebook/react/pull/30490))\r\n* Stop filtering owner stacks\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30438](https://github.com/facebook/react/pull/30438))\r\n* [Fiber] Call life-cycles with a react-stack-bottom-frame stack frame\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30429](https://github.com/facebook/react/pull/30429))\r\n* [Flight] Prefix owner stacks added to the console.log with the current\r\nstack ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30427](https://github.com/facebook/react/pull/30427))\r\n* [BE] switch to hermes parser for prettier\r\n([kassens](https://github.com/kassens) in\r\n[#30421](https://github.com/facebook/react/pull/30421))\r\n* Implement Owner Stacks ([sebmarkbage](https://github.com/sebmarkbage)\r\nin [#30417](https://github.com/facebook/react/pull/30417))\r\n* [BE] upgrade prettier to 3.3.3 ([kassens](https://github.com/kassens)\r\nin [#30420](https://github.com/facebook/react/pull/30420))\r\n* [ci] Add yarn_test_build job to gh actions\r\n* [Fizz] Refactor Component Stack Nodes\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30298](https://github.com/facebook/react/pull/30298))\r\n* Print component stacks as error objects to get source mapping\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30289](https://github.com/facebook/react/pull/30289))\r\n* Upgrade flow to 0.235.0 ([kassens](https://github.com/kassens) in\r\n[#30118](https://github.com/facebook/react/pull/30118))\r\n* fix: path handling in react devtools\r\n([Jack-Works](https://github.com/Jack-Works) in\r\n[#29199](https://github.com/facebook/react/pull/29199))",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-25T14:38:34+01:00",
      "committed_date": "2024-09-25T14:38:34+01:00",
      "changed_files": [
        "packages/react-devtools-core/package.json",
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-inline/package.json",
        "packages/react-devtools-timeline/package.json",
        "packages/react-devtools/CHANGELOG.md",
        "packages/react-devtools/package.json"
      ]
    },
    {
      "sha": "a15bbe14751287cb7ac124ff88f694d0883f3ac6",
      "short_sha": "a15bbe1",
      "message": "refactor: data source for errors and warnings tracking is now in Store (#31010)\n\nStacked on https://github.com/facebook/react/pull/31009.\r\n\r\n1. Instead of keeping `showInlineWarningsAndErrors` in `Settings`\r\ncontext (which was removed in\r\nhttps://github.com/facebook/react/pull/30610), `Store` will now have a\r\nboolean flag, which controls if the UI should be displaying information\r\nabout errors and warnings.\r\n2. The errors and warnings counters in the Tree view are now counting\r\nonly unique errors. This makes more sense, because it is part of the\r\nElements Tree view, so ideally it should be showing number of components\r\nwith errors and number of components of warnings. Consider this example:\r\n2.1. Warning for element `A` was emitted once and warning for element\r\n`B` was emitted twice.\r\n2.2. With previous implementation, we would show `3 ⚠️`, because in\r\ntotal there were 3 warnings in total. If user tries to iterate through\r\nthese, it will only take 2 steps to do the full cycle, because there are\r\nonly 2 elements with warnings (with one having same warning, which was\r\nemitted twice).\r\n2.3 With current implementation, we would show `2 ⚠️`. Inspecting the\r\nelement with doubled warning will still show the warning counter (2)\r\nbefore the warning message.\r\n\r\nWith these changes, the feature correctly works.\r\nhttps://fburl.com/a7fw92m4",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-24T19:51:21+01:00",
      "committed_date": "2024-09-24T19:51:21+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/store-test.js",
        "packages/react-devtools-shared/src/__tests__/storeComponentFilters-test.js",
        "packages/react-devtools-shared/src/devtools/store.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Element.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementErrorsAndWarningsTree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/DebuggingSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsContext.js"
      ]
    },
    {
      "sha": "fc4a33eaa9c935ac860ab6043b95d55540068571",
      "short_sha": "fc4a33e",
      "message": "fix: consider alternate as a key for componentLogsEntry when inspecting raw fiber instance (#31009)\n\nRelated - https://github.com/facebook/react/pull/30899.\r\n\r\nLooks like this was missed. We actually do this when we record errors\r\nand warnings before sending them via Bridge:\r\n\r\nhttps://github.com/facebook/react/blob/e4953922a99b5477c3bcf98cdaa2b13ac0a81f0d/packages/react-devtools-shared/src/backend/fiber/renderer.js#L2169-L2173\r\n\r\nSo, what is happening in the end, errors or warnings are displayed in\r\nthe Tree, but when user clicks on the component, nothing is shown,\r\nbecause `fiberToComponentLogsMap` has only `alternate` as a key.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-24T17:49:19+01:00",
      "committed_date": "2024-09-24T17:49:19+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "04bd67a4906d387ecdb8cbc798144dec2db811a5",
      "short_sha": "04bd67a",
      "message": "Resolve references to deduped owner objects (#30549)\n\nThis is a follow-up from #30528 to not only handle props (the critical\r\nchange), but also the owner ~and stack~ of a referenced element.\r\n\r\n~Handling stacks here is rather academic because the Flight Server\r\ncurrently does not deduplicate owner stacks. And if they are really\r\nidentical, we should probably just dedupe the whole element.~ EDIT:\r\nRemoved from the PR.\r\n\r\nHandling owner objects on the other hand is an actual requirement as\r\nreported in https://github.com/vercel/next.js/issues/69545. This problem\r\nonly affects the stable release channel, as the absence of owner stacks\r\nallows for the specific kind of shared owner deduping as demonstrated in\r\nthe unit test.",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2024-09-24T08:34:53+02:00",
      "committed_date": "2024-09-24T02:34:53-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "4708fb92c24bbc769acbc075de6105590fd29edc",
      "short_sha": "4708fb9",
      "message": "Fix runtime_commit_artifacts workflow\n\nI messed up the yml syntax and also realized that our script doesn't\ncurrently handle renames or deletes, so I fixed that\n\nghstack-source-id: 7d481a951abaabd1a2985c8959d8acb7103ed12e\nPull Request resolved: https://github.com/facebook/react/pull/31028",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-23T17:36:53-04:00",
      "committed_date": "2024-09-23T17:39:53-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "5b19dc0f06e92d3ed0aa93be3c5bbe2298da5df6",
      "short_sha": "5b19dc0",
      "message": "Allow forcing a build in artifacts workflow dispatch\n\nSometimes it is useful to bypass the revision check when we need to make\nchanges to the runtime_commit_artifacts script. The `force` input can be\npassed via the GitHub UI for manual runs of the workflow.\n\nghstack-source-id: cf9e32c01a565d86980277115f41e3e116adf376\nPull Request resolved: https://github.com/facebook/react/pull/31027",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-23T15:31:10-04:00",
      "committed_date": "2024-09-23T15:38:05-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "79bcf6eb23cd781bedbfccfe8d1507d18fd2c623",
      "short_sha": "79bcf6e",
      "message": "Fix missing trailing / in commit artifacts workflow\n\nThe trailing / was being omitted, so instead of moving the cjs\ndirectory itself, it would move only its contents instead. This broke\nsome internal path assumptions.\n\nAdditionally, updates the step to create the react-dom directory prior\nto moving.\n\nghstack-source-id: b6eedb0c88cd3aa3a786a3d3d280ede5ee81a063\nPull Request resolved: https://github.com/facebook/react/pull/31026",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-09-23T14:58:05-04:00",
      "committed_date": "2024-09-23T14:58:19-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "4e9540e3c2a8f9ae56318b967939c99b3a815190",
      "short_sha": "4e9540e",
      "message": "[Fiber] Log the Render/Commit phases and the gaps in between (#31016)\n\nA slight behavior change here too is that I now mark the start of the\r\ncommit phase before the BeforeMutationEffect phase. This affects\r\n`<Profiler>` too.\r\n\r\nThe named sequences are as follows:\r\n\r\nRender -> Suspended or Throttled -> Commit -> Waiting for Paint ->\r\nRemaining Effects\r\n\r\nThe Suspended phase is only logged if we delay the Commit due to CSS /\r\nimages.\r\n\r\nThe Throttled phase is only logged if we delay the commit due to the\r\nSuspense throttling timer.\r\n\r\n<img width=\"1246\" alt=\"Screenshot 2024-09-20 at 9 14 23 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/8d01f444-bb85-472b-9b42-6157d92c81b4\">\r\n\r\nI don't yet log render phases that don't complete. I think I also need\r\nto special case renders that or don't commit after being suspended.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-23T14:09:48-04:00",
      "committed_date": "2024-09-23T14:09:48-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js",
        "packages/react/src/__tests__/ReactProfiler-test.internal.js"
      ]
    },
    {
      "sha": "5d19e1c8d1a6c0b5cd7532d43b707191eaf105b7",
      "short_sha": "5d19e1c",
      "message": "Fix: profiling crashes #30661 #28838 (#31024)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nProfiling fails sometimes because `onProfilingStatus` is called\r\nrepeatedly on some occasions, e.g. multiple calls to\r\n`getProfilingStatus`.\r\n\r\nSubsequent calls should be a no-op if the profiling status hasn't\r\nchanged.\r\n\r\nReported via #30661 #28838.\r\n\r\n> [!TIP]\r\n> Hide whitespace changes on this PR\r\n\r\n<img width=\"328\" alt=\"screenshot showing the UI controls for hiding\r\nwhitespace changes on GitHub\"\r\nsrc=\"https://github.com/user-attachments/assets/036385cf-2610-4e69-a717-17c05d7ef047\">\r\n\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nTested as part of Fusebox implementation of reload-to-profile.\r\n\r\nhttps://github.com/facebook/react/pull/31021?#discussion_r1770589753",
      "author": {
        "name": "Edmond Chui",
        "email": "1967998+EdmondChuiHW@users.noreply.github.com"
      },
      "authored_date": "2024-09-23T13:25:44+01:00",
      "committed_date": "2024-09-23T13:25:44+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/ProfilerStore.js"
      ]
    },
    {
      "sha": "d4688dfaafe51a4cb6e3c51fc2330662cb4e2296",
      "short_sha": "d4688df",
      "message": "[Fiber] Track Event Time, startTransition Time and setState Time (#31008)\n\nThis tracks the current window.event.timeStamp the first time we\r\nsetState or call startTransition. For either the blocking track or\r\ntransition track. We can use this to show how long we were blocked by\r\nother events or overhead from when the user interacted until we got\r\ncalled into React.\r\n\r\nThen we track the time we start awaiting a Promise returned from\r\nstartTransition. We can use this track how long we waited on an Action\r\nto complete before setState was called.\r\n\r\nThen finally we track when setState was called so we can track how long\r\nwe were blocked by other word before we could actually start rendering.\r\nFor a Transition this might be blocked by Blocking React render work.\r\n\r\nWe only log these once a subsequent render actually happened. If no\r\nrender was actually scheduled, then we don't log these. E.g. if an\r\nisomorphic Action doesn't call startTransition there's no render so we\r\ndon't log it.\r\n\r\nWe only log the first event/update/transition even if multiple are\r\nbatched into it later. If multiple Actions are entangled they're all\r\ntreated as one until an update happens. If no update happens and all\r\nentangled actions finish, we clear the transition so that the next time\r\na new sequence starts we can log it.\r\n\r\nWe also clamp these (start the track later) if they were scheduled\r\nwithin a render/commit. Since we share a single track we don't want to\r\ncreate overlapping tracks.\r\n\r\nThe purpose of this is not to show every event/action that happens but\r\nto show a prelude to how long we were blocked before a render started.\r\nSo you can follow the first event to commit.\r\n\r\n<img width=\"674\" alt=\"Screenshot 2024-09-20 at 1 59 58 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/151ba9e8-6b3c-4fa1-9f8d-e3602745eeb7\">\r\n\r\nI still need to add the rendering/suspended phases to the timeline which\r\nwhy this screenshot has a gap.\r\n\r\n<img width=\"993\" alt=\"Screenshot 2024-09-20 at 12 50 27 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/155b6675-b78a-4a22-a32b-212c15051074\">\r\n\r\nIn this case it's a Form Action which started a render into the form\r\nwhich then suspended on the action. The action then caused a refresh,\r\nwhich interrupts with its own update that's blocked before rendering.\r\nSuspended roots like this is interesting because we could in theory\r\nstart working on a different root in the meantime which makes this\r\ntimeline less linear.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-20T14:27:12-04:00",
      "committed_date": "2024-09-20T14:27:12-04:00",
      "changed_files": [
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberAsyncAction.js",
        "packages/react-reconciler/src/ReactFiberClassComponent.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberReconciler.js",
        "packages/react-reconciler/src/ReactFiberTransition.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js",
        "packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "packages/react/src/__tests__/ReactProfiler-test.internal.js"
      ]
    },
    {
      "sha": "ae75d5a3f5cf14a5031ee251376b1adf88c32813",
      "short_sha": "ae75d5a",
      "message": "[Fizz] Include componentStack at the root when aborting (#31011)\n\nWhen aborting we currently don't produce a componentStack when aborting\r\nthe shell. This is likely just an oversight and this change updates this\r\nbehavior to be consistent with what we do when there is a boundary",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-09-20T10:00:02-07:00",
      "committed_date": "2024-09-20T10:00:02-07:00",
      "changed_files": [
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "e4953922a99b5477c3bcf98cdaa2b13ac0a81f0d",
      "short_sha": "e495392",
      "message": "Update react-native/react-dom build directory (#31006)\n\nCommit artifact actions are breaking after\r\nhttps://github.com/facebook/react/pull/30711\r\n\r\nSee:\r\nhttps://github.com/facebook/react/actions/runs/10930658977/job/30344033974\r\n\r\n> mv: cannot stat 'build/facebook-react-native/react/dom/': No such file\r\nor directory\r\n\r\nAfter build, the new artifacts are in `/react-dom/cjs`, not\r\n`/react/dom/`\r\n```\r\n$> yarn build\r\n$> ls build/facebook-react-native/react/\r\n# ... no dom\r\n$> ls build/facebook-react-native/react-dom/cjs\r\n```",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-09-19T18:04:06-04:00",
      "committed_date": "2024-09-19T18:04:06-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "babde5d1826365bfb794abdb7de4bd21f7b02356",
      "short_sha": "babde5d",
      "message": "[lint] Add no-optional-chaining (#31003)\n\n## Overview\r\n\r\nAdds a lint rule to prevent optional chaining to catch issues like\r\nhttps://github.com/facebook/react/pull/30982 until we support optional\r\nchaining without a bundle impact.",
      "author": {
        "name": "Ricky",
        "email": "rickhanlonii@gmail.com"
      },
      "authored_date": "2024-09-19T13:42:49-04:00",
      "committed_date": "2024-09-19T13:42:49-04:00",
      "changed_files": [
        ".eslintrc.js",
        "package.json",
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "yarn.lock"
      ]
    },
    {
      "sha": "e740d4b14b27b4c7a21f67d20a4526a57d6729a7",
      "short_sha": "e740d4b",
      "message": "chore: remove using local storage for persisting console settings on the frontend (#31002)\n\nAfter https://github.com/facebook/react/pull/30636 and\r\nhttps://github.com/facebook/react/pull/30986 we no longer store settings\r\non the Frontend side via `localStorage`.\r\n\r\nThis PR removes all occurrences of it from\r\n`react-devtools-core/standalone` and `react-devtools-inline`.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-19T15:47:25+01:00",
      "committed_date": "2024-09-19T15:47:25+01:00",
      "changed_files": [
        "packages/react-devtools-core/src/standalone.js",
        "packages/react-devtools-inline/src/frontend.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/constants.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsModalContext.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "c21ce4a39667c4094208bc35dc86fc9f49fceec6",
      "short_sha": "c21ce4a",
      "message": "feat: display message if user ended up opening hook script (#31000)\n\nIn https://github.com/facebook/react/pull/30596 we've moved console\r\npatching to the global hook. Generally speaking, the patching happens\r\neven before React is loaded on the page.\r\n\r\nIf browser DevTools were opened after when `console.error` or\r\n`console.warn` were called, the source script will be `hook.js`, because\r\nof the patching.\r\n\r\n![devtools-opened-after-the-message](https://github.com/user-attachments/assets/3d3dbc16-96b8-4234-b061-57b21b60cf2e)\r\n\r\nThis is because ignore listing is not applied retroactively by Chrome\r\nDevTools.\r\nIf you had it open before console calls, Hook script would be correctly\r\nfiltered out from the stack:\r\n\r\n![devtools-opened-before-the-message](https://github.com/user-attachments/assets/3e99cb22-97b0-4b49-9a76-f7bc948e6452)\r\n\r\nI had hopes that the fix for\r\nhttps://issues.chromium.org/issues/345248263 will also apply ignore\r\nlisting retroactively, but looks like we need to open a separate feature\r\nrequest for the Chrome DevTools team.\r\n\r\nWith these changes, if user attempts to open `hook.js` script, they are\r\ngoing to see this message:\r\n![Screenshot 2024-09-19 at 11 30\r\n59](https://github.com/user-attachments/assets/5850b74c-329f-4fbe-a3dd-33f9ac717ee9)",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-19T15:44:34+01:00",
      "committed_date": "2024-09-19T15:44:34+01:00",
      "changed_files": [
        "packages/react-devtools-extensions/webpack.config.js"
      ]
    },
    {
      "sha": "632f88df11329c9ad66781ddd75b27df6f8effb9",
      "short_sha": "632f88d",
      "message": "[compiler] Allow ReactElement symbol to be configured when inlining jsx (#30996)\n\nBased on https://github.com/facebook/react/pull/30995 ([rendered\r\ndiff](https://github.com/jackpope/react/compare/inline-jsx-2...jackpope:react:inline-jsx-3?expand=1))\r\n\r\n____\r\n\r\nSome apps still use `react.element` symbols. Not only do we want to test\r\nthere but we also want to be able to upgrade those sites to\r\n`react.transitional.element` without blocking on the compiler (we can\r\nchange the symbol feature flag and compiler config at the same time).\r\n\r\nThe compiler runtime uses `react.transitional.element`, so the snap\r\nfixture will fail if we change the default here. However I confirmed\r\nthat commenting out the fixture entrypoint and running snap with\r\n`react.element` will update the fixture symbols as expected.",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-09-19T10:34:24-04:00",
      "committed_date": "2024-09-19T10:34:24-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/InlineJsxTransform.ts",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "d5e955d3c0c1fa2494de0ab33be9cd90c65aff1e",
      "short_sha": "d5e955d",
      "message": "[compiler] Pass through unmodified props spread when inlining jsx (#30995)\n\nIf JSX receives a props spread without additional attributes (besides\r\n`ref` and `key`), we can pass the spread object as a property directly\r\nto avoid the extra object copy.\r\n\r\n```\r\n<Test {...propsToSpread} />\r\n// {props: propsToSpread}\r\n<Test {...propsToSpread} a=\"z\" />\r\n// {props: {...propsToSpread, a: \"z\"}}\r\n```",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-09-19T10:07:29-04:00",
      "committed_date": "2024-09-19T10:07:29-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/InlineJsxTransform.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.js"
      ]
    },
    {
      "sha": "a86afe8e560f452a9df5ceb4893d9423e5840800",
      "short_sha": "a86afe8",
      "message": "feat: expose installHook with settings argument from react-devtools-core/backend (#30987)\n\nStacked on https://github.com/facebook/react/pull/30986. \r\n\r\nPreviously, we would call `installHook` at a top level of the JavaScript\r\nmodule. Because of this, having `require` statement for\r\n`react-devtools-core` package was enough to initialize the React\r\nDevTools global hook on the `window`.\r\n\r\nNow, the Hook can actually receive an argument - initial user settings\r\nfor console patching. We expose this as a function `initialize`, which\r\ncan be used by third parties (including React Native) to provide the\r\npersisted settings.\r\n\r\nThe README was also updated to reflect the changes.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-19T13:55:08+01:00",
      "committed_date": "2024-09-19T13:55:08+01:00",
      "changed_files": [
        "packages/react-devtools-core/README.md",
        "packages/react-devtools-core/src/backend.js"
      ]
    },
    {
      "sha": "e72127a4ec6f91288e9008711215068823100599",
      "short_sha": "e72127a",
      "message": "Build `react-dom` in `builds/facebook-fbsource` (#30711)\n\n## Summary\r\n\r\nBuilds `react-dom` for React Native so that it also populates the\r\n`builds/facebook-fbsource` branch.\r\n\r\n**NOTE:** For Meta employees, D61354219 is the internal integration.\r\n\r\n## How did you test this change?\r\n\r\n```\r\n$ yarn build\r\n…\r\n$ ls build/facebook-react-native/react-dom/cjs\r\nReactDOM-dev.js       ReactDOM-prod.js      ReactDOM-profiling.js\r\n```",
      "author": {
        "name": "Timothy Yung",
        "email": "yungsters@meta.com"
      },
      "authored_date": "2024-09-18T14:44:55-07:00",
      "committed_date": "2024-09-18T14:44:55-07:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml",
        "scripts/rollup/bundles.js",
        "scripts/rollup/packaging.js"
      ]
    },
    {
      "sha": "09d82835993b16cd5dc8350c03627f9573354a25",
      "short_sha": "09d8283",
      "message": "[ez] Rewrite optional chaining and nullish coalescing syntax (#30982)\n\nRewrite `containerInfo?.ownerDocument?.defaultView ?? window` to instead\r\nuse a ternary.\r\n\r\nThis changes the compilation output (see [bundle changes from\r\n#30951](https://github.com/facebook/react/commit/d65fb06955e9f32e6a40d1c7177d77893dff95b9)).\r\n```js\r\n// compilation of containerInfo?.ownerDocument?.defaultView ?? window\r\nvar $jscomp$optchain$tmpm1756096108$1, $jscomp$nullish$tmp0;\r\ncontainerInfo =\r\n  null !=\r\n  ($jscomp$nullish$tmp0 =\r\n    null == containerInfo\r\n      ? void 0\r\n      : null ==\r\n          ($jscomp$optchain$tmpm1756096108$1 = containerInfo.ownerDocument)\r\n        ? void 0\r\n        : $jscomp$optchain$tmpm1756096108$1.defaultView)\r\n    ? $jscomp$nullish$tmp0\r\n    : window;\r\n\r\n// compilation of ternary expression\r\ncontainerInfo =\r\n  null != containerInfo &&\r\n  null != containerInfo.ownerDocument &&\r\n  null != containerInfo.ownerDocument.defaultView\r\n    ? containerInfo.ownerDocument.defaultView\r\n    : window;\r\n```\r\n\r\nThis also reduces the number of no-op bundle syncs for Meta. Note that\r\nClosure compiler's `jscomp$optchain$tmp<HASH>` identifiers change when\r\nwe rebuild (likely due to version number changes). See\r\n[workflow](https://github.com/facebook/react/actions/runs/10891164281/job/30221518374)\r\nfor a PR that was synced despite making no changes to the runtime.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-09-18T14:39:04-04:00",
      "committed_date": "2024-09-18T14:39:04-04:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactInputSelection.js"
      ]
    },
    {
      "sha": "f2c57a31e9953b3889c56f68e129e67afca15d0e",
      "short_sha": "f2c57a3",
      "message": "chore: remove settings manager from react-devtools-core (#30986)\n\nStacked on https://github.com/facebook/react/pull/30636. See [this\r\ncommit](https://github.com/facebook/react/pull/30986/commits/20cec76c44f77e74b3a85225fecab5a431cd986f).\r\n\r\nThis has been only used for React Native and will be replaced by another\r\napproach (initialization via `installHook` call) in the next PR.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-18T18:30:32+01:00",
      "committed_date": "2024-09-18T18:30:32+01:00",
      "changed_files": [
        "packages/react-devtools-core/src/backend.js",
        "packages/react-devtools-core/src/cachedSettings.js",
        "packages/react-devtools-shared/src/backend/console.js",
        "packages/react-devtools-shared/src/backend/types.js"
      ]
    },
    {
      "sha": "f37c7bc6539b4da38f7080b5486eb00bdb2c3237",
      "short_sha": "f37c7bc",
      "message": "feat[react-devtools/extension]: use chrome.storage to persist settings across sessions (#30636)\n\nStacked on https://github.com/facebook/react/pull/30610 and whats under\r\nit. See [last\r\ncommit](https://github.com/facebook/react/pull/30636/commits/248ddba18608e1bb5ef14c823085a7ff9d7a54a3).\r\n\r\nNow, we are using\r\n[`chrome.storage`](https://developer.chrome.com/docs/extensions/reference/api/storage)\r\nto persist settings for the browser extension across different sessions.\r\nOnce settings are updated from the UI, the `Store` will emit\r\n`settingsUpdated` event, and we are going to persist them via\r\n`chrome.storage.local.set` in `main/index.js`.\r\n\r\nWhen hook is being injected, we are going to pass a `Promise`, which is\r\ngoing to be resolved after the settings are read from the storage via\r\n`chrome.storage.local.get` in `hookSettingsInjector.js`.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-18T18:26:39+01:00",
      "committed_date": "2024-09-18T18:26:39+01:00",
      "changed_files": [
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-extensions/src/background/dynamicallyInjectContentScripts.js",
        "packages/react-devtools-extensions/src/contentScripts/hookSettingsInjector.js",
        "packages/react-devtools-extensions/src/contentScripts/installHook.js",
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-extensions/src/main/syncSavedPreferences.js",
        "packages/react-devtools-extensions/webpack.config.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/devtools/store.js"
      ]
    },
    {
      "sha": "e33acfd67f0003272a9aec7a0725d19a429f2460",
      "short_sha": "e33acfd",
      "message": "refactor[react-devtools]: propagate settings from global hook object to frontend (#30610)\n\nStacked on https://github.com/facebook/react/pull/30597 and whats under\r\nit. See [this\r\ncommit](https://github.com/facebook/react/pull/30610/commits/59b4efa72377bf62f5ec8c0e32e56902cf73fbd7).\r\n\r\nWith this change, the initial values for console patching settings are\r\npropagated from hook (which is the source of truth now, because of\r\nhttps://github.com/facebook/react/pull/30596) to the UI. Instead of\r\nreading from `localStorage` the frontend is now requesting it from the\r\nhook. This happens when settings modal is rendered, and wrapped in a\r\ntransition. Also, this is happening even if settings modal is not opened\r\nyet, so we have enough time to fetch this data without displaying loader\r\nor similar UI.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-18T18:19:01+01:00",
      "committed_date": "2024-09-18T18:19:01+01:00",
      "changed_files": [
        "packages/react-devtools-core/src/backend.js",
        "packages/react-devtools-core/src/cachedSettings.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/index.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/devtools/store.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/DebuggingSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsContext.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsModal.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsModalContext.js",
        "packages/react-devtools-shared/src/hook.js"
      ]
    },
    {
      "sha": "fce46066571e7bf3ab6ce5bfe5fd3a615e098421",
      "short_sha": "fce4606",
      "message": "chore[react-devtools]: extract some utils into separate modules to unify implementations (#30597)\n\nStacked on https://github.com/facebook/react/pull/30596. See [this\r\ncommit](https://github.com/facebook/react/pull/30597/commits/4ba5e784bbfdcd69021e2d84c75ffe26fcb698f4).\r\n\r\nMoving `formatWithStyles` and `formatConsoleArguments` to its own\r\nmodules, so that we can finally have a single implementation for these\r\nand stop inlining them in RDT global hook object.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-18T18:16:20+01:00",
      "committed_date": "2024-09-18T18:16:20+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/utils/formatConsoleArguments.js",
        "packages/react-devtools-shared/src/backend/utils/formatWithStyles.js",
        "packages/react-devtools-shared/src/backend/utils.js",
        "packages/react-devtools-shared/src/hook.js"
      ]
    },
    {
      "sha": "3cac0875dcd60b8db099d8fa671c5ad1f8f0ef23",
      "short_sha": "3cac087",
      "message": "refactor[react-devtools]: move console patching to global hook (#30596)\n\nStacked on https://github.com/facebook/react/pull/30566 and whats under\r\nit. See [this\r\ncommit](https://github.com/facebook/react/pull/30596/commits/374fd737e4b0b7028afb765838db7c0e22def865).\r\n\r\nIt is mostly copying code from one place to another and updating tests.\r\nWith these changes, for every console method that we patch, there is\r\ngoing to be a single applied patch:\r\n- For `error`, `warn`, and `trace` we are patching when hook is\r\ninstalled. This guarantees that component stacks are going to be\r\nappended even if browser DevTools are not opened. We pay some price for\r\nit, though: if user has browser DevTools closed and if at this point\r\nsome warning or error is emitted (logged), the next time user opens\r\nbrowser DevTools, they are going to see `hook.js` as the source frame.\r\nUnfortunately, ignore listing from source maps is not applied\r\nretroactively, and I don't know if its a bug or just a design\r\nlimitations. Once browser DevTools are opened, source maps will be\r\nloaded and ignore listing will be applied for all emitted logs in the\r\nfuture.\r\n- For `log`, `info`, `group`, `groupCollapsed` we are only patching when\r\nReact notifies React DevTools about running in StrictMode. We unpatch\r\nthe methods right after it.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-18T18:12:18+01:00",
      "committed_date": "2024-09-18T18:12:18+01:00",
      "changed_files": [
        "packages/react-devtools-core/src/backend.js",
        "packages/react-devtools-inline/src/backend.js",
        "packages/react-devtools-shared/src/__tests__/componentStacks-test.js",
        "packages/react-devtools-shared/src/__tests__/console-test.js",
        "packages/react-devtools-shared/src/__tests__/setupTests.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/console.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/flight/renderer.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/hook.js"
      ]
    },
    {
      "sha": "b521ef8a2aaff61154e59f6d0d3791ee4dbe6395",
      "short_sha": "b521ef8",
      "message": "refactor[react-devtools]: remove browserTheme from ConsolePatchSettings (#30566)\n\nStacked on https://github.com/facebook/react/pull/30564.\r\n\r\nWe are no longer using browser theme in our console patching, this was\r\nremoved in unification of console patching for strict mode, we started\r\nusing ansi escape symbols and forking based on browser theme is no\r\nlonger required - https://github.com/facebook/react/pull/29869\r\n\r\nThe real browser theme initialization for frontend is happening at the\r\nother place and is not affected:\r\n\r\nhttps://github.com/facebook/react/blob/40be968257a7a10a267210670103f20dd0429ef3/packages/react-devtools-shared/src/devtools/views/Settings/SettingsContext.js#L117-L120",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-18T18:02:13+01:00",
      "committed_date": "2024-09-18T18:02:13+01:00",
      "changed_files": [
        "packages/react-devtools-core/src/cachedSettings.js",
        "packages/react-devtools-extensions/src/main/syncSavedPreferences.js",
        "packages/react-devtools-shared/src/backend/console.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsContext.js"
      ]
    },
    {
      "sha": "5e83d9ab3b3f88853591dff43cd70ee4e5c90c5d",
      "short_sha": "5e83d9a",
      "message": "feat[react-devtools]: add settings to global hook object (#30564)\n\nRight now we are patching console 2 times: when hook is installed\r\n(before page is loaded) and when backend is connected. Because of this,\r\neven if user had `appendComponentStack` setting enabled, all emitted\r\nerror and warning logs are not going to have component stacks appended.\r\nThey also won't have component stacks appended retroactively when user\r\nopens browser DevTools (this is when frontend is initialized and\r\nconnects to backend).\r\n\r\nThis behavior adds potential race conditions with LogBox in React\r\nNative, and also unpredictable to the user, because in order to get\r\ncomponent stacks logged you have to open browser DevTools, but by the\r\ntime you do it, error or warning log was already emitted.\r\n\r\nTo solve this, we are going to only patch console in the hook object,\r\nbecause it is guaranteed to load even before React. Settings are going\r\nto be synchronized with the hook via Bridge, and React DevTools Backend\r\nHost (React Native or browser extension shell) will be responsible for\r\npersisting these settings across the session, this is going to be\r\nimplemented in a separate PR.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-18T17:37:00+01:00",
      "committed_date": "2024-09-18T17:37:00+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/console.js",
        "packages/react-devtools-shared/src/backend/index.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/hook.js"
      ]
    },
    {
      "sha": "5dcb009760160c085496e943f76090d98528f971",
      "short_sha": "5dcb009",
      "message": "[compiler] Add JSX inlining optimization (#30867)\n\nThis adds an `InlineJsxTransform` optimization pass, toggled by the\r\n`enableInlineJsxTransform` flag. When enabled, JSX will be transformed\r\ninto React Element object literals, preventing runtime overhead during\r\nelement creation.\r\n\r\nTODO:\r\n- [ ] Add conditionals to make transform PROD-only\r\n- [ ] Make the React element symbol configurable so this works with\r\nruntimes that support `react.element` or `react.transitional.element`\r\n- [ ] Look into additional optimization to pass props spread through\r\ndirectly if none of the properties are mutated",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-09-18T11:51:36-04:00",
      "committed_date": "2024-09-18T11:51:36-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildReactiveScopeTerminalsHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/InlineJsxTransform.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/inline-jsx-transform.js"
      ]
    },
    {
      "sha": "8dfbd16fce9077ab4e5fe85a7b86fa7c97a5ae04",
      "short_sha": "8dfbd16",
      "message": "[Fiber] Color Performance Track Entries by Self Time (#30984)\n\nStacked on #30983.\r\n\r\nThis colors each component entry by its self time from light to dark\r\ndepending on how long it took. If it took longer than a cut off we color\r\nit red (the error color).\r\n\r\n<img width=\"435\" alt=\"Screenshot 2024-09-16 at 11 48 15 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/5d0bda83-6205-40e9-bec1-b81db2d48b2d\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-17T16:36:10-04:00",
      "committed_date": "2024-09-17T16:36:10-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "e1c20902c39d1dfe2649185622f2f21b526e2be2",
      "short_sha": "e1c2090",
      "message": "[Fiber] Log Component Effects to Performance Track (#30983)\n\nStacked on #30981. Same as #30967 but for effects.\r\n\r\nThis logs a tree of components using `performance.measure()`.\r\n\r\nIn addition to the previous render phase this logs one tree for each\r\ncommit phase:\r\n\r\n- Mutation Phase\r\n- Layout Effect\r\n- Passive Unmounts\r\n- Passive Mounts\r\n\r\nI currently skip the Before Mutation phase since the snapshots are so\r\nunusual it's not worth creating trees for those.\r\n\r\nThe mechanism is that I reuse the timings we track for\r\n`enableProfilerCommitHooks`. I track first and last effect timestamp\r\nwithin each component subtree. Then on the way up do we log the entry.\r\nThis means that we don't include overhead to find our way down to a\r\ncomponent and that we don't need to add any additional overhead by\r\nreading timestamps.\r\n\r\nTo ensure that the entries get ordered correctly we need to ensure that\r\nthe start time of each parent is slightly before the inner one.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-17T16:14:57-04:00",
      "committed_date": "2024-09-17T16:14:57-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "15da9174518f18f82869767ebe2a21be2fc8bd90",
      "short_sha": "15da917",
      "message": "Don't read currentTransition back from internals (#30991)\n\nThis code is weird. It reads back the transition that it just set from\r\nthe shared internals. It's almost like it expects it to be a getter or\r\nsomething.\r\n\r\nThis avoids that and makes it consistent with what ReactFiberHooks\r\nalready does.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-17T15:25:00-04:00",
      "committed_date": "2024-09-17T15:25:00-04:00",
      "changed_files": [
        "packages/react/src/ReactStartTransition.js"
      ]
    },
    {
      "sha": "4549be0f846e7df5a4eaabf06369d93bd120271e",
      "short_sha": "4549be0",
      "message": "[Fiber] Optimize enableProfilerCommitHooks by Collecting Elapsed Effect Duration in Module Scope (#30981)\n\nStacked on #30979.\r\n\r\nThe problem with the previous approach is that it recursively walked the\r\ntree up to propagate the resulting time from recording a layout effect.\r\n\r\nInstead, we keep a running count of the effect duration on the module\r\nscope. Then we reset it when entering a nested Profiler and then we add\r\nits elapsed count when we exit the Profiler.\r\n\r\nThis also fixes a bug where we weren't previously including unmount\r\ntimes for some detached trees since they couldn't bubble up to find the\r\nprofiler.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-17T15:12:16-04:00",
      "committed_date": "2024-09-17T15:12:16-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js",
        "packages/react/src/__tests__/ReactProfiler-test.internal.js"
      ]
    },
    {
      "sha": "7b56a542987890f618eeda4e4906fbf1f1df2213",
      "short_sha": "7b56a54",
      "message": "[compiler][playground] create playground API in pipeline, and allow spaces in pass names\n\nSummary:\n1. Minor refactor to provide a stable API for calling the compiler from the playground\n2. Allows spaces in pass names without breaking the appearance of the playground by replacing spaces with &nbsp; in pass tabs\n\nghstack-source-id: 12a43ad86c16c0e21f3e6b4086d531cdefd893eb\nPull Request resolved: https://github.com/facebook/react/pull/30988",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-09-17T11:05:59-07:00",
      "committed_date": "2024-09-17T11:05:59-07:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx",
        "compiler/apps/playground/components/TabbedWindow.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts"
      ]
    },
    {
      "sha": "a99d8e8d97055127a8ad7b01835d2660154689ed",
      "short_sha": "a99d8e8",
      "message": "[compiler][eslint] Report bailout diagnostics with correct column # (#30977)\n\nCompiler bailout diagnostics should now highlight only the first line of\r\nthe source location span.\r\n\r\n(Resubmission of #30423 which was reverted due to invalid column\r\nnumber.)",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-09-16T15:56:24-04:00",
      "committed_date": "2024-09-16T15:56:24-04:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts"
      ]
    },
    {
      "sha": "8152e5cd27721e792f395c0b62c8a7769a54777a",
      "short_sha": "8152e5c",
      "message": "Remove execution context check from shouldProfile (#30971)\n\nI don't know why this is here since all these callsites are within the\r\nCommitWork/CommitEffects helpers.\r\n\r\nThis should help with inlining.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-16T15:00:17-04:00",
      "committed_date": "2024-09-16T15:00:17-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "d7167c35059bc6a0ad84eb34e65b3b66328d5dd8",
      "short_sha": "d7167c3",
      "message": "[compiler] Implement support for hoisted and recursive functions\n\nSummary:\nIntroduces a new binding kind for functions that allows them to be hoisted. Also has the result of causing all nested function declarations to be outputted as function declarations, not as let bindings.\n\nghstack-source-id: fa40d4909fb3d30c23691e36510ebb3c3cc41053\nPull Request resolved: https://github.com/facebook/react/pull/30922",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-09-16T11:12:58-07:00",
      "committed_date": "2024-09-16T11:12:58-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneHoistedContexts.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoisted-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoisted-function-declaration.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hoisting-simple-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-hoist-function-decls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-recursive-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisted-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisted-function-declaration.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/recursive-function-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-recursive-function-expression.js"
      ]
    },
    {
      "sha": "e78c9362c014dccaed5ff193106e44d7d072dc32",
      "short_sha": "e78c936",
      "message": "[compiler] Allow all hooks to take callbacks which access refs, but ban hooks from taking direct ref value arguments\n\nSummary:\nThis brings the behavior of ref mutation within hook callbacks into alignment with the behavior of global mutations--that is, we allow all hooks to take callbacks that may mutate a ref. This is potentially unsafe if the hook eagerly calls its callback, but the alternative is excessively limiting (and inconsistent with other enforcement).\n\nThis also bans *directly* passing a ref.current value to a hook, which was previously allowed.\n\nghstack-source-id: e66ce7123ecf4a905adab957970d0ee5d41245e0\nPull Request resolved: https://github.com/facebook/react/pull/30917",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-09-16T10:53:34-07:00",
      "committed_date": "2024-09-16T10:53:34-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-ref-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-ref-value.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-ref-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-ref-callback.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useImperativeHandle-ref-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useImperativeHandle-ref-mutate.js"
      ]
    },
    {
      "sha": "1e68a0a3aed9975d2e302ccf1dff0861bf2be706",
      "short_sha": "1e68a0a",
      "message": "[compiler] Improve handling of refs\n\nSummary:\nThis change expands our handling of refs to build an understanding of nested refs within objects and functions that may return refs. It builds a special-purpose type system within the ref analysis that gives a very lightweight structural type to objects and array expressions (merging the types of all their members), and then propagating those types throughout the analysis (e.g., if `ref` has type `Ref`, then `{ x: ref }` and `[ref]` have type `Structural(value=Ref)` and `{x: ref}.anything` and `[ref][anything]` have type `Ref`).\n\nThis allows us to support structures that contain refs, and functions that operate over them, being created and passed around during rendering without at runtime accessing a ref value.\n\nThe analysis here uses a fixpoint to allow types to be fully propagated through the system, and we defend against diverging by widening the type of a variable if it could grow infinitely: so, in something like\n```\nlet x = ref;\nwhile (condition) {\n  x = [x]\n}\n```\nwe end up giving `x` the type `Structural(value=Ref)`.\n\nghstack-source-id: afb0b0cb014ffcf21ef4d0ede6511330fd975ec3\nPull Request resolved: https://github.com/facebook/react/pull/30902",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-09-16T10:53:32-07:00",
      "committed_date": "2024-09-16T10:53:32-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capture-ref-for-later-mutation.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capture-ref-for-mutation.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/capture-ref-for-later-mutation.tsx"
      ]
    },
    {
      "sha": "c8a7cab13f9d496d4b178ba5e95b030ca854aa20",
      "short_sha": "c8a7cab",
      "message": "[compiler] Fix issue where second argument of all functions was considered to be a ref\n\nghstack-source-id: 1817f3b816ab5ec013a3b1a6c8a8373a30e0b3a0\nPull Request resolved: https://github.com/facebook/react/pull/30912",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-09-16T10:53:29-07:00",
      "committed_date": "2024-09-16T10:53:29-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts"
      ]
    },
    {
      "sha": "26855e4680dedb21f2c73a069ed691822a242db1",
      "short_sha": "26855e4",
      "message": "[react-native] Fix misleading crash when view config is not found (#30970)\n\n## Summary\r\n\r\nWhen a view config can not be found, it currently errors with\r\n`TypeError: Cannot read property 'bubblingEventTypes' of null`. Instead\r\ninvariant at the correct location and prevent further processing of the\r\nnull viewConfig to improve the error logged.\r\n\r\n## How did you test this change?\r\n\r\nBuild and run RN playground app referencing an invalid native view\r\nthrough `requireNativeComponent`.",
      "author": {
        "name": "Pieter De Baets",
        "email": "pieterdb@meta.com"
      },
      "authored_date": "2024-09-16T17:51:00+01:00",
      "committed_date": "2024-09-16T17:51:00+01:00",
      "changed_files": [
        "scripts/rollup/shims/react-native/ReactNativeViewConfigRegistry.js"
      ]
    },
    {
      "sha": "9f4e4611ead28d34f7f598c9bd12424cf68f5781",
      "short_sha": "9f4e461",
      "message": "fix: add Error prefix to Error objects names (#30969)\n\nThis fixes printing Error objects in Chrome DevTools.\r\n\r\nI've observed that Chrome DevTools is not source mapping and linkifying\r\nURLs, when was running this on larger apps. Chrome DevTools talks to V8\r\nvia Chrome DevTools protocol, every object has a corresponding\r\n[`RemoteObject`](https://chromedevtools.github.io/devtools-protocol/tot/Runtime/#type-RemoteObject).\r\n\r\nWhen Chrome DevTools sees that Error object is printed in the console,\r\nit will try to prettify it. `description` field of the corresponding\r\n`RemoteObject` for the `Error` JavaScript object is a combination of\r\n`Error` `name`, `message`, `stack` fields. This is not just a raw\r\n`stack` field, so our prefix for this field just doesn't work. [V8 is\r\nactually filtering out first line of the `stack` field, it only keeps\r\nthe stack frames as a string, and then this gets prefixed by `name` and\r\n`message` fields, if they are\r\navailable](https://source.chromium.org/chromium/chromium/src/+/main:v8/src/inspector/value-mirror.cc;l=252-311;drc=bdc48d1b1312cc40c00282efb1c9c5f41dcdca9a?fbclid=IwZXh0bgNhZW0CMTEAAR1tMm5YC4jqowObad1qXFT98X4RO76CMkCGNSxZ8rVsg6k2RrdvkVFL0i4_aem_e2fRrqotKdkYIeWlJnk0RA).\r\nAs an illustration, this:\r\n```\r\nconst fakeError = new Error('');\r\nfakeError.name = 'Stack';\r\nfakeError.stack = 'Error Stack:' + stack;\r\n```\r\n\r\nwill be formatted by `V8` as this `RemoteObject`:\r\n```\r\n{\r\n  ...\r\n  description: 'Stack: ...',\r\n  ...\r\n}\r\n```\r\n\r\nNotice that there is no `Error` prefix, that was previously added.\r\nBecause of this, [Chrome DevTools won't even try to symbolicate the\r\nstack](https://github.com/ChromeDevTools/devtools-frontend/blob/ee4729d2ccdf5c6715ee40e6697f5464829e3f9a/front_end/panels/console/ErrorStackParser.ts#L33-L35),\r\nbecause it doesn't have such prefix.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-16T17:43:40+01:00",
      "committed_date": "2024-09-16T17:43:40+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/console.js"
      ]
    },
    {
      "sha": "f2df5694f2be141954f22618fd3ad035203241a3",
      "short_sha": "f2df569",
      "message": "[Fiber] Log Component Renders to Custom Performance Track (#30967)\n\nStacked on #30960 and #30966. Behind the enableComponentPerformanceTrack\r\nflag.\r\n\r\nThis is the first step of performance logging. This logs the start and\r\nend time of a component render in the passive effect phase. We use the\r\ndata we're already tracking on components when the Profiler component or\r\nDevTools is active in the Profiling or Dev builds. By backdating this\r\nafter committing we avoid adding more overhead in the hot path. By only\r\nlogging things that actually committed, we avoid the costly unwinding of\r\nan interrupted render which was hard to maintain in earlier versions.\r\n\r\nWe already have the start time but we don't have the end time. That's\r\nbecause `actualStartTime + actualDuration` isn't enough since\r\n`actualDuration` counts the actual CPU time excluding yields and\r\nsuspending in the render.\r\n\r\nInstead, we infer the end time to be the start time of the next sibling\r\nor the complete time of the whole root if there are no more siblings. We\r\nneed to pass this down the passive effect tree. This will mean that any\r\noverhead and yields are attributed to this component's span. In a follow\r\nup, we'll need to start logging these yields to make it clear that this\r\nis not part of the component's self-time.\r\n\r\nIn follow ups, I'll do the same for commit phases. We'll also need to\r\nlog more information about the phases in the top track. We'll also need\r\nto filter out more components from the trees that we don't need to\r\nhighlight like the internal Offscreen components. It also needs polish\r\non colors etc.\r\n\r\nCurrently, I place the components into separate tracks depending on\r\nwhich lane currently committed. That way you can see what was blocking\r\nTransitions or Suspense etc. One problem that I've hit with the new\r\nperformance.measure extensions is that these tracks show up in the order\r\nthey're used which is not the order of priority that we use. Even when\r\nyou add fake markers they have to actually be within the performance run\r\nsince otherwise the calls are noops so it's not enough to do that once.\r\n\r\nHowever, I think this visualization is actually not good because these\r\ntrees end up so large that you can't see any other lanes once you expand\r\none. Therefore, I think in a follow up I'll actually instead switch to a\r\nmodel where Components is a single track regardless of lane since we\r\ndon't currently have overlap anyway. Then the description about what is\r\nactually rendering can be separate lanes.\r\n\r\n<img width=\"1512\" alt=\"Screenshot 2024-09-15 at 10 55 55 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/5ca3fa74-97ce-40c7-97f7-80c1dd7d6470\">\r\n\r\n<img width=\"1512\" alt=\"Screenshot 2024-09-15 at 10 56 27 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/557ad65b-4190-465f-843c-0bc6cbb9326d\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-16T11:45:50-04:00",
      "committed_date": "2024-09-16T11:45:50-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberPerformanceTrack.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js",
        "packages/react/src/__tests__/ReactProfiler-test.internal.js"
      ]
    },
    {
      "sha": "ee1a403a3019dd8bffb12174d269d8c85bfab8a1",
      "short_sha": "ee1a403",
      "message": "[Fiber] Move Profiler onPostCommit processing of passive effect durations to plain passive effect (#30966)\n\nWe used to queue a separate third passive phase to invoke onPostCommit\r\nbut this is unnecessary. We can just treat it as a plain passive effect.\r\nThis means it is interleaved with other passive effects but we only need\r\nto know the duration of the things below us which is already done at\r\nthis point.\r\n\r\nI also extracted the user space call to onPostCommit into\r\nReactCommitEffects. Same as onCommit. It's now covered by\r\nrunWithFiberInDEV and catches.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-16T11:10:05-04:00",
      "committed_date": "2024-09-16T11:10:05-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js"
      ]
    },
    {
      "sha": "0eab377a96099f0121009c8968c49d13d4e00bd1",
      "short_sha": "0eab377",
      "message": "Add enableComponentPerformanceTrack Flag (#30960)\n\nThis flag will be used to gate a new timeline profiler that's integrate\r\nwith the Performance Tab and the new performance.measure extensions in\r\nChrome.\r\n\r\nIt replaces the existing DevTools feature so this disables\r\nenableSchedulingProfiler when it is enabled since they can interplay in\r\nweird ways potentially.\r\n\r\nThis means that experimental React now disable scheduling profiler and\r\nenables this new approach.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-16T11:09:40-04:00",
      "committed_date": "2024-09-16T11:09:40-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/TimelineProfiler-test.js",
        "packages/react-devtools-shared/src/__tests__/preprocessData-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "8cf64620c7dd4ec7e72aa16ee2d5f15eb3420b92",
      "short_sha": "8cf6462",
      "message": "fix[rdt/fiber/renderer.js]: getCurrentFiber can be injected as null (#30968)\n\nIn production artifacts for `18.x.x` `getCurrentFiber` can actually be\r\ninjected as `null`. Updated `getComponentStack` and `onErrorOrWarning`\r\nimplementations to support this.\r\n\r\n![Screenshot 2024-09-16 at 10 52\r\n00](https://github.com/user-attachments/assets/a0c773aa-ebbf-4fd5-95c4-cac3cc0c203f)",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-16T14:47:57+01:00",
      "committed_date": "2024-09-16T14:47:57+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js"
      ]
    },
    {
      "sha": "fc5ef50da8e975a569622d477f1fed54cb8b193d",
      "short_sha": "fc5ef50",
      "message": "[Flight] Start initial work immediately (#30961)\n\nIn a past update we made render and prerender have different work\r\nscheduling behavior because these methods are meant to be used in\r\ndiffereent environments with different performance tradeoffs in mind.\r\nFor instance to prioritize streaming we want to allow as much IO to\r\ncomplete before triggering a round of work because we want to flush as\r\nfew intermediate UI states. With Prerendering there will never be any\r\nintermediate UI states so we can more aggressively render tasks as they\r\ncomplete.\r\n\r\nOne thing we've found is that even during render we should ideally kick\r\noff work immediately. This update normalizes the intitial work for\r\nrender and prerender to start in a microtask. Choosing microtask over\r\nsync is somewhat arbitrary but there really isn't a reason to make them\r\ndifferent between render/prerender so for now we'll unify them and keep\r\nit as a microtask for now.\r\n\r\nThis change also updates pinging behavior. If the request is still in\r\nthe initial task that spawned it then pings will schedule on the\r\nmicrotask queue. This allows immediately available async APIs to resolve\r\nright away. The concern with doing this for normal pings is that it\r\nmight crowd out IO events but since this is the initial task there would\r\nbe IO to already be scheduled.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-09-14T09:26:01-07:00",
      "committed_date": "2024-09-14T09:26:01-07:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "b75cc078c5fda0d57135523a7a2f4e8d1536472f",
      "short_sha": "b75cc07",
      "message": "Fix nodeName to UPPERCASE in insertStylesheetIntoRoot (#28255)\n\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n<img width=\"518\" alt=\"image\"\r\nsrc=\"https://github.com/facebook/react/assets/18693190/6d12df76-7dae-403b-b486-4940992abe8d\">\r\n\r\nThe condition `node.nodeName === 'link'` is always `false`, because\r\n`node.nodeName` is Uppercase in specification. And the condition\r\n`node.nodeName === 'LINK'` is unnecessary, because Fizz hoists tags when\r\nit's `media` attribute is `\"not all\"`, whether it is a `link` or a\r\n`style` (line 36):\r\n\r\n\r\nhttps://github.com/facebook/react/blob/18cbcbf783377c5a22277a63ae41af54504502e0/packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetExternalRuntime.js#L30-L44\r\n\r\n\r\nhttps://github.com/facebook/react/blob/18cbcbf783377c5a22277a63ae41af54504502e0/packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineSource.js#L30-L44",
      "author": {
        "name": "春希与子晴",
        "email": "master@sweetliquid.me"
      },
      "authored_date": "2024-09-14T23:18:27+08:00",
      "committed_date": "2024-09-14T08:18:27-07:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js"
      ]
    },
    {
      "sha": "3d95c43b8967d4dda1ec9a22f0d9ea4999fee8b8",
      "short_sha": "3d95c43",
      "message": "[Fiber] Profiler - Use two separate functions instead of branch by flag (#30957)\n\nNit: I don't trust flags in hot code. While it can take somewhat longer\r\nto compile two functions and JIT them. After that they don't need to\r\ncheck branches. Also makes it clearer the purpose.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-13T21:51:52-04:00",
      "committed_date": "2024-09-13T21:51:52-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "6774caa37973e3e26d60f100971e5e785fd12235",
      "short_sha": "6774caa",
      "message": "[Flight] properly track pendingChunks when changing environment names (#30958)\n\nWhen the environment name changes for a chunk we issue a new debug chunk\r\nwhich updates the environment name. This chunk was not beign included in\r\nthe pendingChunks count so the count was off when flushing",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-09-13T15:55:42-07:00",
      "committed_date": "2024-09-13T15:55:42-07:00",
      "changed_files": [
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "5deb78223a269a6cb1706da8ec6aad8c007cab03",
      "short_sha": "5deb782",
      "message": "[Flight] Respect `async` flag in client manifest (#30959)\n\nIn #26624, the ability to mark a client reference module as `async` in\r\nthe React client manifest was removed because it was not utilized by\r\nWebpack, neither in `ReactFlightWebpackPlugin` nor in Next.js. However,\r\nsome bundlers and frameworks are sophisticated enough to properly handle\r\nand identify async ESM modules (e.g., client component modules with\r\ntop-level `await`), most notably Turbopack in Next.js. Therefore, we\r\nneed to consider the `async` flag in the client manifest when resolving\r\nthe client reference metadata on the server. The SSR manifest cannot\r\noverride this flag, meaning that if a module is async, it must remain\r\nasync in all client environments.\r\n\r\nx-ref: https://github.com/vercel/next.js/pull/70022",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2024-09-13T22:33:05+02:00",
      "committed_date": "2024-09-13T16:33:05-04:00",
      "changed_files": [
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOM-test.js",
        "packages/react-server-dom-turbopack/src/__tests__/utils/TurbopackMock.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightServerConfigTurbopackBundler.js",
        "packages/react-server-dom-turbopack/src/shared/ReactFlightImportMetadata.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/utils/WebpackMock.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightServerConfigWebpackBundler.js",
        "packages/react-server-dom-webpack/src/shared/ReactFlightImportMetadata.js"
      ]
    },
    {
      "sha": "d9c4920e8b3fff3d3da24d14adf7ac884aee55b2",
      "short_sha": "d9c4920",
      "message": "fix: restore selection should consider the window of the container (#30951)\n\n## Summary\r\n\r\n\r\nFixes #30864 \r\n\r\nBefore this PR the active elemen was always taken from the global\r\n`window`. This is incorrect if the renderer is in one window rendering\r\ninto a container element in another window. The changes in this PR adds\r\nanother code branch to use a `defaultView` of the container element if\r\nit exists so that `restoreSelection` after a commit will actually\r\nrestore to the correct window.\r\n\r\n## How did you test this change?\r\n\r\nI patched these changes to the repro repo in the linked issue #39864\r\nhttps://github.com/ling1726/react-child-window-focus-repro/blob/master/patches/react-dom%2B18.3.1.patch.\r\n\r\nI followed the same repro steps in the linked issue and and could not\r\nrepro the reported problem. Attaching screen recordings below:\r\n\r\nBefore\r\n![focus\r\nrepro](https://github.com/user-attachments/assets/81c4b4f9-08b5-4356-8251-49b909771f3f)\r\n\r\nAfter\r\n\r\n![after](https://github.com/user-attachments/assets/84883032-5558-4650-9b9a-bd4d5fd9cb13)",
      "author": {
        "name": "ling1726",
        "email": "lingfangao@hotmail.com"
      },
      "authored_date": "2024-09-13T22:29:40+02:00",
      "committed_date": "2024-09-13T13:29:40-07:00",
      "changed_files": [
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom-bindings/src/client/ReactInputSelection.js",
        "packages/react-dom/src/__tests__/ReactDOMFiber-test.js"
      ]
    },
    {
      "sha": "d3d4d3a46b014ab0f6edc443c19fcdba09105f20",
      "short_sha": "d3d4d3a",
      "message": "Call cleanup of insertion effects when hidden (#30954)\n\nInsertion effects do not unmount when a subtree is removed while\r\noffscreen.\r\n\r\nCurrent behavior for an insertion effect is if the component goes\r\n\r\n- *visible -> removed:* calls insertion effect cleanup\r\n- *visible -> offscreen -> removed:* insertion effect cleanup is never\r\ncalled\r\n\r\nThis makes it so we always call insertion effect cleanup when removing\r\nthe component.\r\n\r\nLikely also fixes https://github.com/facebook/react/issues/26670\r\n\r\n---------\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-09-13T13:18:14-07:00",
      "committed_date": "2024-09-13T16:18:14-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/__tests__/Activity-test.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemantics-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "633a0fe536febefa02698db124b7265a3fde55e1",
      "short_sha": "633a0fe",
      "message": "[compiler] Factor out function effects from reference effects\n\nSummary:\nThis PR performs a major refactor of InferReferenceEffects to separate out the work on marking places with Effects from inferring FunctionEffects. The behavior should be identical after this change (see [internal sync](https://www.internalfb.com/intern/everpaste/?handle=GN74VxscnUaztTYDAL8q0CRWBIxibsIXAAAB)) but the FunctionEffect logic should be easier to work with.\n\nThese analyses are unfortunately still deeply linked--the FunctionEffect analysis needs to reason about the \"current\" value kind for each point in the program, while the InferReferenceEffects algorithm performs global updates on the state of the program (e.g. freezing). In the future, it might be possible to make these entirely separate passes if we store the ValueKind directly on places.\n\nFor the most part, the logic of reference effects and function effects can be cleanly separated: for each instruction and terminal, we visit its places and infer their effects, and then we visit its places and infer any function effects that they cause. The biggest wrinkle here is that when a transitive function freeze operation occurs, it has to happen *after* inferring the function effects on the place, because otherwise we may convert a value from Context to Frozen, which will cause the ContextualMutation function effect to be converted to a ReactMutation effect too early. This can be observed in a case like this:\n\n```\nexport default component C() {\n  foo(() => {\n    const p = {};\n    return () => {\n      p['a'] = 1\n    };\n  });\n}\n```\nHere when the outer function returns the inner function, it freezes the inner function which transitively freezes `p`. But before that freeze happens, we need to replay the ContextualMutation on the inner function to determine that the value is mutable in the outer context. If we froze `p` first, we would instead convert the ContextualMutation to a ReactMutation and error.\n\nTo handle this, InferReferenceEffects now delays the exection of the freezeValue action until after it's called the helper functions that generate function effects. So the order of operations on a given place is now\n\nset effect --> generate function effects --> transitively freeze dependencies, if applicable\n\nghstack-source-id: 21cb50c14054e7e7a307acb595ef30b54c2f2a52\nPull Request resolved: https://github.com/facebook/react/pull/30920",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-09-13T12:38:17-07:00",
      "committed_date": "2024-09-13T12:38:17-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferFunctionEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts"
      ]
    },
    {
      "sha": "94e4acaa1477e65cac02ba86058cde0afe4c8f1f",
      "short_sha": "94e4aca",
      "message": "[Fiber] Set profiler values to doubles (#30942)\n\nAt some point this trick was added to initialize the value first to NaN\r\nand then replace them with zeros and negative ones.\r\n\r\nThis is to address the issue noted in\r\nhttps://github.com/facebook/react/issues/14365 where these hidden\r\nclasses can be initialized to SMIs at first and then deopt when we\r\nrealize they're actually doubles.\r\n\r\nHowever, this fix has been long broken and has deopted the profiling\r\nbuild for years because closure compiler optimizes out the first write.\r\n\r\nI'm not sure because I haven't A/B-tested this in the JIT yet but I\r\nthink we can use negative zero and -1.1 as the initial values instead\r\nsince they're not simple integers. Negative zero `===` zero (but not\r\nObject.is) so is the same as far as our code is concerned. The negative\r\nvalue is just `< 0` comparisons.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-13T12:27:00-04:00",
      "committed_date": "2024-09-13T12:27:00-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js"
      ]
    },
    {
      "sha": "206df66e70652e85711c3177ce1a0459609a7771",
      "short_sha": "206df66",
      "message": "[compiler][rewrite] PropagateScopeDeps hir rewrite\n\nResubmission of #30079 -- core logic unchanged, but needed to rebase past #30573\n\n### Quick background\n#### Temporaries\n\nThe compiler currently treats temporaries and named variables (e.g. `x`) differently in this pass.\n- named variables may be reassigned (in fact, since we're running after LeaveSSA, a single named identifier's IdentifierId may map to multiple `Identifier` instances -- each with its own scope and mutable range)\n- temporaries are replaced with their represented expressions during codegen. This is correct (mostly correct, see #29878) as we're careful to always lower the correct evaluation semantics. However, since we rewrite reactive scopes entirely (to if/else blocks), we need to track temporaries that a scope produces in `ReactiveScope.declarations` and later promote them to named variables.\nIn the same example, $4, $5, and $6 need to be promoted: $2 ->`t0`,  $5 ->`t1`, and $6 ->`t2`.\n```js\n[1] $2 = LoadGlobal(global) foo\n[2] $3 = LoadLocal bar$1\nscope 0:\n  [3] $4 = Call $2(<unknown> $3)\nscope 1:\n  [4] $5 = Object {  }\nscope 2:\n  [5] $6 = Object { a: $4, b: $5 }\n[6] $8 = StoreLocal Const x$7 = $6\n```\n\n#### Dependencies\n`ReactiveScope.dependencies` records the set of (read-only) values that a reactive scope is dependent on. This is currently limited to just variables (named variables from source and promoted temporaries) and property-loads.\nAll dependencies we record need to be hoistable -- i.e. reordered to just before the ReactiveScope begins. Not all PropertyLoads are hoistable.\n\nIn this example, we should not evaluate `obj.a.b` without before creating x and checking `objIsNull`.\n```js\n// reduce-reactive-deps/no-uncond.js\nfunction useFoo({ obj, objIsNull }) {\n  const x = [];\n  if (isFalse(objIsNull)) {\n    x.push(obj.a.b);\n  }\n  return x;\n}\n```\n\nWhile other memoization strategies with different constraints exist, the current compiler requires that `ReactiveScope.dependencies` be re-orderable to the beginning of the reactive scope. But.. `PropertyLoad`s from null values will throw `TypeError`. This means that evaluating hoisted dependencies should throw if and only if the source program throws. (It is also a bug if source throws and compiler output does not throw. See https://github.com/facebook/react-forget/pull/2709)\n\n---\n### Rough high level overview\n1. Pass 1\nWalk over instructions to gather every temporary used outside of its defining scope (same as ReactiveFunction version). These determine the sidemaps we produce, as temporaries used outside of their declaring scopes get promoted to named variables later (and are not considered hoistable rvals).\n2. Pass 2 (collectTemporariesSidemap)\nWalk over instructions to generate a sidemap of temporary identifier -> named variable and property path (e.g. `$3 -> {obj: props, path: [\"a\", \"b\"]}`)\n2. Pass 2 (collectHoistablePropertyLoads)\n  a. Build a sidemap of block -> accessed variables and properties (e.g. `bb0 -> [ {obj: props, path: [\"a\", \"b\"]} ]`)\n  b. Propagate \"non-nullness\" i.e. variables and properties for which we can safely evaluate `PropertyLoad`.\n  A basic block can unconditionally read from identifier X if any of the following applies:\n    - the block itself reads from identifier X\n    - all predecessors of the block read from identifier X\n    - all successors of the block read from identifier X\n4. Pass 3: (collectDependencies)\nWalks over instructions again to record dependencies and declarations, using the previously produced sidemaps. We do not record any control-flow here\n5. Merge every scope's recorded dependencies with the set of hoistable PropertyLoads\n\nTested by syncing internally and (1) checking compilation output differences ([internal link](https://www.internalfb.com/intern/everpaste/?handle=GPCfUBt_HCoy_S4EAJDVFJyJJMR0bsIXAAAB)), running internally e2e tests ([internal link](https://fburl.com/sandcastle/cs5mlkxq))\n\n---\n### Followups:\n1. Rewrite function expression deps\nThis change produces much more optimal output as the compiler now uses the function CFG to understand which variables / paths are assumed to be non-null. However, it may exacerbate [this function-expr hoisting bug](https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-hoisting-functionexpr.tsx). A short term fix here is to simply call some form of `collectNonNullObjects` on every function expression to find hoistable variable / paths. In the longer term, we should refactor out `FunctionExpression.deps`.\n\n2. Enable optional paths\n(a) don't count optional load temporaries as dependencies (e.g. `collectOptionalLoadRValues(...)`).\n(b) record optional paths in both collectHoistablePropertyLoads and dependency collection\n\nghstack-source-id: 2507f6ea751dce09ad1dccd353ae6fc7cf411582\nPull Request resolved: https://github.com/facebook/react/pull/30894",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-09-12T16:59:40-04:00",
      "committed_date": "2024-09-12T17:40:57-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/DeriveMinimalDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PropagateScopeDependenciesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/visitors.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/InferReactiveScopeVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/utils.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructure-array-declaration-to-context-var.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructure-array-declaration-to-context-var.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/evaluation-order-mutate-call-after-dependency-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/evaluation-order-mutate-call-after-dependency-load.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/evaluation-order-mutate-store-after-dependency-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/evaluation-order-mutate-store-after-dependency-load.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/functionexpr-conditional-access-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/functionexpr-conditional-access-2.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/functionexpr–conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/functionexpr–conditional-access.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-as-memo-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single-with-unconditional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-with-conditional-optional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/error.todo-optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-with-conditional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/conditional-member-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/join-uncond-scopes-cond-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/memberexpr-join-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/memberexpr-join-optional-chain2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/promote-uncond.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/repro-scope-missing-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-cascading-eliminated-phis.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-leave-case.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary-destruction-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary-destruction.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-ternary-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-via-destructuring-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/switch-non-final-default.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/switch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-mutate-outer-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-try-value-modified-in-catch-escaping.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-try-value-modified-in-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/useMemo-multiple-if-else.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/hoist-deps-diff-ssa-instance.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/hoist-deps-diff-ssa-instance.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/hoist-deps-diff-ssa-instance1.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/hoist-deps-diff-ssa-instance1.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/todo-merge-ssa-phi-access-nodes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/todo-merge-ssa-phi-access-nodes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/uncond-access-in-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/uncond-access-in-mutable-range.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-global-load-cached.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-global-load-cached.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-global-property-load-cached.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo-global-property-load-cached.tsx",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "5ac4034e14a72c0edf602585c10fd2725fb376c5",
      "short_sha": "5ac4034",
      "message": "[compiler] Fork fixtures for enablePropagateDepsInHIR\n\n- flip `enablePropagateDepsInHIR` to off by default\n- fork fixtures which produce compilation differences in #30894 to separate directory `propagate-scope-deps-hir-fork`, to be cleaned up when we remove this flag\n\nghstack-source-id: 7d5b8dc29788a65c272c846af9877b09fbf2cd60\nPull Request resolved: https://github.com/facebook/react/pull/30949",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-09-12T16:59:40-04:00",
      "committed_date": "2024-09-12T17:40:57-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-inverted-optionals-parallel-paths.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-inverted-optionals-parallel-paths.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single-with-unconditional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional-optional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-as-memo-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-inverted-optionals-parallel-paths.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-inverted-optionals-parallel-paths.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single-with-unconditional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-single.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-with-conditional-optional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/optional-member-expression-with-conditional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/conditional-member-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/conditional-member-expr.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/join-uncond-scopes-cond-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/join-uncond-scopes-cond-deps.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/memberexpr-join-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/memberexpr-join-optional-chain.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/memberexpr-join-optional-chain2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/memberexpr-join-optional-chain2.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/promote-uncond.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/promote-uncond.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/repro-scope-missing-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/repro-scope-missing-mutable-range.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-cascading-eliminated-phis.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-cascading-eliminated-phis.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-leave-case.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-leave-case.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary-destruction-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary-destruction-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary-destruction.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary-destruction.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-ternary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-ternary-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-ternary-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-unconditional-ternary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-via-destructuring-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-via-destructuring-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/ssa-renaming-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/switch-non-final-default.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/switch-non-final-default.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/switch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/switch.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-mutate-outer-value.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-mutate-outer-value.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-try-value-modified-in-catch-escaping.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-try-value-modified-in-catch-escaping.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-try-value-modified-in-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/try-catch-try-value-modified-in-catch.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/useMemo-multiple-if-else.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/useMemo-multiple-if-else.js"
      ]
    },
    {
      "sha": "f6dcce5199a3b9480a47d9feda8e00d8d9a0905d",
      "short_sha": "f6dcce5",
      "message": "[compiler][ez] Add entrypoints to ssa fixtures\n\nAdds evaluator support for a few compiler test fixtures\n\nghstack-source-id: 202654992a9876cea59885b54a338c908e369ddb\nPull Request resolved: https://github.com/facebook/react/pull/30948",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-09-12T16:59:39-04:00",
      "committed_date": "2024-09-12T17:40:57-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/alias-capture-in-method-receiver-and-mutate.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/align-scopes-reactive-scope-overlaps-try.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-cascading-eliminated-phis.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-cascading-eliminated-phis.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-leave-case.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-leave-case.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary-destruction-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary-destruction-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary-destruction.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary-destruction.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-ternary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-unconditional-ternary-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-unconditional-ternary-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-unconditional-ternary.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-unconditional-ternary.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-unconditional-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-unconditional-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-via-destructuring-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-via-destructuring-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-with-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ssa-renaming-with-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/unmemoized-nonreactive-dependency-is-pruned-as-dependency.expect.md",
        "compiler/packages/snap/src/SproutTodoFilter.ts",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "dff50825c6ca4c04c79fd7fe2d2d345ea5e29f87",
      "short_sha": "dff5082",
      "message": "[Flight] Track owner/stack where the Flight Client reads as the root (#30933)\n\nThis means that the owner of a Component rendered on the remote server\r\nbecomes the Component on this server.\r\n\r\nIdeally we'd support this for the Client side too. In particular Fiber\r\nbut currently ReactComponentInfo's owner is typed as only supporting\r\nother ReactComponentInfo and it's a bigger lift to support that.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-12T17:19:34-04:00",
      "committed_date": "2024-09-12T17:19:34-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "89b445709d9f34bee261bacd6c68584c3ccb067b",
      "short_sha": "89b4457",
      "message": "Enable lazy context propagation (#30935)\n\nLast I heard this was great so not sure there are any more blockers to\r\njust include it in 19?",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-12T13:01:56-04:00",
      "committed_date": "2024-09-12T13:01:56-04:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "94e652d505cc2a3ed77de06c0f8e5f4909761d97",
      "short_sha": "94e652d",
      "message": "disable `enableSiblingPrerendering` in experimental channel (#30952)\n\nDisables `enableSiblingPrerendering` in the experimental builds until\r\nthe feature is tested at Meta first.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-09-12T09:33:20-07:00",
      "committed_date": "2024-09-12T09:33:20-07:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/TimelineProfiler-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js"
      ]
    },
    {
      "sha": "473522093d3dd95582729d01cd5c0d15dcc9cd3b",
      "short_sha": "4735220",
      "message": "[Fizz] Add resumeAndPrerender to Static Rendering (#30950)\n\nThis is only in the same experimental exports as `resume`. Useful with\r\nPostpone/Halt.\r\n\r\nWe already have `prerender()` to create a partial tree with postponed\r\nstate. We also have `resume()` to dynamically resume such a tree.\r\n\r\nThis lets you do a new prerender by resuming an already existing\r\npostponed state. Basically creating a chain of preludes. The next\r\nprelude would include the scripts to patch up the document.\r\n\r\nThis mostly just works since both prerender and resume are already\r\nimplemented using the same code so we just enable both at the root. I'm\r\nsure we'll find some edge cases since this wasn't considered when it was\r\nfirst written but so far I've only found an unrelated existing bug with\r\n`keyPath` fixed here.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-12T10:51:01-04:00",
      "committed_date": "2024-09-12T10:51:01-04:00",
      "changed_files": [
        "packages/react-dom/npm/static.browser.js",
        "packages/react-dom/npm/static.edge.js",
        "packages/react-dom/npm/static.node.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticBrowser.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticEdge.js",
        "packages/react-dom/src/server/ReactDOMFizzStaticNode.js",
        "packages/react-dom/src/server/react-dom-server.browser.js",
        "packages/react-dom/src/server/react-dom-server.edge.js",
        "packages/react-dom/src/server/react-dom-server.node.js",
        "packages/react-dom/static.browser.js",
        "packages/react-dom/static.edge.js",
        "packages/react-dom/static.node.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "bb6b86ed596399ddd8bf642404a9e68ae430a6ea",
      "short_sha": "bb6b86e",
      "message": "refactor[react-devtools]: initialize renderer interface early (#30946)\n\nThe current state is that `rendererInterface`, which contains all the\r\nbackend logic, like generating component stack or attaching errors to\r\nfibers, or traversing the Fiber tree, ..., is only mounted after the\r\nFrontend is created.\r\n\r\nFor browser extension, this means that we don't patch console or track\r\nerrors and warnings before Chrome DevTools is opened.\r\n\r\nWith these changes, `rendererInterface` is created right after\r\n`renderer` is injected from React via global hook object (e. g.\r\n`__REACT_DEVTOOLS_GLOBAL_HOOK__.inject(...)`.\r\n\r\nBecause of the current implementation, in case of multiple Reacts on the\r\npage, all of them will patch the console independently. This will be\r\nfixed in one of the next PRs, where I am moving console patching to the\r\nglobal Hook.\r\n\r\nThis change of course makes `hook.js` script bigger, but I think it is a\r\nreasonable trade-off for better DevX. We later can add more heuristics\r\nto optimize the performance (if necessary) of `rendererInterface` for\r\ncases when Frontend was connected late and Backend is attempting to\r\nflush out too many recorded operations.\r\n\r\nThis essentially reverts https://github.com/facebook/react/pull/26563.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-12T13:59:29+01:00",
      "committed_date": "2024-09-12T13:59:29+01:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/background/dynamicallyInjectContentScripts.js",
        "packages/react-devtools-extensions/src/contentScripts/renderer.js",
        "packages/react-devtools-extensions/webpack.config.js",
        "packages/react-devtools-shared/src/attachRenderer.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/index.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/devtools/store.js",
        "packages/react-devtools-shared/src/hook.js"
      ]
    },
    {
      "sha": "d6cb4e771341ff82489c00f4907990cb8a75696b",
      "short_sha": "d6cb4e7",
      "message": "Start prerendering Suspense retries immediately (#30934)\n\nWhen a component suspends and is replaced by a fallback, we should start\r\nprerendering the fallback immediately, even before any new data is\r\nreceived. During the retry, we can enter prerender mode directly if\r\nwe're sure that no new data was received since we last attempted to\r\nrender the boundary.\r\n\r\nTo do this, when completing the fallback, we leave behind a pending\r\nretry lane on the Suspense boundary. Previously we only did this once a\r\npromise resolved, but by assigning a lane during the complete phase, we\r\nwill know that there's speculative work to be done.\r\n\r\nThen, upon committing the fallback, we mark the retry lane as suspended\r\n— but only if nothing was pinged or updated in the meantime. That allows\r\nus to immediately enter prerender mode (i.e. render without skipping any\r\nsiblings) when performing the retry.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-09-11T11:41:54-04:00",
      "committed_date": "2024-09-11T11:41:54-04:00",
      "changed_files": [
        "packages/react-cache/src/__tests__/ReactCacheOld-test.internal.js",
        "packages/react-devtools-shared/src/__tests__/TimelineProfiler-test.js",
        "packages/react-dom/src/__tests__/ReactDOMForm-test.js",
        "packages/react-dom/src/__tests__/ReactDOMSuspensePlaceholder-test.js",
        "packages/react-dom/src/__tests__/ReactWrongReturnPointer-test.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ActivityStrictMode-test.js",
        "packages/react-reconciler/src/__tests__/DebugTracing-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactActWarnings-test.js",
        "packages/react-reconciler/src/__tests__/ReactBatching-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactConcurrentErrorRecovery-test.js",
        "packages/react-reconciler/src/__tests__/ReactContextPropagation-test.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactSiblingPrerendering-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseCallback-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemantics-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseFallback-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspensePlaceholder-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactTransitionTracing-test.js",
        "packages/react-reconciler/src/__tests__/ReactUse-test.js",
        "packages/react-reconciler/src/__tests__/StrictEffectsMode-test.js"
      ]
    },
    {
      "sha": "1bb056363c02fa9d188cc1122595d1587aa59d86",
      "short_sha": "1bb0563",
      "message": "[Fizz] Use RequestInstance constructor for resuming (#30947)\n\nWe added enough fields to need a constructor instead of inline object in\r\nV8.\r\n\r\nWe didn't update the resumeRequest path though so it wasn't using the\r\nconstructor and had a different hidden class.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-11T11:35:01-04:00",
      "committed_date": "2024-09-11T11:35:01-04:00",
      "changed_files": [
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "344bc8128bc8f135e3fe6bb3449580d216ec7639",
      "short_sha": "344bc81",
      "message": "refactor[Agent/Store]: Store to send messages only after Agent is initialized (#30945)\n\nBoth for browser extension, and for React Native (as part of\r\n`react-devtools-core`) `Store` is initialized before the Backend (and\r\n`Agent` as a part of it):\r\n\r\nhttps://github.com/facebook/react/blob/bac33d1f82d9094b45d6f662dd7fa895abab8bce/packages/react-devtools-extensions/src/main/index.js#L111-L113\r\n\r\nAny messages that we send from `Store`'s constructor are ignored,\r\nbecause there is nothing on the other end yet. With these changes,\r\n`Agent` will send `backendInitialized` message to `Store`, after which\r\n`getBackendVersion` and other events will be sent.\r\n\r\nNote that `isBackendStorageAPISupported` and `isSynchronousXHRSupported`\r\nare still sent from `Agent`'s constructor, because we don't explicitly\r\nask for it from `Store`, but these are used.\r\n\r\nThis the pre-requisite for fetching settings and unsupported renderers\r\nreliably from the Frontend.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-11T15:10:13+01:00",
      "committed_date": "2024-09-11T15:10:13+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/devtools/store.js"
      ]
    },
    {
      "sha": "bac33d1f82d9094b45d6f662dd7fa895abab8bce",
      "short_sha": "bac33d1",
      "message": "[Flight] Unwrap lazy before reading the value (#30938)\n\nThis is important if the lazy is at the root of the chunk. I don't have\r\na unit test for it but @gnoff has a repro.\r\n\r\nIt also shouldn't unwrap the last value since that's the one we're\r\nreferencing.\r\n\r\nThis was already done correctly by @unstubbable in waitForReference so\r\nthis just aligns with that.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-10T19:42:19-04:00",
      "committed_date": "2024-09-10T19:42:19-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "a5a7f1063e6f190c64c779b2aa54d28fb7b92cfb",
      "short_sha": "a5a7f10",
      "message": "[Fiber] Don't call performance.now() twice in a row (#30936)",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-10T16:46:35-04:00",
      "committed_date": "2024-09-10T16:46:35-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactProfilerTimer.js"
      ]
    },
    {
      "sha": "66cf2cfc8a8c4b09d2b783fd7302ae6b24150935",
      "short_sha": "66cf2cf",
      "message": "Prerender during same pass if blocked anyway (#30879)\n\nIf something suspends in the shell — i.e. we won't replace the suspended\r\ncontent with a fallback — we might as well prerender the siblings during\r\nthe current render pass, instead of spawning a separate prerender pass.\r\n\r\nThis is implemented by setting the \"is prerendering\" flag to true\r\nwhenever we suspend in the shell. But only if we haven't already skipped\r\nover some siblings, because if so, then we need to schedule a separate\r\nprerender pass regardless.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-09-10T13:23:32-04:00",
      "committed_date": "2024-09-10T13:23:32-04:00",
      "changed_files": [
        "packages/react-cache/src/__tests__/ReactCacheOld-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-dom/src/__tests__/ReactDOMForm-test.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ActivitySuspense-test.js",
        "packages/react-reconciler/src/__tests__/ReactActWarnings-test.js",
        "packages/react-reconciler/src/__tests__/ReactAsyncActions-test.js",
        "packages/react-reconciler/src/__tests__/ReactConcurrentErrorRecovery-test.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-reconciler/src/__tests__/ReactExpiration-test.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactTransition-test.js",
        "packages/react-reconciler/src/__tests__/ReactUse-test.js",
        "packages/react-reconciler/src/__tests__/useMemoCache-test.js",
        "packages/react-reconciler/src/__tests__/useSyncExternalStore-test.js"
      ]
    },
    {
      "sha": "d724ba96ff452570afed321c3a672f2a5f4bfe96",
      "short_sha": "d724ba9",
      "message": "[compiler] Validate type configs for hooks/non-hooks\n\nAlternative to #30868. The goal is to ensure that the types coming out of moduleTypeProvider are valid wrt to hook typing. If something is named like a hook, then it must be typed as a hook (or don't type it).\n\nghstack-source-id: 3e8b5a0a7010d0c484bbb417fb258e76bf4e32bc\nPull Request resolved: https://github.com/facebook/react/pull/30888",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-09-05T15:24:43-07:00",
      "committed_date": "2024-09-10T09:25:28-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hook-name-not-typed-as-hook-namespace.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hook-name-not-typed-as-hook-namespace.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hook-name-not-typed-as-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hook-name-not-typed-as-hook.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hooklike-module-default-not-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hooklike-module-default-not-hook.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-nonhook-name-typed-as-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-nonhook-name-typed-as-hook.js",
        "compiler/packages/snap/src/sprout/shared-runtime-type-provider.ts"
      ]
    },
    {
      "sha": "3dfd5d9efb8fb56c4f602915c0e38a84b0e956db",
      "short_sha": "3dfd5d9",
      "message": "refactor[RendererInterface]: expose onErrorOrWarning and getComponentStack (#30931)\n\nMake `onErrorOrWarning` and `getComponentStack` part of\r\n`rendererInterface`. By doing this, they will be available from the\r\nglobal hook `rendererInterfaces` Map. This makes them available to be\r\nused by Hook, which soon will be the only one who is doing console\r\npatching.\r\n\r\nThis is also a pre-requisite for removing `registerRenderer`:\r\n\r\nhttps://github.com/facebook/react/blob/d160aa0fbb1bd2d00ea8c771c551c9cb5b47f1e9/packages/react-devtools-shared/src/backend/console.js#L113-L121",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-09-10T15:59:40+01:00",
      "committed_date": "2024-09-10T15:59:40+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/console.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/flight/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js"
      ]
    },
    {
      "sha": "63cefa2957bbf8c599643d8252f6b8221b399349",
      "short_sha": "63cefa2",
      "message": "[DevTools] Implement getComponentStack and onErrorOrWarning for replayed Flight logs (#30930)\n\nThis adds owner stacks to replayed Server Component logs in environments\r\nthat don't support native console.createTask.\r\n\r\n<img width=\"521\" alt=\"Screenshot 2024-09-09 at 8 55 21 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/261cfaee-ea65-4044-abf0-c41abf358fea\">\r\n\r\nIt also tracks the logs in the global componentInfoToComponentLogsMap\r\nwhich lets us associate those logs with Server Components when they\r\nlater commit into the fiber tree.\r\n\r\n<img width=\"1280\" alt=\"Screenshot 2024-09-09 at 9 31 16 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/436312a6-f9f4-4add-8129-0fb9b9eb18ee\">\r\n\r\nI tried to create unit tests for this since it's now wired up\r\nend-to-end. Unfortunately, the complicated testing set up for Flight\r\nrequires a complex set of resetting modules which are incompatible with\r\nthe complicated test setup in getVersionedRenderImplementation for\r\nDevTools tests.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-10T10:37:29-04:00",
      "committed_date": "2024-09-10T10:37:29-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/flight/DevToolsComponentInfoStack.js",
        "packages/react-devtools-shared/src/backend/flight/renderer.js",
        "packages/react-devtools-shared/src/backend/index.js"
      ]
    },
    {
      "sha": "d160aa0fbb1bd2d00ea8c771c551c9cb5b47f1e9",
      "short_sha": "d160aa0",
      "message": "[DevTools] Use Unicode Atom Symbol instead of Atom Emoji (#30832)\n\nThis reverts #19603.\r\n\r\nBefore:\r\n<img width=\"724\" alt=\"Screenshot 2024-08-28 at 12 07 29 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/0613088f-c013-4f1c-92c3-fbdae8c1f109\">\r\n\r\nAfter:\r\n<img width=\"771\" alt=\"Screenshot 2024-08-28 at 12 08 13 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/eef21bee-d11f-4f0a-9147-053a163f720f\">\r\n\r\nConsensus seems to be that while the purple on is a bit clearer and\r\neasier to read. The purple is not on brand so it doesn't look like\r\nReact. It looks ugly. It's distracting (too eye catching). Taking away\r\nattention from other tabs in an unfair way.\r\n\r\nIt also gets worse with more tabs added. We plan on both adding another\r\ntab and panes inside other tabs (elements/sources) soon. Each needs to\r\nbe marked somehow as part of React but spelling it out is too long.\r\nPutting inside a second tab means two clicks and takes away real-estate\r\nfrom our extension and doesn't solve the problem with extension panes in\r\nother tabs. We also plan on adding multiple different tracks to the\r\nPerformance tab which also needs a name other than just React and\r\nspelling out React as a prefix is too long. The Emoji is too\r\ndistracting. So it seems best to uniformly apply the symbol - albeit it\r\nmight just look like a dot to many.\r\n\r\nDark mode looks close to on brand:\r\n\r\n<img width=\"1089\" alt=\"Screenshot 2024-08-28 at 12 32 50 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/7175a540-4241-4c26-9e4d-4d367873af57\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-10T00:09:42-04:00",
      "committed_date": "2024-09-10T00:09:42-04:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/devtools/views/hooks.js",
        "packages/react-reconciler/src/DebugTracing.js",
        "packages/react-reconciler/src/__tests__/DebugTracing-test.internal.js"
      ]
    },
    {
      "sha": "6066b8e8e6f07721f4e092920d3e98787122f0fb",
      "short_sha": "6066b8e",
      "message": "[Flight] Reset currentOwnerInDEV (#30929)\n\nMissed this bit.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-09T22:07:35-04:00",
      "committed_date": "2024-09-09T22:07:35-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "49825c0ffc091f974e57bf6ed17c8d2eff5d5942",
      "short_sha": "49825c0",
      "message": "[Flight] Add react-stack-bottom-frame to console replaying (#30926)\n\nAny time we're creating a stack trace we should have a\r\nreact-stack-bottom-frame so we know what to filter out.\r\n\r\nThis is the same thing we already do for createFakeJSXCallStackInDEV but\r\nwe should do that when replaying logs too.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-09T19:52:05-04:00",
      "committed_date": "2024-09-09T19:52:05-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "0dbacf204168cedaf1b430084b5fc3820f1c6dfa",
      "short_sha": "0dbacf2",
      "message": "[DevTools] Improve Layering Between Console and Renderer (#30925)\n\nThe console instrumentation should not know about things like Fibers.\r\nOnly the renderer bindings should know about that stuff. We can improve\r\nthe layering by just moving all that stuff behind a `getComponentStack`\r\nhelper that gets injected by the renderer.\r\n\r\nThis sets us up for the Flight renderer #30906 to have its own\r\nimplementation of this function.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-09T15:33:30-04:00",
      "committed_date": "2024-09-09T15:33:30-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/console-test.js",
        "packages/react-devtools-shared/src/backend/console.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/flight/renderer.js",
        "packages/react-devtools-shared/src/hook.js"
      ]
    },
    {
      "sha": "fa3cf509a9a1fcfa33dac6a2936391e06bb06316",
      "short_sha": "fa3cf50",
      "message": "[DevTools] Add Map for Server Component Logs (#30905)\n\nStacked on #30899.\r\n\r\nThis adds another map to store Server Components logs. When they're\r\nreplayed with an owner we can associate them with a DevToolsInstance.\r\nThe replaying should happen before they can mount in Fiber so they'll\r\nalways have all logs when they mount. There can be more than one\r\nInstance associated with any particular ReactComponentInfo. It can also\r\nbe unmounted and restored later.\r\n\r\nOne thing that's interesting about these is that when a Server Component\r\ntree refreshes a new set of ReactComponentInfo will update through the\r\ntree and the VirtualInstances will update with new instances. This means\r\nthat the old errors/warnings are no longer associated with the\r\nVirtualInstance. I.e. it's not continually appended like updates do for\r\nFiber backed instances. On the client we dedupe errors/warnings for the\r\nlife time of the page. On the server that doesn't work well because it\r\nwould mean that when you refresh the page, you miss out on warnings so\r\nwe dedupe them per request instead. If we just appended on refresh it\r\nwould keep adding them.\r\n\r\nIf ever add a deduping mechanism that spans longer than a request, we\r\nmight need to do more of a merge when these updates.\r\n\r\nNothing actually adds logs to this map yet. That will need an\r\nintegration with Flight in a follow up.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-09T15:12:28-04:00",
      "committed_date": "2024-09-09T15:12:28-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/shared/DevToolsServerComponentLogs.js"
      ]
    },
    {
      "sha": "f4b3a1fea2485c414985d341d6445660da471a98",
      "short_sha": "f4b3a1f",
      "message": "[DevTools] Delete fiberToFiberInstanceMap (#30900)\n\nStacked on #30899.\r\n\r\nAfter the rest of the stack this is now unused so we can save time and\r\nmemory avoiding to maintain it. 🎉",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-09T15:12:13-04:00",
      "committed_date": "2024-09-09T15:12:13-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "2283d7204cfc200aa78b674d086a481c9a983007",
      "short_sha": "2283d72",
      "message": "[Flight] Inject Client Into DevTools (#30910)\n\nStacked on #30906.\r\n\r\nInjects the Flight Client into the DevTools hook if it `supportsFlight`.\r\nThis only injects in DEV. We could inject it in prod too but so far the\r\nonly feature this exposes is only available in DEV anyway. I also only\r\ncall `injectIntoDevTools` in the browser builds since we don't really\r\nsupport DevTools on the server anyway.\r\n\r\nThe main purpose of this for now is so that DevTools can track the\r\nServer Component owner of replayed logs. This lets us add owner stacks\r\nwhere `console.createTask` is not natively supported (like Firefox). It\r\nalso lets us associate the log with the Server Component in the\r\nComponent tree #30905.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-09T15:11:57-04:00",
      "committed_date": "2024-09-09T15:11:57-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightClientDevToolsHook.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.custom.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-browser-esm.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-browser-turbopack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-browser.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-bun.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-edge-turbopack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-edge-webpack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-legacy.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-esm.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-turbopack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webpack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.markup.js",
        "packages/react-server-dom-esm/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-turbopack/src/client/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientBrowser.js"
      ]
    },
    {
      "sha": "3cac8cd5a981cc0320955788fd3545578c2ac311",
      "short_sha": "3cac8cd",
      "message": "[DevTools] Add Flight Renderer (#30906)\n\nThis represents a virtual renderer that connects to the Flight Client.\r\nIt's virtual in the sense that the actual rendering has already happened\r\non the server. The Flight Client parses the result. Most of the result\r\nthen end up in objects that render into another renderer and that's how\r\nwe see most Server Components in DevTools. As part of the client's tree.\r\n\r\nHowever, some things are side-effects that don't really connect to any\r\nparticular client renderer. For example preloads() and logs. For those\r\nwe need to treat the Flight Client as if it was its own renderer just\r\nlike a Fiber renderer or even legacy renderer. We really could support\r\nFizz and Flight Server as DevTools targets too for example to connect it\r\nto the backend but there's just not much demand for that.\r\n\r\nThis will initially only be used to track the owners of replayed console\r\nlogs but could be expanded to more. For example to send controls to\r\nstart profiling on the server. It could also be expanded to build an RSC\r\npayload inspector that is automatically connected.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-09T15:11:34-04:00",
      "committed_date": "2024-09-09T15:11:34-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/flight/renderer.js",
        "packages/react-devtools-shared/src/backend/index.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/hook.js"
      ]
    },
    {
      "sha": "e07235b980df30c0ec865500a3e747dd67ce80db",
      "short_sha": "e07235b",
      "message": "[DevTools] Refactor Error / Warning Count Tracking (#30899)\n\nWe can simplify this tracking by not having a separate pending set of\r\nlogs and the logs tracked per instance and instead we just track the\r\nlogs per Fiber. This avoids the need to move it back into the pending\r\nset after unmounts in case a Fiber is reparented.\r\n\r\nThe main motivation for this is to unify with an upcoming tracking of\r\nlogs for Server Components. For those it doesn't make sense to move them\r\ninto a per instance set and because the same Server Component - and its\r\nlogs - may appear more than once. So no particular instance should steal\r\nit.\r\n\r\nThe second part of this change is that instead of looking up the\r\ninstance from fiber, which requires the fiberToFiberInstanceMap, we\r\ninstead look up if a component has any new logs when we traverse it in\r\nthe commit phase. After all for a component to have had a log it must\r\nhave updated. This is a similar technique to #30897. This technique also\r\nworks for Server Components without having to maintain a one to many\r\nrelationship from ComponentInfo to VirtualInstance. So it unifies them.\r\n\r\nNormally this look up would be fast since the `fiberToComponentsLogs`\r\nset would be empty and so doesn't add any significant weight to the\r\ncommit phase. If there's a ton of logs on many different components then\r\nit's not great since it would slow down the commit phase but that's not\r\nwhat we expect to see so in typical usage, this is better.\r\n\r\nThere is an unfortunate consequence though which is that\r\n`console.warn/error` in passive effects (i.e. `useEffect`) wouldn't be\r\npicked up because currently we traverse the logs in\r\n`handleCommitFiberRoot` which is too early. If we moved that to\r\n`handlePostCommitFiberRoot` this wouldn't be a problem. In the meantime,\r\nI just detect this and do a brute force flush by walking all mounted\r\ninstances if there's a `console.warn/error` inside a passive effect.\r\n\r\nIf we ever add \"owners\" to event handlers that are triggered outside the\r\nrender/commit phases (like `<div onClick={...}>`) and we want to\r\nassociate error/warnings in those, we'd need a different technique to\r\nensure those get flushed in time.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-09T15:10:04-04:00",
      "committed_date": "2024-09-09T15:10:04-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/store-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "e210d08180a63f42079b91acaa7f6af15eef6d32",
      "short_sha": "e210d08",
      "message": "[flow] Upgrade Flow to 0.245.2 (#30919)\n\n## Summary\r\n\r\nThis PR bumps Flow all the way to the latest 0.245.2. \r\n\r\nMost of the suppressions comes from Flow v0.239.0's change to include\r\nundefined in the return of `Array.pop`.\r\n\r\nI also enabled `react.custom_jsx_typing=true` and added custom jsx\r\ntyping to match the old behavior that `React.createElement` is\r\neffectively any typed. This is necessary since various builtin\r\ncomponents like `React.Fragment` is actually symbol in the React repo\r\ninstead of `React.AbstractComponent<...>`. It can be made more accurate\r\nby customizing the `React$CustomJSXFactory` type, but I will leave it to\r\nthe React team to decide.\r\n\r\n## How did you test this change?\r\n\r\n`yarn flow` for all the renderers",
      "author": {
        "name": "Sam Zhou",
        "email": "sam@developersam.com"
      },
      "authored_date": "2024-09-09T08:41:44-07:00",
      "committed_date": "2024-09-09T08:41:44-07:00",
      "changed_files": [
        "package.json",
        "packages/internal-test-utils/internalAct.js",
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-debug-tools/src/ReactDebugHooks.js",
        "packages/react-devtools-shared/src/backend/profilingHooks.js",
        "packages/react-devtools-shared/src/backend/utils.js",
        "packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/CommitTreeBuilder.js",
        "packages/react-devtools-shared/src/devtools/views/utils.js",
        "packages/react-devtools-shared/src/hook.js",
        "packages/react-devtools-shared/src/utils.js",
        "packages/react-devtools-timeline/src/import-worker/preprocessData.js",
        "packages/react-dom/src/client/ReactDOMClientFB.js",
        "packages/react-native-renderer/src/ReactNativeTypes.js",
        "packages/react-server-dom-esm/src/ReactFlightESMReferences.js",
        "packages/react-server-dom-turbopack/src/ReactFlightTurbopackReferences.js",
        "packages/react-server-dom-webpack/src/ReactFlightWebpackReferences.js",
        "packages/react-server/src/ReactFlightActionServer.js",
        "packages/react-server/src/ReactFlightReplyServer.js",
        "packages/react-test-renderer/src/ReactTestRenderer.js",
        "packages/scheduler/src/SchedulerMinHeap.js",
        "scripts/flow/config/flowconfig",
        "scripts/flow/environment.js",
        "yarn.lock"
      ]
    },
    {
      "sha": "984ea11d147b1bc7a5e63f576af47629937c58ee",
      "short_sha": "984ea11",
      "message": "[DevTools] Separate RDT Fusebox into single-panel entry points (#30708)\n\n## Summary\r\n\r\nSeparate function entry points for `react-devtools-fusebox` into\r\n`initializeComponents` and `initializeProfiler`. The motivation behind\r\nthis change is to separate these tabs into top-level Chrome DevTools\r\npanels (aligned with web) in React Native.\r\n\r\n## How did you test this change?\r\n\r\n- Build `react-devtools-fusebox` and load into local\r\n[rn-chrome-devtools-frontend](https://github.com/facebookexperimental/rn-chrome-devtools-frontend)\r\nproject with updated call sites.\r\n\r\n<img width=\"1933\" alt=\"image\"\r\nsrc=\"https://github.com/user-attachments/assets/202d32a1-b8da-4936-b0e1-04875a30f256\">\r\n\r\n<img width=\"1949\" alt=\"image\"\r\nsrc=\"https://github.com/user-attachments/assets/39dbe154-989c-4f76-b103-aa19f07a3b9c\">\r\n\r\n✅ Tabs can be separately initialised in individual Chrome DevTools\r\npanels",
      "author": {
        "name": "Alex Hunt",
        "email": "hello@alexhunt.io"
      },
      "authored_date": "2024-09-09T13:12:49+01:00",
      "committed_date": "2024-09-09T08:12:49-04:00",
      "changed_files": [
        "packages/react-devtools-fusebox/src/frontend.d.ts",
        "packages/react-devtools-fusebox/src/frontend.js"
      ]
    },
    {
      "sha": "a8fc4b1ef8149a0f2b55942683bf96409e3f313f",
      "short_sha": "a8fc4b1",
      "message": "[compiler][playground] Fix displayed naming of outlined functions\n\nghstack-source-id: 20c8e9eeba1620b061e41119dfb1a0e15c36645e\nPull Request resolved: https://github.com/facebook/react/pull/30907",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-09-07T17:50:19-07:00",
      "committed_date": "2024-09-07T17:50:19-07:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx"
      ]
    },
    {
      "sha": "99cba2b041cd13d7ade48a5c97b473e8a188df35",
      "short_sha": "99cba2b",
      "message": "[DevTools] Build Updater List from the Commit instead of Map (#30897)\n\nStacked on #30896.\r\n\r\nThe problem with the `getUpdatersList` function is that it iterates over\r\nFibers and then looks up each of those Fibers in the\r\nfiberToFiberInstanceMap which we ideally could get rid of.\r\n\r\nHowever, every time an updater comes into play for a commit it must mean\r\nthat something below the updater itself updated and so the updater will\r\nalso be cloned which means we'll pass it on the way down when traversing\r\nthe tree in the commit.\r\n\r\nWhen we do this traversal, we can just look if the Fiber is in the\r\nupdater set and if so add it to the updater list as we go.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-06T21:59:09-04:00",
      "committed_date": "2024-09-06T21:59:09-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "629239824116436521eaf00ddf02aa3b263de6de",
      "short_sha": "6292398",
      "message": "[DevTools] Simplify Context Change Tracking in Profiler (#30896)\n\nWhen Context change tracking was added to support modern Context it\r\nrelied on the \"memoizedValue\" to read the current value. This only works\r\nin React 18+ when it was added to support Lazy Context Propagation.\r\nHowever, the backend stored the old value the same way it used to work\r\nfor legacy Context in a global map. This was unnecessary since we *also*\r\nhave the old value on the previous Fiber.\r\n\r\nThis removes all the costly tracking of previous values for every Fiber\r\nthat uses Contexts slowing down profiling. Instead, we just compare the\r\nContexts from\r\n\r\nThe downside is that this no longer supports detecting changes due to\r\nlegacy Context because it doesn't have a similar \"previous\" value.\r\nHowever, legacy Context has long been deprecated and is completely\r\nremoved in 19. So I don't think it's worth supporting since you have to\r\nbe on an old version *and* actually use legacy Context *and* trying to\r\nprofile something that updates it. Which btw, updating legacy contexts\r\nonly worked at all from 16 something when we made updates work. So it\r\nwas unusual even in the slight gap where you could and before you had\r\nmigrated to modern Context introduced in 16.3.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-06T21:58:20-04:00",
      "committed_date": "2024-09-06T21:58:20-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/profilerChangeDescriptions-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "baf47462d631a1f87063676d36a33b4a3f6ed80b",
      "short_sha": "baf4746",
      "message": "[DevTools] Remove use of .alternate in root and recordProfilingDurations (#30895)\n\nIdeally we shouldn't use the `.alternate` to access previous state\r\nbecause ideally Fibers shouldn't have alternates.\r\n\r\nThe only case it's ok to use it is when it is used to identity the\r\nstateful part of a component's identity. In a non-alternate Fiber model\r\nthere would instead be another object that represents instance but in\r\nthe current model it's modeled by the pair.\r\n\r\nIt's not ok is to get the previous state of the tree since that would\r\nnot live on the stateful part.\r\n\r\nWe don't generally need this though because we have the previous state\r\non instance.data before updating it, or passed from above.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-06T21:46:09-04:00",
      "committed_date": "2024-09-06T21:46:09-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "d76a5651f46619fde486b4119953a8f9dd240612",
      "short_sha": "d76a565",
      "message": "[DevTools] Handle reordered contexts in Profiler (#30887)\n\nWhile looking at the Context tracking implementation for other reasons I\r\nnoticed this bug.\r\n\r\nOriginally it wasn't allowed to have conditional `useContext(context)`\r\n(although we did because it's technically possible). With `use(context)`\r\nit is officially allowed to be conditional as long as it is within a\r\nHook/Component and not within a try/catch.\r\n\r\nThis means that this loop comparing previous and next contexts need to\r\nconsider that the Context objects might not line up and so it's possibly\r\ncomparing apples to oranges. We already bailed if one was longer than\r\nthe other.\r\n\r\nIf the order of contexts changes later in the component that means\r\nsomething else must have already changed earlier so the reason for the\r\nrerender isn't the context so we can just return false in that case.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-06T21:45:52-04:00",
      "committed_date": "2024-09-06T21:45:52-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/profilingCache-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "727b3615287074ddaa28069bfbd2dfee8cf73575",
      "short_sha": "727b361",
      "message": "Fix useMemoCache with setState in render\n\nFixes the bug that @alexmckenley and @mofeiZ found where setState-in-render can reset useMemoCache and cause an infinite loop. The bug was that renderWithHooksAgain() was not resetting hook state when rerendering (so useMemo values were preserved) but was resetting the updateQueue. This meant that the entire memo cache was cleared on a setState-in-render.\n\nThe fix here is to call a new helper function to clear the update queue. It nulls out other properties, but for memoCache it just sets the index back to zero.\n\nghstack-source-id: fc0947ce219334117075df6a4e33b39975af2bc4\nPull Request resolved: https://github.com/facebook/react/pull/30889",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-09-06T14:10:56-07:00",
      "committed_date": "2024-09-06T14:32:18-07:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/__tests__/useMemoCache-test.js"
      ]
    },
    {
      "sha": "bd788b4180e4ad201100b9defb849cb8f1483f9c",
      "short_sha": "bd788b4",
      "message": "[compiler] Add enablePropagateDepsInHIR flag\n\nAdding new feature flag in preparation for #30894\n\nghstack-source-id: 59278028cf178d6b2c28732ded751e9c838183d2\nPull Request resolved: https://github.com/facebook/react/pull/30893",
      "author": {
        "name": "Mofei Zhang",
        "email": "mofei.zhang@utexas.edu"
      },
      "authored_date": "2024-09-05T20:14:34-04:00",
      "committed_date": "2024-09-06T13:02:08-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-inverted-optionals-parallel-paths.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-inverted-optionals-parallel-paths.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single-with-unconditional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional-optional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional.js"
      ]
    },
    {
      "sha": "7b98a168fdebb57b3a0b965cb0b5efa16c9cf9e0",
      "short_sha": "7b98a16",
      "message": "[compiler][cleanup] Delete now-unused reactive scope fork\n\nFollowup to #30891\n\nghstack-source-id: 6b42055b5d28da39d99a235bcd86a82eb7c270f4\nPull Request resolved: https://github.com/facebook/react/pull/30892",
      "author": {
        "name": "Mofei Zhang",
        "email": "mofei.zhang@utexas.edu"
      },
      "authored_date": "2024-09-05T20:14:34-04:00",
      "committed_date": "2024-09-06T13:02:08-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/MergeOverlappingReactiveScopesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/AlignReactiveScopesToBlockScopes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/AlignReactiveScopesToBlockScopesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/AssertScopeInstructionsWithinScope.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/BuildReactiveBlocks.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/FlattenReactiveLoops.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/FlattenScopesWithHooksOrUse.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/MergeOverlappingReactiveScopes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneNonEscapingScopes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/index.ts"
      ]
    },
    {
      "sha": "43264a61d06e0f653beb7882aaad1005e0797855",
      "short_sha": "43264a6",
      "message": "[compiler][cleanup] Remove unused enableReactiveScopesInHIR flag\n\nReactive scopes in HIR has been stable for over 3 months now and is the future direction of react compiler, removing this flag to reduce implementation forks.\n\nghstack-source-id: 65cdf63cf76029fa22d40fd85aba0ac976dcfc08\nPull Request resolved: https://github.com/facebook/react/pull/30891",
      "author": {
        "name": "Mofei Zhang",
        "email": "mofei.zhang@utexas.edu"
      },
      "authored_date": "2024-09-05T20:14:34-04:00",
      "committed_date": "2024-09-06T13:02:08-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/align-scopes-within-nested-valueblock-in-array.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/align-scopes-within-nested-valueblock-in-array.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/allocating-logical-expression-instruction-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/allocating-logical-expression-instruction-scope.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/bug-hoisted-declaration-with-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/bug-hoisted-declaration-with-scope.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/bug-nonmutating-capture-in-unsplittable-memo-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/bug-nonmutating-capture-in-unsplittable-memo-block.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/error.capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/error.capture-ref-for-later-mutation.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/invalid-align-scopes-within-nested-valueblock-in-array.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/invalid-align-scopes-within-nested-valueblock-in-array.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/mutate-outer-scope-within-value-block.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/mutate-outer-scope-within-value-block.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/mutation-within-capture-and-mutablerange.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/mutation-within-capture-and-mutablerange.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/mutation-within-jsx-and-break.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/mutation-within-jsx-and-break.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/mutation-within-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/mutation-within-jsx.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/repro-allocating-ternary-test-instruction-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/repro-allocating-ternary-test-instruction-scope.ts"
      ]
    },
    {
      "sha": "a03254bc60b06c535c37e43c53b1fd40757b2ef4",
      "short_sha": "a03254b",
      "message": "[Fiber] Move runWithFiberInDEV from CommitWork to CommitEffects (#30882)\n\nStacked on #30881.\r\n\r\nMove `runWithFiberInDEV` from the recursive part of the commit phase and\r\ninstead wrap each call into user space. These should really map 1:1 with\r\nwhere we're using `try/catch` since that's where we're calling into user\r\nspace.\r\n\r\nThe goal of this is to avoid the extra stack frames added by\r\n`enableOwnerStacks` in the recursive parts to avoid stack overflow. This\r\nway we only have a couple of extra at the end of the stack instead of a\r\ncouple of extra at every depth of the tree.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-05T20:54:39-04:00",
      "committed_date": "2024-09-05T20:54:39-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseCallback-test.js"
      ]
    },
    {
      "sha": "fe03c56d1e51379a18676b04cf185e76f04cd457",
      "short_sha": "fe03c56",
      "message": "[Fiber] Extract Functions that Call User Space and Host Configs in Commit to Separate Modules (#30881)\n\nThis is mostly just moves and same code extracted into utility\r\nfunctions.\r\n\r\nThis is to help clarify what needs to be wrapped in try/catch and\r\nrunWithFiberInDEV. I'll do the runWithFiberInDEV changes in a follow up.\r\n\r\nThis leaves ReactCommitWork mostly to do matching on the tag and the\r\nrecursive loops.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-05T20:53:27-04:00",
      "committed_date": "2024-09-05T20:53:27-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberCommitEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitHostEffects.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js"
      ]
    },
    {
      "sha": "a06cd9e1d141f598a68377495f4c0fe9ee44e569",
      "short_sha": "a06cd9e",
      "message": "[DevTools] Refactor Forcing Fallback / Error of Suspense / Error Boundaries (#30870)\n\nFirst, this basically reverts\r\nhttps://github.com/facebook/react/pull/30517/commits/1f3892ef8cc181218587ddc6accd994890c92ef5\r\nto use a Map/Set to track what is forced to suspend/error again instead\r\nof flags on the Instance. The difference is that now the key in the\r\nFiber itself instead of the ID. Critically this avoids the\r\nfiberToFiberInstance map to look up whether or not a Fiber should be\r\nforced to suspend when asked by the renderer.\r\n\r\nThis also allows us to force suspend/error on filtered instances. It's a\r\nbit unclear what should happen when you try to Suspend or Error a child\r\nbut its parent boundary is filtered. It was also inconsistent between\r\nSuspense and Error due to how they were implemented.\r\n\r\nI think conceptually you're trying to simulate what would happen if that\r\nComponent errored or suspended so it would be misleading if we triggered\r\na different boundary than would happen in real life. So I think we\r\nshould trigger the nearest unfiltered Fiber, not the nearest Instance.\r\nThe consequence of this however is that if this instance was filtered,\r\nthere's no way to undo it without refreshing or removing the filter.\r\nThis is an edge case though since it's unusual you'd filter these in the\r\nfirst place.\r\n\r\nIt used to be that Suspense walked the store in the frontend and Error\r\nwalked the Fibers in the backend. They also did this somewhat eagerly.\r\nThis simplifies and unifies the model by passing the id of what you\r\nclicked in the frontend and then we walk the Fiber tree from there in\r\nthe backend to lazily find the boundary. However I also eagerly walk the\r\ntree at first to find whether we have any Suspense or Error boundary\r\nparents at all so we can hide the buttons if not.\r\n\r\nThis also implements it to work with VirtualInstances using #30865. I\r\nfind the nearest Fiber Instance downwards filtered or otherwise. Then\r\nfrom its parent we find the nearest Error or Suspense boundary. That's\r\nbecause VirtualInstance will always have their inner Fiber as an\r\nInstance but they might not have their parent since it might be\r\nfiltered. Which would potentially cause us to skip over a filtered\r\nparent Suspense boundary.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-05T15:48:17-04:00",
      "committed_date": "2024-09-05T15:48:17-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/inspectedElement-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/backendAPI.js",
        "packages/react-devtools-shared/src/devtools/views/Components/CannotSuspendWarningMessage.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElement.js",
        "packages/react-devtools-shared/src/frontend/types.js"
      ]
    },
    {
      "sha": "d72e477814209d79173a1b69da3172d891786fec",
      "short_sha": "d72e477",
      "message": "[compiler runtime] repro: infinite render with useMemoCache + render phase updates (#30849)\n\nRepro for an infinite render bug we found when testing internally. See\r\nequivalent codesandbox repro\r\n[here](https://codesandbox.io/p/sandbox/epic-euclid-mr7lm3).\r\n\r\nWhen render phase updates cause a re-render, useMemoCache arrays for the\r\nfiber are\r\n[cleared](https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js#L819)\r\nand [recreated on every\r\nretry](https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js#L1223)\r\nwhile hook state is preserved.\r\n\r\nThis pattern (queuing re-renders on the current fiber during render) is\r\nperfectly valid. I believe this is a bug as React compiler currently\r\nreplaces `useMemo`s with `useMemoCache` calls and inlined instructions,\r\ntaking care to preserve existing memoization dependencies. This should\r\nbe the identity transform, but runtime implementation differences mean\r\nthat uncompiled code behaves as expected (no infinite render) while\r\ncompiled code fails to render.",
      "author": {
        "name": "mofeiZ",
        "email": "34200447+mofeiZ@users.noreply.github.com"
      },
      "authored_date": "2024-09-05T13:30:34-04:00",
      "committed_date": "2024-09-05T13:30:34-04:00",
      "changed_files": [
        "packages/react-reconciler/src/__tests__/useMemoCache-test.js"
      ]
    },
    {
      "sha": "4c58fce7777f2760f4a93091ca4fca0e3fc2f48c",
      "short_sha": "4c58fce",
      "message": "[DevTools] Avoid getFiberIDUnsafe in debug() Helper (#30878)\n\nAvoids looking up id from fiber and instead pass the instance to the\r\ndebug() helper.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-04T20:25:35-04:00",
      "committed_date": "2024-09-04T20:25:35-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "01ae2ddaa94386b2250230004f1051218ada2de1",
      "short_sha": "01ae2dd",
      "message": "[DevTools] Include some Filtered Fiber Instances (#30865)\n\nWhen we filter Fiber Instances where have no way to recover our position\r\nin the Fiber tree. The extreme form of this is if you filter out all the\r\nFibers and keep only Server Components.\r\n\r\nThis affects operations that are performed against fibers such as\r\ncollecting Host Instances for highlighting or emulating\r\nsuspending/erroring.\r\n\r\nConceptually we don't need to add this into the DevToolsInstance tree\r\nbecause we only need to get to some Fibers from a VirtualInstance. A\r\nVirtual Instance can contain more than one conceptual child Fiber. It\r\nwould be easier if we didn't include them in the tree on one hand\r\nbecause we could just traverse the tree and assume it looks like the one\r\non the frontend. But it's also tricky to manage the lifetime. So I went\r\nwith a special FilteredFiberInstance node in the tree.\r\n\r\nCurrently I only add it if its parent would've been a VirtualInstance\r\nsince we don't need it in any other cases. If the parent was another\r\nFiberInstance it already has a Fiber.\r\n\r\nThere might be need for always tracking all Instances whether they're\r\nfiltered or not or just moving filtering to the frontend but for now I'm\r\nkeeping the general architecture as is.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-04T19:35:28-04:00",
      "committed_date": "2024-09-04T19:35:28-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "f820f5a8b6c8b106ba3756f3e60a5a4017eb5080",
      "short_sha": "f820f5a",
      "message": "[compiler] Type inference for tagged template literals\n\nAt Meta we have a pattern of using tagged template literals for features that are compiled away:\n\n```\n// Relay:\ngraphql`...graphql text...`\n```\n\nIn many cases these tags produce a primitive value, and we can get even more optimal output if we can tell the compiler about these types. The new moduleTypeProvider gives us the ability to declare such types, this PR extends the compiler to use this type information for TaggedTemplateExpression values.\n\nghstack-source-id: 3cd6511b7f4e708bcb86f3f3fde5773bc51c7197\nPull Request resolved: https://github.com/facebook/react/pull/30869",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-09-04T13:26:06-07:00",
      "committed_date": "2024-09-04T13:28:33-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/InferReactiveScopeVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneNonEscapingScopes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateLocalsNotReassignedAfterRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructuring-mixed-scope-and-local-variables-with-default.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-tagged-template-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-tagged-template-expression.js",
        "compiler/packages/snap/src/sprout/shared-runtime-type-provider.ts"
      ]
    },
    {
      "sha": "0123d7c19f2d2b05d612e9bd912b3614024b2aab",
      "short_sha": "0123d7c",
      "message": "[DevTools] Track root instances in a root Map (#30875)\n\nThe FiberRoot is a stateful node that can be tracked this way.\r\n\r\nThis is another step that will let us remove the\r\n`fiberToFiberInstanceMap`.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-04T16:15:53-04:00",
      "committed_date": "2024-09-04T16:15:53-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "e10e8681824e56c10fdb14e0359d878bcd748937",
      "short_sha": "e10e868",
      "message": "Schedule prerender after something suspends (#30800)\n\nAdds the concept of a \"prerender\". These special renders are spawned\r\nwhenever something suspends (and we're not already prerendering).\r\n\r\nThe purpose is to move speculative rendering work into a separate phase\r\nthat does not block the UI from updating. For example, during a\r\ntransition, if something suspends, we should not speculatively prerender\r\nsiblings that will be replaced by a fallback in the UI until *after* the\r\nfallback has been shown to the user.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-09-04T13:55:29-04:00",
      "committed_date": "2024-09-04T13:55:29-04:00",
      "changed_files": [
        "packages/react-cache/src/__tests__/ReactCacheOld-test.internal.js",
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-dom/src/__tests__/ReactDOMForm-test.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRoot.js",
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/ReactInternalTypes.js",
        "packages/react-reconciler/src/__tests__/ActivitySuspense-test.js",
        "packages/react-reconciler/src/__tests__/ReactActWarnings-test.js",
        "packages/react-reconciler/src/__tests__/ReactAsyncActions-test.js",
        "packages/react-reconciler/src/__tests__/ReactCPUSuspense-test.js",
        "packages/react-reconciler/src/__tests__/ReactConcurrentErrorRecovery-test.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-reconciler/src/__tests__/ReactExpiration-test.js",
        "packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemantics-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js",
        "packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js",
        "packages/react-reconciler/src/__tests__/ReactTransition-test.js",
        "packages/react-reconciler/src/__tests__/ReactUse-test.js",
        "packages/react-reconciler/src/__tests__/useMemoCache-test.js",
        "packages/react-reconciler/src/__tests__/useSyncExternalStore-test.js"
      ]
    },
    {
      "sha": "8b4c54c00f5c047a72a4cecc2689196786c3e5ff",
      "short_sha": "8b4c54c",
      "message": "Temporarily disable suspending during work loop (#30762)\n\n### Based on\r\n\r\n- #30761 \r\n- #30759 \r\n\r\n---\r\n\r\n`use` has an optimization where in some cases it can suspend the work\r\nloop during the render phase until the data has resolved, rather than\r\nunwind the stack and lose context. However, the current implementation\r\nis not compatible with sibling prerendering. So I've temporarily\r\ndisabled it until the sibling prerendering has been refactored. We will\r\nadd it back in a later step.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-09-04T12:38:36-04:00",
      "committed_date": "2024-09-04T12:38:36-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberWorkLoop.js",
        "packages/react-reconciler/src/__tests__/ReactUse-test.js",
        "scripts/jest/TestFlags.js"
      ]
    },
    {
      "sha": "d1afcb43fd506297109c32ff462f6f659f9110ae",
      "short_sha": "d1afcb4",
      "message": "[DevTools] Track all public HostInstances in a Map (#30831)\n\nThis lets us get from a HostInstance to the nearest DevToolsInstance\r\nwithout relying on `findFiberByHostInstance` and\r\n`fiberToDevToolsInstanceMap`. We already did the equivalent of this for\r\nResources in HostHoistables.\r\n\r\nOne issue before was that we'd ideally get away from the\r\n`fiberToDevToolsInstanceMap` map in general since we should ideally not\r\ntreat Fibers as stateful but they could be replaced by something else\r\nstateful in principle.\r\n\r\nThis PR also addresses Virtual Instances. Now you can select a DOM node\r\nand have it select a Virtual Instance if that's the nearest parent since\r\nthe parent doesn't have to be a Fiber anymore.\r\n\r\nHowever, the other reason for this change is that I'd like to get rid of\r\nthe need for the `findFiberByHostInstance` from being injected. A\r\nrenderer should not need to store a reference back from its instance to\r\na Fiber. Without the Synthetic Event system this wouldn't be needed by\r\nthe renderer so we should be able to remove it. We also don't really\r\nneed it since we have all the information by just walking the commit to\r\ncollect the nodes if we just maintain our own Map.\r\n\r\nThere's one subtle nuance that the different renderers do. Typically a\r\nHostInstance is the same thing as a PublicInstance in React but\r\ntechnically in Fabric they're not the same. So we need to translate\r\nbetween PublicInstance and HostInstance. I just hardcoded the Fabric\r\nimplementation of this since it's the only known one that does this but\r\ncould feature detect other ones too if necessary. On one hand it's more\r\nresilient to refactors to not rely on injected helpers and on hand it\r\ndoesn't follow changes to things like this.\r\n\r\nFor the conflict resolution I added in #30494 I had to make that\r\nspecific to DOM so we can move the DOM traversal to the backend instead\r\nof the injected helper.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-03T17:28:05-04:00",
      "committed_date": "2024-09-03T17:28:05-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/console.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/index.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js"
      ]
    },
    {
      "sha": "8d68da3f7396064614f34b84881fe8833b6039ac",
      "short_sha": "8d68da3",
      "message": "[Fiber] Stash ThenableState on the Dependencies Object for Use By DevTools (#30866)\n\nThis lets us track what a Component might suspend on from DevTools. We\r\ncould already collect this by replaying a component's Hooks but that\r\nwould be expensive to collect from a whole tree.\r\n\r\nThe thenables themselves might contain useful information but mainly\r\nwe'd want access to the `_debugInfo` on the thenables which might\r\ncontain additional information from the server.\r\n\r\n\r\nhttps://github.com/facebook/react/blob/19bd26beb689e554fceb0b929dc5199be8cba594/packages/shared/ReactTypes.js#L114\r\n\r\nIn a follow up we should really do something similar in Flight to\r\ntransfer `use()` on the debugInfo of that Server Component.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-03T16:04:24-04:00",
      "committed_date": "2024-09-03T16:04:24-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiber.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberNewContext.js",
        "packages/react-reconciler/src/ReactInternalTypes.js"
      ]
    },
    {
      "sha": "e0a07e9738b2ec2ea5cf4872406b465d677bfe2c",
      "short_sha": "e0a07e9",
      "message": "[DevTools] Support VirtualInstances in findAllCurrentHostInstances (#30853)\n\nThis lets us highlight Server Components.\r\n\r\nHowever, there is a problem with this because if the actual nearest\r\nFiber is filtered, there's no FiberInstance and so we might skip past it\r\nand maybe never find a child while walking the whole tree. This is very\r\ncommon in the case where you have just Server Components and Host\r\nComponents which are filtered by default.\r\n\r\nNote how the DOM nodes that are just plain host instances without client\r\ncomponent wrappers are not highlighted here:\r\n\r\n<img width=\"1102\" alt=\"Screenshot 2024-08-30 at 4 33 55 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/c9a7b91e-5faf-4c60-99a8-1195539ff8b5\">\r\n\r\nFixing that needs a separate refactor though and related to several\r\nother features that already have a similar issue without\r\nVirtualInstances like Suspense/Error Boundaries (triggering\r\nsuspense/error on a filtered Suspense/ErrorBoundary doesn't work\r\ncorrectly). So this first PR just adds the feature for the common case\r\nwhere there's at least some Fibers.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-03T12:29:59-04:00",
      "committed_date": "2024-09-03T12:29:59-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "04ec50efa941a7f07e8231a87e72d6d851948b8c",
      "short_sha": "04ec50e",
      "message": "[DevTools] Add Filtering of Environment Names (#30850)\n\nStacked on #30842.\r\n\r\nThis adds a filter to be able to exclude Components from a certain\r\nenvironment. Default to Client or Server.\r\n\r\nThe available options are computed into a dropdown based on the names\r\nthat are currently used on the page (or an option that were previously\r\nused). In addition to the hardcoded \"Client\". Meaning that if you have\r\nServer Components on the page you see \"Server\" or \"Client\" as possible\r\noptions but it can be anything if there are multiple RSC environments on\r\nthe page.\r\n\r\n\"Client\" in this case means Function and Class Components in Fiber -\r\nexcluding built-ins.\r\n\r\nIf a Server Component has two environments (primary and secondary) then\r\nboth have to be filtered to exclude it.\r\n\r\nWe don't show the option at all if there are no Server Components used\r\nin the page to avoid confusing existing users that are just using Client\r\nComponents and wouldn't know the difference between Server vs Client.\r\n\r\n<img width=\"815\" alt=\"Screenshot 2024-08-30 at 12 56 42 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/e06b225a-e85d-4cdc-8707-d4630fede19e\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-09-03T12:29:15-04:00",
      "committed_date": "2024-09-03T12:29:15-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/utils.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/ComponentsSettings.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsModal.js",
        "packages/react-devtools-shared/src/devtools/views/Settings/SettingsModalContext.js",
        "packages/react-devtools-shared/src/frontend/types.js"
      ]
    },
    {
      "sha": "4f604941569d2e8947ce1460a0b2997e835f37b9",
      "short_sha": "4f60494",
      "message": "[Flight] Ship DEV-only enableServerComponentLogs flag in Stable/Canary (#30847)\n\nTo recap. This only affects DEV and RSC. It patches console on the\r\nserver in DEV (similar to how React DevTools already does and what we\r\ndid for the double logging). Then replays those logs with a `[Server]`\r\nbadge on the client so you don't need a server terminal open.\r\n\r\nThis has been on for over 6 months now in our experimental channel and\r\nwe've had a lot of coverage in Next.js due to various experimental flags\r\nlike taint and ppr.\r\n\r\nIt's non-invasive in that even if something throws we just serialize\r\nthat as an unknown value.\r\n\r\nThe main feedback we've gotten was:\r\n\r\n- The serialization depth wasn't deep enough which I addressed in #30294\r\nand haven't really had any issues since. This could still be an issue or\r\nthe inverse that you serialize too many logs that are also too deep.\r\nThis is not so much an issue with intentional logging and things like\r\naccidental errors don't typically have unbounded arguments (e.g. React\r\nerrors are always string arguments). The ideal would be some way to\r\nretain objects and then load them on-demand but that needs more\r\nplumbing. Which can be later.\r\n- The other was that double logging on the server is annoying if the\r\nsame terminal does both the RSC render and SSR render which was\r\naddressed in #30207. It is now off by default in node/edge-builds of the\r\nclient, on by default in browser builds. With the `replayConsole` option\r\nto either opt-in or out.\r\n\r\nWe've reached a good spot now I think.\r\n\r\nThese are better with `enableOwnerStacks` but that's a separate track\r\nand not needed.\r\n\r\nThe only thing to document here, other than maybe that we're doing it,\r\nis the `replayConsole` option but that's part of the RSC renderers that\r\nthemselves are not documented so nowhere to document it.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-30T15:11:57-04:00",
      "committed_date": "2024-08-30T15:11:57-04:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js"
      ]
    },
    {
      "sha": "e56f4ae38d118168e0561f1b86ecbdef592138e4",
      "short_sha": "e56f4ae",
      "message": "[DevTools] Support secondary environment name when it changes (#30842)\n\nWe currently support the Environment Name change within a Component.\r\n#29867\r\n\r\nIf this happens, we give it two HoCs. The problem with this is that we\r\nonly show one followed by `+1` in the list.\r\n\r\nBefore:\r\n<img width=\"529\" alt=\"Screenshot 2024-08-28 at 6 50 31 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/c080be72-c254-4d4d-89b6-d1b7f9a9ada8\">\r\n\r\nAfter:\r\n<img width=\"1101\" alt=\"Screenshot 2024-08-28 at 7 16 21 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/04718674-164b-4255-9cf6-dec9198f12b7\">\r\n\r\nI could potentially instead badge this case as `A/B` in a single badge.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-30T10:05:19-04:00",
      "committed_date": "2024-08-30T10:05:19-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "8308d2f1fe90ec0b5a5cde147b97c6e78581710a",
      "short_sha": "8308d2f",
      "message": "fix[react-devtools/ReactDebugHooks]: support unstable prefixes in hooks and useContextWithBailout (#30837)\n\nRelated - https://github.com/facebook/react/pull/30407.\r\n\r\nThis is experimental-only and FB-only hook. Without these changes,\r\ninspecting an element that is using this hook will throw an error,\r\nbecause this hook is missing in Dispatcher implementation from React\r\nDevTools, which overrides the original one to build the hook tree.\r\n\r\n![Screenshot 2024-08-28 at 18 42\r\n55](https://github.com/user-attachments/assets/e3bccb92-74fb-4e4a-8181-03d13f8512c0)\r\n\r\nOne nice thing from it is that in case of any potential regressions\r\nrelated to this experiment, we can quickly triage which implementation\r\nof `useContext` is used by inspecting an element in React DevTools.\r\n\r\nIdeally, I should've added some component that is using this hook to\r\n`react-devtools-shell`, so it can be manually tested, but I can't do it\r\nwithout rewriting the infra for it. This is because this hook is only\r\navailable from fb-www builds, and not experimental.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-08-30T10:34:52+01:00",
      "committed_date": "2024-08-30T10:34:52+01:00",
      "changed_files": [
        "packages/react-debug-tools/src/ReactDebugHooks.js"
      ]
    },
    {
      "sha": "394e75d9a9af26dc00074f2b8c2978d8c2dfbbb9",
      "short_sha": "394e75d",
      "message": "[DevTools] Increase max payload for websocket in standalone app (#30848)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\nWhen debugging applications that are experiencing runaway re-rendering,\r\nit is helpful to profile them in the React Developer Tools.\r\nUnfortunately there is a size limit on the captured profile which can\r\nmake them impossible to inspect or save. The limitations I have found\r\nare in `postMessage` for the Chrome extension and in the `ws` websocket\r\nserver for the standalone app.\r\n\r\nProfiling an app that produces a large profile artifact will simply show\r\nthat no profiling data was captured and output an error in the console,\r\nhere shown for the standalone app:\r\n\r\n```text\r\nstandalone.js:92 [React DevTools] Error with websocket connection i {target: H, type: 'error', message: 'Max payload size exceeded', error: RangeError: Max payload size exceeded\r\n    at e.exports.haveLength (/Users/rune/.npm/_npx/8ea6ac5c50…}error: RangeError: Max payload size exceeded\r\n```\r\n\r\nThis change simply increases the max payload of the websocket server in\r\nthe standalone app so that larger profiles may be captured and\r\ninspected.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI verified that I could capture and inspect profiling data that\r\npreviously exceeded the default limitation for a particular app",
      "author": {
        "name": "Rune Botten",
        "email": "rbotten@gmail.com"
      },
      "authored_date": "2024-08-30T02:34:27-07:00",
      "committed_date": "2024-08-30T10:34:27+01:00",
      "changed_files": [
        "packages/react-devtools-core/src/standalone.js"
      ]
    },
    {
      "sha": "071dd00366b3accb649e3f5978454e993e0b11aa",
      "short_sha": "071dd00",
      "message": "[compiler] Errors in earlier functions dont stop subsequent compilation\n\nErrors in an earlier component/hook shouldn't stop later components from compiling.\n\nghstack-source-id: 6e04a5bb2e2045303cbddad6d6d4bd38d5f7990b\nPull Request resolved: https://github.com/facebook/react/pull/30844",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-29T22:40:41-07:00",
      "committed_date": "2024-08-29T22:41:53-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Suppression.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-unclosed-eslint-suppression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multiple-components-first-is-invalid.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/multiple-components-first-is-invalid.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/unclosed-eslint-suppression-skips-all-components.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/unclosed-eslint-suppression-skips-all-components.js"
      ]
    },
    {
      "sha": "61739a8a0fd23adf18336d96f9c307a1cd897354",
      "short_sha": "61739a8",
      "message": "[DevTools] Filter Server Components (#30839)\n\nSupport filtering Virtual Instances with existing filters.\r\n\r\nServer Components are considered \"Functions\".\r\n\r\nIn a follow up I'll a new filter for \"Environment\" which will let you\r\nfilter by Client vs Server (and more).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-29T12:49:30-04:00",
      "committed_date": "2024-08-29T12:49:30-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "e33a7233a76e1164bd1a9c4b8115abb575b48c50",
      "short_sha": "e33a723",
      "message": "[DevTools] Track virtual instances on the tracked path for selections (#30802)\n\nThis appends a (filtered) virtual instance path at the end of the fiber\r\npath. If a virtual instance is selected inside the fiber.\r\n\r\nThe main part of the path is still just the fiber path since that's the\r\nsemantically stateful part. Then we just tack on a few virtual path\r\nframes at the end if we're currently selecting a specific Server\r\nComponent within the nearest Fiber.\r\n\r\nI also took the opportunity to fix a bug which caused selections inside\r\nSuspense boundaries to not be tracked.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-29T12:45:03-04:00",
      "committed_date": "2024-08-29T12:45:03-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "18bf7bf5002450ce7daa281e8be1c3216bd871ed",
      "short_sha": "18bf7bf",
      "message": "[DevTools] Remove displayName from inspected data (#30841)\n\nThis just clarifies that this is actually unused in the front end. We\r\nuse the name from the original instance as the canonical name.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-29T12:44:48-04:00",
      "committed_date": "2024-08-29T12:44:48-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js"
      ]
    },
    {
      "sha": "a19a8ab44f53f189745015a6d2e6bf8955f98170",
      "short_sha": "a19a8ab",
      "message": "chore[react-devtools/hook]: remove unused native values (#30827)\n\nStacked on https://github.com/facebook/react/pull/30826. See [this\r\ncommit](https://github.com/facebook/react/pull/30827/commits/ec0e48ed7a47dbbdafb5e2530ccba1f2e5b17bad).\r\n\r\nThis is unused.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-08-29T11:34:31+01:00",
      "committed_date": "2024-08-29T11:34:31+01:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/contentScripts/installHook.js"
      ]
    },
    {
      "sha": "233d63c497d3a5f669a1bae1ee1d3f389e12a42a",
      "short_sha": "233d63c",
      "message": "chore[react-devtools/extensions]: remove unused storage permission (#30826)\n\nStacked on https://github.com/facebook/react/pull/30825. See [this\r\ncommit](https://github.com/facebook/react/pull/30826/commits/b2130701cf6b25d7a96c1e92b44f41affa56bb35).\r\n\r\nWe are not using `storage` anywhere yet, but will be soon. This\r\npermission is not needed.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-08-29T11:32:18+01:00",
      "committed_date": "2024-08-29T11:32:18+01:00",
      "changed_files": [
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json"
      ]
    },
    {
      "sha": "795b3207ce5ea25c80749e367c61e5f56ac09856",
      "short_sha": "795b320",
      "message": "fix[react-devtools/extensions]: fixed tabs API calls and displaying restricted access popup (#30825)\n\nStacked on https://github.com/facebook/react/pull/30824. See [this\r\ncommit](https://github.com/facebook/react/pull/30825/commits/c9830d64749cf8fd592ea30a1cd65842cf83f6df).\r\n\r\nTurns out we should be listing `tabs` in our permissions, if we want to\r\nbe able to receive tab url, once its updated.\r\nThis also fixes `chrome.tabs.onCreated` event subscription, because [it\r\nshould receive only tab\r\nobject](https://developer.chrome.com/docs/extensions/reference/api/tabs#event-onCreated),\r\nand not 3 arguments, as expected in the previous implementation.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-08-29T11:31:43+01:00",
      "committed_date": "2024-08-29T11:31:43+01:00",
      "changed_files": [
        "packages/react-devtools-extensions/chrome/manifest.json",
        "packages/react-devtools-extensions/edge/manifest.json",
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-extensions/src/background/tabsManager.js",
        "packages/react-devtools-extensions/src/main/registerEventsLogger.js"
      ]
    },
    {
      "sha": "537c74e16a394df16a4b368caa09ea5755f78dfb",
      "short_sha": "537c74e",
      "message": "feat[react-devtools]: support Manifest v3 for Firefox extension (#30824)\n\nFirefox [finally supports\r\n`ExecutionWorld.MAIN`](https://bugzilla.mozilla.org/show_bug.cgi?id=1736575)\r\nin content scripts, which means we can migrate the browser extension to\r\nManifest V3.\r\n\r\nThis PR also removes a bunch of no longer required explicit branching\r\nfor Firefox case, when we are using Manifest V3-only APIs.\r\n\r\nWe are also removing XMLHttpRequest injection, which is no longer needed\r\nand restricted in Manifest V3. The new standardized approach (same as in\r\nChromium) doesn't violate CSP rules, which means that extension can\r\nfinally be used for apps running in production mode.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-08-29T11:28:35+01:00",
      "committed_date": "2024-08-29T11:28:35+01:00",
      "changed_files": [
        "packages/react-devtools-extensions/firefox/manifest.json",
        "packages/react-devtools-extensions/src/background/dynamicallyInjectContentScripts.js",
        "packages/react-devtools-extensions/src/background/executeScript.js",
        "packages/react-devtools-extensions/src/background/setExtensionIconAndPopup.js",
        "packages/react-devtools-extensions/src/background/tabsManager.js",
        "packages/react-devtools-extensions/src/contentScripts/prepareInjection.js",
        "packages/react-devtools-shared/babel.config.js"
      ]
    },
    {
      "sha": "fc0df475c4417670272b819bad92590b310bcdaa",
      "short_sha": "fc0df47",
      "message": "[compiler] Inferred deps must match exact optionality of manual deps\n\nTo prevent any difference in behavior, we check that the optionality of the inferred deps exactly matches the optionality of the manual dependencies. This required a fix, I was incorrectly inferring optionality of manual deps (they're only optional if OptionalTerminal.optional is true) - for nested cases of mixed optional/non-optional.\n\nghstack-source-id: afd49e89cc3194eb3c317ca7434d3fa948896bff\nPull Request resolved: https://github.com/facebook/react/pull/30840",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-28T15:16:02-07:00",
      "committed_date": "2024-08-28T15:59:26-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/DropManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-optional-member-expression-as-memo-dep-non-optional-in-body.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep-non-optional-in-body.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep-non-optional-in-body.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single-with-unconditional.js"
      ]
    },
    {
      "sha": "3a45ba241c028cd0af7bf17bb4c6487d0095a10f",
      "short_sha": "3a45ba2",
      "message": "[compiler] Enable optional dependencies by default\n\nPer title. This gives us much more granular memoization when the source used optional member expressions. Note that we only infer optional deps when the source used optionals: we don't (yet) infer optional dependencies from conditionals.\n\nghstack-source-id: 104d0b712d09498239e926e306c4623d546463b1\nPull Request resolved: https://github.com/facebook/react/pull/30838",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-28T12:12:29-07:00",
      "committed_date": "2024-08-28T15:59:26-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-call-with-optional-property-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-access.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/conditional-member-expr.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/memberexpr-join-optional-chain.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reduce-reactive-deps/memberexpr-join-optional-chain2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-scope-missing-mutable-range.expect.md"
      ]
    },
    {
      "sha": "99a4b26e18a71a2ed5af5ec11f4b9bace3882f7e",
      "short_sha": "99a4b26",
      "message": "[compiler] Handle optional where innermost property access is non-optional\n\nHandles an additional case as part of testing combinations of the same path being accessed in different places with different segments as optional/unconditional.\n\nghstack-source-id: ace777fcbb98fa8f41b977d0aec8418f3f58fb7b\nPull Request resolved: https://github.com/facebook/react/pull/30836",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-28T10:52:37-07:00",
      "committed_date": "2024-08-28T15:59:25-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PropagateScopeDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-inverted-optionals-parallel-paths.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-inverted-optionals-parallel-paths.js"
      ]
    },
    {
      "sha": "7475d568da137b661ce23edc24446871d58c67ef",
      "short_sha": "7475d56",
      "message": "[wip][compiler] Infer optional dependencies\n\nUpdates PropagateScopeDeps and DeriveMinimalDeps to understand optional dependency paths (`a?.b`). There a few key pieces to this:\n\nIn PropagateScopeDeps we jump through some hoops to work around the awkward structure of nested OptionalExpressions. This is much easier in HIR form, but I managed to get this pretty close and i think it will be landable with further cleanup. A good chunk of this is avoiding prematurely registering a value as a dependency - there are a bunch of indirections in the ReactiveFunction structure:\n\n```\nt0 = OptionalExpression\n  SequenceExpression\n    t0 = Sequence\n      ...\n    LoadLocal t0\n```\n\nWhere if at any point we call `visitOperand()` we'll prematurely register a dependency instead of declareProperty(). The other bit is that optionals can be optional=false for nested member expressions where not all the parts are actually optional (`foo.bar?.bar.call()`). And of course, parts of an optional chain can still be conditional even when optional=true (for example the `x` in `foo.bar?.[x]?.baz`). Not all of this is tested yet so there are likely bugs still.\n\nThe other bit is DeriveMinimalDeps, which is thankfully easier. We add OptionalAccess and OptionalDep and update the merge and reducing logic for these cases. There is probably still more to update though, for things like merging subtrees. There are a lot of ternaries that assume a result can be exactly one of two states (conditional/unconditional, dependency/access) and these assumptions don't hold anymore. I'd like to refactor to dependency/access separate from conditional/optional/unconditional. Also, the reducing logic isn't quite right: once a child is optional we keep inferring all the parents as optional too, losing some precision. I need to adjust the reducing logic to let children decide whether their path token is optional or not.\n\nghstack-source-id: 207842ac64560cf0f93ec96eb9ae1f17c62493ac\nPull Request resolved: https://github.com/facebook/react/pull/30819",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-28T10:52:36-07:00",
      "committed_date": "2024-08-28T15:59:25-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/DeriveMinimalDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PrintReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PropagateScopeDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-member-expression-as-memo-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single-with-unconditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single-with-unconditional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-single.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional-optional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional-optional.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-with-conditional.js"
      ]
    },
    {
      "sha": "9180a37fba0c9ad642bfc6e1c2839f88f66485ab",
      "short_sha": "9180a37",
      "message": "[compiler] Allow inferred non-optional paths when manual deps were optional\n\nIf the inferred deps are more precise (non-optional) than the manual deps (optional) it should pass validation.\n\nThe other direction also seems like it would be fine - inferring optional deps when the original was non-optional - but for now let's keep the \"at least as precise\" rule.\n\nghstack-source-id: 9f7a99ee5f7caa2c2d96f70f360e4320bac3de2d\nPull Request resolved: https://github.com/facebook/react/pull/30816",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-28T10:52:35-07:00",
      "committed_date": "2024-08-28T15:59:25-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep-non-optional-in-body.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-member-expression-as-memo-dep-non-optional-in-body.js"
      ]
    },
    {
      "sha": "925c20a20674254391b7752aa216ec417c8f52a3",
      "short_sha": "925c20a",
      "message": "[compiler] Add fallthrough to branch terminal\n\nBranch terminals didn't have a fallthrough because they correspond to an outer terminal (optional, logical, etc) that has the \"real\" fallthrough. But understanding how branch terminals correspond to these outer terminals requires knowing the branch fallthrough. For example, `foo?.bar?.baz` creates terminals along the lines of:\n\n```\nbb0:\n  optional fallthrough=bb4\nbb1:\n  optional fallthrough=bb3\nbb2:\n  ...\n  branch ... (fallthrough=bb3)\n\n...\n\nbb3:\n  ...\n  branch ... (fallthrough=bb4)\n\n...\n\nbb4:\n  ...\n```\n\nWithout a fallthrough on `branch` terminals, it's unclear that the optional from bb0 has its branch node in bb3. With the fallthroughs, we can see look for a branch with the same fallthrough as the outer optional terminal to match them up.\n\nghstack-source-id: d48c6232899864716eef71798a278b487d30eafc\nPull Request resolved: https://github.com/facebook/react/pull/30814",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-28T10:52:34-07:00",
      "committed_date": "2024-08-28T15:59:25-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/visitors.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/DropManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/AlignReactiveScopesToBlockScopesHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts"
      ]
    },
    {
      "sha": "a718da0b23c3f72ba6fb8e1bd087aca85f2b0b4a",
      "short_sha": "a718da0",
      "message": "[compiler] Add DependencyPath optional property\n\nAdds an `optional: boolean` property to each token in a DependencyPath, currently always set to false. Also updates the equality and printing logic for paths to account for this field.\n\nSubsequent PRs will update our logic to determine which manual dependencies were optional, then we can start inferring optional deps as well.\n\nghstack-source-id: 66c2da2cfab5e5ba6c2ac5e20adae5e4f615ad29\nPull Request resolved: https://github.com/facebook/react/pull/30813",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-28T10:52:33-07:00",
      "committed_date": "2024-08-28T15:59:25-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/DropManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/DeriveMinimalDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PropagateScopeDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-member-expression-as-memo-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-member-expression-as-memo-dep.js"
      ]
    },
    {
      "sha": "4759161ed8d8f77bad654b6c23a063c8ad8d4864",
      "short_sha": "4759161",
      "message": "[compiler] Wrap ReactiveScopeDep path tokens in object\n\nPreviously the path of a ReactiveScopeDependency was `Array<string>`. We need to track whether each property access is optional or not, so as a first step we change this to `Array<{property: string}>`, making space for an additional property in a subsequent PR.\n\nghstack-source-id: c5d38d72f6b9d084a5df69ad23178794468f5f8b\nPull Request resolved: https://github.com/facebook/react/pull/30812",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-28T10:52:33-07:00",
      "committed_date": "2024-08-28T15:59:25-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/DropManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/DeriveMinimalDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/MergeReactiveScopesThatInvalidateTogether.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PrintReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PropagateScopeDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneInitializationDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts"
      ]
    },
    {
      "sha": "5e51d767d179fda586f28e1118fb9ec5c200e35e",
      "short_sha": "5e51d76",
      "message": "[compiler] Stop reusing ScopeDep type in AnalyzeFunctions\n\nAnalyzeFunctions was reusing the `ReactiveScopeDependency` type since it happened to have a convenient shape, but we need to change this type to represent optionality. We now use a locally defined type instead.\n\nghstack-source-id: e305c6ede4bcbdffce606336c572cdc6dc1556c3\nPull Request resolved: https://github.com/facebook/react/pull/30811",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-28T10:44:44-07:00",
      "committed_date": "2024-08-28T15:59:25-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts"
      ]
    },
    {
      "sha": "7771d3a7972cc2483c45fde51b7ec2d926cba097",
      "short_sha": "7771d3a",
      "message": "[compiler] Track refs through object expressions and property lookups\n\nSummary:\nThis addresses the issue of the compiler being overly restrictive about refs escaping into object expressions. Rather than erroring whenever a ref flows into an object, we will now treat the object itself as a ref, and apply the same escape rules to it. Whenever we look up a property from a ref value, we now don't know whether that value is itself a ref or a ref value, so we assume it's both.\n\nThe same logic applies to ref-accessing functions--if such a function is stored in an object, we'll propagate that property to the object itself and any properties looked up from it.\n\nghstack-source-id: 5c6fcb895d4a1658ce9dddec286aad3a57a4c9f1\nPull Request resolved: https://github.com/facebook/react/pull/30821",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-27T10:11:50-07:00",
      "committed_date": "2024-08-27T10:11:50-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-use-ref-added-to-dep-without-type-info.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.return-ref-callback-structure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/return-ref-callback-structure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.return-ref-callback-structure.js"
      ]
    },
    {
      "sha": "f2841c2a490b4b776b98568871b69693fedf985c",
      "short_sha": "f2841c2",
      "message": "[compiler] Fixture to demonstrate issue with returning object containing ref\n\nSummary:\nWe currently can return a ref from a hook but not an object containing a ref.\n\nghstack-source-id: 8b1de4991eb2731b7f758e685ba62d9f07d584b2\nPull Request resolved: https://github.com/facebook/react/pull/30820",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-27T10:11:50-07:00",
      "committed_date": "2024-08-27T10:11:50-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.return-ref-callback-structure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.return-ref-callback-structure.js"
      ]
    },
    {
      "sha": "96aca5f4f3d7fbe0c13350f90031d8ec4c060ccb",
      "short_sha": "96aca5f",
      "message": "Spawn new task if we hit stack overflow (#30419)\n\nIf we see the \"Maximum call stack size exceeded\" error we know we've hit\r\nstack overflow. We can recover from this by spawning a new task and\r\ntrying again. Effectively a zero-cost trampoline in the normal case. The\r\nnew task will have a clean stack. If you have a lot of siblings at the\r\nsame depth that hits the limit you can end up hitting this once for each\r\nsibling but within that new sibling you're unlikely to hit this again.\r\nSo it's not too expensive.\r\n\r\nIf it errors again in the retryTask pass, the other error handling takes\r\nover which causes this to be able to still not infinitely stall. E.g.\r\nwhen the component itself throws an error like this.\r\n\r\nIt's still better to increase the stack limit for performance if you\r\nhave a really deep tree but it doesn't really hurt to be able to recover\r\nsince it's zero cost when it doesn't happen.\r\n\r\nWe could do the same thing for Flight. Those trees don't tend to be as\r\ndeep but could happen.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-27T13:10:37-04:00",
      "committed_date": "2024-08-27T13:10:37-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "f90a6bcc4c988f7524ce2be675b3257a530a51e9",
      "short_sha": "f90a6bc",
      "message": "[DevTools] Reconcile Fibers Against Previous Children Instances (#30822)\n\nThis loops over the remainingReconcilingChildren to find existing\r\nFiberInstances that match the updated Fiber. This is the same thing we\r\nalready do for virtual instances. This avoids the need for a\r\n`fiberToFiberInstanceMap`.\r\n\r\nThis loop is fast but there is a downside when the children set is very\r\nlarge and gets reordered with keys since we might have to loop over the\r\nset multiple times to get to the instances in the bottom. If that\r\nbecomes a problem we can optimize it the same way ReactChildFiber does\r\nwhich is to create a temporary Map only when the children don't line up\r\nproperly. That way everything except the first pass can use the Map but\r\nthere's no need to create it eagerly.\r\n\r\nNow that we have the loop we don't need the previousSibling field so we\r\ncan save some memory there.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-27T12:05:47-04:00",
      "committed_date": "2024-08-27T12:05:47-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "9690b9ad749c30eab1900c99e7c25a7ed7e1d9b7",
      "short_sha": "9690b9a",
      "message": "[DevTools] Remove findCurrentFiberUsingSlowPathByFiberInstance (#30818)\n\nWe always track the last committed Fiber on `FiberInstance.data`.\r\n\r\n\r\nhttps://github.com/facebook/react/blob/dcae56f8b72f625d8affe5729ca9991b31a492ac/packages/react-devtools-shared/src/backend/fiber/renderer.js#L3068\r\n\r\nSo we can now remove this complex slow path to get the current fiber.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-27T12:05:24-04:00",
      "committed_date": "2024-08-27T12:05:24-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "1a8f92a8699e79966e65841fcb9110bba4c3df7f",
      "short_sha": "1a8f92a",
      "message": "[DevTools] Track Tree Base Duration of Virtual Instances (#30817)\n\nThese don't have their own time since they don't take up any time to\r\nrender but they show up in the tree for context. However they never\r\nrender themselves. Their base tree time is the base time of their\r\nchildren. This way they take up the same space as their combined\r\nchildren in the Profiler tree. (Instead of leaving a blank line which\r\nthey did before this PR.)\r\n\r\nThe frontend doesn't track the difference between a virtual instance and\r\na Fiber that didn't render this update. This might be a bit confusing as\r\nto why it didn't render. I add the word \"client\" to make it a bit\r\nclearer and works for both. We should probably have different verbiage\r\nhere based on it is a Server Component or something else.\r\n\r\n<img width=\"1103\" alt=\"Screenshot 2024-08-26 at 5 00 47 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/87b811d4-7024-466a-845d-542493ed3ca2\">\r\n\r\nI also took the opportunity to remove idToTreeBaseDurationMap and\r\nidToRootMap maps. Cloning the Map isn't really all that super fast\r\nanyway and it means we have to maintain the map continuously as we\r\nrender. Instead, we can track it on the instances and then walk the\r\ninstances to create a snapshot when starting to profile. This isn't as\r\nfast but really fast too and requires less bookkeeping while rendering\r\ninstead which is more sensitive than that one snapshot in the beginning.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-27T12:05:10-04:00",
      "committed_date": "2024-08-27T12:05:10-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/HoveredFiberInfo.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/SidebarSelectedFiberInfo.js"
      ]
    },
    {
      "sha": "246d7bfeb0c90ecccd9531929b60a79d628a4c78",
      "short_sha": "246d7bf",
      "message": "Enable suspenseCallback on React Native (#29210)\n\n## Summary\r\n\r\nsuspenseCallback feature has proved to be useful for FB Web. Let's look\r\nat enabling the feature for the React Native build.\r\n\r\n\r\n## How did you test this change?\r\n\r\nWill sync the react changes with a React Native build and will verify\r\nthat performance logging is correctly notified of suspense promises\r\nduring the suspense callback.",
      "author": {
        "name": "Benoit Girard",
        "email": "bgirard@fb.com"
      },
      "authored_date": "2024-08-26T22:06:02-04:00",
      "committed_date": "2024-08-26T22:06:02-04:00",
      "changed_files": [
        "packages/react-reconciler/src/__tests__/ReactSuspenseCallback-test.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js"
      ]
    },
    {
      "sha": "e44685e4f196f9e19c3729ab2b3772a40428ac1e",
      "short_sha": "e44685e",
      "message": "[DevTools] Use Owner Stacks to Implement View Source of a Server Component (#30798)\n\nWe don't have the source location of Server Components on the client\r\nbecause we don't want to eagerly do the throw trick for all Server\r\nComponents just in case. Unfortunately Node.js doesn't expose V8's API\r\nto get a source location of a function.\r\n\r\nWe do have the owner stacks of the JSX that created it though and at\r\nsome point we'll also show that location in DevTools.\r\n\r\nHowever, the realization is that if a Server Component is the owner of\r\nany child. The owner stack of that child will have the owner component's\r\nsource location as its bottom stack frame.\r\n\r\nThe technique I'm implementing here is to track whenever a child mounts\r\nwe already have its owner. We track the first discovered owned child's\r\nstack on the owner. Then when we ask for a Source location of the owner\r\ndo we parse that stack and extract the location of the bottom frame.\r\nThis doesn't give us a location necessarily in the top of the function\r\nbut somewhere in the function.\r\n\r\nIn this case the first owned child is the Container:\r\n\r\n<img width=\"1107\" alt=\"Screenshot 2024-08-22 at 10 24 42 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/95f32850-24a5-4151-8ce6-b7b89db68aee\">\r\n<img width=\"648\" alt=\"Screenshot 2024-08-22 at 10 24 20 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/4bcba033-866f-4684-9beb-de09d189deff\">\r\n\r\nWe can even use this technique for Fibers too. Currently I use this as a\r\nfallback in case the error technique didn't work. This covers a case\r\nwhere nothing errors but you still render a child. This case is actually\r\nquite common:\r\n\r\n```\r\nfunction Foo() {\r\n  return <Bar />;\r\n}\r\n```\r\n\r\nHowever, for Fibers we could really just use the `inspect(function)`\r\ntechnique which works for all cases. At least in Chrome.\r\n\r\nUnfortunately, this technique doesn't work if a Component doesn't create\r\nany new JSX but just renders its children. It also currently doesn't\r\nwork if the child is filtered since I only look up the owner if an\r\ninstance is not filtered. This means that the container in the fixture\r\ncan't view source by default since the host component is filtered:\r\n\r\n```\r\nexport default function Container({children}) {\r\n  return <div>{children}</div>;\r\n}\r\n```\r\n\r\n<img width=\"1107\" alt=\"Screenshot 2024-08-22 at 10 24 35 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/c3f8f9c5-5add-4d35-9290-3a5079e82adc\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-26T20:50:43-04:00",
      "committed_date": "2024-08-26T20:50:43-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/DevToolsFiberComponentStack.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "dcae56f8b72f625d8affe5729ca9991b31a492ac",
      "short_sha": "dcae56f",
      "message": "[ez] Remove trailing space from babel-refresh header\n\nghstack-source-id: d78c53462b3be7b93733cdd0a7def96d7112087e\nPull Request resolved: https://github.com/facebook/react/pull/30806",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-26T11:57:12-04:00",
      "committed_date": "2024-08-26T13:16:03-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "f65ac7bd4aac61db1ec25af5b03b72d03779a890",
      "short_sha": "f65ac7b",
      "message": "[DevTools] Make function inspection instant (#30786)\n\nI noticed that there is a delay due to the inspection being split into\r\none part that gets the attribute and another eval that does the\r\ninspection. This is a bit hacky and uses temporary global names that are\r\nleaky. The timeout was presumably to ensure that the first step had\r\nfully propagated but it's slow. As we've learned, it can be throttled,\r\nand it isn't a guarantee either way.\r\n\r\nInstead, we can just consolidate these into a single operation that\r\nby-passes the bridge and goes straight to the renderer interface from\r\nthe eval.\r\n\r\nI did the same for the viewElementSource helper even though that's not\r\ncurrently in use since #28471 but I think we probably should return to\r\nthat technique when it's available since it's more reliable than the\r\nthrow - at least in Chrome. I'm not sure about the status of React\r\nNative here. In Firefox, inspecting a function with source maps doesn't\r\nseem to work. It doesn't jump to original code.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-26T11:53:17-04:00",
      "committed_date": "2024-08-26T11:53:17-04:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-extensions/src/main/sourceSelection.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js"
      ]
    },
    {
      "sha": "1b7478246d05b030a2ae7a8bb07aea8c7df7ef27",
      "short_sha": "1b74782",
      "message": "[compiler] Special-case phi inference for mixed readonly type\n\nThis allows us to handle common operations such as `useFragment(...).edges.nodes ?? []` where we have a `Phi(MixedReadonly, Array)`. The underlying pattern remains general-purpose and not Relay-specific, and any API that returns transitively \"mixed\" data (primitives, arrays, plain objects) can benefit from the same type refinement.\n\nghstack-source-id: 51283108942002a14d032613a9d0b8b665ee3a94\nPull Request resolved: https://github.com/facebook/react/pull/30797",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-22T17:51:22-07:00",
      "committed_date": "2024-08-23T15:24:44-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missing-memoization-lack-of-phi-types.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-memoization-lack-of-phi-types.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missing-memoization-lack-of-phi-types.js"
      ]
    },
    {
      "sha": "4f546740788ae95ced0338a9cbafc50124b47194",
      "short_sha": "4f54674",
      "message": "[compiler] Infer phi types, extend mutable ranges to account for Store effects\n\nRedo of an earlier (pre-OSS) PR to infer types of phi nodes. There are a few pieces to this:\n\n1. Update InferTypes to infer the type of `phi.id.type`, not the unused `phi.type`.\n2. Update the algorithm to verify that all the phi types are actually equal, not just have the same kind.\n3. Handle circular types by removing the cycle.\n\nHowever, that reveals another issue: InferMutableRanges currently infers the results of `Store` effects _after_ its fixpoint loop. That was fine when a Store could never occur on a phi (since they wouldn't have a type to get a function signature from). Now though, we can have Store effects occur on phis, and we need to ensure that this correctly updates the mutable range of the phi operands - recursively. See new test that fails without the fixpoint loop.\n\nghstack-source-id: 2e1b02844d3a814dce094b7e3812df799e54343f\nPull Request resolved: https://github.com/facebook/react/pull/30796",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-22T17:26:48-07:00",
      "committed_date": "2024-08-23T15:24:44-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutableRanges.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/phi-type-inference-array-push-consecutive-phis.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/phi-type-inference-array-push-consecutive-phis.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/phi-type-inference-array-push.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/phi-type-inference-property-store.expect.md"
      ]
    },
    {
      "sha": "c9c170b63b086964272ea2632551b1f108c6fd56",
      "short_sha": "c9c170b",
      "message": "[compiler] Remove phi type, infer phi.id.type\n\nghstack-source-id: 0c26bb224c6d5431898e683891df9b1a5c2e5b63\nPull Request resolved: https://github.com/facebook/react/pull/30795",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-22T16:52:02-07:00",
      "committed_date": "2024-08-23T15:24:44-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/SSA/EnterSSA.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/PropagatePhiTypes.ts"
      ]
    },
    {
      "sha": "37c6ea849c1445deb8d6704487b6295f7970a470",
      "short_sha": "37c6ea8",
      "message": "[compiler] Typedefs for Array.prototype.flatMap\n\nghstack-source-id: af4c7ac2fd26f6ff332a1af0055c80b70838efee\nPull Request resolved: https://github.com/facebook/react/pull/30794",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-22T16:51:59-07:00",
      "committed_date": "2024-08-23T15:24:44-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts"
      ]
    },
    {
      "sha": "039c5c08fa291ee2ac65e2470c98d1701494d5b3",
      "short_sha": "039c5c0",
      "message": "[compiler] Repros for missing memoization due to lack of phi type inference\n\nThis is a complex case: we not only need phi type inference but also need to be able infer the union of `MixedReadonly | Array`.\n\nghstack-source-id: 935088910dd8c210b3253cf8ff1f4b935f5081b7\nPull Request resolved: https://github.com/facebook/react/pull/30793",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-22T16:51:55-07:00",
      "committed_date": "2024-08-23T15:24:44-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missing-memoization-lack-of-phi-types.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missing-memoization-lack-of-phi-types.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-memoization-lack-of-phi-types-explicit-types.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-missing-memoization-lack-of-phi-types-explicit-types.js"
      ]
    },
    {
      "sha": "ee7f6757c446c4e79ecc7e2bc22b8c9b712834b7",
      "short_sha": "ee7f675",
      "message": "Fix: Synchronous popstate transitions (#30759)\n\nThis is a refactor of the fix in #27505.\r\n\r\nWhen a transition update is scheduled by a popstate event, (i.e. a back/\r\nforward navigation) we attempt to render it synchronously even though\r\nit's a transition, since it's likely the previous page's data is cached.\r\n\r\nIn #27505, I changed the implementation so that it only \"upgrades\" the\r\npriority of the transition for a single attempt. If the attempt\r\nsuspends, say because the data is not cached after all, from then on it\r\nshould be treated as a normal transition.\r\n\r\nBut it turns out #27505 did not work as intended, because it relied on\r\nmarking the root with pending synchronous work (root.pendingLanes),\r\nwhich was never cleared until the popstate update completed.\r\n\r\nThe test scenarios I wrote accidentally worked for a different reason\r\nrelated to suspending the work loop, which I'm currently in the middle\r\nof refactoring.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-08-23T12:30:08-04:00",
      "committed_date": "2024-08-23T12:30:08-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js",
        "packages/react-reconciler/src/ReactFiberLane.js",
        "packages/react-reconciler/src/ReactFiberRootScheduler.js"
      ]
    },
    {
      "sha": "b57d282369b3b3232d8fed537f5aaf0156430d63",
      "short_sha": "b57d282",
      "message": "Revert \"[compiler][eslint] remove compilationMode override; report bailouts on first line\"\n\nThis reverts commit b34b750729bcbcfd80f72f82f46da5bc3e72158f.\n\nThis hack doesn't play well internally so I'm reverting this for now\n(but keeping the compilationMode override). I'll audit the locations we\nreport later and try to make them more accurate so we won't need this\nworkaround.\n\nghstack-source-id: b6be29c11d5e2eae3004ee74cba1b080894c963a\nPull Request resolved: https://github.com/facebook/react/pull/30792",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-22T14:57:01-04:00",
      "committed_date": "2024-08-22T15:04:39-04:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts"
      ]
    },
    {
      "sha": "eb7570bc1631243af8df21c8a87173cc12f2d880",
      "short_sha": "eb7570b",
      "message": "[Flight] Preserve location of bound server actions (#30778)\n\nFollow up to #30741.\r\n\r\nWe need to keep the location of the action when it's bound so we can\r\nstill jump to it.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-22T12:36:05-04:00",
      "committed_date": "2024-08-22T12:36:05-04:00",
      "changed_files": [
        "packages/react-server-dom-esm/src/ReactFlightESMReferences.js",
        "packages/react-server-dom-turbopack/src/ReactFlightTurbopackReferences.js",
        "packages/react-server-dom-webpack/src/ReactFlightWebpackReferences.js"
      ]
    },
    {
      "sha": "36c04348d7c6179bac4e7f27af823a67289432f9",
      "short_sha": "36c0434",
      "message": "[DevTools] Make Functions Clickable to Jump to Definition (#30769)\n\nCurrently you can jump to definition of a function by right clicking\r\nthrough the context menu. However, it's pretty difficult to discover.\r\nThis makes the functions clickable to jump to definition - like links.\r\n\r\nThis uses the same styling as we do for links (which are btw only\r\nclickable if they're not editable). Including cursor: pointer.\r\n\r\nI added a background on hover which follows the same pattern as the\r\nowners list.\r\n\r\nI also dropped the ƒ prefix when displaying functions. This is a cute\r\nshort cut and there's precedence in how Chrome prints functions in the\r\nconsole *if* the function's toString would've had a function prefix like\r\nif it was a function declaration or expression. It does not do this for\r\narrow functions or object methods.\r\n\r\nElsewhere in the JS ecosystem this isn't really used anywhere. It\r\ninvites more questions than it answers.\r\n\r\nThe parenthesis and curlies are enough. There's no ambiguity here since\r\nstrings have quotations. It looks better with just its object method\r\nform. Keeping it simple seems best. To my eyes this flows better because\r\nI'm used to looking at function syntax but not weird \"f\"s.\r\n\r\nBefore:\r\n\r\n<img width=\"433\" alt=\"Screenshot 2024-08-20 at 11 55 09 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/9dd50da6-598f-4291-9e24-1cdc7200dc9e\">\r\n\r\n\r\nAfter:\r\n<img width=\"388\" alt=\"Screenshot 2024-08-20 at 11 46 01 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/dd988e14-412e-4deb-8c8c-26a54be8331f\">\r\n\r\n\r\nAfter (Hover):\r\n<img width=\"389\" alt=\"Screenshot 2024-08-20 at 11 46 31 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/6fb4ebed-5dc1-448a-8e4d-b6d4f3903329\">",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-22T12:35:49-04:00",
      "committed_date": "2024-08-22T12:35:49-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/inspectedElement-test.js",
        "packages/react-devtools-shared/src/__tests__/legacy/inspectElement-test.js",
        "packages/react-devtools-shared/src/devtools/views/Components/KeyValue.css",
        "packages/react-devtools-shared/src/devtools/views/Components/KeyValue.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "97e2ce6a003db070d1d14ca25ac4b30e1df4a8ce",
      "short_sha": "97e2ce6",
      "message": "[Flight] Enable Server Action Source Maps in flight-esm Fixture (#30763)\n\nStacked on #30758 and #30755.\r\n\r\nThis is copy paste from #30755 into the ESM package. We use the\r\n`webpack-sources` package for the source map utility but it's not\r\nactually dependent on Webpack itself. Could probably inline it in the\r\nbuild.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-22T12:35:16-04:00",
      "committed_date": "2024-08-22T12:35:16-04:00",
      "changed_files": [
        "fixtures/flight-esm/package.json",
        "fixtures/flight-esm/yarn.lock",
        "packages/react-server-dom-esm/package.json",
        "packages/react-server-dom-esm/src/ReactFlightESMNodeLoader.js"
      ]
    },
    {
      "sha": "e483df4658473ca9c917a42be4869d445be00807",
      "short_sha": "e483df4",
      "message": "[Flight ESM] Wire up Source Maps in the flight-esm fixture (#30758)\n\nSame as #29708 but for the flight-esm fixture.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-22T12:34:48-04:00",
      "committed_date": "2024-08-22T12:34:48-04:00",
      "changed_files": [
        "fixtures/flight-esm/server/global.js",
        "fixtures/flight-esm/server/region.js",
        "fixtures/flight-esm/src/index.js",
        "fixtures/flight/src/index.js"
      ]
    },
    {
      "sha": "7a3fcc9898d57a723613814bd19ec1d60805e5c8",
      "short_sha": "7a3fcc9",
      "message": "[compiler] Flatten returnIdentifier to just returnType\n\nWe don't a full Identifier object for the return type, we can just store the type.\n\nghstack-source-id: 4594d64ce3900ced3e461945697926489898318e\nPull Request resolved: https://github.com/facebook/react/pull/30790",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-22T09:07:01-07:00",
      "committed_date": "2024-08-22T09:33:09-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md"
      ]
    },
    {
      "sha": "98b57408216c80ec75723773524466657b4956b6",
      "short_sha": "98b5740",
      "message": "[compiler] Rename HIRFunction.returnType\n\nRename this field so we can use it for the actual return type.\n\nghstack-source-id: 118d7dcfbbcc40911bf6d13f14e70053e436738d\nPull Request resolved: https://github.com/facebook/react/pull/30789",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-22T09:06:58-07:00",
      "committed_date": "2024-08-22T09:33:09-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts"
      ]
    },
    {
      "sha": "8410c8b959b8e20adc5577cb7211702cfba0f78f",
      "short_sha": "8410c8b",
      "message": "[compiler] Infer return types of function expressions\n\nUses the returnIdentifier added in the previous PR to provide a stable identifier for which we can infer a return type for functions, then wires up the equations in InferTypes to infer the type.\n\nghstack-source-id: 22c0a9ea096daa5f72821fca2a5ff5b199f65c8b\nPull Request resolved: https://github.com/facebook/react/pull/30785",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-21T21:17:29-07:00",
      "committed_date": "2024-08-22T09:33:09-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/MergeReactiveScopesThatInvalidateTogether.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-capture-in-invoked-function-inferred-as-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-capture-in-invoked-function-inferred-as-mutation.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-simple-const-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-simple-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-nonescaping-invoked-callback-escaping-return.expect.md"
      ]
    },
    {
      "sha": "217a0efcd90ef04556e0256e0eff9313bdbbcaca",
      "short_sha": "217a0ef",
      "message": "[compiler] Add returnIdentifier to function expressions\n\nThis gives us a place to store type information, used in follow-up PRs.\n\nghstack-source-id: ee0bfa253f63c30ccaac083b9f1f72b76617f19c\nPull Request resolved: https://github.com/facebook/react/pull/30784",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-21T18:21:27-07:00",
      "committed_date": "2024-08-22T09:33:09-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-named-function-with-shadowed-local-same-name.expect.md"
      ]
    },
    {
      "sha": "8a20fc3b19b600a3b8666203f1877230c62becf9",
      "short_sha": "8a20fc3",
      "message": "[compiler] Repro of missing memoization due to capturing w/o mutation\n\nIf you have a function expression which _captures_ a mutable value (but does not mutate it), and that function is invoked during render, we infer the invocation as a mutation of the captured value. But in some circumstances we can prove that the captured value cannot have been mutated, and could in theory avoid inferring a mutation.\n\nghstack-source-id: 47664e48ce8c51a6edf4d714d1acd1ec4781df80\nPull Request resolved: https://github.com/facebook/react/pull/30783",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-21T17:31:47-07:00",
      "committed_date": "2024-08-22T09:33:09-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-capture-in-invoked-function-inferred-as-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-capture-in-invoked-function-inferred-as-mutation.js"
      ]
    },
    {
      "sha": "689c6bd3fd138ec6c21c54e741da168bdd0c0616",
      "short_sha": "689c6bd",
      "message": "[compiler][wip] Environment option for resolving imported module types\n\nAdds a new Environment config option which allows specifying a function that is called to resolve types of imported modules. The function is passed the name of the imported module (the RHS of the import stmt) and can return a TypeConfig, which is a recursive type of the following form:\n\n* Object of valid identifier keys (or \"*\" for wildcard) and values that are TypeConfigs\n* Function with various properties, whose return type is a TypeConfig\n* or a reference to a builtin type using one of a small list (currently Ref, Array, MixedReadonly, Primitive)\n\nRather than have to eagerly supply all known types (most of which may not be used) when creating the config, this function can do so lazily. During InferTypes we call `getGlobalDeclaration()` to resolve global types. Originally this was just for known react modules, but if the new config option is passed we also call it to see if it can resolve a type. For `import {name} from 'module'` syntax, we first resolve the module type and then call `getPropertyType(moduleType, 'name')` to attempt to retrieve the property of the module (the module would obviously have to be typed as an object type for this to have a chance of yielding a result). If the module type is returned as null, or the property doesn't exist, we fall through to the original checking of whether the name was hook-like.\n\nTODO:\n* testing\n* cache the results of modules so we don't have to re-parse/install their types on each LoadGlobal of the same module\n* decide what to do if the module types are invalid. probably better to fatal rather than bail out, since this would indicate an invalid configuration.\n\nghstack-source-id: bfdbf67e3dd0cbfd511bed0bd6ba92266cf99ab8\nPull Request resolved: https://github.com/facebook/react/pull/30771",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-21T15:45:30-07:00",
      "committed_date": "2024-08-22T09:33:09-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/TypeSchema.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/DropManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/InferTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructuring-mixed-scope-declarations-and-locals.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructuring-mixed-scope-declarations-and-locals.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-call-logical.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-call-logical.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/readonly-object-method-calls-mutable-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/readonly-object-method-calls-mutable-lambda.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/readonly-object-method-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/readonly-object-method-calls.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/tagged-template-in-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/tagged-template-in-hook.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-log-default-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-log-default-import.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-log.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-log.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-store-capture-namespace-import.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-store-capture-namespace-import.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-store-capture.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/type-provider-store-capture.tsx",
        "compiler/packages/snap/src/compiler.ts",
        "compiler/packages/snap/src/constants.ts",
        "compiler/packages/snap/src/runner-worker.ts",
        "compiler/packages/snap/src/sprout/shared-runtime-type-provider.ts",
        "compiler/packages/snap/src/sprout/shared-runtime.ts"
      ]
    },
    {
      "sha": "0ef00b3e17447ae94dc5701a5ad410c137680d86",
      "short_sha": "0ef00b3",
      "message": "[compiler] Transitively freezing functions marks values as frozen, not effects\n\nThe fixture from the previous PR was getting inconsistent behavior because of the following:\n1. Create an object in a useMemo\n2. Create a callback in a useCallback, where the callback captures the object from (1) into a local object, then passes that local object into a logging method. We have to assume the logging method could modify the local object, and transitively, the object from (1).\n3. Call the callback during render.\n4. Pass the callback to JSX.\n\nWe correctly infer that the object from (1) is captured and modified in (2). However, in (4) we transitively freeze the callback. When transitively freezing functions we were previously doing two things: updating our internal abstract model of the program values to reflect the values as being frozen *and* also updating function operands to change their effects to freeze.\n\nAs the case above demonstrates, that can clobber over information about real potential mutability. The potential fix here is to only walk our abstract value model to mark values as frozen, but _not_ override operand effects. Conceptually, this is a forward data flow propagation — but walking backward to update effects is pushing information backwards in the algorithm. An alternative would be to mark that data was propagated backwards, and trigger another loop over the CFG to propagate information forward again given the updated effects. But the fix in this PR is more correct.\n\nghstack-source-id: c05e716f37827cb5515a059a1f0e8e8ff94b91df\nPull Request resolved: https://github.com/facebook/react/pull/30766",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-21T14:07:12-07:00",
      "committed_date": "2024-08-22T09:33:08-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-mutate-global-in-effect-fixpoint.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-inferred-mutation-in-logger.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-inferred-mutation-in-logger.js"
      ]
    },
    {
      "sha": "f7bb717e9e9f876c6a466a5f6d31004c7f7590c5",
      "short_sha": "f7bb717",
      "message": "[compiler] Repro for missing memoization due to inferred mutation\n\nThis fixture bails out on ValidatePreserveExistingMemo but would ideally memoize since the original memoization is safe. It's trivial to make it pass by commenting out the commented line (`LogEvent.log(() => object)`). I would expect the compiler to infer this as possible mutation of `logData`, since `object` captures a reference to `logData`. But somehow `logData` is getting memoized successfully, but we still infer the callback, `setCurrentIndex`, as having a mutable range that extends to the `setCurrentIndex()` call after the useCallback.\n\nghstack-source-id: 4f82e345102f82f6da74de3f9014af263d016762\nPull Request resolved: https://github.com/facebook/react/pull/30764",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-21T14:07:11-07:00",
      "committed_date": "2024-08-22T09:33:08-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-inferred-mutation-in-logger.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-inferred-mutation-in-logger.js"
      ]
    },
    {
      "sha": "eb3ad065a10e542eb501bcb7dba7f9617e8c363e",
      "short_sha": "eb3ad06",
      "message": "Feature flag: enableSiblingPrerendering (#30761)\n\nAdds a new feature flag for an upcoming experiment.\r\n\r\nNo implementation yet.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-08-22T10:17:19-04:00",
      "committed_date": "2024-08-22T10:17:19-04:00",
      "changed_files": [
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "985747f81033833dca22f30b0c04704dd4bd3714",
      "short_sha": "985747f",
      "message": "[DevTools] Support REACT_LEGACY_ELEMENT_TYPE for formatting JSX (#30779)\n\nDevTools shouldn't use react-is since that's versioned to one version of\r\nReact. We don't need to since we use all the symbols from\r\nshared/ReactSymbols anyway and have a fork of typeOf that can cover\r\nboth.\r\n\r\nNow JSX of old React versions show up with proper JSX formatting when\r\ninspecting.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-21T18:17:29-04:00",
      "committed_date": "2024-08-21T18:17:29-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/legacy/inspectElement-test.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "1d989965a6aac11d71ecf28030796f5475a86642",
      "short_sha": "1d98996",
      "message": "[ez] Add noformat etc headers into some files\n\nThese are only needed internally so I'm opting to just do it in the\ncommit artifacts job instead of amending the build config.\n\nghstack-source-id: 6a5382b0287d679f4515d79b140ab8248ce90c6b\nPull Request resolved: https://github.com/facebook/react/pull/30775",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-21T11:41:55-04:00",
      "committed_date": "2024-08-21T11:49:02-04:00",
      "changed_files": [
        ".github/workflows/runtime_commit_artifacts.yml"
      ]
    },
    {
      "sha": "ab24f643d0809ee09a7499862fef135fb09a0225",
      "short_sha": "ab24f64",
      "message": "[Fizz] use microtasks rather than tasks when scheduling work while prerendering (#30770)\n\nSimilar to https://github.com/facebook/react/pull/30768 we want to\r\nschedule work during prerendering in microtasks both for the root task\r\nand pings. We continue to schedule flushes as Tasks to allow as much\r\nwork to be batched up as possible.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-21T07:55:56-07:00",
      "committed_date": "2024-08-21T07:55:56-07:00",
      "changed_files": [
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "1228a28398bbf7b4d15cd148496853342e63c041",
      "short_sha": "1228a28",
      "message": "Remove turbopack unbundled/register/loader (#30756)\n\nThe unbundled form is just a way to show case a prototype for how an\r\nunbundled version of RSC can work. It's not really intended for every\r\nbundler combination to provide such a configuration.\r\n\r\nThere's no configuration of Turbopack that supports this mode atm and\r\npossibly never will be since it's more of an integrated server/client\r\nexperience.\r\n\r\nThis removes the unbundled form and node register/loaders from the\r\nturbopack build.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-21T09:58:31-04:00",
      "committed_date": "2024-08-21T09:58:31-04:00",
      "changed_files": [
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-turbopack-bundled.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-turbopack.js",
        "packages/react-server-dom-turbopack/client.node.unbundled.js",
        "packages/react-server-dom-turbopack/esm/package.json",
        "packages/react-server-dom-turbopack/esm/react-server-dom-turbopack-node-loader.production.js",
        "packages/react-server-dom-turbopack/node-register.js",
        "packages/react-server-dom-turbopack/npm/client.node.unbundled.js",
        "packages/react-server-dom-turbopack/npm/esm/package.json",
        "packages/react-server-dom-turbopack/npm/node-register.js",
        "packages/react-server-dom-turbopack/npm/server.node.unbundled.js",
        "packages/react-server-dom-turbopack/npm/static.node.unbundled.js",
        "packages/react-server-dom-turbopack/package.json",
        "packages/react-server-dom-turbopack/server.node.unbundled.js",
        "packages/react-server-dom-turbopack/src/ReactFlightTurbopackNodeLoader.js",
        "packages/react-server-dom-turbopack/src/ReactFlightTurbopackNodeRegister.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOM-test.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMBrowser-test.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMEdge-test.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMForm-test.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMNode-test.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMReply-test.js",
        "packages/react-server-dom-turbopack/src/__tests__/ReactFlightTurbopackDOMReplyEdge-test.js",
        "packages/react-server-dom-turbopack/src/__tests__/utils/TurbopackMock.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.unbundled.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.unbundled.stable.js",
        "packages/react-server-dom-turbopack/static.node.unbundled.js",
        "scripts/rollup/bundles.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "dd9117e3134f24d1aa39e405a95ab54188a017dd",
      "short_sha": "dd9117e",
      "message": "[Flight] Source Map Actions in Reference Node Loader Transforms (#30755)\n\nFollow up to #30741.\r\n\r\nThis is just for the reference Webpack implementation.\r\n\r\nIf there is a source map associated with a Node ESM loader, we generate\r\nnew source map entries for every `registerServerReference` call.\r\n\r\nTo avoid messing too much with it, this doesn't rewrite the original\r\nmappings. It just reads them while finding each of the exports in the\r\noriginal mappings. We need to read all since whatever we append at the\r\nend is relative. Then we just generate new appended entries at the end.\r\n\r\nFor the location I picked the location of the local name identifier.\r\nSince that's the name of the function and that gives us a source map\r\nname index. It means it jumps to the name rather than the beginning of\r\nthe function declaration. It could be made more clever like finding a\r\nlocal function definition if it is reexported. We could also point to\r\nthe line/column of the function declaration rather than the identifier\r\nbut point to the name index of the identifier name.\r\n\r\nNow jumping to definition works in the fixture.\r\n\r\n<img width=\"574\" alt=\"Screenshot 2024-08-20 at 2 49 07 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/7710f0e6-2cee-4aad-8d4c-ae985f8289eb\">\r\n\r\nUnfortunately this technique doesn't seem to work in Firefox nor Safari.\r\nThey don't apply the source map for jumping to the definition.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-21T09:52:17-04:00",
      "committed_date": "2024-08-21T09:52:17-04:00",
      "changed_files": [
        "fixtures/flight/package.json",
        "fixtures/flight/yarn.lock",
        "packages/react-server-dom-webpack/package.json",
        "packages/react-server-dom-webpack/src/ReactFlightWebpackNodeLoader.js",
        "scripts/rollup/modules.js",
        "yarn.lock"
      ]
    },
    {
      "sha": "dc32c7f35ed6699e302dc7dbae17804555c669c6",
      "short_sha": "dc32c7f",
      "message": "[Flight] use microtask for scheduling during prerenders (#30768)\n\nIn https://github.com/facebook/react/pull/29491 I updated the work\r\nscheduler for Flight to use microtasks to perform work when something\r\npings. This is useful but it does have some downsides in terms of our\r\nability to do task prioritization. Additionally the initial work is not\r\ninstantiated using a microtask which is inconsistent with how pings\r\nwork.\r\n\r\nIn this change I update the scheduling logic to use microtasks\r\nconsistently for prerenders and use regular tasks for renders both for\r\nthe initial work and pings.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-20T21:43:21-07:00",
      "committed_date": "2024-08-20T21:43:21-07:00",
      "changed_files": [
        "packages/internal-test-utils/ReactInternalTestUtils.js",
        "packages/internal-test-utils/internalAct.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "e831c232787400474673051d63df4aaf6c01bdeb",
      "short_sha": "e831c23",
      "message": "Test infra: Support gate('enableFeatureFlag') (#30760)\n\nShortcut for the common case where only a single flag is checked. Same\r\nas `gate(flags => flags.enableFeatureFlag)`.\r\n\r\nNormally I don't care about these types of conveniences but I'm about to\r\nadd a lot more inline flag checks these all over our tests and it gets\r\nnoisy. This helps a bit.",
      "author": {
        "name": "Andrew Clark",
        "email": "git@andrewclark.io"
      },
      "authored_date": "2024-08-20T16:40:01-04:00",
      "committed_date": "2024-08-20T16:40:01-04:00",
      "changed_files": [
        "scripts/babel/__tests__/transform-test-gate-pragma-test.js",
        "scripts/jest/setupTests.js"
      ]
    },
    {
      "sha": "85180b8cf84274795986c8f2c8473f8816db8b7b",
      "short_sha": "85180b8",
      "message": "[Fizz][Static] when aborting a prerender halt unfinished boundaries instead of erroring (#30732)\n\nWhen we introduced prerendering for flight we modeled an abort of a\r\nflight prerender as having unfinished rows. This is similar to how\r\npostpone was already implemented when you postponed from \"within\" a\r\nprerender using React.unstable_postpone. However when aborting with a\r\npostponed instance every boundary would be eagerly marked for client\r\nrendering which is more akin to prerendering and then resuming with an\r\naborted signal.\r\n\r\nThe insight with the flight work was that it's not so much the postpone\r\nthat describes the intended semantics but the abort combined with a\r\nprerender. So like in flight when you abort a prerender and enableHalt\r\nis enabled boundaries and the shell won't error for any reason. Fizz\r\nwill still call onPostpone and onError according to the abort reason but\r\nthe consuemr of the prerender should expect to resume it before trying\r\nto use it.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-20T13:30:51-07:00",
      "committed_date": "2024-08-20T13:30:51-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStatic-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js",
        "packages/react-dom/src/__tests__/ReactDOMFizzStaticNode-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "4c2dfb3126f87fc270ad8a07d6180744d25cc585",
      "short_sha": "4c2dfb3",
      "message": "Ensure `react-dom/client` is built in Codesandbox preview builds (#30757)",
      "author": {
        "name": "Sebastian \"Sebbie\" Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-08-20T22:12:23+02:00",
      "committed_date": "2024-08-20T22:12:23+02:00",
      "changed_files": [
        "package.json"
      ]
    },
    {
      "sha": "92d26c8e93a88ca41338d3509b4324ad19a89c1e",
      "short_sha": "92d26c8",
      "message": "[Flight] When halting omit any reference rather than refer to a shared missing chunk (#30750)\n\nWhen aborting a prerender we should leave references unfulfilled, not\r\nshare a common unfullfilled reference. functionally today this doesn't\r\nmatter because we don't have resuming but the semantic is that the row\r\nwas not available when the abort happened and in a resume the row should\r\nfill in. But by pointing each task to a common unfulfilled chunk we lose\r\nthe ability for these references to resolves to distinct values on\r\nresume.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-20T10:22:39-07:00",
      "committed_date": "2024-08-20T10:22:39-07:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "2505bf9b3400c6a00381e86d30b495935f5339df",
      "short_sha": "2505bf9",
      "message": "[Fizz] track postpones when aborting boundaries with a postpone (#30751)\n\nWhen aborting with a postpone value boundaries are put into client\r\nrendered mode even during prerenders. This doesn't follow the postpoen\r\nsemantics of the rest of fizz where during a prerender a postpone is\r\ntracked and it will leave holes in tracked postpone state that can be\r\nresumed. This change updates this behavior to match the postpones\r\nsemantics between aborts and imperative postpones.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-20T09:49:41-07:00",
      "committed_date": "2024-08-20T09:49:41-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "5997072f691024e0e5afd78c002c0871b1cbd6a6",
      "short_sha": "5997072",
      "message": "[flow] Remove CI_MAX_WORKERS option\n\nNoticed this from #30707. This was vestigial from from circleci and now\nthat we're on GH actions I think we should be able to remove this option\naltogether.\n\nghstack-source-id: 78e8b0243b1e1484ffaad820987ae3679a7374bf\nPull Request resolved: https://github.com/facebook/react/pull/30753",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-20T11:05:49-04:00",
      "committed_date": "2024-08-20T12:38:27-04:00",
      "changed_files": [
        "scripts/flow/config/flowconfig",
        "scripts/flow/createFlowConfigs.js"
      ]
    },
    {
      "sha": "a960b92cb93e7d006e5e8de850f9b8b51f655c90",
      "short_sha": "a960b92",
      "message": "[Flight] model halting as never delivered chunks (#30740)\n\nstacked on: #30731\r\n\r\nWe've refined the model of halting a prerender. Now when you abort\r\nduring a prerender we simply omit the rows that would complete the\r\nflight render. This is analagous to prerendering in Fizz where you must\r\nresume the prerender to actually result in errors propagating in the\r\npostponed holes. We don't have a resume yet for flight and it's not\r\nentirely clear how that will work however the key insight here is that\r\ndeciding whether the never resolving rows are an error or not should\r\nreally be done on the consuming side rather than in the producer.\r\n\r\nThis PR also reintroduces the logs for the abort error/postpone when\r\nprerendering which will give you some indication that something wasn't\r\nfinished when the prerender was aborted.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-19T19:34:20-07:00",
      "committed_date": "2024-08-19T19:34:20-07:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server-dom-esm/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "0fa9476b9b9b7e284fb6ebe7e1c46a6a6ae85f27",
      "short_sha": "0fa9476",
      "message": "[Flight] Revert Emit Infinite Promise as a Halted Row (#30746) (#30748)\n\nThis reverts commit 52c9c43735d0d5ebb9cd5e2a47c174cb5a5a1713.\r\n\r\nJust kidding. We realized we probably don't want to do the halted row\r\nthing after all.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-19T16:34:38-04:00",
      "committed_date": "2024-08-19T16:34:38-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "52c9c43735d0d5ebb9cd5e2a47c174cb5a5a1713",
      "short_sha": "52c9c43",
      "message": "[Flight] Emit Infinite Promise as a Halted Row (#30746)\n\nStacked on #30731.\r\n\r\nWhen logging a Promise we emit it as an infinite promise instead of\r\nblocking the replay on it.\r\n\r\nThis models that as a halted row instead. No need for this special case.\r\n\r\nI unflag the receiving side since now it's used to replace a feature\r\nthat's already unflagged so it's used.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-19T15:02:41-04:00",
      "committed_date": "2024-08-19T15:02:41-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "591adfa40d900e9af6d9250f1ae58d72366e7957",
      "short_sha": "591adfa",
      "message": "[Flight] Rename Chunk constructor to ReactPromise (#30747)\n\nWhen printing these in DevTools they show up as the name of the\r\nconstructor so then you pass a Promise to the client it logs as \"Chunk\"\r\nwhich is confusing.\r\n\r\nIdeally we'd probably just name this Promise but 1) there's a slight\r\ndifference in the .then method atm 2) it's a bit tricky to name a\r\nvariable and get it from the global in the same scope. Closure compiler\r\ndoesn't let us just name a function because it removes it and just uses\r\nthe variable name.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-19T14:51:22-04:00",
      "committed_date": "2024-08-19T14:51:22-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js"
      ]
    },
    {
      "sha": "9d082b550086e6be5f54872d518efa14303491db",
      "short_sha": "9d082b5",
      "message": "[Flight] model halted references explicitly (#30731)\n\nusing infinitely suspending promises isn't right because this will parse\r\nas a promise which is only appropriate if the value we're halting at is\r\na promise. Instead we need to have a special marker type that says this\r\nreference will never resolve. Additionally flight client needs to not\r\nerror any halted references when the stream closes because they will\r\notherwise appear as an error\r\n\r\naddresses:\r\nhttps://github.com/facebook/react/pull/30705#discussion_r1720479974",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-19T11:24:41-07:00",
      "committed_date": "2024-08-19T11:24:41-07:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "d2413bf377e7f73661b0700aeb95d07fb2911efc",
      "short_sha": "d2413bf",
      "message": "[compiler] Validate against JSX in try statements\n\nPer comments on the new validation pass, this disallows creating JSX (expression/fragment) within a try statement. Developers sometimes use this pattern thinking that they can catch errors during the rendering of the element, without realizing that rendering is lazy. The validation allows us to teach developers about the error boundary pattern.\n\nghstack-source-id: 0bc722aeaed426ddd40e075c008f0ff2576e0c33\nPull Request resolved: https://github.com/facebook/react/pull/30725",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-16T17:05:29-07:00",
      "committed_date": "2024-08-19T11:24:23-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoJSXInTryStatement.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-in-catch-in-outer-try-with-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-in-catch-in-outer-try-with-catch.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-in-try-with-catch.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-jsx-in-try-with-catch.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-invalid-jsx-in-catch-in-outer-try-with-finally.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-invalid-jsx-in-catch-in-outer-try-with-finally.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-invalid-jsx-in-try-with-finally.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-invalid-jsx-in-try-with-finally.js"
      ]
    },
    {
      "sha": "6ebfd5b0829c3e7a977ef4d9a0bd96436c681251",
      "short_sha": "6ebfd5b",
      "message": "[Flight] Source Map Server Actions to their Server Location (#30741)\n\nThis uses a similar technique to what we use to generate fake stack\r\nframes for server components. This generates an eval:ed wrapper function\r\naround the Server Reference proxy we create on the client. This wrapper\r\nfunction gets the original `name` of the action on the server and I also\r\nadd a source map if `findSourceMapURL` is defined that points back to\r\nthe source of the server function.\r\n\r\nFor `\"use server\"` on the server, there's no new API. It just uses the\r\ncallsite of `registerServerReference()` on the Server. We can infer the\r\nfunction name from the actual function on the server and we already have\r\nthe `findSourceMapURL` on the client receiving it.\r\n\r\nFor `\"use server\"` imported from the client, there's two new options\r\nadded to `createServerReference()` (in addition to the optional\r\n[`encodeFormAction`](#27563)). These are only used in DEV mode. The\r\n[`findSourceMapURL`](#29708) option is the same one added in #29708. We\r\nneed to pass this these references aren't created in the context of any\r\nspecific request but globally. The other weird thing about this case is\r\nthat this is actually a case where the compiled environment is the\r\nclient so any source maps are the same as for the client layer, so the\r\nenvironment name here is just `\"Client\"`.\r\n\r\n```diff\r\n  createServerReference(\r\n    id: string,\r\n    callServer: CallServerCallback,\r\n    encodeFormAction?: EncodeFormActionCallback,\r\n+   findSourceMapURL?: FindSourceMapURLCallback, // DEV-only\r\n+   functionName?: string, // DEV-only\r\n  )\r\n```\r\n\r\nThe key is that we use the location of the\r\n`registerServerReference()`/`createServerReference()` call as the\r\nlocation of the function. A compiler can either emit those at the same\r\nlocations as the original functions or use source maps to have those\r\nsegments refer to the original location of the function (or in the case\r\nof a re-export the original location of the re-export is also a fine\r\napproximate). The compiled output must call these directly without a\r\nwrapper function because the wrapper adds a stack frame. I decided\r\nagainst complicated and fragile dev-only options to skip n number of\r\nframes that would just end up in prod code. The implementation just\r\nskips one frame - our own. Otherwise it'll just point all source mapping\r\nto the wrapper.\r\n\r\nWe don't have a `\"use server\"` imported from the client implementation\r\nin the reference implementation/fixture so it's a bit tricky to test\r\nthat. In the case of CJS on the server, we just use a runtime instead of\r\ncompiler so it's tricky to source map those appropriately. We can\r\nimplement it for ESM on the server which is the main thing we're testing\r\nin the fixture. It's easier in a real implementation where all the\r\ncompilation is just one pass. It's a little tricky since we have to\r\nparse and append to other source maps but I'd like to do that as a\r\nfollow up. Or maybe that's just an exercise for the reader.\r\n\r\nYou can right click an action and click \"Go to Definition\".\r\n\r\n<img width=\"1323\" alt=\"Screenshot 2024-08-17 at 6 04 27 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/94d379b3-8871-4671-a20d-cbf9cfbc2c6e\">\r\n\r\nFor now they simply don't point to the right place but you can still\r\njump to the right file in the fixture:\r\n\r\n<img width=\"1512\" alt=\"Screenshot 2024-08-17 at 5 58 40 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/1ea5d665-e25a-44ca-9515-481dd3c5c2fe\">\r\n\r\nIn Firefox/Safari given that the location doesn't exist in the source\r\nmap yet, the browser refuses to open the file. Where as Chrome does\r\nnearest (last) line.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-18T12:31:45-04:00",
      "committed_date": "2024-08-18T12:31:45-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/ReactFlightReplyClient.js",
        "packages/react-server-dom-esm/src/ReactFlightESMReferences.js",
        "packages/react-server-dom-esm/src/server/ReactFlightServerConfigESMBundler.js",
        "packages/react-server-dom-turbopack/src/ReactFlightTurbopackReferences.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightServerConfigTurbopackBundler.js",
        "packages/react-server-dom-webpack/src/ReactFlightWebpackReferences.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightServerConfigWebpackBundler.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/ReactFlightServerConfigBundlerCustom.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.markup.js"
      ]
    },
    {
      "sha": "7954db9398b9afa962167577a6c6940be3856c39",
      "short_sha": "7954db9",
      "message": "[Fizz] handle throwing after abort during render (#30730)\n\nIt is possible to throw after aborting during a render and we were not\r\nproperly tracking this. We use an AbortSigil to mark whether a rendering\r\ntask needs to abort but the throw interrupts that and we end up handling\r\nan error on the error pathway instead.\r\n\r\nThis change reworks the abort-while-rendering support to be robust to\r\nthrows after calling abort",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-16T18:29:18-07:00",
      "committed_date": "2024-08-16T18:29:18-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "177b2419b2d8a3d14c3f3304bb7e300985d6f377",
      "short_sha": "177b241",
      "message": "[compiler] Validate environment config while parsing plugin opts\n\nAddresses a todo from a while back. We now validate environment options when parsing the plugin options, which means we can stop re-parsing/validating in later phases.\n\nghstack-source-id: b19806e843e1254716705b33dcf86afb7223f6c7\nPull Request resolved: https://github.com/facebook/react/pull/30726",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-16T16:45:03-07:00",
      "committed_date": "2024-08-16T17:05:03-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts"
      ]
    },
    {
      "sha": "13ddf1084b4304a60059e3b96fc3c039d23e9432",
      "short_sha": "13ddf10",
      "message": "[DevTools] Find owners from the parent path that matches the Fiber or ReactComponentInfo (#30717)\n\nThis enables finding Server Components on the owner path. Server\r\nComponents aren't stateful so there's not actually one specific owner\r\nthat it necessarily matches. So it can't be a global look up. E.g. the\r\nsame Server Component can be rendered in two places or even nested\r\ninside each other.\r\n\r\nTherefore we need to find an appropriate instance using a heuristic. We\r\ncan do that by traversing the parent path since the owner is likely also\r\na parent. Not always but almost always.\r\n\r\nTo simplify things we can also do the same for Fibers. That brings us\r\none step closer to being able to get rid of the global\r\nfiberToFiberInstance map since we can just use the shadow tree to find\r\nthis information.\r\n\r\nThis does mean that we can't find owners that aren't parents which is\r\nusually ok. However, there is a test case that's interesting where you\r\nhave a React ART tree inside a DOM tree. In that case the owners\r\nactually span multiple renderers and roots so the owner is not on the\r\nparent stack. Usually this is fine since you'd just care about the\r\nowners within React ART but ideally we'd support this. However, I think\r\nthat really the fix to this is that the React ART tree itself should\r\nactually show up inside the DOM tree in DevTools and in the virtual\r\nshadow tree because that's conceptually where it belongs. That would\r\nthen solve this particular issue. We'd just need some way to associate\r\nthe root with a DOM parent when it gets mounted.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-16T19:52:11-04:00",
      "committed_date": "2024-08-16T19:52:11-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/inspectedElement-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "a58276cbc3a70ba99572eeb9c2f7b4a54ca44b1e",
      "short_sha": "a58276c",
      "message": "[playground] Allow (Arrow)FunctionExpressions\n\nThis was a pet peeve where our playground could only compile top level\nFunctionDeclarations. Just synthesize a fake identifier if it doesn't\nhave one.\n\nghstack-source-id: 882483c79ceebf382b69e37aed1f293efff9c5a7\nPull Request resolved: https://github.com/facebook/react/pull/30729",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-16T17:39:51-04:00",
      "committed_date": "2024-08-16T18:12:05-04:00",
      "changed_files": [
        "compiler/apps/playground/components/Editor/EditorImpl.tsx"
      ]
    },
    {
      "sha": "34edf3b68471e87d4a92f98a10f7c6c727c948f8",
      "short_sha": "34edf3b",
      "message": "[compiler] Surface unused opt out directives in eslint\n\nThis PR updates the eslint plugin to report unused opt out directives.\nOne of the downsides of the opt out directive is that it opts the\ncomponent/hook out of compilation forever, even if the underlying issue\nwas fixed in product code or fixed in the compiler.\n\nghstack-source-id: 81deb5c11b7c57f07f6ab13266066cd73b2f3729\nPull Request resolved: https://github.com/facebook/react/pull/30721",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-16T17:39:51-04:00",
      "committed_date": "2024-08-16T18:12:05-04:00",
      "changed_files": [
        "compiler/packages/eslint-plugin-react-compiler/__tests__/ReactCompilerRule-test.ts",
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts"
      ]
    },
    {
      "sha": "e9a869fbb59a634fb9a39c9480ffa34970f35858",
      "short_sha": "e9a869f",
      "message": "[compiler] Run compiler pipeline on 'use no forget'\n\nThis PR updates the babel plugin to continue the compilation pipeline as\nnormal on components/hooks that have been opted out using a directive.\nInstead, we no longer emit the compiled function when the directive is\npresent.\n\nPreviously, we would skip over the entire pipeline. By continuing to\nenter the pipeline, we'll be able to detect if there are unused\ndirectives.\n\nThe end result is:\n\n- (no change) 'use forget' will always opt into compilation\n- (new) 'use no forget' will opt out of compilation but continue to log\n  errors without throwing them. This means that a Program containing\nmultiple functions (some of which are opted out) will continue to\ncompile correctly\n\nghstack-source-id: 5bd85df2f81350cb2c1998a8761b8ed3fec32a40\nPull Request resolved: https://github.com/facebook/react/pull/30720",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-16T17:39:50-04:00",
      "committed_date": "2024-08-16T18:12:04-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-no-forget-with-no-errors.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/use-no-forget-with-no-errors.js",
        "compiler/packages/babel-plugin-react-compiler/src/index.ts"
      ]
    },
    {
      "sha": "7b41cdc093c7a28a089e2c402cbe98cac68de509",
      "short_sha": "7b41cdc",
      "message": "[Flight][Static] Implement halting a prerender behind enableHalt (#30705)\n\nenableHalt turns on a mode for flight prerenders where aborts are\r\ntreated like infinitely stalled outcomes while still completing the\r\nprerender. For regular tasks we simply serialize the slot as a promise\r\nthat never settles. For ReadableStream, Blob, and Async Iterators we\r\njust never advance the serialization so they remain unfinished when\r\nconsumed on the client.\r\n\r\nWhen enableHalt is turned on aborts of prerenders will halt rather than\r\nerror. The abort reason is forwarded to the upstream produces of the\r\naforementioned async iterators, blobs, and ReadableStreams. In the\r\nfuture if we expose a signal that you can consume from within a render\r\nto cancel additional work the abort reason will also be forwarded there",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-16T14:21:57-07:00",
      "committed_date": "2024-08-16T14:21:57-07:00",
      "changed_files": [
        "packages/react-server-dom-esm/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "1eaccd8285f0bd40407705a9356391a171adf3b1",
      "short_sha": "1eaccd8",
      "message": "[Fax] Make `react-markup` publishable via scripts (#30722)",
      "author": {
        "name": "Sebastian Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-08-16T21:08:20+02:00",
      "committed_date": "2024-08-16T21:08:20+02:00",
      "changed_files": [
        "ReactVersions.js"
      ]
    },
    {
      "sha": "5edbe29dbe945d821021a1152b267f5a86efc55b",
      "short_sha": "5edbe29",
      "message": "[compiler] Make ref enforcement on by default\n\nSummary:\nThe change earlier in this stack makes it less safe to have ref enforcement disabled. This diff enables it by default.\n\nghstack-source-id: d3ab5f1b28b7aed0f0d6d69547bb638a1e326b66\nPull Request resolved: https://github.com/facebook/react/pull/30716",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-16T13:27:13-04:00",
      "committed_date": "2024-08-16T13:27:14-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capture-ref-for-later-mutation.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.repro-ref-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-ref-mutable-range.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-set-ref-nested-property-dont-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useCallback-set-ref-nested-property-dont-preserve-memoization.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/error.capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/capture-ref-for-later-mutation.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-mutable-ref-not-preserved.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/maybe-mutable-ref-not-preserved.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-with-refs.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-with-refs.flow.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/maybe-mutable-ref-not-preserved.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-with-refs.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-ref-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useCallback-set-ref-nested-property-dont-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/parseConfigPragma-test.ts",
        "compiler/packages/eslint-plugin-react-compiler/__tests__/ReactCompilerRule-test.ts",
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts"
      ]
    },
    {
      "sha": "21a95239e15cf62e4bf3922af998383b844df2e3",
      "short_sha": "21a9523",
      "message": "[compiler] Allow functions containing refs to be returned\n\nSummary:\nWe previously were excessively strict about preventing functions that access refs from being returned--doing so is potentially valid for hooks, because the return value may only be used in an event or effect.\n\nghstack-source-id: cfa8bb1b54e8eb365f2de50d051bd09e09162d7b\nPull Request resolved: https://github.com/facebook/react/pull/30724",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-16T13:27:13-04:00",
      "committed_date": "2024-08-16T13:27:14-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.return-ref-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/return-ref-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.return-ref-callback.js"
      ]
    },
    {
      "sha": "1016174af520fc89bafab7189405fce8ff3a9bb5",
      "short_sha": "1016174",
      "message": "[compiler] Reposition ref-in-render errors to the read location of .current\n\nSummary:\nSince we want to make ref-in-render errors enabled by default, we should position those errors at the location of the read. Not only will this be a better experience, but it also aligns the behavior of Forget and Flow.\n\nThis PR also cleans up the resulting error messages to not emit implementation details about place values.\n\nghstack-source-id: 1d1131706867a6fc88efddd631c4d16d2181e592\nPull Request resolved: https://github.com/facebook/react/pull/30723",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-16T13:27:13-04:00",
      "committed_date": "2024-08-16T13:27:13-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-access-ref-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-disallow-mutating-refs-in-render-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-destructure.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-read-ref-prop-in-render-property-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ref-value-as-props.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-set-and-read-ref-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-set-and-read-ref-nested-property-during-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.return-ref-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-set-ref-nested-property-ref-modified-later-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-accesses-ref-mutated-later-via-function-preserve-memoization.expect.md"
      ]
    },
    {
      "sha": "8a531601115927400aa04d26a5f1800d159e1e7e",
      "short_sha": "8a53160",
      "message": "[compiler] Don't error on ref-in-render on StartMemoize\n\nTest Plan:\nFixes the previous issue: ref enforcement ignores memoization marker instructions\n\nghstack-source-id: f35d6a611c5e740e9ea354ec80c3d7cdb3c0d658\nPull Request resolved: https://github.com/facebook/react/pull/30715",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-16T13:27:13-04:00",
      "committed_date": "2024-08-16T13:27:13-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-set-ref-nested-property-ref-modified-later-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-accesses-ref-mutated-later-via-function-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-ref-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useCallback-ref-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-ref-in-render.js"
      ]
    },
    {
      "sha": "7468ac530e73992f28169ac69e18395a75edfc47",
      "short_sha": "7468ac5",
      "message": "[compiler] Fixture to show ref-in-render enforcement issue with useCallback\n\nTest Plan:\nDocuments that useCallback calls interfere with it being ok for refs to escape as part of functions into jsx\n\nghstack-source-id: a5df427981ca32406fb2325e583b64bbe26b1cdd\nPull Request resolved: https://github.com/facebook/react/pull/30714",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-16T13:27:13-04:00",
      "committed_date": "2024-08-16T13:27:13-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.return-ref-callback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.return-ref-callback.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-ref-in-render.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.useCallback-ref-in-render.js"
      ]
    },
    {
      "sha": "5030e08575c295ef352c5ae928e2366cc4765d32",
      "short_sha": "5030e08",
      "message": "[compiler] Exclude refs and ref values from having mutable ranges\n\nSummary:\nRefs, as stable values that the rules of react around mutability do not apply to, currently are treated as having mutable ranges, and through aliasing, this can extend the mutable range for other values and disrupt good memoization for those values. This PR excludes refs and their .current values from having mutable ranges.\n\nNote that this is unsafe if ref access is allowed in render: if a mutable value is assigned to ref.current and then ref.current is mutated later, we won't realize that the original mutable value's range extends.\n\nghstack-source-id: e8f36ac25e2c9aadb0bf13bd8142e4593ee9f984\nPull Request resolved: https://github.com/facebook/react/pull/30713",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-16T13:27:13-04:00",
      "committed_date": "2024-08-16T13:27:13-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutableLifetimes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutableRangesForAlias.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoRefAccesInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-set-ref-nested-property-ref-modified-later-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-set-ref-nested-property-ref-modified-later-preserve-memoization.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-accesses-ref-mutated-later-via-function-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-accesses-ref-mutated-later-via-function-preserve-memoization.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-mutable-ref-not-preserved.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/maybe-mutable-ref-not-preserved.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-mutable-ref-not-preserved.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-ref-mutable-range.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useCallback-set-ref-nested-property-dont-preserve-memoization.expect.md"
      ]
    },
    {
      "sha": "85fb95cdffdd95f2f908ee71974cae06b1c866e1",
      "short_sha": "85fb95c",
      "message": "[flow] Eliminate a few React.Element type that will be synced to react-native (#30719)\n\n## Summary\r\n\r\nFlow will eventually remove the specific `React.Element` type. For most\r\nof the code, it can be replaced with `React.MixedElement` or\r\n`React.Node`.\r\n\r\nWhen specific react elements are required, it needs to be replaced with\r\neither `React$Element` which will trigger a `internal-type` lint error\r\nthat can be disabled project-wide, or use\r\n`ExactReactElement_DEPRECATED`.\r\n\r\nFortunately in this case, this one can be replaced with just\r\n`React.MixedElement`.\r\n\r\n## How did you test this change?\r\n\r\n`flow`",
      "author": {
        "name": "Sam Zhou",
        "email": "sam@developersam.com"
      },
      "authored_date": "2024-08-16T12:53:52-04:00",
      "committed_date": "2024-08-16T12:53:52-04:00",
      "changed_files": [
        "packages/react-native-renderer/src/ReactNativeRenderer.js",
        "packages/react-native-renderer/src/ReactNativeTypes.js",
        "packages/react/index.js"
      ]
    },
    {
      "sha": "fa6eab58541330349480690ef4e211520cc08d94",
      "short_sha": "fa6eab5",
      "message": "[Flight] Implement prerender (#30686)\n\nPrerendering in flight is similar to prerendering in Fizz. Instead of\r\nreceiving a result (the stream) immediately a promise is returned which\r\nresolves to the stream when the prerender is complete. The promise will\r\nreject if the flight render fatally errors otherwise it will resolve\r\nwhen the render is completed or is aborted.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-15T14:28:28-07:00",
      "committed_date": "2024-08-15T14:28:28-07:00",
      "changed_files": [
        "fixtures/flight/__tests__/__e2e__/smoke.test.js",
        "fixtures/flight/server/global.js",
        "fixtures/flight/server/region.js",
        "fixtures/flight/src/App.js",
        "packages/react-server-dom-esm/npm/static.js",
        "packages/react-server-dom-esm/npm/static.node.js",
        "packages/react-server-dom-esm/package.json",
        "packages/react-server-dom-esm/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-esm/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-esm/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-esm/static.js",
        "packages/react-server-dom-esm/static.node.js",
        "packages/react-server-dom-turbopack/npm/static.browser.js",
        "packages/react-server-dom-turbopack/npm/static.edge.js",
        "packages/react-server-dom-turbopack/npm/static.js",
        "packages/react-server-dom-turbopack/npm/static.node.js",
        "packages/react-server-dom-turbopack/npm/static.node.unbundled.js",
        "packages/react-server-dom-turbopack/package.json",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-turbopack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.browser.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.browser.stable.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.edge.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.edge.stable.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.unbundled.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.unbundled.stable.js",
        "packages/react-server-dom-turbopack/static.browser.js",
        "packages/react-server-dom-turbopack/static.edge.js",
        "packages/react-server-dom-turbopack/static.js",
        "packages/react-server-dom-turbopack/static.node.js",
        "packages/react-server-dom-turbopack/static.node.unbundled.js",
        "packages/react-server-dom-webpack/npm/static.browser.js",
        "packages/react-server-dom-webpack/npm/static.edge.js",
        "packages/react-server-dom-webpack/npm/static.js",
        "packages/react-server-dom-webpack/npm/static.node.js",
        "packages/react-server-dom-webpack/npm/static.node.unbundled.js",
        "packages/react-server-dom-webpack/package.json",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-webpack/src/server/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.browser.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.browser.stable.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.edge.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.edge.stable.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.stable.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.unbundled.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.unbundled.stable.js",
        "packages/react-server-dom-webpack/static.browser.js",
        "packages/react-server-dom-webpack/static.edge.js",
        "packages/react-server-dom-webpack/static.js",
        "packages/react-server-dom-webpack/static.node.js",
        "packages/react-server-dom-webpack/static.node.unbundled.js",
        "packages/react-server/src/ReactFlightServer.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "50d2197dd580afc0f87f0acb79c5528bc0f5199c",
      "short_sha": "50d2197",
      "message": "[compiler] Support for member expression inc/decrement\n\nTest Plan:\nBuilds support for a.x++ and friends. Similar to a.x += y, emits it as an assignment expression.\n\nghstack-source-id: 8f3979913aad561cdba70464c3cc5f0ee95887b5\nPull Request resolved: https://github.com/facebook/react/pull/30697",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-15T15:00:36-04:00",
      "committed_date": "2024-08-15T15:00:36-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-kitchensink.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/member-inc.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/member-inc.js"
      ]
    },
    {
      "sha": "bb6acc20afb4be95e2d22661ae7dc153affd0ae4",
      "short_sha": "bb6acc2",
      "message": "[compiler] Allow hoisting of destructured variable declarations\n\nSummary:\nIt doesn't seem as though this invariant was necessary\n\nghstack-source-id: b27e76525911d5cfc1991b5cfdb7b2074c039e21\nPull Request resolved: https://github.com/facebook/react/pull/30699",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-15T14:27:37-04:00",
      "committed_date": "2024-08-15T14:27:38-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoist-destruct.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoist-destruct.js"
      ]
    },
    {
      "sha": "19bd26beb689e554fceb0b929dc5199be8cba594",
      "short_sha": "19bd26b",
      "message": "[Flight/DevTools] Pass the Server Component's \"key\" as Part of the ReactComponentInfo (#30703)\n\nSupports showing the key in DevTools on the Server Component that the\r\nkey was applied to. We can also use this to reconcile to preserve\r\ninstance equality when they're reordered.\r\n\r\nOne thing that's a bit weird about this is that if you provide an\r\nexplicit key on a Server Component that alone doesn't have any\r\nsemantics. It's because we pass the key down and let the nearest child\r\ninherit the key or get prefixed by the key.\r\n\r\nSo you might see the same key as a prefix on the child of the Server\r\nComponent too which might be a bit confusing. We could remove the prefix\r\nfrom children but that might also be a bit confusing if they collide.\r\n\r\nThe div in this case doesn't have a key explicitly specified. It gets it\r\nfrom the Server Component parent.\r\n\r\n<img width=\"1107\" alt=\"Screenshot 2024-08-14 at 10 06 36 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/cfc517cc-e737-44c3-a1be-050049267ee2\">\r\n\r\nOverall keys get a bit confusing when you apply filter. Especially since\r\nit's so common to actually apply the key on a Host Instance. So you\r\noften don't see the key.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-15T11:04:53-04:00",
      "committed_date": "2024-08-15T11:04:53-04:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-devtools-shared/src/__tests__/store-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/shared/ReactTypes.js"
      ]
    },
    {
      "sha": "c39da3e4de0ad0db56ad99119efe3efc6c72abf1",
      "short_sha": "c39da3e",
      "message": "[compiler] Off-by-default validation against setState directly in passive effect\n\nPer discussion today, adds validation against calling setState \"during\" passive effects. Basically, it's fine to _schedule_ setState to be called (via a timeout, listener, etc) but generally not recommended to call setState during the effect since that will trigger a cascading render.\n\nThis validation is off by default, i'm putting this up for discussion and to experiment with it internally.\n\nghstack-source-id: 5f385ddab59561ec3939ae5ece265dfee4f2cb56\nPull Request resolved: https://github.com/facebook/react/pull/30685",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-13T22:38:40-04:00",
      "committed_date": "2024-08-15T10:38:23-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoSetStateInPassiveEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useEffect-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useEffect-transitive.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useEffect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useEffect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/valid-setState-in-useEffect-listener-transitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/valid-setState-in-useEffect-listener-transitive.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/valid-setState-in-useEffect-listener.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/valid-setState-in-useEffect-listener.js"
      ]
    },
    {
      "sha": "cea13feb3449317d8570ba17603747497037d264",
      "short_sha": "cea13fe",
      "message": "Publish `experimental_renderToHTML` (#30690)",
      "author": {
        "name": "Sebastian Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-08-15T08:50:56+02:00",
      "committed_date": "2024-08-15T08:50:56+02:00",
      "changed_files": [
        "packages/react-markup/README.md",
        "packages/react-markup/package.json",
        "packages/react-markup/src/ReactMarkupClient.js",
        "packages/react-markup/src/ReactMarkupServer.js",
        "packages/react-markup/src/__tests__/ReactMarkupClient-test.js",
        "packages/react-markup/src/__tests__/ReactMarkupServer-test.js"
      ]
    },
    {
      "sha": "8b08ee08a1f73031b2119286bd7d806eabb1708b",
      "short_sha": "8b08ee0",
      "message": "[Flight] reorganize code for forked entrypoints (#30702)\n\nThis commit updates the file locations and bulid configurations for\r\nflight in preparation for new static entrypoints. This follows a\r\nstructure similar to Fizz which has a unified build but exports methods\r\nfrom different top level entrypoints. This PR doesn't actually add the\r\nnew top level entrypoints however, that will arrive in a later update.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-14T18:10:40-07:00",
      "committed_date": "2024-08-14T18:10:40-07:00",
      "changed_files": [
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-browser-esm.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-browser-turbopack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-browser.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-edge-turbopack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-edge-webpack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-esm.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-turbopack-bundled.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-turbopack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webpack.js",
        "packages/react-client/src/forks/ReactFlightClientConfig.dom-node.js",
        "packages/react-server-dom-esm/client.browser.js",
        "packages/react-server-dom-esm/client.node.js",
        "packages/react-server-dom-esm/npm/server.node.js",
        "packages/react-server-dom-esm/server.node.js",
        "packages/react-server-dom-esm/src/ReactFlightClientConfigBundlerESM.js",
        "packages/react-server-dom-esm/src/ReactFlightClientConfigTargetESMBrowser.js",
        "packages/react-server-dom-esm/src/ReactFlightClientConfigTargetESMServer.js",
        "packages/react-server-dom-esm/src/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-esm/src/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-esm/src/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-esm/src/ReactFlightServerConfigESMBundler.js",
        "packages/react-server-dom-esm/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-turbopack/client.browser.js",
        "packages/react-server-dom-turbopack/client.edge.js",
        "packages/react-server-dom-turbopack/client.node.js",
        "packages/react-server-dom-turbopack/client.node.unbundled.js",
        "packages/react-server-dom-turbopack/npm/server.browser.js",
        "packages/react-server-dom-turbopack/npm/server.edge.js",
        "packages/react-server-dom-turbopack/npm/server.node.js",
        "packages/react-server-dom-turbopack/npm/server.node.unbundled.js",
        "packages/react-server-dom-turbopack/server.browser.js",
        "packages/react-server-dom-turbopack/server.edge.js",
        "packages/react-server-dom-turbopack/server.node.js",
        "packages/react-server-dom-turbopack/server.node.unbundled.js",
        "packages/react-server-dom-turbopack/src/ReactFlightClientConfigBundlerNode.js",
        "packages/react-server-dom-turbopack/src/ReactFlightClientConfigBundlerTurbopack.js",
        "packages/react-server-dom-turbopack/src/ReactFlightClientConfigBundlerTurbopackBrowser.js",
        "packages/react-server-dom-turbopack/src/ReactFlightClientConfigBundlerTurbopackServer.js",
        "packages/react-server-dom-turbopack/src/ReactFlightClientConfigTargetTurbopackBrowser.js",
        "packages/react-server-dom-turbopack/src/ReactFlightClientConfigTargetTurbopackServer.js",
        "packages/react-server-dom-turbopack/src/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-turbopack/src/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-turbopack/src/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-turbopack/src/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-turbopack/src/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-turbopack/src/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-turbopack/src/ReactFlightServerConfigTurbopackBundler.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.browser.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.edge.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-turbopack/src/server/react-flight-dom-server.node.unbundled.js",
        "packages/react-server-dom-webpack/client.browser.js",
        "packages/react-server-dom-webpack/client.edge.js",
        "packages/react-server-dom-webpack/client.node.js",
        "packages/react-server-dom-webpack/client.node.unbundled.js",
        "packages/react-server-dom-webpack/npm/server.browser.js",
        "packages/react-server-dom-webpack/npm/server.edge.js",
        "packages/react-server-dom-webpack/npm/server.node.js",
        "packages/react-server-dom-webpack/npm/server.node.unbundled.js",
        "packages/react-server-dom-webpack/server.browser.js",
        "packages/react-server-dom-webpack/server.edge.js",
        "packages/react-server-dom-webpack/server.node.js",
        "packages/react-server-dom-webpack/server.node.unbundled.js",
        "packages/react-server-dom-webpack/src/ReactFlightClientConfigBundlerNode.js",
        "packages/react-server-dom-webpack/src/ReactFlightClientConfigBundlerWebpack.js",
        "packages/react-server-dom-webpack/src/ReactFlightClientConfigBundlerWebpackBrowser.js",
        "packages/react-server-dom-webpack/src/ReactFlightClientConfigBundlerWebpackServer.js",
        "packages/react-server-dom-webpack/src/ReactFlightClientConfigTargetWebpackBrowser.js",
        "packages/react-server-dom-webpack/src/ReactFlightClientConfigTargetWebpackServer.js",
        "packages/react-server-dom-webpack/src/ReactFlightDOMClientBrowser.js",
        "packages/react-server-dom-webpack/src/ReactFlightDOMClientEdge.js",
        "packages/react-server-dom-webpack/src/ReactFlightDOMClientNode.js",
        "packages/react-server-dom-webpack/src/ReactFlightDOMServerBrowser.js",
        "packages/react-server-dom-webpack/src/ReactFlightDOMServerEdge.js",
        "packages/react-server-dom-webpack/src/ReactFlightDOMServerNode.js",
        "packages/react-server-dom-webpack/src/ReactFlightServerConfigWebpackBundler.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.browser.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.edge.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.js",
        "packages/react-server-dom-webpack/src/server/react-flight-dom-server.node.unbundled.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-browser-esm.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-browser-turbopack.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-browser.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-edge-turbopack.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-edge.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node-esm.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node-turbopack.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.dom-node.js",
        "scripts/rollup/bundles.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "7e8a06cf4c628be45171da52c1a8e97f9869b7ee",
      "short_sha": "7e8a06c",
      "message": "[Fresh] Always reset useMemoCache on Fast Refresh (#30700)\n\nStacked on https://github.com/facebook/react/pull/30662.\r\n\r\nAlternative to https://github.com/facebook/react/pull/30663 and\r\nhttps://github.com/facebook/react/pull/30677.\r\n\r\nDuring a Fast Refresh, we always want to evict the memo cache, same as\r\nwe do with normal `useMemo`. The mechanism used by `useMemo` and other\r\nHooks is this module-level variable:\r\n\r\n\r\nhttps://github.com/facebook/react/blob/fca5d655d78917400a2722287351c20938166669/packages/react-reconciler/src/ReactFiberHooks.js#L304-L307\r\n\r\nwhich has DEV-only behavior as if the dependencies are always different:\r\n\r\n\r\nhttps://github.com/facebook/react/blob/fca5d655d78917400a2722287351c20938166669/packages/react-reconciler/src/ReactFiberHooks.js#L451-L460\r\n\r\nThe `useMemoCache` Hook doesn't use a dependency array but conceptually\r\nI think we want the same behavior.\r\n\r\n## Test Plan\r\n\r\nThe test passes.\r\n\r\n---------\r\n\r\nCo-authored-by: Lauren Tan <poteto@users.noreply.github.com>",
      "author": {
        "name": "dan",
        "email": "dan.abramov@me.com"
      },
      "authored_date": "2024-08-15T01:02:29+01:00",
      "committed_date": "2024-08-15T01:02:29+01:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-refresh/src/__tests__/ReactFreshIntegration-test.js"
      ]
    },
    {
      "sha": "d9eb1540e242a8679659f58719546320a2a28b2b",
      "short_sha": "d9eb154",
      "message": "[fresh] Add failing test for useMemoCache reset case\n\nDuring local development it's common to add or remove code which may\nchange the cache size between renders. Add a failing test to show that\ncurrently (without the compiled fast refresh check) this issues a\nwarning and reuses the cache which may have stale values.\n\nghstack-source-id: efdcb017ba3bdadd88b1f8bb5523b1a9f6217eb5\nPull Request resolved: https://github.com/facebook/react/pull/30662",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-14T14:45:20-04:00",
      "committed_date": "2024-08-14T17:45:47-04:00",
      "changed_files": [
        "packages/react-refresh/src/__tests__/ReactFreshIntegration-test.js"
      ]
    },
    {
      "sha": "fca5d655d78917400a2722287351c20938166669",
      "short_sha": "fca5d65",
      "message": "[DevTools] Hide props section if it is null (#30696)\n\nWe use null as a marker that we don't know what the props are as opposed\r\nto knowing that they're empty.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-14T15:48:05-04:00",
      "committed_date": "2024-08-14T15:48:05-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementPropsTree.js"
      ]
    },
    {
      "sha": "dd8e0ba857fcd546d677c7283d5f35a663bc8d02",
      "short_sha": "dd8e0ba",
      "message": "[compiler] Support for useTransition\n\nSummary:\nUseTransition is a builtin hook that returns a stable value, like useState. This PR represents that in Forget, and marks the startTransition function as stable.\n\nghstack-source-id: 0e76a64f2d0c86a4eb55c620922b4698250bb5c3\nPull Request resolved: https://github.com/facebook/react/pull/30681",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-14T13:54:38-04:00",
      "committed_date": "2024-08-14T13:54:39-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/preserve-use-memo-transition.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/preserve-use-memo-transition.ts"
      ]
    },
    {
      "sha": "179197a22a0c00bc30c1a44275e7b4b1b2cec019",
      "short_sha": "179197a",
      "message": "[compiler] Allow different dependencies from explicit memoization when dependency is a ref\n\nSummary:\nIn theory, as I understand it, the result of a useRef will never change between renders, because we'll always provide the same ref value consistently. That means that memoization that depends on a ref value will never re-compute, so I think we could not infer it as a dependency in Forget. This diff, however, doesn't do that: it instead allows the validatePreserveExistingMemoizationGuarantees analysis to admit mismatches between explicit dependencies and implicit ones when the implicit dependency is a ref that doesn't exist in source.\n\nghstack-source-id: 685d859d1eed5d1e19dbbbfadc75be3875ddb6ea\nPull Request resolved: https://github.com/facebook/react/pull/30679",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-14T13:54:38-04:00",
      "committed_date": "2024-08-14T13:54:39-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-mutating-ref-in-callback-passed-to-jsx-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-mutating-ref-in-callback-passed-to-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-mutating-ref-property-in-callback-passed-to-jsx-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-mutating-ref-property-in-callback-passed-to-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-passing-refs-as-props.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-effect-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-unused-callback-nested.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/original-reactive-scopes-fork/capture-ref-for-later-mutation.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.preserve-use-memo-ref-missing-reactive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.preserve-use-memo-ref-missing-reactive.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/preserve-use-memo-ref-missing-ok.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/preserve-use-memo-ref-missing-ok.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/react-namespace.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-current-aliased-no-added-to-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-current-field-not-added-to-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-current-field-write-not-added-to-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-current-not-added-to-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-current-optional-field-no-added-to-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-current-write-not-added-to-dep.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-like-name-in-useCallback-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ref-like-name-in-useCallback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useCallback-multiple-callbacks-modifying-same-ref-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useCallback-set-ref-nested-property-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useCallback-set-ref-nested-property.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useCallback-set-ref-value-dont-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useCallback-set-ref-value-preserve-memoization.expect.md"
      ]
    },
    {
      "sha": "5c9243d1537ee7bc32f6f2a1e4bd35bbb491a0f5",
      "short_sha": "5c9243d",
      "message": "Rename `renderToMarkup` to `renderToHTML` (#30689)",
      "author": {
        "name": "Sebastian Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-08-14T19:35:16+02:00",
      "committed_date": "2024-08-14T19:35:16+02:00",
      "changed_files": [
        "packages/react-client/src/forks/ReactFlightClientConfig.markup.js",
        "packages/react-markup/README.md",
        "packages/react-markup/src/ReactFizzConfigMarkup.js",
        "packages/react-markup/src/ReactMarkupClient.js",
        "packages/react-markup/src/ReactMarkupServer.js",
        "packages/react-markup/src/__tests__/ReactMarkupClient-test.js",
        "packages/react-markup/src/__tests__/ReactMarkupServer-test.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/react-server/src/forks/ReactFlightServerConfig.markup.js",
        "scripts/error-codes/codes.json"
      ]
    },
    {
      "sha": "e0a0e65412cfa00e959fbef0f6c3a0c73725f0a3",
      "short_sha": "e0a0e65",
      "message": "Move `react-html` to `react-markup` (#30688)",
      "author": {
        "name": "Sebastian Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-08-14T19:22:44+02:00",
      "committed_date": "2024-08-14T19:22:44+02:00",
      "changed_files": [
        "packages/react-client/src/forks/ReactFlightClientConfig.markup.js",
        "packages/react-html/npm/index.js",
        "packages/react-html/npm/react-html.react-server.js",
        "packages/react-html/README.md",
        "packages/react-html/index.js",
        "packages/react-markup/npm/index.js",
        "packages/react-markup/npm/react-markup.react-server.js",
        "packages/react-html/package.json",
        "packages/react-html/react-html.react-server.js",
        "packages/react-html/src/ReactFizzConfigHTML.js",
        "packages/react-html/src/ReactHTMLClient.js",
        "packages/react-html/src/ReactHTMLClient.stable.js",
        "packages/react-html/src/ReactHTMLLegacyClientStreamConfig.js",
        "packages/react-html/src/ReactHTMLServer.js",
        "packages/react-html/src/ReactHTMLServer.stable.js",
        "packages/react-html/src/__tests__/ReactHTMLClient-test.js",
        "packages/react-html/src/__tests__/ReactHTMLServer-test.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.markup.js",
        "packages/react-server/src/forks/ReactFizzConfig.markup.js",
        "scripts/error-codes/codes.json",
        "scripts/rollup/bundles.js",
        "scripts/rollup/forks.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "49496d493797d4df1b9496f64a6103d9a7d23968",
      "short_sha": "49496d4",
      "message": "[DevTools] Support Server Components in Tree (#30684)\n\nThis adds VirtualInstances to the tree. Each Fiber has a list of its\r\nparent Server Components in `_debugInfo`. The algorithm is that when we\r\nenter a set of fibers, we actually traverse level 0 of all the\r\n`_debugInfo` in each fiber. Then level 1 of each `_debugInfo` and so on.\r\nIt would be simpler if `_debugInfo` only contained Server Component\r\nsince then we could just look at the index in the array but it actually\r\ncontains other data as well which leads to multiple passes but we don't\r\nexpect it to have a lot of levels before hitting a reified fiber.\r\nFinally when we hit the end a traverse the fiber itself.\r\n\r\nThis lets us match consecutive `ReactComponentInfo` that are all the\r\nsame at the same level. This creates a single VirtualInstance for each\r\nsequence. This lets the same Server Component instance that's a parent\r\nto multiple children appear as a single Instance instead of one per\r\nFiber.\r\n\r\nSince a Server Component's result can be rendered in more than one place\r\nthere's not a 1:1 mapping though. If it is in different parents or if\r\nthe sequence is interrupted, then it gets split into two different\r\ninstances with the same `ReactComponentInfo` data.\r\n\r\nThe real interesting case is what happens during updates because this\r\nalgorithm means that a Fiber can become reparented during an update to\r\nend up in a different VirtualInstance. The ideal would maybe be that the\r\nfrontend could deal with this reparenting but instead I basically just\r\nunmount the previous instance (and its children) and mount a new\r\ninstance which leads to some interesting scenarios. This is inline with\r\nthe strategy I was intending to pursue anyway where instances are\r\nreconciled against the previous children of the same parent instead of\r\nthe `fiberToFiberInstance` map - which would let us get rid of that map.\r\nIn that case the model is resilient to Fiber being in more than one\r\nplace at a time.\r\n\r\nHowever this unmount/remount does mean that we can lose selection when\r\nthis happens. We could maybe do something like using the tracked path\r\nlike I did for component filters. Ideally it's a weird edge case though\r\nbecause you'd typically not have it. The main case that it happens now\r\nis for reorders of list of server components. In that case basically all\r\nthe children move between server components while the server components\r\nthemselves stay in place. We should really include the key in server\r\ncomponents so that we can reconcile them using the key to handle\r\nreorders which would solve the common case anyway.\r\n\r\nI convert the name to the `Env(Name)` pattern which allows the\r\nEnvironment Name to be used as a badge.\r\n\r\n<img width=\"1105\" alt=\"Screenshot 2024-08-13 at 9 55 29 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/323c20ba-b655-4ee8-84fa-8233f55d2999\">\r\n\r\n(Screenshot is with #30667. I haven't tried it with the alternative\r\nfix.)\r\n\r\n---------\r\n\r\nCo-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-14T11:16:51-04:00",
      "committed_date": "2024-08-14T11:16:51-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/inspectedElement-test.js",
        "packages/react-devtools-shared/src/__tests__/store-test.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/frontend/types.js",
        "packages/react-devtools-shared/src/utils.js"
      ]
    },
    {
      "sha": "0ad0fac1dc11db8d5a6831987fb0324cd6d59498",
      "short_sha": "0ad0fac",
      "message": "Fix unstable_useContextWithBailout dispatcher assignment (#30692)\n\nOne more copy pasta fix\r\n\r\nAssignments are unique now\r\n```\r\n% cat packages/react-reconciler/src/ReactFiberHooks.js | grep .unstable_useContextWithBailout\r\nfunction unstable_useContextWithBailout<T>(\r\n  (ContextOnlyDispatcher: Dispatcher).unstable_useContextWithBailout =\r\n  (HooksDispatcherOnMount: Dispatcher).unstable_useContextWithBailout =\r\n    unstable_useContextWithBailout;\r\n  (HooksDispatcherOnUpdate: Dispatcher).unstable_useContextWithBailout =\r\n    unstable_useContextWithBailout;\r\n  (HooksDispatcherOnRerender: Dispatcher).unstable_useContextWithBailout =\r\n    unstable_useContextWithBailout;\r\n    (HooksDispatcherOnMountInDEV: Dispatcher).unstable_useContextWithBailout =\r\n        return unstable_useContextWithBailout(context, select);\r\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).unstable_useContextWithBailout =\r\n        return unstable_useContextWithBailout(context, select);\r\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).unstable_useContextWithBailout =\r\n        return unstable_useContextWithBailout(context, select);\r\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).unstable_useContextWithBailout =\r\n        return unstable_useContextWithBailout(context, select);\r\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).unstable_useContextWithBailout =\r\n        return unstable_useContextWithBailout(context, select);\r\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).unstable_useContextWithBailout =\r\n        return unstable_useContextWithBailout(context, select);\r\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).unstable_useContextWithBailout =\r\n        return unstable_useContextWithBailout(context, select);\r\n```",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-08-14T11:04:42-04:00",
      "committed_date": "2024-08-14T11:04:42-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHooks.js"
      ]
    },
    {
      "sha": "fbfe08de6126f04777da805a493e819989151edf",
      "short_sha": "fbfe08d",
      "message": "fix[react-devtools/InspectedElement]: fixed border stylings when some of the panels are not rendered (#30676)\n\nAlternative to https://github.com/facebook/react/pull/30667.\r\n\r\nBasically wrap every section in a `div` with the same class, and only\r\napply `border-bottom` for every instance, except for the last child. We\r\nare paying some cost by having more divs, but thats more explicit.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-08-14T13:35:06+01:00",
      "committed_date": "2024-08-14T13:35:06+01:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementContextTree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementErrorsAndWarningsTree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementHooksTree.css",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementHooksTree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementPropsTree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSharedStyles.css",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSourcePanel.css",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSourcePanel.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementStateTree.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementStyleXPlugin.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSuspenseToggle.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.css",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js"
      ]
    },
    {
      "sha": "2a540194adde100c1af2b57b346e62eee760524c",
      "short_sha": "2a54019",
      "message": "[Flight] do not emit error after abort (#30683)\n\nWhen synchronously aborting in a non-async Function Component if you\r\nthrow after aborting the task would error rather than abort because\r\nReact never observed the AbortSignal.\r\n\r\nUsing a sigil to throw after aborting during render isn't effective b/c\r\nthe user code itself could throw so insteead we just read the request\r\nstatus. This is ok b/c we don't expect any tasks to still be pending\r\nafter the currently running task finishes.\r\n\r\nHowever I found one instance where that wasn't true related to\r\nserializing thenables which I've fixed so we may find other cases. If we\r\ndo, though it's almost certainly a bug in our task bookkeeping so we\r\nshould just fix it if it comes up.\r\n\r\nI also updated `abort` to not set the status to ABORTING unless the\r\nstatus was OPEN. we don't want to ever leave CLOSED or CLOSING status",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-13T20:59:45-07:00",
      "committed_date": "2024-08-13T20:59:45-07:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "8e60bacd08215bd23f0bf05dde407cd133885aa1",
      "short_sha": "8e60bac",
      "message": "[compiler] Reordering of logical expressions\n\nghstack-source-id: ad484f97451c65a2642618bfb9d540d6a53a19a6\nPull Request resolved: https://github.com/facebook/react/pull/30678",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-13T16:57:45-04:00",
      "committed_date": "2024-08-13T16:57:45-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/logical-reorder.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/logical-reorder.flow.js"
      ]
    },
    {
      "sha": "f6d1df6648a8912ea30550507a9d400802dcdff4",
      "short_sha": "f6d1df6",
      "message": "[Flight] erroring after abort should not result in unhandled rejection (#30675)\n\nWhen I implemented the ability to abort synchronoulsy in flight I made\r\nit possible for erroring async server components to cause an unhandled\r\nrejection error. In the current implementation if you abort during the\r\nsynchronous phase of a Function Component and then throw an error in the\r\nsynchronous phase React will not attach any promise handlers because it\r\nshort circuits the thenable treatment and throws an AbortSigil instead.\r\nThis change updates the rendering logic to ignore the rejecting\r\ncomponent.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-08-13T13:42:10-07:00",
      "committed_date": "2024-08-13T13:42:10-07:00",
      "changed_files": [
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "a601d1da3647ed9a20d9f83b87c8019492f24215",
      "short_sha": "a601d1d",
      "message": "[compiler] Allow lets to be hoisted\n\nghstack-source-id: 02f4698bd98705a855deb0d4bc30b9829afdddc0\nPull Request resolved: https://github.com/facebook/react/pull/30674",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-13T16:35:56-04:00",
      "committed_date": "2024-08-13T16:35:56-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/PrintHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneHoistedContexts.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateLocalsNotReassignedAfterRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-function-expression-references-variable-its-assigned-to.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-function-expression-references-variable-its-assigned-to.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-captured-arg-separately.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutate-captured-arg-separately.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-function-expression-references-later-variable-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-nested-let-declaration-2.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-nested-let-declaration-2.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-nested-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-nested-let-declaration.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-simple-let-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hoisting-simple-let-declaration.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/mutate-captured-arg-separately.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/mutate-captured-arg-separately.js"
      ]
    },
    {
      "sha": "082a690cc3ed6e27f62ed6e4ac655dec5c828708",
      "short_sha": "082a690",
      "message": "[DevTools] Compute new reordered child set from the instance tree (#30668)\n\nThis is already filtered and simply just all the ids in the linked list.\r\n\r\nSame principle as #30665.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-13T15:18:34-04:00",
      "committed_date": "2024-08-13T15:18:34-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "e865fe0722f889126b818d462a73026d7d0b6867",
      "short_sha": "e865fe0",
      "message": "[DevTools] Unmount instance by walking the instance tree instead of the fiber tree (#30665)\n\nThere was a comment that it's not safe to walk the unmounted fiber tree\r\nwhich I'm not sure is correct or not but we need to walk the instance\r\ntree to be able to clean up virtual instances anyway. We already walk\r\nthe instance tree to clean up \"remaining instances\".\r\n\r\nThis is also simpler because we don't need to special case Suspense\r\nboundaries. We simply clean up whatever branch we had before.\r\n\r\nThe ultimate goal is to also walk the instance tree for updates so we\r\ndon't need a fiber to instance map.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-13T15:18:24-04:00",
      "committed_date": "2024-08-13T15:18:24-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "d48603a52564675ce02152fff245e38b6816da47",
      "short_sha": "d48603a",
      "message": "Fix unstable_useContextWithBailout incorrect dispatcher assignment (#30673)\n\nFixing a mistaken copy from another dispatcher property assignment",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-08-13T11:31:44-04:00",
      "committed_date": "2024-08-13T11:31:44-04:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHooks.js"
      ]
    },
    {
      "sha": "23830ea2a19bc14f5e7fa7198f9371130f0f8382",
      "short_sha": "23830ea",
      "message": "Unit Test for `findNodeHandle` Error Behavior (#30669)\n\n## Summary\r\n\r\nAs promised on https://github.com/facebook/react/pull/29627, this\r\ncreates a unit test for the `findNodeHandle` error that prevents\r\ndevelopers from calling it within render methods.\r\n\r\n## How did you test this change?\r\n\r\n```\r\n$ yarn test ReactFabric-test.internal.js\r\n```",
      "author": {
        "name": "Timothy Yung",
        "email": "yungsters@meta.com"
      },
      "authored_date": "2024-08-12T16:32:40-07:00",
      "committed_date": "2024-08-12T16:32:40-07:00",
      "changed_files": [
        "packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js"
      ]
    },
    {
      "sha": "0d7c12c7790c4a7315af80f8c73ac951f024f4fe",
      "short_sha": "0d7c12c",
      "message": "[compiler][ez] Enable some sprout tests that no longer need to be disabled\n\nSummary:\nAs title. Better support for flow typing, bugfixes, etc fixes these\n\nghstack-source-id: 6326653ce42b33b6c1c76a494434d133382ca80a\nPull Request resolved: https://github.com/facebook/react/pull/30591",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-12T12:55:55-07:00",
      "committed_date": "2024-08-12T12:55:55-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/component-declaration-basic.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/component-declaration-basic.flow.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-declaration-basic.flow.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-declaration-basic.flow.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "6532c412566f7223f82b1460023180c25e15fca3",
      "short_sha": "6532c41",
      "message": "[compiler] Allow macro methods\n\nSummary:\nBuilds support for macros that are invoked as methods rather than just function calls or jsx.\n\nWe now record macros as a schema that represents arbitrary member expressions including wildcards (so we can support, e.g., myMacro.*.foo.bar). When examining PropertyLoads in the macro memoization stage, we build up a map of partially-satisfied macro patterns until we determine that the pattern has been fully satisfied, at which point we treat the result of the PropertyLoad as a macro value.\n\nghstack-source-id: d78d9ba7041968c861ffa110fb7882b339a0e257\nPull Request resolved: https://github.com/facebook/react/pull/30589",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-12T12:55:55-07:00",
      "committed_date": "2024-08-12T12:55:55-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/MemoizeFbtAndMacroOperandsInSameScope.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-method-no-outlining-wildcard.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-method-no-outlining-wildcard.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-method-no-outlining.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-method-no-outlining.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "d50e024fd49cbd701e7e286441ef2b6b0b59ba62",
      "short_sha": "d50e024",
      "message": "[compiler] Promote temporaries when necessary to prevent codegen reordering over side-effectful operations\n\nghstack-source-id: 639191e63a0d2b4290d1265a2da12fb17de750d9\nPull Request resolved: https://github.com/facebook/react/pull/30554",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-12T12:36:49-07:00",
      "committed_date": "2024-08-12T12:36:49-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PromoteUsedTemporaries.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-codegen-inline-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-codegen-inline-iife.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife-reassign.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife-reassign.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife-storeprop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife-storeprop.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/codegen-inline-iife.ts"
      ]
    },
    {
      "sha": "fbe81b214a474f0c7b6512dbfe8a9e3948e5620a",
      "short_sha": "fbe81b2",
      "message": "[compiler] Publish to latest tag\n\n> [!NOTE]\n> The `latest` tag is published by default if no tag is specified, which\n> is what we had done since the first release of the compiler\n\nIn my last PR to auto publish compiler releases I had added the\nexperimental tag to be used in publishing. However because we had\nalready previously published to the latest tag (which is non-removable)\nthis means that the `latest` tag is pinned to an old version. That makes\nuntagged installs of the compiler default to that old version instead of\nwhatever is the latest.\n\nThis changes the behavior back to what it was before. Since we are still\nin the experimental release of the compiler anyway it seems fine to use\nthe latest tag. When we reach stable, we can update this to only push to\nlatest for stable releases.\n\nghstack-source-id: 1809481b452150d6a452d4a77ea5482069bc7c83\nPull Request resolved: https://github.com/facebook/react/pull/30666",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-12T14:03:27-04:00",
      "committed_date": "2024-08-12T14:41:11-04:00",
      "changed_files": [
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "25c584f5672d90ba67d72ea9ba9cc06b12311806",
      "short_sha": "25c584f",
      "message": "[DevTools] Further Refactoring of Unmounts (#30658)\n\nStacked on #30625 and #30657.\r\n\r\nThis ensures that we only create instances during the commit\r\nreconciliation and that we don't create unnecessary instances for things\r\nthat are filtered or not mounted. This ensures that we also can rely on\r\nthe reconciliation to do all the clean up. Now everything is created and\r\ndeleted as a pair in the same pass.\r\n\r\nPreviously we were including unfiltered components in the owner stack\r\nwhich probably doesn't make sense since you're intending to filter them\r\neverywhere presumably. However, it also means that those links were\r\nbroken since you can't link into owners that don't exist in the parent\r\ntree.\r\n\r\nThe main complication is the component filters. It relied on not\r\nunmounting the old instances. I had to update some tests that asserted\r\non ids that are now shifted.\r\n\r\nFor warnings/errors tracking I now restore them back into the pending\r\nset when they unmount. Basically it puts them back into their\r\n\"pre-commit\" state. That way when they remount they’re still there.\r\n\r\nFor restoring the current selection I use the tracked path mechanism\r\ninstead of relying on the id being unchanged. This is better anyway\r\nbecause if you filter out the currently selected item it's better to\r\nselect the nearest match instead of just losing the selection.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-12T12:41:29-04:00",
      "committed_date": "2024-08-12T12:41:29-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/inspectedElement-test.js",
        "packages/react-devtools-shared/src/__tests__/ownersListContext-test.js",
        "packages/react-devtools-shared/src/__tests__/profilingCache-test.js",
        "packages/react-devtools-shared/src/__tests__/treeContext-test.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "b4c38015d0f8b58e9d0890dd7fd00ad763d3f965",
      "short_sha": "b4c3801",
      "message": "[DevTools] Remove lodash.throttle (#30657)\n\nSame principle as #30555. We shouldn't be throttling the UI to make it\r\nfeel less snappy. Instead, we should use back-pressure to handle it.\r\nNormally the browser handles it automatically with frame aligned events.\r\nE.g. if the thread can't keep up with sync updates it doesn't send each\r\nevent but the next one. E.g. pointermove or resize.\r\n\r\nHowever, it is possible that we end up queuing too many events if the\r\nfrontend can't keep up but the solution to this is the same as mentioned\r\nin #30555. I.e. to track the last message and only send after we get a\r\nresponse.\r\n\r\nI still keep the throttle to persist the selection since that affects\r\nthe disk usage and doesn't have direct UX effects.\r\n\r\nThe main motivation for this change though is that lodash throttle\r\ndoesn't rely on timers but Date.now which makes it incompatible with\r\nmost jest helpers which means I can't write tests against these\r\nfunctions properly.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-12T12:32:55-04:00",
      "committed_date": "2024-08-12T12:32:55-04:00",
      "changed_files": [
        "packages/react-devtools-shared/package.json",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/views/Highlighter/index.js",
        "packages/react-devtools-shared/src/devtools/views/hooks.js"
      ]
    },
    {
      "sha": "68dbd84b61cc2504c30e19f748f59a52d331f851",
      "short_sha": "68dbd84",
      "message": "[DevTools] Unmount by walking previous nodes no longer in the new tree (#30644)\n\nThis no longer uses the handleCommitFiberUnmount hook to track unmounts.\r\nInstead, we can just unmount the DevToolsInstances that we didn't reuse.\r\nThis doesn't account for cleaning up instances that were unnecessarily\r\ncreated when they weren't in the tree. I have a separate follow up for\r\nthat.\r\n\r\nThis also removes the queuing of untracking. This was added in #21523\r\nbut I don't believe it has been needed for a while because the mentioned\r\nflushPendingErrorsAndWarningsAfterDelay hasn't called untrackFiberID for\r\na while so the race condition doesn't exist. It's hard to tell though\r\nbecause from the issues there weren't really any repros submitted.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-12T00:35:42-04:00",
      "committed_date": "2024-08-12T00:35:42-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "8d74e8c73a5cc5e461bb1413a74c6b058c6be134",
      "short_sha": "8d74e8c",
      "message": "[compiler] Patch error reporting for blocklisted imports\n\nghstack-source-id: 614c1e9c04828bfa2da13a6abaeff7ce3e67cb9b\nPull Request resolved: https://github.com/facebook/react/pull/30652",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-08-09T13:43:21-07:00",
      "committed_date": "2024-08-09T15:19:07-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Imports.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts"
      ]
    },
    {
      "sha": "2504dbd669e0f6ef34834c4445d4e4851e1d0b2a",
      "short_sha": "2504dbd",
      "message": "Punctuation & correcting spelling mistakes (#30592)",
      "author": {
        "name": "hylinz",
        "email": "96144477+hylinz@users.noreply.github.com"
      },
      "authored_date": "2024-08-09T23:53:53+02:00",
      "committed_date": "2024-08-09T14:53:53-07:00",
      "changed_files": [
        "compiler/docs/DESIGN_GOALS.md"
      ]
    },
    {
      "sha": "54a150dc6e50d606b25b94526f733974b1a687ea",
      "short_sha": "54a150d",
      "message": "[compiler][be] Remove completed todo comment\n\nWe made block types explicit a long time ago, this comment is super stale\n\nghstack-source-id: 810a34bb4c14a3f4541003db23ffb7ad91aecc8c\nPull Request resolved: https://github.com/facebook/react/pull/30633",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-07T22:09:06-07:00",
      "committed_date": "2024-08-09T14:11:01-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/MergeConsecutiveBlocks.ts"
      ]
    },
    {
      "sha": "229038eab8df49483eb0f960d4b935435f33b620",
      "short_sha": "229038e",
      "message": "[compiler][be] Cleanup class naming in PromoteUsedTemporaries\n\nI forgot to clean this up before landing #30573.\n\nghstack-source-id: 2141471912e410aa12545dcf7989f45447007ba9\nPull Request resolved: https://github.com/facebook/react/pull/30632",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-07T22:06:03-07:00",
      "committed_date": "2024-08-09T14:11:01-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PromoteUsedTemporaries.ts"
      ]
    },
    {
      "sha": "0e6d8c3d1a7adf1db5a4dbe8bba6b8d6c0f31097",
      "short_sha": "0e6d8c3",
      "message": "[ci] fix path in compiler_typescript.yml (#30651)\n\nThe path was incorrect, so the job didn\\t run on changes to it.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-08-09T13:21:24-04:00",
      "committed_date": "2024-08-09T13:21:24-04:00",
      "changed_files": [
        ".github/workflows/compiler_typescript.yml"
      ]
    },
    {
      "sha": "2d2cc042d7812499baf992804fbf83c20caa7436",
      "short_sha": "2d2cc04",
      "message": "[compiler][ez] Option to bail out on blocklisted imports\n\nghstack-source-id: 540d154b25e49a83683a05fc9326dbd0ad59a6bd\nPull Request resolved: https://github.com/facebook/react/pull/30643",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-08-08T15:47:40-07:00",
      "committed_date": "2024-08-09T09:10:01-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Imports.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-blocklisted-imports.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-blocklisted-imports.ts",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "3871fdadaa6ff98ba3039c3976e8aac6038f69a9",
      "short_sha": "3871fda",
      "message": "[compiler][be] Clean up compilation skipping logic in Program\n\nghstack-source-id: fe2c81de9d4f41a787c690b722cbcff55eb18ac3\nPull Request resolved: https://github.com/facebook/react/pull/30642",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-08-08T15:41:38-07:00",
      "committed_date": "2024-08-09T09:10:01-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts"
      ]
    },
    {
      "sha": "0fb03c4952195fb02980d3acd6797547a7ae6b23",
      "short_sha": "0fb03c4",
      "message": "[compiler][ez] Add types for Math.min, recursive global\n\nghstack-source-id: 9940b8f96eec3fb2b411af8a7c92d93aae6da85e\nPull Request resolved: https://github.com/facebook/react/pull/30641",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-08-08T15:41:37-07:00",
      "committed_date": "2024-08-09T09:10:01-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/console-readonly.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/console-readonly.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-infer-nonallocating.expect.md"
      ]
    },
    {
      "sha": "587f03c922cc10f14e66e85d6ea7e4c647ac4bef",
      "short_sha": "587f03c",
      "message": "[DevTools] Build up DevTools Instance Shadow Tree (#30625)\n\nThis is the beginning of a refactor of the DevTools Fiber backend. The\r\nnew approach is basically that we listen to each commit from Fiber and\r\ntraverse the tree - building up a filtered shadow tree. Then we send\r\ndiffs based on that tree and perform our own operations against that\r\ninstead of using Fibers as the source of truth.\r\n\r\nFiber diffs Elements -> Fibers. The backend diffs Fibers ->\r\nDevToolsInstances as a side-effect it sends deltas to the front end.\r\n\r\nThis makes the algorithm resilient to a different Fiber implementation\r\nthat doesn't use pairs of Fibers (alternates) but instead stateless new\r\nclones each time. In that world we can't treat Fibers as instances. They\r\ncan hold onto instances but they're not necessarily 1:1 themselves.\r\n\r\nThe same thing also applies to Server Components that don't have their\r\nown instances.\r\n\r\nThe algorithm is more or less the same as React's reconciliation in\r\nReactChildFiber itself. However, we do a mutable update of the tree as\r\nwe go. We also cheat a bit here in the first version in that we still\r\nhave fiberToFiberInstance map and alternate which makes reorders easier.\r\nFurther down we could do the reorders by adding the previous set to a\r\ntemporary map like ChildFiber does but only if they're not already in\r\norder.\r\n\r\nThis first bit is just about making sure that we produce correct trees.\r\nWe have fairly good test coverage already of that already.\r\n\r\nIn the next few follow ups I'll start simplifying the rest of the logic\r\nby taking advantage of the new tree.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-08T12:44:35-04:00",
      "committed_date": "2024-08-08T12:44:35-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "fb1c63fb76001511c7a91f8974f03d0ba2f03dca",
      "short_sha": "fb1c63f",
      "message": "[compiler] remove duplicate root files (#30639)\n\nThese files are duplicates from the root from a time when React Compiler\r\nwas in a different repo.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-08-08T12:42:45-04:00",
      "committed_date": "2024-08-08T12:42:45-04:00",
      "changed_files": [
        "compiler/.gitmodules",
        "compiler/.watchmanconfig",
        "compiler/CODE_OF_CONDUCT.md",
        "compiler/CONTRIBUTING.md",
        "compiler/LICENSE"
      ]
    },
    {
      "sha": "9d2da5913a58ad0d82f79b4df0852c788c2a3cc6",
      "short_sha": "9d2da59",
      "message": "[compiler] Add context callee import if required\n\nPreviously the compiler would add an import for the specified context\ncallee even if the context access was not lowered, leading to unused\nimports.\n\nThis PR tracks if lowering has happened and adds the import only when\nnecessary.\n\nghstack-source-id: 6ad794da41116e1034783b6c4a58fbfe7790343e\nPull Request resolved: https://github.com/facebook/react/pull/30628",
      "author": {
        "name": "Sathya Gunsasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-08-07T16:54:23+01:00",
      "committed_date": "2024-08-08T15:53:13+01:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-array-destructuring.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-destructure-multiple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-mixed-array-obj.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-nested-destructuring.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-property-load.expect.md"
      ]
    },
    {
      "sha": "83cc13f74676920bf6b189af9665bd343e056d58",
      "short_sha": "83cc13f",
      "message": "[compiler] Rewrite useContext callee\n\nIf a value is specified for the LowerContextAccess environment config,\nwe rewrite the callee from 'useContext' to the specificed value.\n\nThis will allow us run an experiment internally.\n\nghstack-source-id: 00e161b988c8f8a1cf96efff8095f050cb534cc1\nPull Request resolved: https://github.com/facebook/react/pull/30612",
      "author": {
        "name": "Sathya Gunsasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-08-07T15:55:29+01:00",
      "committed_date": "2024-08-08T15:53:13+01:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-acess-multiple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-acess-multiple.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-selector-simple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-selector-simple.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-array-destructuring.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-array-destructuring.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-destructure-multiple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-destructure-multiple.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-mixed-array-obj.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-mixed-array-obj.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-nested-destructuring.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-nested-destructuring.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-property-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-property-load.js",
        "compiler/packages/snap/src/compiler.ts"
      ]
    },
    {
      "sha": "8b31835fc0a4de479a816471764f0e1d103ae205",
      "short_sha": "8b31835",
      "message": "[compiler] Replace `for...in` with `for...of` for array of strings (#30631)\n\ncloses https://github.com/facebook/react/issues/30627\r\n\r\nThanks!",
      "author": {
        "name": "Sol Lee",
        "email": "82362278+saul-atomrigs@users.noreply.github.com"
      },
      "authored_date": "2024-08-08T14:07:04+09:00",
      "committed_date": "2024-08-07T22:07:04-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts"
      ]
    },
    {
      "sha": "a037dabd42c9c0773526cf6b25a7a2264c8251e3",
      "short_sha": "a037dab",
      "message": "[compiler] Patch ValidatePreserveMemo to bailout correctly for refs\n\nghstack-source-id: b9c13bf5f858123b68c9e89ca8c7629cf2b90a15\nPull Request resolved: https://github.com/facebook/react/pull/30603",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-08-07T16:11:38-07:00",
      "committed_date": "2024-08-07T18:57:57-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneNonEscapingScopes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-maybe-mutable-ref-memo-not-preserved.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-dropped-infer-always-invalidating.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-dropped-infer-always-invalidating.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.maybe-mutable-ref-not-preserved.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-maybe-mutable-ref-memo-not-preserved.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/prune-nonescaping-useMemo-mult-returns-primitive.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/prune-nonescaping-useMemo-mult-returns-primitive.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/prune-nonescaping-useMemo-mult-returns.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/prune-nonescaping-useMemo-mult-returns.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/prune-nonescaping-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/prune-nonescaping-useMemo.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-dropped-infer-always-invalidating.expect.md"
      ]
    },
    {
      "sha": "53194c87929c119079d1ac711fa7de684ff49790",
      "short_sha": "53194c8",
      "message": "[compiler] Remove transitive memo check in validatePreserveMemo\n\nghstack-source-id: 45521370e48a7e83aaeb79cc9a14d3032bdffbe3\nPull Request resolved: https://github.com/facebook/react/pull/30630",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-08-07T16:11:37-07:00",
      "committed_date": "2024-08-07T18:57:56-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-extended-contextvar-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useCallback-dep-scope-pruned.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-dep-scope-pruned.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useCallback-dep-scope-pruned.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-extended-contextvar-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-extended-contextvar-scope.tsx"
      ]
    },
    {
      "sha": "2f8ff3deb29ec869a8ce8744d15afd6fb1421f9b",
      "short_sha": "2f8ff3d",
      "message": "[compiler][repro] False positives for ValidatePreserveMemo\n\nghstack-source-id: 7fa94fea867371f3d77737dad80a321094f10600\nPull Request resolved: https://github.com/facebook/react/pull/30629",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-08-07T16:11:34-07:00",
      "committed_date": "2024-08-07T18:57:56-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-extended-contextvar-scope.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-extended-contextvar-scope.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useCallback-dep-scope-pruned.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useCallback-dep-scope-pruned.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-overlap-scopes.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-overlap-scopes.ts"
      ]
    },
    {
      "sha": "2bd415355e3ec9b87859b68af05972bc50390753",
      "short_sha": "2bd4153",
      "message": "[compiler][repro] ValidatePreserveMemo x useRef bug\n\nghstack-source-id: 6ac5d58e97eba92642b5e4c5e2f915d91a5730dc\nPull Request resolved: https://github.com/facebook/react/pull/30602",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-08-07T16:11:31-07:00",
      "committed_date": "2024-08-07T18:57:56-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-maybe-mutable-ref-memo-not-preserved.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-maybe-mutable-ref-memo-not-preserved.ts"
      ]
    },
    {
      "sha": "e662b0a24b1d8a1c8ec86558aef4b7e5c4427116",
      "short_sha": "e662b0a",
      "message": "[compiler][be] Less ambiguous error messages for validateMemo bailout\n\nghstack-source-id: 312093ec74d733bccd2d2d8400eaba267c9e33a7\nPull Request resolved: https://github.com/facebook/react/pull/30601",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-08-07T16:11:30-07:00",
      "committed_date": "2024-08-07T18:57:56-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-unmemoized-callback-captured-in-context-variable.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-accesses-ref-mutated-later-via-function-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-useCallback-set-ref-nested-property-ref-modified-later-preserve-memoization.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-infer-mutate-deps.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.invalid-useCallback-captures-reassigned-context.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.todo-useCallback-captures-invalidating-value.expect.md"
      ]
    },
    {
      "sha": "e948a5ac6876a016ff57f7177f93452ea2eeb574",
      "short_sha": "e948a5a",
      "message": "[compiler] Add lowerContextAccess pass\n\n*This is only for internal profiling, not intended to ship.*\n\nThis pass is intended to be used with https://github.com/facebook/react/pull/30407.\n\nThis pass synthesizes selector functions by collecting immediately\ndestructured context acesses. We bailout for other types of context\naccess.\n\nThis pass lowers context access to use a selector function by passing\nthe synthesized selector function as the second argument.\n\nghstack-source-id: 92d0f6ff2fe95cda93f66786f56e97ba9ace95fa\nPull Request resolved: https://github.com/facebook/react/pull/30548",
      "author": {
        "name": "Sathya Gunsasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-08-07T15:55:29+01:00",
      "committed_date": "2024-08-07T16:30:11+01:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/LowerContextAccess.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-acess-multiple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-acess-multiple.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-selector-simple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/lower-context-selector-simple.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-array-destructuring.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-array-destructuring.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-destructure-multiple.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-destructure-multiple.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-mixed-array-obj.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-mixed-array-obj.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-nested-destructuring.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-nested-destructuring.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-property-load.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.lower-context-access-property-load.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "9eb288e6579333612ed736c4e088669daf90a076",
      "short_sha": "9eb288e",
      "message": "[compiler][ez] Default to using flow suppressions\n\nghstack-source-id: b6592650e08a1b07b6ccaad025bc4b81dd61d442\nPull Request resolved: https://github.com/facebook/react/pull/30622",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-06T23:47:09-07:00",
      "committed_date": "2024-08-06T23:47:09-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Options.ts",
        "compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts"
      ]
    },
    {
      "sha": "838da52d67a42295e05aad8d03f962129d9d88ff",
      "short_sha": "838da52",
      "message": "[ci] Fix incorrect tags being pushed for compiler releases\n\nghstack-source-id: 812e49333ce19c3d13adb6cc87154fb83d7639b0\nPull Request resolved: https://github.com/facebook/react/pull/30620",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-06T17:15:56-04:00",
      "committed_date": "2024-08-06T17:27:27-04:00",
      "changed_files": [
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "030d83bab402723cbcb28d48889b9bd83ee3914a",
      "short_sha": "030d83b",
      "message": "[ci] Fix dist-tag command\n\nghstack-source-id: bdbcc12b2815d00d790397c6a6702c7f6e1564e0\nPull Request resolved: https://github.com/facebook/react/pull/30619",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-06T15:30:47-04:00",
      "committed_date": "2024-08-06T15:35:38-04:00",
      "changed_files": [
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "9f0508fcf47026cdc58e49a15e5865b66a24480f",
      "short_sha": "9f0508f",
      "message": "[final] Actually publish packages to npm\n\nghstack-source-id: 78a358a81726f1e9898be7f46de23e80005b5bfd\nPull Request resolved: https://github.com/facebook/react/pull/30618",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-06T15:04:30-04:00",
      "committed_date": "2024-08-06T15:12:03-04:00",
      "changed_files": [
        ".github/workflows/compiler_prereleases.yml"
      ]
    },
    {
      "sha": "3d61b9b4cd4135084d1e8e3b05813b915c38764d",
      "short_sha": "3d61b9b",
      "message": "[compiler] Stay in SSA form through entire pipeline\n\nThis PR updates to use SSA form through the entire compilation pipeline. This means that in both HIR form and ReactiveFunction form, `Identifier` instances map 1:1 to `IdentifierId` values. If two identifiers have the same IdentifierId, they are the same instance. What this means is that all our passes can use this more precise information to determine if two particular identifiers are not just the same variable, but the same SSA \"version\" of that variable.\n\nHowever, some parts of our analysis really care about program variables as opposed to SSA versions, and were relying on LeaveSSA to reset identifiers such that all Identifier instances for a particular program variable would have the same IdentifierId (though not necessarily the same Identifier instance). With LeaveSSA removed, those analysis passes can now use DeclarationId instead to uniquely identify a program variable.\n\nNote that this PR surfaces some opportunties to improve edge-cases around reassigned values being declared/reassigned/depended-upon across multiple scopes. Several passes could/should use IdentifierId to more precisely identify exactly which values are accessed - for example, a scope that reassigns `x` but doesn't use `x` prior to reassignment doesn't have to take a dependency on `x`. But today we take a dependnecy.\n\nMy approach for these cases was to add a \"TODO LeaveSSA\" comment with notes and the name of the fixture demonstrating the difference, but to intentionally preserve the existing behavior (generally, switching to use DeclarationId when IdentifierId would have been more precise).\n\nBeyond updating passes to use DeclarationId instead of Identifier/IdentifierId, the other change here is to extract out the remaining necessary bits of LeaveSSA into a new pass that rewrites InstructionKind (const/let/reassign/etc) based on whether a value is actually const or has reassignments and should be let.\n\nghstack-source-id: 69afdaee5fadf3fdc98ce97549da805f288218b4\nPull Request resolved: https://github.com/facebook/react/pull/30573",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-06T11:24:51-07:00",
      "committed_date": "2024-08-06T12:02:50-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/AnalyseFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/ExtractScopeDeclarationsFromDestructuring.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/InferReactiveScopeVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/MemoizeFbtAndMacroOperandsInSameScope.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/MergeReactiveScopesThatInvalidateTogether.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PromoteUsedTemporaries.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PropagateScopeDependencies.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneHoistedContexts.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneNonEscapingScopes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PruneTemporaryLValues.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/RenameVariables.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/SSA/LeaveSSA.ts",
        "compiler/packages/babel-plugin-react-compiler/src/SSA/RewriteInstructionKindsBasedOnReassignment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/SSA/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/TypeInference/PropagatePhiTypes.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Utils/utils.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidatePreservedManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-repro-invalid-mutable-range-destructured-prop.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/fbt-repro-invalid-mutable-range-destructured-prop.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-propagate-type-of-ternary-jsx.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-propagate-type-of-ternary-jsx.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-propagate-type-of-ternary-nested.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-propagate-type-of-ternary-nested.js",
        "compiler/scripts/anonymize.js"
      ]
    },
    {
      "sha": "22360089b5e40ccfa5df26f1ec491b5c46e7ad61",
      "short_sha": "2236008",
      "message": "[compiler] Add Identifier.declarationId\n\nAdds `Identifier.declarationId` and the new `DeclarationId` (simulated) opaque type. DeclarationId allows uniquely identifying a variable in the original source, ie regardless of reassignments. This allows us to stay in SSA form throughout compilation (see next diff) while still being able to distinguish SSA versions (via IdentifierId) and non-SSA versions (DeclarationId).\n\nghstack-source-id: f2547a58aa7b30cea29fcfe23d5cb45583858a4e\nPull Request resolved: https://github.com/facebook/react/pull/30569",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-06T11:24:50-07:00",
      "committed_date": "2024-08-06T12:02:50-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InlineImmediatelyInvokedFunctionExpressions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/SSA/EnterSSA.ts"
      ]
    },
    {
      "sha": "02217c9e1245503d2ba3f7c14244bc11dfd7a97b",
      "short_sha": "02217c9",
      "message": "[ci] Make compiler publish script runnable\n\nghstack-source-id: 309bda2bc31bf21d70d3ad1b6ea0e7834e634a16\nPull Request resolved: https://github.com/facebook/react/pull/30617",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-06T14:53:00-04:00",
      "committed_date": "2024-08-06T14:59:19-04:00",
      "changed_files": [
        "compiler/scripts/release/publish.js"
      ]
    },
    {
      "sha": "47d85282bcd95f215ad4a496ae1f951904a9ffe4",
      "short_sha": "47d8528",
      "message": "[ci] Add prerelease nightly and manual script for compiler\n\nPublishes the compiler packages on the same schedule as the React ones.\nFor now the manual script can only build from `main` but in the future\nwe can add support for building specific commits\n\nghstack-source-id: 66676c578b795b90bf3c5715be8900438868b6ee\nPull Request resolved: https://github.com/facebook/react/pull/30615",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-06T14:41:28-04:00",
      "committed_date": "2024-08-06T14:48:33-04:00",
      "changed_files": [
        ".github/workflows/compiler_prereleases.yml",
        ".github/workflows/compiler_prereleases_manual.yml",
        ".github/workflows/compiler_prereleases_nightly.yml",
        "compiler/scripts/release/ci-npmrc"
      ]
    },
    {
      "sha": "c9143b98d0096c909a2cc23290e3044c1390f6e2",
      "short_sha": "c9143b9",
      "message": "[compiler] Refactor release script\n\nUpdates the release script to publish tags as well as take a `--ci`\noption\n\nTest plan:\n```\n$ yarn npm:publish --debug --frfr\n\nyarn run v1.22.22\n$ node scripts/release/publish --debug --frfr\nℹ Preparing to publish (for real) [debug=true]\nℹ Building packages\n✔ Successfully built babel-plugin-react-compiler\n✔ Successfully built eslint-plugin-react-compiler\n✔ Successfully built react-compiler-healthcheck\nNPM 2-factor auth code: ******\n✔ Wrote package.json for babel-plugin-react-compiler@0.0.0-experimental-10cf18a-20240806\n\n========== babel-plugin-react-compiler ==========\n\n⠧ Publishing babel-plugin-react-compiler@0.0.0-experimental-10cf18a-20240806 to npm\n+ babel-plugin-react-compiler@0.0.0-experimental-10cf18a-20240806\n\n✔ Successfully published babel-plugin-react-compiler to npm\nℹ dry-run: npm dist-tag add babel-plugin-react-compiler@0.0.0-experimental-10cf18a-20240806 experimental --otp=******\n✔ Successfully pushed dist-tag experimental for babel-plugin-react-compiler to npm\n✔ Wrote package.json for eslint-plugin-react-compiler@0.0.0-experimental-532f76b-20240806\n\n========== eslint-plugin-react-compiler ==========\n\n⠹ Publishing eslint-plugin-react-compiler@0.0.0-experimental-532f76b-20240806 to npm\n+ eslint-plugin-react-compiler@0.0.0-experimental-532f76b-20240806\n\n✔ Successfully published eslint-plugin-react-compiler to npm\nℹ dry-run: npm dist-tag add eslint-plugin-react-compiler@0.0.0-experimental-532f76b-20240806 experimental --otp=******\n✔ Successfully pushed dist-tag experimental for eslint-plugin-react-compiler to npm\n✔ Wrote package.json for react-compiler-healthcheck@0.0.0-experimental-48a8743-20240806\n\n========== react-compiler-healthcheck ==========\n\n⠙ Publishing react-compiler-healthcheck@0.0.0-experimental-48a8743-20240806 to npm\n+ react-compiler-healthcheck@0.0.0-experimental-48a8743-20240806\n\n✔ Successfully published react-compiler-healthcheck to npm\nℹ dry-run: npm dist-tag add react-compiler-healthcheck@0.0.0-experimental-48a8743-20240806 experimental --otp=******\n✔ Successfully pushed dist-tag experimental for react-compiler-healthcheck to npm\n\n✅ All done\n✨  Done in 50.64s.\n```\n\nghstack-source-id: 405cc001c2ab2adaad2bfe4f11fdb7fd28d7e2d1\nPull Request resolved: https://github.com/facebook/react/pull/30614",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-06T14:41:26-04:00",
      "committed_date": "2024-08-06T14:48:33-04:00",
      "changed_files": [
        "compiler/package.json",
        "compiler/scripts/release/publish-manual.js",
        "compiler/scripts/release/shared/build-packages.js",
        "compiler/scripts/release/shared/packages.js",
        "compiler/scripts/release/shared/utils.js",
        "compiler/yarn.lock"
      ]
    },
    {
      "sha": "e8a2b47eb5d807a2da22915a6d444d3947c9a885",
      "short_sha": "e8a2b47",
      "message": "[compiler] Remove sleep in manual release script\n\nI originally added this prior to the compiler being OSS'd as a \"just in\ncase\" feature to panic cancel if something went wrong. Now that the\ncompiler is already launched this is unnecessary.\n\nghstack-source-id: dd17dc8a331657ce23c0cbc012ba967cfc3b9542\nPull Request resolved: https://github.com/facebook/react/pull/30613",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-06T14:41:25-04:00",
      "committed_date": "2024-08-06T14:48:33-04:00",
      "changed_files": [
        "compiler/scripts/release/publish-manual.js"
      ]
    },
    {
      "sha": "ff0d2621f4846414b134800b1639287b66df42cf",
      "short_sha": "ff0d262",
      "message": "Fix rust lints\n\nghstack-source-id: baf433a98a70d9105c8088d82e04a3d96783e9e6\nPull Request resolved: https://github.com/facebook/react/pull/30616",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-08-06T14:41:24-04:00",
      "committed_date": "2024-08-06T14:48:32-04:00",
      "changed_files": [
        "compiler/crates/react_hir/src/merge_consecutive_blocks.rs",
        "compiler/crates/react_semantic_analysis/src/scope_view.rs"
      ]
    },
    {
      "sha": "eb52f3788fe821427863ebe52fb6935ea7ec2474",
      "short_sha": "eb52f37",
      "message": "[CI] fix the shared_lint cached key (#30609)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\nIn the shared_lint,\r\n\r\nfor the first Prettier job, use `${{ runner.arch }}-${{ runner.os\r\n}}-modules-${{ hashFiles('yarn.lock') }}` as the cache key.\r\n\r\nFor the following jobs, use `${{ runner.arch }}-${{ runner.os\r\n}}-modules-${{ hashFiles('**/yarn.lock') }}` as the cache key.\r\n\r\nSome of the jobs do not hit the cache if the hash does not match.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI run [act](https://github.com/nektos/act) locally to test it.",
      "author": {
        "name": "Arthur",
        "email": "82575487+arthur-mountain@users.noreply.github.com"
      },
      "authored_date": "2024-08-07T02:43:10+08:00",
      "committed_date": "2024-08-06T14:43:10-04:00",
      "changed_files": [
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "187dd6a7a234095dfe67d3ee30dabfd5e2ddc531",
      "short_sha": "187dd6a",
      "message": "Replace NodeJS 21 with 22 in devEngines field (#30598)\n\n21 is EOL and 22 is stable now.\r\n\r\nHomebrew installs 22 by default as well which is the practical reason\r\nfor me to update this.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-08-06T11:06:14-04:00",
      "committed_date": "2024-08-06T11:06:14-04:00",
      "changed_files": [
        "fixtures/flight/package.json",
        "package.json"
      ]
    },
    {
      "sha": "eb1d52b01bcb47f158bf3f120a67c261523f8f5f",
      "short_sha": "eb1d52b",
      "message": "[compiler] Refactor createTemporaryPlace\n\nUpdate createTemporaryPlace to use makeTemporary and also rename\nmakeTemporary to makeTemporaryIdentifier to make it less ambiguous.\n\nghstack-source-id: b5955d3d667064f2ccf7e633ab63df2269dc56fa\nPull Request resolved: https://github.com/facebook/react/pull/30585",
      "author": {
        "name": "Sathya Gunsasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-08-02T19:26:46+01:00",
      "committed_date": "2024-08-06T15:30:01+01:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts"
      ]
    },
    {
      "sha": "65903583d2ab45aea45bdd23ed0b5dc214ff3c1c",
      "short_sha": "6590358",
      "message": "Remove flag enableUseDeferredValueInitialArg (#30595)\n\nThis is enabled everywhere for a while and I don't think we'd be backing\r\nthis out of 19. Seems like it's good to clean up to me.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-08-05T11:25:05-04:00",
      "committed_date": "2024-08-05T11:25:05-04:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzDeferredValue-test.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/__tests__/ReactDeferredValue-test.js",
        "packages/react-server/src/ReactFizzHooks.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "c0ee8e94b049a8fb19dd3606a5a1cecc0cbc6a1b",
      "short_sha": "c0ee8e9",
      "message": "Fix typos in Turbopack configuration and in Node.js loader error messages (#30593)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nJust fixing some copy-paste typos.\r\n\r\n## How did you test this change?\r\n\r\nUntested.",
      "author": {
        "name": "Greg Brimble",
        "email": "developer@gregbrimble.com"
      },
      "authored_date": "2024-08-05T09:11:39-05:00",
      "committed_date": "2024-08-05T10:11:39-04:00",
      "changed_files": [
        "packages/react-server-dom-esm/src/ReactFlightESMNodeLoader.js",
        "packages/react-server-dom-turbopack/src/ReactFlightTurbopackNodeLoader.js",
        "packages/react-server-dom-webpack/src/ReactFlightWebpackNodeLoader.js",
        "scripts/shared/inlinedHostConfigs.js"
      ]
    },
    {
      "sha": "6750423ca4b9371363fbad1a2be2de84a8e94054",
      "short_sha": "6750423",
      "message": "chore[packages/react-devtools]: remove unused index.js (#30579)\n\nThis is unused. See\r\nhttps://github.com/facebook/react/pull/30533#discussion_r1700455529.\r\n\r\nRan a fresh build of `react-devtools` via `yarn start` in\r\n`packages/react-devtools` to validate that it is still works with React\r\nNative.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-08-05T07:53:08+01:00",
      "committed_date": "2024-08-05T07:53:08+01:00",
      "changed_files": [
        "packages/react-devtools/index.js",
        "packages/react-devtools/package.json"
      ]
    },
    {
      "sha": "ba6a9e94edf0db3ad96432804f9931ce9dc89fec",
      "short_sha": "ba6a9e9",
      "message": "[Flight] Warn for keyless fragments in an array (#30588)\n\nConceptually this is the same as rendering this as if it was a built-in\r\nServer Component.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-02T20:08:08-04:00",
      "committed_date": "2024-08-02T20:08:08-04:00",
      "changed_files": [
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js"
      ]
    },
    {
      "sha": "8a70d31ba977a8cdbd8ae2146fdeb5b427bf4ff9",
      "short_sha": "8a70d31",
      "message": "[DevTools] Track DOM nodes to Fiber map for HostHoistable Resources (#30590)\n\nFollow up from #30584.\r\n\r\nYou can already select a singleton or hoistable (that's not a resource)\r\nin the browser elements panel and it'll select the corresponding node in\r\nthe RDT Components panel. That works because it uses the same mechanism\r\nas event dispatching and those need to be able to receive events.\r\nHowever, you can't select a resource. Because that's conceptually one to\r\nmany.\r\n\r\nThis keeps track of which fiber is acquiring which resource so we can\r\nfind all the corresponding instances.\r\n\r\nE.g. now you can select the `<link rel=\"stylesheet\">` in the Flight\r\nfixture in the Element panel and then the component that rendered it in\r\nthe Components panel will be selected.\r\n\r\nIf we had a concept multi-selection we could potentially select all of\r\nthem. This similar to how a Server Component can be rendered in more\r\nthan one place and if we want to select all matching ones. It's kind of\r\nweird though and both cases are edge cases.\r\n\r\nNotably imperative preloads do have elements that don't have any\r\ncorresponding component but that's ok. So they'll just select `<head>`.\r\nMaybe in dev we could track the owners of those.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-02T19:22:39-04:00",
      "committed_date": "2024-08-02T19:22:39-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "3af905d95448d582cbd62fe6d41bd976ce9787ea",
      "short_sha": "3af905d",
      "message": "[compiler] Fix issue with macro arguments being outlined\n\nSummary:\nFixes issue documented by #30435. We change the pipeline order so that outlining comes after tracking macro operands, and any function that is referenced in a macro will now not be outlined.\n\nghstack-source-id: f731ad65c8b84db3fc5f3a2ff3a6986112765963\nPull Request resolved: https://github.com/facebook/react/pull/30587",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-02T14:55:54-07:00",
      "committed_date": "2024-08-02T14:55:55-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Optimization/OutlineFunctions.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/index.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.idx-outlining.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/idx-no-outlining.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.idx-outlining.js"
      ]
    },
    {
      "sha": "aa8469fefbde17ab9d2e2cc06deb0a8f153bd005",
      "short_sha": "aa8469f",
      "message": "[DevTools] Rename mountFiberRecursively/updateFiberRecursively (#30586)\n\nThis is just for clarity at first.\r\n\r\nBefore: \r\n- mountFiberRecursively accepts a set of children and flag that says\r\nwhether to just do one\r\n- updateFiberRecursively accepts a fiber and loops over its children\r\n- unmountFiberChildrenRecursively accepts a fiber and loops over its\r\nchildren\r\n\r\nAfter:\r\n- mountFiberRecursively accepts a Fiber and calls\r\nmountChildrenRecursively\r\n- updateFiberRecursively accepts a Fiber and calls\r\nupdateChildrenRecursively\r\n- unmountFiberRecursively accepts a Fiber and calls\r\nunmountChildrenRecursively\r\n- mountChildrenRecursively accepts a set of children and loops over each\r\none\r\n- updateChildrenRecursively accepts a set of children and loops over\r\neach one\r\n- unmountChildrenRecursively accepts a set of children and loops over\r\neach one\r\n\r\nSo now there's one place where things happens for the single item and\r\none place where we do the loop.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-02T17:53:17-04:00",
      "committed_date": "2024-08-02T17:53:17-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "ed94ea146a111124711910c87af44d7760bfd409",
      "short_sha": "ed94ea1",
      "message": "[DevTools] Allow Highlighting/Inspect HostSingletons/Hoistables and Resources (#30584)\n\nBasically the new Float types needs to be supported. Resources are a bit\r\nspecial because they're a DOM specific type but we can expect any other\r\nimplementation using resources to provide and instance on this field if\r\nneeded.\r\n\r\nThere's a slightly related case for the reverse lookup. You can already\r\nselect a singleton or hoistable (that's not a resource) in the browser\r\nelements panel and it'll select the corresponding node in the RDT\r\nComponents panel. That works because it uses the same mechanism as event\r\ndispatching and those need to be able to receive events.\r\n\r\nHowever, you can't select a resource. Because that's conceptually one to\r\nmany. We could in principle just search the tree for the first one or\r\nkeep a map of currently mounted resources and just pick the first fiber\r\nthat created it. So that you can select a resource and see what created\r\nit. Particularly useful when there's only one Fiber which is most of the\r\ntime.\r\n\r\n---------\r\n\r\nCo-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-02T17:04:27-04:00",
      "committed_date": "2024-08-02T17:04:27-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/backend/views/Highlighter/Highlighter.js",
        "packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js",
        "packages/react-devtools-shared/src/backend/views/Highlighter/index.js"
      ]
    },
    {
      "sha": "47337a842ab3afd7344154a86dfb4797cfc26602",
      "short_sha": "47337a8",
      "message": "[compiler] Allow global mutation effects in arguments passed to hooks and in return values\n\nghstack-source-id: f9ea675ead6eb61b3afc2a3deace0da270612d9d\nPull Request resolved: https://github.com/facebook/react/pull/30576",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-08-02T12:24:41-07:00",
      "committed_date": "2024-08-02T12:24:41-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Inference/InferReferenceEffects.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassign-global-fn-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.reassign-global-fn-arg.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reassign-global-hook-arg.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reassign-global-hook-arg.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reassign-global-return.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/reassign-global-return.js"
      ]
    },
    {
      "sha": "bae18b4dfe122bb9ccc3e3553ecdc1af654cd217",
      "short_sha": "bae18b4",
      "message": "[compiler] Add flag for lowering context access\n\n*This is only for internal profiling, not intended to ship.*\n\nghstack-source-id: e48998b7be4272199c8a6ff9cc2ec0975add5030\nPull Request resolved: https://github.com/facebook/react/pull/30547",
      "author": {
        "name": "Sathya Gunsasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-07-31T14:35:35+01:00",
      "committed_date": "2024-08-02T18:13:51+01:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts"
      ]
    },
    {
      "sha": "f5f9899bee85097203c18866a8bd5208b771cc22",
      "short_sha": "f5f9899",
      "message": "[compiler] Add typing for useContext hook\n\nIn the future, we can use this to identify useContext calls.\n\nghstack-source-id: 01d7b0941ccd09f65346eb5431aa53fe361ce5ed\nPull Request resolved: https://github.com/facebook/react/pull/30546",
      "author": {
        "name": "Sathya Gunsasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-07-31T14:35:32+01:00",
      "committed_date": "2024-08-02T18:13:51+01:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/Globals.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/ObjectShape.ts"
      ]
    },
    {
      "sha": "ce6078521e0203585c4d0ff15c64d4405ae1bfb5",
      "short_sha": "ce60785",
      "message": "[compiler] Refactor makeTemporary outside HIRBuilder\n\nThis is a useful utility function similar to the existing\n`makeInstructionId` and `makeIdentifierId` functions.\n\nThis PR moves it outside the HIRBuilder so we can use this in passes\nthat don't have access to the builder instance.\n\nghstack-source-id: 1ac0839e6cb417aedcdf8cdd159af7069af7172a\nPull Request resolved: https://github.com/facebook/react/pull/30545",
      "author": {
        "name": "Sathya Gunsasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-07-31T14:35:30+01:00",
      "committed_date": "2024-08-02T18:13:51+01:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts"
      ]
    },
    {
      "sha": "a5a58164eaf166195ca8c9e78b2a171febb137b6",
      "short_sha": "a5a5816",
      "message": "[compiler] Simplify FunctionExpression node\n\nRather than storing the entire babel node, store only the required\ninformation which is the node type.\n\nThis will be useful for when we synthesize new functions that don't have\na corresponding babel node.\n\nghstack-source-id: 9098cbdbc4b1e9a6e7dafa2e7645f6f4854e1eac\nPull Request resolved: https://github.com/facebook/react/pull/30544",
      "author": {
        "name": "Sathya Gunsasekaran",
        "email": "gsathya.ceg@gmail.com"
      },
      "authored_date": "2024-07-31T14:35:27+01:00",
      "committed_date": "2024-08-02T18:13:51+01:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/CodegenReactiveFunction.ts"
      ]
    },
    {
      "sha": "1db4d6c41531579fa3a1a8dbcd69d0891d08201f",
      "short_sha": "1db4d6c",
      "message": "[compiler] Validate against setState in useMemo (resubmit of #30552)\n\nghstack failed to land #30552 properly, resubmitting\n\nDevelopers sometimes use `useMemo()` as a way to conditionally execute code, including conditionally calling setState. However, the compiler may remove existing useMemo calls if they are not necessary, which _should_ always be a safe optimization. If the useMemo has side effects (eg sets state), then this isn't safe.\n\nThis PR improves ValidateNoSetStateInRender to disallow any setState in useMemo (even if it's conditional), expanding on the previous check for unconditional setState in render. Note that the approach uses the StartMemoize/FinishMemoize instructions added in DropManualMemo to know whether a particular setState call is within a useMemo or not. This means enabling the validation in DropManualMemo when the setState validation is enabled, but that's fine since that validation is on everywhere by default (_except_ for in fixtures, which we have a todo for)\n\nghstack-source-id: 65bb3289c3756855011cb6f181280287a75eaedf\nPull Request resolved: https://github.com/facebook/react/pull/30583",
      "author": {
        "name": "Joe Savona",
        "email": "joesavona@fb.com"
      },
      "authored_date": "2024-08-02T09:53:27-07:00",
      "committed_date": "2024-08-02T10:06:08-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Pipeline.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Inference/DropManualMemoization.ts",
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateNoSetStateInRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-global-mutation-unused-usecallback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-effect-indirect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-ref-access-in-effect-indirect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-setState-in-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-conditional-setState-in-useMemo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useMemo-indirect-useCallback.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useMemo-indirect-useCallback.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useMemo.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-setState-in-useMemo.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-named-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-named-function.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-nested-ifs.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-return-empty.expect.md"
      ]
    },
    {
      "sha": "8269d55d2325fc382b5e1cf120119130d11f2e94",
      "short_sha": "8269d55",
      "message": "chore[react-devtools]: add global for native and use it to fork backend implementation (#30533)\n\nAdding `__IS_NATIVE__` global, which will be used for forking backend\r\nimplementation. Will only be set to `true` for `react-devtools-core`\r\npackage, which is used by `react-native`.\r\n\r\nIdeally, we should name it `react-devtools-native`, and keep\r\n`react-devtools-core` as host-agnostic.\r\n\r\nWith this change, the next release of `react-devtools-core` should\r\nappend component stack as Error object, not as string, and should add\r\n`(<anonymous>)` suffix to component stack frames.",
      "author": {
        "name": "Ruslan Lesiutin",
        "email": "rdlesyutin@gmail.com"
      },
      "authored_date": "2024-08-02T10:51:15+01:00",
      "committed_date": "2024-08-02T10:51:15+01:00",
      "changed_files": [
        ".eslintrc.js",
        "packages/react-devtools-core/webpack.backend.js",
        "packages/react-devtools-extensions/webpack.backend.js",
        "packages/react-devtools-extensions/webpack.config.js",
        "packages/react-devtools-inline/webpack.config.js",
        "packages/react-devtools-shared/src/backend/console.js",
        "packages/react-devtools-shared/src/backend/shared/DevToolsComponentStackFrame.js",
        "scripts/flow/react-devtools.js",
        "scripts/jest/devtools/setupEnv.js"
      ]
    },
    {
      "sha": "5fb67fa25c4ea8be046c6d9af41047f3cc379279",
      "short_sha": "5fb67fa",
      "message": "Cloned flag to avoid extra clones in persistent renderer (#27647)\n\nPersistent renderers used the `Update` effect flag to check if a subtree\r\nneeds to be cloned. In some cases, that causes extra renders, such as\r\nwhen a layout effect is triggered which only has an effect on the JS\r\nside, but doesn't update the host components.\r\n\r\nIt's been a bit tricky to find the right places where this needs to be\r\nset and I'm not 100% sure I got all the cases even though the tests\r\npassed.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-08-01T15:11:19-04:00",
      "committed_date": "2024-08-01T15:11:19-04:00",
      "changed_files": [
        "packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js",
        "packages/react-reconciler/src/ReactFiberCommitWork.js",
        "packages/react-reconciler/src/ReactFiberCompleteWork.js",
        "packages/react-reconciler/src/ReactFiberFlags.js",
        "packages/react-reconciler/src/__tests__/ReactPersistent-test.js",
        "packages/shared/ReactFeatureFlags.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.native-oss.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js",
        "packages/shared/forks/ReactFeatureFlags.test-renderer.www.js",
        "packages/shared/forks/ReactFeatureFlags.www.js"
      ]
    },
    {
      "sha": "06d0b89e8d6492d1c61bff3ae200dcc6b4809fed",
      "short_sha": "06d0b89",
      "message": "[DevTools] Enable pointEvents while scrolling (#30560)\n\n[`react-window` disables `pointerEvents` while scrolling meaning you\r\ncan't click anything while\r\nscrolling.](https://github.com/bvaughn/react-window/issues/128).\r\n\r\nThis means that the first click when you stop the scroll with inertial\r\nscrolling doesn't get registered. This is suuuper annoying. This might\r\nmake sense when you click to stop on a more intentional UI but it\r\ndoesn't makes sense in a list like this because we eagerly click things\r\neven on mousedown.\r\n\r\nThis PR just override that to re-enable pointer events.\r\n\r\nSupposedly this is done for performance but that might be outdated\r\nknowledge. I haven't observed any difference so far.\r\n\r\nIf we discover that it's a perf problem, there's another technique we\r\ncan use where we call `ownerDocument.elementFromPoint(e.pageX, e.pageY)`\r\nand then dispatch the event against that element. But let's try the\r\nsimplest approach first?",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-01T11:34:38-04:00",
      "committed_date": "2024-08-01T11:34:38-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.js"
      ]
    },
    {
      "sha": "4ea12a11d1848c1398f9a8babcfbcd51e150f1d9",
      "short_sha": "4ea12a1",
      "message": "[DevTools] Make Element Inspection Feel Snappy (#30555)\n\nThere's two problems. The biggest one is that it turns out that Chrome\r\nis throttling looping timers that we're using both while polling and for\r\nbatching bridge traffic. This means that bridge traffic a lot of the\r\ntime just slows down to 1 second at a time. No wonder it feels sluggish.\r\nThe only solution is to not use timers for this.\r\n\r\nEven when it doesn't like in Firefox the batching into 100ms still feels\r\ntoo sluggish.\r\n\r\nThe fix I use is to batch using a microtask instead so we can still\r\nbatch multiple commands sent in a single event but we never artificially\r\nslow down an interaction.\r\n\r\nI don't think we've reevaluated this for a long time since this was in\r\nthe initial commit of DevTools to this repo. If it causes other issues\r\nwe can follow up on those.\r\n\r\nWe really shouldn't use timers for debouncing and such. In fact, React\r\nitself recommends against it because we have a better technique with\r\nscheduling in Concurrent Mode. The correct way to implement this in the\r\nbridge is using a form of back-pressure where we don't keep sending\r\nmessages until we get a message back and only send the last one that\r\nmatters. E.g. when moving the cursor over a the elements tab we\r\nshouldn't let the backend one-by-one move the DOM node to each one we\r\nhave ever passed. We should just move to the last one we're currently\r\nhovering over. But this can't be done at the bridge layer since it\r\ndoesn't know if it's a last-one-wins or imperative operation where each\r\none needs to be sent. It needs to be done higher. I'm not currently\r\nseeing any perf problems with this new approach but I'm curious on React\r\nNative or some thing. RN might need the back-pressure approach. That can\r\nbe a follow up if we ever find a test case.\r\n\r\nFinally, the other problem is that we use a Suspense boundary around the\r\nElement Inspection. Suspense boundaries are for things that are expected\r\nto take a long time to load. This shows a loading state immediately. To\r\navoid flashing when it ends up being fast, React throttles the reveal to\r\n200ms. This means that we take a minimum of 200ms to show the props. The\r\nway to show fast async data in React is using a Transition (either using\r\nstartTransition or useDeferredValue). This lets the old value remaining\r\nin place while we're loading the next one.\r\n\r\nWe already implement this using `inspectedElementID` which is the async\r\none. It would be more idiomatic to implement this with useDeferredValue\r\nrather than the reducer we have now but same principle. We were just\r\nusing the wrong ID in a few places so when it synchronously updated they\r\nsuspended. So I just made them use the inspectedElementID instead.\r\n\r\nThen I can simply remove the Suspense boundary. Now the selection\r\nupdates in the tree view synchronously and the sidebar lags a frame or\r\ntwo but it feels instant. It doesn't flash to white between which is\r\nkey.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-08-01T11:04:56-04:00",
      "committed_date": "2024-08-01T11:04:56-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/inspectedElement-test.js",
        "packages/react-devtools-shared/src/__tests__/setupTests.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Components.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementContext.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementErrorBoundary.js"
      ]
    },
    {
      "sha": "88ee14ffa57beb0689f26f0c52c357e3ac446af8",
      "short_sha": "88ee14f",
      "message": "[Devtools] Ensure initial read of `useFormStatus` returns `NotPendingTransition` (#28728)",
      "author": {
        "name": "Sebastian Silbermann",
        "email": "sebastian.silbermann@vercel.com"
      },
      "authored_date": "2024-08-01T10:55:53+02:00",
      "committed_date": "2024-08-01T10:55:53+02:00",
      "changed_files": [
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegrationDOM-test.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-reconciler/src/ReactFiberBeginWork.js",
        "packages/react-reconciler/src/ReactFiberHooks.js",
        "packages/react-reconciler/src/ReactFiberHostContext.js",
        "packages/react-reconciler/src/ReactFiberNewContext.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js"
      ]
    },
    {
      "sha": "56dbd58feb1a75f075c67067ce0d20d7cee7f482",
      "short_sha": "56dbd58",
      "message": "[compiler] More complete validation against locals being reassigned after render\n\nSummary:\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment \"effect\" into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this \"closes the loop\" for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didn't consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\n\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\n\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\nPull Request resolved: https://github.com/facebook/react/pull/30540",
      "author": {
        "name": "Mike Vitousek",
        "email": "mmvitousek@gmail.com"
      },
      "authored_date": "2024-07-31T11:11:07-07:00",
      "committed_date": "2024-07-31T11:11:07-07:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/Validation/ValidateLocalsNotReassignedAfterRender.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/context-variable-only-chained-assign.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/declare-reassign-variable-in-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.context-variable-only-chained-assign.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/context-variable-only-chained-assign.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.declare-reassign-variable-in-function-declaration.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/declare-reassign-variable-in-function-declaration.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.invalid-nested-function-reassign-local-variable-in-effect.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/todo.invalid-nested-function-reassign-local-variable-in-effect.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.mutable-range-shared-inner-outer-function.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutable-range-shared-inner-outer-function.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-mutable-range-shared-inner-outer-function.expect.md",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "a7d1240c962d2fdeac3ba31f1fdc12b5be4bbd2e",
      "short_sha": "a7d1240",
      "message": "[Fizz] Update postpone abort semantics when prerendering (#30541)\n\nWhen aborting with a postpone value in Fizz if any tasks are still\r\npending in the root while prerendering the prerender will fatally error.\r\nThis is different from postponing imperatively in a root task and really\r\nthe semantics should be the same. This change updates React to treat an\r\nabort with a postpone value as a postponed root rather than a fatal\r\nerror.",
      "author": {
        "name": "Josh Story",
        "email": "story@hey.com"
      },
      "authored_date": "2024-07-31T08:33:43-07:00",
      "committed_date": "2024-07-31T08:33:43-07:00",
      "changed_files": [
        "packages/react-dom/src/__tests__/ReactDOMFizzStatic-test.js",
        "packages/react-server/src/ReactFizzServer.js"
      ]
    },
    {
      "sha": "2b0001834769cab6d73e68627a8b15c4708961e6",
      "short_sha": "2b00018",
      "message": "[DevTools] Track the parent DevToolsInstance while mounting a tree (#30542)\n\nThis just tracks the `.parent` field properly and uses DevToolsInstances\r\nin more places that used to use IDs or Fibers.\r\n\r\nI also use this new parent path when looking up a DevToolsInstance from\r\na DOM node. This should ideally be simple because the `.parent` field\r\nrepresents only the unfiltered parents and include any virtual parents.\r\nSo we should be able to just get one from nearest Fiber that has one.\r\n\r\nHowever, because we don't currently always clean up the map of\r\nDevToolsInstances (e.g. updateComponentFilters doesn't recursively clean\r\nout everything) it can leave matches hanging that shouldn't be there. So\r\nwe need to run the shouldFilterFiber filter to ignore those.\r\n\r\nAnother interesting implication is that without a FiberInstance we don't\r\nhave a way to get to a VirtualInstance from a HostComponent. Which means\r\nthat even filtered Fibers need to have a FiberInstance if they have a\r\nVirtualInstance parent. Even if we don't actually mount them into the\r\nfront-end.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-07-31T10:07:17-04:00",
      "committed_date": "2024-07-31T10:07:17-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "47069f0e80e151c2664908366ccc07b4a0e727d9",
      "short_sha": "47069f0",
      "message": "Build all bundles required by flight fixture with `build-for-flight-dev` (#30534)",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2024-07-31T15:02:36+02:00",
      "committed_date": "2024-07-31T15:02:36+02:00",
      "changed_files": [
        "package.json",
        "scripts/rollup/build.js"
      ]
    },
    {
      "sha": "12e957909948483d0eef83d1ffb2255946d0e4b0",
      "short_sha": "12e9579",
      "message": "[Flight] Enable owner stacks on the client when replaying logs (#30473)\n\nThere's a special case that happens when we replay logs on the client\r\nbecause this doesn't happen within the context of any particular\r\nrendered component. So we need to reimplement things that would normally\r\nbe handled by a full client like Fiber.\r\n\r\nThe implementation of `getOwnerStackByComponentInfoInDev` is the\r\nsimplest version since it doesn't have any client components in it so I\r\nmove it to `shared/`. It's only used by Flight but both `react-server/`\r\nand `react-client/` packages. The ReactComponentInfo type is also more\r\ngeneric than just Flight anyway.\r\n\r\nIn a follow up I still need to implement this in React DevTools when\r\nnative tasks are not available so that it appends it to the console.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-07-31T07:56:15-04:00",
      "committed_date": "2024-07-31T07:56:15-04:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-client/src/__tests__/ReactFlight-test.js",
        "packages/react-server/src/ReactFlightServer.js",
        "packages/react-server/src/flight/ReactFlightComponentStack.js"
      ]
    },
    {
      "sha": "3f8b1333daade70117e5915304cca19f14e87b53",
      "short_sha": "3f8b133",
      "message": "Set enableLazyContextPropagation to dynamic on RN (#30516)",
      "author": {
        "name": "Jack Pope",
        "email": "jackpope1@gmail.com"
      },
      "authored_date": "2024-07-30T18:31:31-04:00",
      "committed_date": "2024-07-30T18:31:31-04:00",
      "changed_files": [
        "packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js",
        "packages/shared/forks/ReactFeatureFlags.native-fb.js"
      ]
    },
    {
      "sha": "96f3093becc1f26e06549b9a54b93db9df8f5689",
      "short_sha": "96f3093",
      "message": "Remove RefreshRuntime.findAffectedHostInstances (#30538)\n\nI originally added this with a plan to visualize which nodes got updated\r\nafter a Fast Refresh. I didn't end up implementing that part, and to my\r\nknowledge, no actively used integration actually does that or use this\r\nmethod.\r\n\r\n- [Webpack plugin doesn't use\r\nit](https://github.com/pmmmwh/react-refresh-webpack-plugin/blob/f1c8b9a44198449093ca95f85af5df97925e1cfc/lib/runtime/RefreshUtils.js)\r\n- [RN doesn't use\r\nit](https://github.com/facebook/react-native/blob/23c5c42de01953ed7b8e8938c2d3a8fac82250a0/packages/react-native/Libraries/Core/setUpReactRefresh.js)\r\n- [Global GitHub code\r\nsearch](https://github.com/search?q=findAffectedHostInstances&type=code&p=1)\r\nonly shows copies of this code and the type definition based on it, but\r\nnot actual calls to it\r\n\r\nWe should be able to delete this without a problem.",
      "author": {
        "name": "dan",
        "email": "dan.abramov@me.com"
      },
      "authored_date": "2024-07-30T22:06:16+01:00",
      "committed_date": "2024-07-30T22:06:16+01:00",
      "changed_files": [
        "packages/react-reconciler/src/ReactFiberHotReloading.js",
        "packages/react-reconciler/src/ReactFiberReconciler.js",
        "packages/react-refresh/src/ReactFreshRuntime.js",
        "packages/react-refresh/src/__tests__/ReactFresh-test.js"
      ]
    },
    {
      "sha": "d06196c1cd2dc0bb2288f3a3efa30669d4a7ea61",
      "short_sha": "d06196c",
      "message": "[compiler] Visit nested scopes in pruned scopes in PromoteUsedTemporaries\n\nWhile debugging #30536 I happened to notice that the bug only reproduced\nwhen there was interleaving scopes, and observed that an unpruned scope\nnested inside of a pruned one was not being visited by\nCollectPromotableTemporaries, which keeps track of which identifiers\nshould be promoted later. Therefore when actually promoting temporaries\nwe were skipping over the identifiers in children of pruned scopes\n\nghstack-source-id: d805f62f22fda04beedb6c7063312451f36d678c\nPull Request resolved: https://github.com/facebook/react/pull/30537",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-07-30T16:55:41-04:00",
      "committed_date": "2024-07-30T17:05:23-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PromoteUsedTemporaries.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-renaming-jsx-tag-lowercase.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-renaming-jsx-tag-lowercase.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/renaming-jsx-tag-lowercase.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/renaming-jsx-tag-lowercase.tsx"
      ]
    },
    {
      "sha": "edfaa99f01596ea22ed892897f5c002a438c0655",
      "short_sha": "edfaa99",
      "message": "[compiler][repro] JSX tag local variable is named lowercase\n\nghstack-source-id: f9ac4641e171a1ae3450f733fef71be346447866\nPull Request resolved: https://github.com/facebook/react/pull/30536",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-07-30T16:24:45-04:00",
      "committed_date": "2024-07-30T16:32:09-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-renaming-jsx-tag-lowercase.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-renaming-jsx-tag-lowercase.tsx",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "212d5ae8cbdb16788bcbb8c7f0c35369968eff5e",
      "short_sha": "212d5ae",
      "message": "[compiler][repro] fixtures for fbt plural and macro bugs\n\nghstack-source-id: 8ccf49bb40cd634932b84dd637439042aa60fd46\nPull Request resolved: https://github.com/facebook/react/pull/30535",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-07-30T16:24:45-04:00",
      "committed_date": "2024-07-30T16:32:09-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/bug-fbt-plural-multiple-function-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/bug-fbt-plural-multiple-function-calls.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/bug-fbt-plural-multiple-mixed-call-tag.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/bug-fbt-plural-multiple-mixed-call-tag.tsx",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/repro-macro-property-not-handled.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/repro-macro-property-not-handled.tsx",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "704c34e21f7468fc72c33aa843051c7949ebeccd",
      "short_sha": "704c34e",
      "message": "[compiler] Bail out on local variables named 'fbt'\n\nghstack-source-id: c4e2b802a029b9dd7941ebcdeaaf471ddd95f868\nPull Request resolved: https://github.com/facebook/react/pull/30524",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-07-29T21:24:16-04:00",
      "committed_date": "2024-07-30T16:32:09-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/HIR/BuildHIR.ts",
        "compiler/packages/babel-plugin-react-compiler/src/HIR/HIRBuilder.ts",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-fbt-as-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/todo-fbt-as-local.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/error.todo-locally-require-fbt.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/todo-fbt-as-local.expect.md",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "7c8734c41c413a8124981a22dbc7f0f813637435",
      "short_sha": "7c8734c",
      "message": "[compiler][repro] Fbt local var incompatibility repro\n\nghstack-source-id: ec256a365bdcef7c10da2af2b58f3931e259ad65\nPull Request resolved: https://github.com/facebook/react/pull/30523",
      "author": {
        "name": "Mofei Zhang",
        "email": "feifei0@meta.com"
      },
      "authored_date": "2024-07-29T21:24:14-04:00",
      "committed_date": "2024-07-30T16:32:09-04:00",
      "changed_files": [
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/todo-fbt-as-local.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/todo-fbt-as-local.js",
        "compiler/packages/snap/src/SproutTodoFilter.ts"
      ]
    },
    {
      "sha": "3208e73e82ba2bcebed3828fe394fc24d9000903",
      "short_sha": "3208e73",
      "message": "Assign resolved outlined props to element object (and not only tuple) (#30528)\n\nCo-authored-by: eps1lon <sebastian.silbermann@vercel.com>",
      "author": {
        "name": "Hendrik Liebau",
        "email": "mail@hendrik-liebau.de"
      },
      "authored_date": "2024-07-30T21:31:32+02:00",
      "committed_date": "2024-07-30T21:31:32+02:00",
      "changed_files": [
        "packages/react-client/src/ReactFlightClient.js",
        "packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js"
      ]
    },
    {
      "sha": "f827c792eac95badcbe501ab7d5798985f41c0e6",
      "short_sha": "f827c79",
      "message": "[DevTools] Add DevToolsInstance to Store Stateful Information (#30517)\n\nStacked on #30494 and #30491.\r\n\r\nThis is setting us up to be able to track Server Components. This is now\r\nsplit into a FiberInstance (Client Component) and a VirtualInstance\r\n(Server Component). We're not actually creating any VirtualInstances yet\r\nthough this is just the data structures.\r\n\r\nServer Components and potentially other compiled away or runtime\r\noptimized away (e.g. calling through a function without creating an\r\nintermediate Fiber) don't have a stateful instance. They just represent\r\nthe latest data. It's kind of like a React Element.\r\n\r\nHowever, in the DevTools UI we need them to be stateful partly just so\r\nthat you can select and refer to them separately. E.g. the same Server\r\nComponent output rendered into different slots on the client should\r\nstill have two different representations in the DevTools. Also if the\r\nsame child Fibers update in place because the Server Component refreshed\r\nwe shouldn't lose the selection if you've selected a Server Component.\r\n\r\nI'll implement this by creating Virtual Instances that only exist for\r\nthe purpose of the DevTools UI and so it'll be implemented in the\r\nDevTools.\r\n\r\nWe could just make a Map from `id` to `Fiber | ReactComponentInfo` but\r\nthat requires a branching without a consistent hidden class. We also\r\nneed some more states on there. We also have some other Maps that tracks\r\nextra states like that of component stacks, errors and warnings.\r\nConstantly resizing and adding/removing from a Map isn't exactly fast.\r\nIt's faster to have a single Map with an object in it than one Map per\r\nobject. However, having extra fields that are usually just `null` can\r\ninstead mean more memory gets used. Since only a very small fraction of\r\ninstances will have errors/warnings or having initialized its component\r\nstack, it made sense to store that in a separate Map that is usually\r\njust empty.\r\n\r\nHowever, with the addition of particularly the `parent` field and the\r\nability to do a fast hidden-class safe branching on the `kind` field I\r\nthink it's probably worth actually allocating an extra first class\r\nobject per Instance to store DevTools state into. That's why I converted\r\nfrom just storing `Fiber` -> `id` to storing `Fiber` ->\r\n`DevToolsInstance` which then keeps the warnings/errors/componentStack\r\nas extra fields that are usually `null`. That is a lot of objects though\r\nsince it's one per Fiber pair basically.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-07-30T15:15:45-04:00",
      "committed_date": "2024-07-30T15:15:45-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/backend/fiber/renderer.js"
      ]
    },
    {
      "sha": "146df7c311831a1d5b35f3783dae4a7030638fcf",
      "short_sha": "146df7c",
      "message": "[Fiber] Make DevTools Config use Static Injection (#30522)\n\nWe use static dependency injection. We shouldn't use this dynamic\r\ndependency injection we do for DevTools internals. There's also meta\r\nprogramming like spreading and stuff that isn't needed.\r\n\r\nThis moves the config from `injectIntoDevTools` to the FiberConfig so it\r\ncan be statically resolved.\r\n\r\nClosure Compiler has some trouble generating optimal code for this\r\nanyway so ideally we'd refactor this further but at least this is better\r\nand saves a few bytes and avoids some code paths (when minified).",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-07-30T15:03:54-04:00",
      "committed_date": "2024-07-30T15:03:54-04:00",
      "changed_files": [
        "packages/react-art/src/ReactART.js",
        "packages/react-art/src/ReactFiberConfigART.js",
        "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
        "packages/react-dom/src/client/ReactDOMClient.js",
        "packages/react-dom/src/client/ReactDOMClientFB.js",
        "packages/react-native-renderer/src/ReactFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
        "packages/react-native-renderer/src/ReactFiberConfigNative.js",
        "packages/react-native-renderer/src/ReactNativeFiberInspector.js",
        "packages/react-native-renderer/src/ReactNativeRenderer.js",
        "packages/react-noop-renderer/src/createReactNoop.js",
        "packages/react-reconciler/src/ReactFiberDevToolsHook.js",
        "packages/react-reconciler/src/ReactFiberReconciler.js",
        "packages/react-reconciler/src/forks/ReactFiberConfig.custom.js",
        "packages/react-test-renderer/src/ReactFiberConfigTestHost.js",
        "packages/react-test-renderer/src/ReactTestRenderer.js"
      ]
    },
    {
      "sha": "f963c80d2179924380bcdd80e3c067df4a3e2ce3",
      "short_sha": "f963c80",
      "message": "[DevTools] Implement \"best renderer\" by taking the inner most matched node (#30494)\n\nStacked on #30491.\r\n\r\nWhen going from DOM Node to select a component or highlight a component\r\nwe find the nearest mounted ancestor. However, when multiple renderers\r\nare nested there can be multiple ancestors. The original fix #24665 did\r\nthis by taking the inner renderer if it was an exact match but if it\r\nwasn't it just took the first renderer.\r\n\r\nInstead, we can track the inner most node we've found so far. Then get\r\nthe ID from that node (which will be fast since it's now a perfect\r\nmatch). This is a better match.\r\n\r\nHowever, the main reason I'm doing this is because the old mechanism\r\nleaked the `Fiber` type outside the `RendererInterface` which is\r\nsupposed to abstract all of that. With the new algorithm this doesn't\r\nleak.\r\n\r\nI've tested this with a new build against the repro in the old issue\r\n#24539 and it seems to work.",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-07-30T14:57:26-04:00",
      "committed_date": "2024-07-30T14:57:26-04:00",
      "changed_files": [
        "packages/react-devtools-shared/src/__tests__/legacy/storeLegacy-v15-test.js",
        "packages/react-devtools-shared/src/__tests__/store-test.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js",
        "packages/react-devtools-shared/src/backend/views/Highlighter/index.js"
      ]
    },
    {
      "sha": "41ecbada0e05f1dd40f8b94c6fa98dbdaabca211",
      "short_sha": "41ecbad",
      "message": "Enable prettier for some blocklisted fixtures with invalid GraphQL (#30425)\n\nThe invalid GraphQL in these fixtures somehow causes an unhandled\r\npromise rejection error when running `yarn prettier-all`. This fixes\r\nthat issue by making the GraphQL valid.",
      "author": {
        "name": "Jan Kassens",
        "email": "jkassens@meta.com"
      },
      "authored_date": "2024-07-30T14:23:43-04:00",
      "committed_date": "2024-07-30T14:23:43-04:00",
      "changed_files": [
        ".prettierignore",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructuring-mixed-scope-and-local-variables-with-default.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructuring-mixed-scope-and-local-variables-with-default.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructuring-mixed-scope-declarations-and-locals.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructuring-mixed-scope-declarations-and-locals.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-inside-logical-expression.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hook-inside-logical-expression.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-call-logical.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/optional-call-logical.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/readonly-object-method-calls-mutable-lambda.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/readonly-object-method-calls-mutable-lambda.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/readonly-object-method-calls.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/readonly-object-method-calls.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/tagged-template-in-hook.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/tagged-template-in-hook.js",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/tagged-template-literal.expect.md",
        "compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/tagged-template-literal.js"
      ]
    },
    {
      "sha": "ab7c1663131aa0f572f21ebd8575dddb7db1b372",
      "short_sha": "ab7c166",
      "message": "[ci] Fix incorrect polling\n\nOops. Actually poll correctly by fetching the latest workflow run each\nretry, and not just checking the first attempt.\n\nTest plan: https://github.com/facebook/react/actions/runs/10165564989\n\nghstack-source-id: 3202d8f6aeb1e1dead95d82a33c04dce80cd44b4\nPull Request resolved: https://github.com/facebook/react/pull/30531",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-07-30T11:53:15-04:00",
      "committed_date": "2024-07-30T11:54:48-04:00",
      "changed_files": [
        "scripts/release/shared-commands/download-build-artifacts.js"
      ]
    },
    {
      "sha": "73b21a05e34f0b1a6585fbf6db53dfc76acac768",
      "short_sha": "73b21a0",
      "message": "[ci] Read node version from .nvmrc instead of hardcoding\n\nghstack-source-id: 336ac1a45f577aee3cb281e0ceec8648fe8fd2bb\nPull Request resolved: https://github.com/facebook/react/pull/30530",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-07-30T11:53:14-04:00",
      "committed_date": "2024-07-30T11:54:48-04:00",
      "changed_files": [
        ".github/workflows/compiler_playground.yml",
        ".github/workflows/compiler_typescript.yml",
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_build_and_test.yml",
        ".github/workflows/runtime_commit_artifacts.yml",
        ".github/workflows/runtime_prereleases.yml",
        ".github/workflows/shared_lint.yml"
      ]
    },
    {
      "sha": "a7f3b49be2c0111757bec48e8ee0820c7495a2f9",
      "short_sha": "a7f3b49",
      "message": "[ci] Make some workflows dispatchable\n\nThe previous checks for prerelease_commit_sha was incorrectly\nimplemented for devtools regression tests so I fixed it. I also made\nsome other workflows dispatchable so they can be manually run from\nGitHub's UI as needed.\n\nTest plan: https://github.com/facebook/react/actions/runs/10165564989\n\nghstack-source-id: b30c7b48e7dba3e27c59496aac5ace1a090dcfc3\nPull Request resolved: https://github.com/facebook/react/pull/30529",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-07-30T11:53:14-04:00",
      "committed_date": "2024-07-30T11:54:48-04:00",
      "changed_files": [
        ".github/workflows/devtools_regression_tests.yml",
        ".github/workflows/runtime_commit_artifacts.yml",
        ".github/workflows/runtime_fuzz_tests.yml",
        ".github/workflows/shared_stale.yml"
      ]
    },
    {
      "sha": "927ba5799a506e5f10ee71b3df8f59296550d29f",
      "short_sha": "927ba57",
      "message": "[rfc] Delete devtools_check_repro workflow\n\nWith GitHub issue templates this workflow is not truly necessary and\ncan deny other workflows from running due to a limited amount of CI\nworkers in the pool.\n\nI propose deleting this workflow and relying on issue templates instead.\n\nghstack-source-id: a798621f3625fa8fffaade5a987e4024553aefa0\nPull Request resolved: https://github.com/facebook/react/pull/30518",
      "author": {
        "name": "Lauren Tan",
        "email": "poteto@users.noreply.github.com"
      },
      "authored_date": "2024-07-30T10:46:17-04:00",
      "committed_date": "2024-07-30T10:57:35-04:00",
      "changed_files": [
        ".github/workflows/devtools_check_repro.yml"
      ]
    },
    {
      "sha": "33e54fa252b9dbe7553ef42a2287c3dbbd4f035d",
      "short_sha": "33e54fa",
      "message": "[DevTools] Rename NativeElement to HostInstance in the Bridge (#30491)\n\nStacked on #30490.\r\n\r\nThis is in the same spirit but to clarify the difference between what is\r\nReact Native vs part of any generic Host. We used to use \"Native\" to\r\nmean three different concepts. Now \"Native\" just means React Native.\r\n\r\nE.g. from the frontend's perspective the Host can be\r\nHighlighted/Inspected. However, that in turn can then be implemented as\r\neither direct DOM manipulation or commands to React Native. So frontend\r\n-> backend is \"Host\" but backend -> React Native is \"Native\" while\r\nbackend -> DOM is \"Web\".\r\n\r\nRename NativeElementsPanel to BuiltinElementsPanel. This isn't a React\r\nNative panel but one part of the surrounding DevTools. We refer to Host\r\nmore as the thing running React itself. I.e. where the backend lives.\r\nThe runtime you're inspecting. The DevTools itself needs a third term.\r\nSo I went with \"Builtin\".",
      "author": {
        "name": "Sebastian Markbåge",
        "email": "sebastian@calyptus.eu"
      },
      "authored_date": "2024-07-30T09:12:12-04:00",
      "committed_date": "2024-07-30T09:12:12-04:00",
      "changed_files": [
        "packages/react-devtools-extensions/src/main/elementSelection.js",
        "packages/react-devtools-extensions/src/main/index.js",
        "packages/react-devtools-shared/src/backend/agent.js",
        "packages/react-devtools-shared/src/backend/console.js",
        "packages/react-devtools-shared/src/backend/fiber/DevToolsFiberComponentStack.js",
        "packages/react-devtools-shared/src/backend/fiber/renderer.js",
        "packages/react-devtools-shared/src/backend/legacy/renderer.js",
        "packages/react-devtools-shared/src/backend/types.js",
        "packages/react-devtools-shared/src/backend/views/Highlighter/Highlighter.js",
        "packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js",
        "packages/react-devtools-shared/src/backend/views/Highlighter/index.js",
        "packages/react-devtools-shared/src/backend/views/TraceUpdates/canvas.js",
        "packages/react-devtools-shared/src/backend/views/TraceUpdates/index.js",
        "packages/react-devtools-shared/src/backend/views/utils.js",
        "packages/react-devtools-shared/src/bridge.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectHostNodesToggle.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElement.js",
        "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js",
        "packages/react-devtools-shared/src/devtools/views/Components/Tree.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/CommitFlamegraph.js",
        "packages/react-devtools-shared/src/devtools/views/Profiler/CommitRanked.js",
        "packages/react-devtools-shared/src/devtools/views/hooks.js"
      ]
    }
  ]
}