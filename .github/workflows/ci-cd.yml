name: MCP Server CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggers

env:
  AWS_REGION: ap-south-1
  TF_VERSION: "1.5.0"

jobs:
  # Job 1: Code Quality & Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install flake8 black isort bandit safety
        
    - name: Lint Python code
      run: |
        echo "üîç Running code linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format check
      run: |
        echo "üé® Checking code formatting..."
        black --check --diff .
        
    - name: Import sorting check
      run: |
        echo "üì¶ Checking import sorting..."
        isort --check-only --diff .
        
    - name: Security scan
      run: |
        echo "üîí Running security scan..."
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Infrastructure Validation
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        echo "üöÄ Initializing Terraform..."
        terraform init
        
    - name: Terraform Format Check
      working-directory: ./terraform
      run: |
        echo "üé® Checking Terraform formatting..."
        terraform fmt -check -recursive
        
    - name: Terraform Validate
      working-directory: ./terraform
      run: |
        echo "‚úÖ Validating Terraform configuration..."
        terraform validate
        
    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        echo "üìã Creating Terraform plan..."
        terraform plan -out=tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: ./terraform/tfplan

  # Job 3: Docker Build & Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        echo "üê≥ Building Docker image..."
        cd MCP-hackathon
        docker build -t mcp-server:test .
        
    - name: Test Docker image
      run: |
        echo "üß™ Testing Docker image..."
        cd MCP-hackathon
        docker run --rm -d --name mcp-test -p 8000:8000 mcp-server:test
        sleep 10
        curl -f http://localhost:8000/ || exit 1
        docker stop mcp-test

  # Job 4: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [terraform-validate, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      
    - name: Terraform Apply (Development)
      working-directory: ./terraform
      run: |
        echo "üöÄ Deploying to development environment..."
        terraform apply -auto-approve
      env:
        TF_VAR_environment: "development"
        
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 60
        
    - name: Health check
      run: |
        echo "üè• Performing health check..."
        INSTANCE_IP=$(terraform -chdir=./terraform output -raw instance_public_ip)
        echo "Instance IP: $INSTANCE_IP"
        
        # Wait for instance to be ready
        for i in {1..30}; do
          if curl -f "http://$INSTANCE_IP:8000/health" 2>/dev/null; then
            echo "‚úÖ Health check passed!"
            break
          fi
          echo "‚è≥ Waiting for health check... ($i/30)"
          sleep 10
        done
        
        # Final health check
        curl -f "http://$INSTANCE_IP:8000/health" || exit 1
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Development deployment successful!"
        else
          echo "‚ùå Development deployment failed!"
        fi

  # Job 5: Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [terraform-validate, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      
    - name: Terraform Apply (Production)
      working-directory: ./terraform
      run: |
        echo "üöÄ Deploying to production environment..."
        terraform apply -auto-approve
      env:
        TF_VAR_environment: "production"
        
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 60
        
    - name: Health check
      run: |
        echo "üè• Performing health check..."
        INSTANCE_IP=$(terraform -chdir=./terraform output -raw instance_public_ip)
        echo "Instance IP: $INSTANCE_IP"
        
        # Wait for instance to be ready
        for i in {1..30}; do
          if curl -f "http://$INSTANCE_IP:8000/health" 2>/dev/null; then
            echo "‚úÖ Health check passed!"
            break
          fi
          echo "‚è≥ Waiting for health check... ($i/30)"
          sleep 10
        done
        
        # Final health check
        curl -f "http://$INSTANCE_IP:8000/health" || exit 1
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Production deployment successful!"
          echo "üåê Production URL: http://$(terraform -chdir=./terraform output -raw instance_public_ip):8000"
        else
          echo "‚ùå Production deployment failed!"
        fi

  # Job 6: Cleanup (Optional)
  cleanup:
    name: Cleanup Old Resources
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      
    - name: Terraform Destroy (Cleanup)
      working-directory: ./terraform
      run: |
        echo "üßπ Cleaning up old resources..."
        terraform destroy -auto-approve 