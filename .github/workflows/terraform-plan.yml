name: Terraform Plan

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-plan.yml'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.0"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
        
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      
    - name: Terraform Format Check
      working-directory: ./terraform
      run: |
        echo "🎨 Checking Terraform formatting..."
        terraform fmt -check -recursive
        
    - name: Terraform Validate
      working-directory: ./terraform
      run: |
        echo "✅ Validating Terraform configuration..."
        terraform validate
        
    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        echo "📋 Creating Terraform plan..."
        terraform plan -out=tfplan
        terraform show -no-color tfplan > plan.txt
        
    - name: Comment PR with Terraform plan
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🏗️ Terraform Plan\n\n';
          
          // Check if plan file exists
          if (fs.existsSync('./terraform/plan.txt')) {
            const planOutput = fs.readFileSync('./terraform/plan.txt', 'utf8');
            
            // Extract resource changes
            const resourceChanges = planOutput.match(/# (\S+) will be created/g) || [];
            const resourceUpdates = planOutput.match(/# (\S+) will be updated/g) || [];
            const resourceDestroys = planOutput.match(/# (\S+) will be destroyed/g) || [];
            
            comment += '### 📊 Infrastructure Changes\n\n';
            
            if (resourceChanges.length > 0) {
              comment += '#### ➕ Resources to be created:\n';
              resourceChanges.forEach(change => {
                const resource = change.replace('# ', '').replace(' will be created', '');
                comment += `- \`${resource}\`\n`;
              });
              comment += '\n';
            }
            
            if (resourceUpdates.length > 0) {
              comment += '#### 🔄 Resources to be updated:\n';
              resourceUpdates.forEach(change => {
                const resource = change.replace('# ', '').replace(' will be updated', '');
                comment += `- \`${resource}\`\n`;
              });
              comment += '\n';
            }
            
            if (resourceDestroys.length > 0) {
              comment += '#### 🗑️ Resources to be destroyed:\n';
              resourceDestroys.forEach(change => {
                const resource = change.replace('# ', '').replace(' will be destroyed', '');
                comment += `- \`${resource}\`\n`;
              });
              comment += '\n';
            }
            
            if (resourceChanges.length === 0 && resourceUpdates.length === 0 && resourceDestroys.length === 0) {
              comment += '✅ No infrastructure changes detected\n\n';
            }
            
            comment += '<details><summary>📋 Full Terraform Plan</summary>\n\n';
            comment += '```\n';
            comment += planOutput;
            comment += '\n```\n';
            comment += '</details>\n';
          } else {
            comment += '❌ Terraform plan failed or no changes detected\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 